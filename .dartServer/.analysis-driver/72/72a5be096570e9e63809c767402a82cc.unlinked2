Ä˚detachtoString_containerLayerestimatedBoundsrepaintCompositedChild_repaintCompositedChildupdateLayerProperties%debugInstrumentRepaintCompositedChild
paintChild_compositeChildappendLayer_isRecording_currentLayer	_recorder_canvascanvas_startRecordingaddCompositionCallbackstopRecordingIfNeededsetIsComplexHintsetWillChangeHintaddLayer	pushLayercreateChildContextpushClipRectpushClipRRectpushClipPathpushColorFilterpushTransformpushOpacityisTightisNormalizeddebugAssertIsValid_ownerlistenerdisposeonNeedVisualUpdateonSemanticsOwnerCreatedonSemanticsUpdateonSemanticsOwnerDisposedrequestVisualUpdaterootNode	_rootNode_shouldMergeDirtyNodes_nodesNeedingLayoutdebugDoingLayout_debugDoingLayout_debugDoingChildLayoutflushLayout#_debugAllowMutationsToDirtySubtrees_enableMutationsToDirtySubtrees"_nodesNeedingCompositingBitsUpdateflushCompositingBits_nodesNeedingPaintdebugDoingPaint_debugDoingPaint
flushPaintsemanticsOwner_semanticsOwner debugOutstandingSemanticsHandles_outstandingSemanticsHandlesensureSemantics_updateSemanticsOwner_didDisposeSemanticsHandle_debugDoingSemantics_nodesNeedingSemanticsflushSemantics	_children	_manifold_debugParent_debugSetParentattach!_debugAllowChildListModifications
adoptChild	dropChildvisitChildrensemanticsEnabled
reassembledebugDisposed_debugDisposed
parentDatasetupParentDatadepth_depthredepthChildredepthChildrenparent_parentdebugCreator_reportExceptiondebugDoingThisResize_debugDoingThisResizedebugDoingThisLayout_debugDoingThisLayoutdebugActiveLayout_debugActiveLayout_withDebugActiveLayoutCleareddebugCanParentUseSize_debugCanParentUseSize_debugMutationsLocked_debugCanPerformMutationsdebugLayoutParentownerattacheddebugNeedsLayout_needsLayout_relayoutBoundary debugDoingThisLayoutWithCallback_doingThisLayoutWithCallbackconstraints_constraintsdebugAssertDoesMeetConstraintsdebugCheckingIntrinsics1_debugSubtreeRelayoutRootAlreadyMarkedNeedsLayoutmarkNeedsLayoutmarkParentNeedsLayout%markNeedsLayoutForSizedByParentChange_cleanRelayoutBoundary_propagateRelayoutBoundary_cleanChildRelayoutBoundary!_propagateRelayoutBoundaryToChildscheduleInitialLayout_layoutWithoutResizelayoutdebugResetSizesizedByParentperformResizeperformLayoutinvokeLayoutCallbackdebugDoingThisPaint_debugDoingThisPaintdebugActivePaint_debugActivePaintisRepaintBoundary!debugRegisterRepaintBoundaryPaintalwaysNeedsCompositing_wasRepaintBoundaryupdateCompositedLayerlayer_layerHandle
debugLayer_needsCompositingBitsUpdatemarkNeedsCompositingBitsUpdate_needsCompositingneedsCompositing_updateCompositingBitsdebugNeedsPaint_needsPaintdebugNeedsCompositedLayerUpdate_needsCompositedLayerUpdatemarkNeedsPaintmarkNeedsCompositedLayerUpdate_skippedPaintingOnLayerscheduleInitialPaintreplaceRootLayer_paintWithContextpaintBounds
debugPaintpaintapplyPaintTransformpaintsChildgetTransformTodescribeApproximatePaintClipdescribeSemanticsClipscheduleInitialSemanticsdescribeSemanticsConfigurationsendSemanticsEvent_cachedSemanticsConfiguration_semanticsConfigurationsemanticBounds_needsSemanticsUpdate
_semanticsdebugSemanticsclearSemanticsmarkNeedsSemanticsUpdate_updateSemantics_getSemanticsForParent_marksExplicitInMergeGroupvisitChildrenForSemanticsassembleSemanticsNodehandleEventtoStringShorttoStringDeeptoStringShallowdebugFillPropertiesdebugDescribeChildrenshowOnScreendescribeForErrordebugValidateChild_childchildpreviousSiblingnextSibling_debugUltimatePreviousSiblingOf_debugUltimateNextSiblingOf_childCount
childCount_firstChild
_lastChild_insertIntoChildListinsertaddaddAll_removeFromChildListremove	removeAllmove
firstChild	lastChildchildBefore
childAftersystemFontsDidChange'_hasPendingSystemFontsDidChangeCallBack_scheduleSystemFontsUpdate dropsSemanticsOfPreviousSiblingsmergeUpFragmentssiblingMergeGroups_ancestorChaincompileChildrenconfigmarkAsExplicithasConfigForParent_tagsForChildrenaddTagsaddAncestor_mergeIntoParent_config_isConfigWritable_mergesToSibling_siblingMergeGroups_mergeSiblingGroup_computeSemanticsGeometry_ensureConfigIsWritable_isExplicit_needsGeometryUpdate_paintClipRect_semanticsClipRect
_transform_rect	transformsemanticsClipRectpaintClipRectrect_computeValues_temporaryTransformHolder_transformRect!_applyIntermediatePaintTransforms_intersectRectsdropFromTreemarkAsHidden_markAsHidden
ParentDataPaintingContextCallbackPaintingContextConstraintsRenderObjectVisitorLayoutCallback_LocalSemanticsHandlePipelineOwnerPipelineOwnerVisitorPipelineManifold_flutterRenderingLibraryRenderObjectRenderObjectWithChildMixinContainerParentDataMixinContainerRenderObjectMixin"RelayoutWhenSystemFontsChangeMixin_SemanticsFragment_ContainerSemanticsFragment_InterestingSemanticsFragment_RootSemanticsFragment_IncompleteSemanticsFragment_SwitchableSemanticsFragment_SemanticsGeometryDiagnosticsDebugCreatorÅ€PictureRecorderDiagnosticPropertiesBuilderDiagnosticsNodeDiagnosticsPropertyDoublePropertyEnumPropertyErrorDescription	ErrorHintErrorSummaryFlagPropertyFlutterErrorInformationCollectorIntPropertyStringPropertyHitTestEntryHitTestResultsetupParentData	protectedmustCallSupervoidoverrideStringcanvasOffsetCanvasrepaintCompositedChildClipContextContainerLayerRectisRepaintBoundarybool_needsPaintdebugAlsoPaintedParent!debugRegisterRepaintBoundaryPaintincludedParentincludedChildOffsetLayer_layerHandlelayerupdateCompositedLayeroldLayerattachedoffsetremoveAllChildren	identical_needsCompositedLayerUpdatedebugCreatorruntimeTypechildContextpaintBounds_paintWithContextzerostopRecordingIfNeeded_wasRepaintBoundarycustomContextdebugOnProfilePaintcallgetSaveCountLayerremoveappendPictureLayerCompositionCallbackaddCompositionCallbackVoidCallbackdebugRepaintRainbowEnabledPaintstylePaintingStylestrokestrokeWidthcolordebugCurrentRepaintColortoColordrawRectdeflatedebugPaintLayerBordersEnabledColorpictureendRecordingisComplexHintwillChangeHintalwaysNeedsCompositinghasChildrenchildPaintBoundsneedsCompositingClipRectLayerCliphardEdgeclipBehaviornoneshiftclipRectclipRectAndPaintClipRRectLayerRRect	antiAlias	clipRRectclipRRectAndPaintPathClipPathLayerclipPathclipPathAndPaintColorFilterColorFilterLayercolorFilterMatrix4TransformLayertranslationValuesdxdymultiply	translate	transformMatrixUtilsinverseTransformRectsavestoragerestoreOpacityLayerintalphaobjectRuntimeTypehashCodeBoxConstraintsdebugAssertIsValid==toStringdebugDumpRenderTree	immutabledoublenanRenderConstrainedBoxadditionalConstraintslayoutvisitChildrenvisitChildrenForSemanticsinvokeLayoutCallbackTSemanticsHandlesemanticsOwneraddListenerremoveListener_didDisposeSemanticsHandleRendererBindingrequestVisualUpdateSemanticsUpdateFlutterViewSemanticsUpdateCallbackdetachattachListkReleaseModeMap#debugEnhanceLayoutTimelineArgumentslengthFlutterTimeline	startSync	arguments
isNotEmptysortadepthbiaddAllgetRange_needsLayoutowner_layoutWithoutResizechildflushLayoutisEmpty
finishSyncnode_needsCompositingBitsUpdate_updateCompositingBitsclearflushCompositingBits"debugEnhancePaintTimelineArgumentsupdateLayerProperties_skippedPaintingOnLayer
flushPaintsemanticsEnabledSemanticsOwnerdisposelistenerSemanticsBindingensureSemantics_onSemanticsUpdateSetscheduleInitialSemanticstoList_needsSemanticsUpdate_updateSemanticssendSemanticsUpdateflushSemantics_debugParent	drawFramecontainsaddforEach
adoptChild
ListenableonNeedVisualUpdateSchedulerBindingensureVisualUpdate	RenderBoxRenderObjectElementPictureImageSizesize
RenderViewhitTestmarkNeedsLayoutDiagnosticableTreeMixinHitTestTarget kFlutterMemoryAllocationsEnabledMemoryAllocationsinstancedispatchObjectCreatedlibrary	classNameobjectdebugPaintSizeEnabledBindingBasereassembleApplication
reassembledispatchObjectDisposed
parentData_depthredepthChildren_parentparent_cleanRelayoutBoundaryDebugCreatorwidgetsObject
StackTracereportErrorFlutterErrorDetails	exceptionstackcontextinformationCollector
kDebugModeDiagnosticsTreeStyletruncateChildrenpragma	fromPartserrorPropertydebugDoingLayout#_debugAllowMutationsToDirtySubtrees_doingThisLayoutWithCallback_debugMutationsLockeddebugLayoutParentdebugActiveLayoutdebugDoingThisLayoutperformLayoutisSemanticBoundary
StateError_relayoutBoundary_debugDoingThisLayoutdebugPrintMarkNeedsLayoutStacksdebugPrintStacklabel_nodesNeedingLayout_propagateRelayoutBoundary_debugDoingLayoutdebugPrintLayouts
debugPrintedebugProfileLayoutsEnabledtoDiagnosticsNodetoTimelineArgumentsisAppliedConstraintcurrentsplitPatternRegExpmatchAsPrefixMatch
groupCountgrouptrimparentUsesSizeisTightcomputeDryLayout	GlobalKey_enableMutationsToDirtySubtreesRepaintBoundaryLayerHandlemarkNeedsCompositingBitsUpdate"_nodesNeedingCompositingBitsUpdate_nodesNeedingPaintdebugDoingPaintdebugPrintMarkNeedsPaintStacksmarkNeedsPaintRenderOpacity_debugDoingPaintdebugProfilePaintsEnableddescribeForError
paintChildRenderOffstagerootNoderendereridentityindexapplyPaintTransformpushClipRectSemanticsNodeRenderViewportBasecacheExtent_debugDoingSemantics_semanticsOwner_nodesNeedingSemanticsSemanticsConfigurationSemanticsEvent	sendEventisMergedIntoParentsendSemanticsEventexplicitChildNodeschildConfigurationsDelegateclearSemantics_semanticsConfiguration
_semanticsmergeIntoParentisPartOfNodeMergingblockUserActionsareUserActionsBlockedcompileChildrenparentSemanticsClipRectparentPaintClipRectelevationAdjustmentresultsiblingNodesconfigany+isBlockingSemanticsOfPreviouslyPaintedNodeshasBeenAnnotatedisBlockingUserActionsisMergingSemanticsOfDescendantstagsForChildrenrenderChild_getSemanticsForParent dropsSemanticsOfPreviousSiblingsmergeUpFragmentsfragmentaddAncestoraddTagssiblingMergeGroupssiblingMergeGroupsiblingMergingFragmentmarkAsExplicit"ChildSemanticsConfigurationsResultmergeUpmapIterable	isMergeUphasConfigForParentisCompatibleWithj
updateWithchildrenInInversePaintOrderPointerEventdescribeIdentityDiagnosticLevelinfodebugtoStringDeepprefixLineOneprefixOtherLinesminLeveltoStringShallowjoinerdebugFillPropertiesvalueifTruedefaultValueleveltooltipmissingIfNullshowInViewportSingleChildScrollViewDurationCurveCurveseaseshowOnScreen
descendantrectdurationcurveshallownameSingleChildRenderObjectWidget	ChildTypeErrorSpacer_child	dropChildredepthChildnextSiblingpreviousSibling
firstChild	lastChildParentDataTypeRenderBoxContainerDefaultsMixinContainerBoxParentDataMultiChildRenderObjectWidget!SlottedContainerRenderObjectMixinequals_childCountafter_firstChild
_lastChild_debugUltimatePreviousSiblingOf_debugUltimateNextSiblingOf_insertIntoChildListinsert_removeFromChildListsystemFontsDidChangeTextPainter	ParagraphSchedulerPhasetransientCallbacksidleschedulerPhase'_hasPendingSystemFontsDidChangeCallBackscheduleFrameCallbackdebugDisposedPaintingBindingsystemFonts_scheduleSystemFontsUpdatefirstSemanticsTagchildren_tagsForChildren_ancestorChainrootmatrixEqualssemanticBoundsisInvisible_mergesToSiblingabsorb_computeSemanticsGeometrytransformRectexpandToIncludesemanticsClipRect	intersectpaintClipRectidtags
followedBysiblingGrouplast_isExplicitskip	elevationdropFromTreemarkAsHiddenisHiddenassembleSemanticsNodesiblingNode	ancestorsaddTagForChildrencopydescribeSemanticsClipdescribeApproximatePaintClipsetIdentityisZero
isIdentitySemanticsFlaghidden
ClipContextSemanticsHandle
ListenableDiagnosticableTreeMixinHitTestTargetRenderObject
ParentData_SemanticsFragment_InterestingSemanticsFragmentDiagnosticsProperty(*ó
èìóDÏ`kûæH ÇHÉ@DiagnosticPropertiesBuilderDiagnosticsNodeDiagnosticsPropertyDoublePropertyEnumPropertyErrorDescription	ErrorHintErrorSummaryFlagPropertyFlutterErrorInformationCollectorIntPropertyStringProperty Çpackage:flutter/foundation.dartÉiÉâHitTestEntryHitTestResult ÉBpackage:flutter/gestures.dart  Éãpackage:flutter/painting.dartÄºÄ–PictureRecorder Ä¶  Ä∂uiÄπdart:ui  Ä”  dart:ui  ÄÊ  package:flutter/animation.dart  Å  package:flutter/foundation.dart  Å9  package:flutter/gestures.dart  Åa  package:flutter/painting.dart  Åâ  package:flutter/scheduler.dart  Å≤  package:flutter/semantics.dart  Å‹  
debug.dart  ÅÒ  
layer.dart  Ç  proxy_box.dart    	dart:core¿∫‰ ¿3î <ÄÜÄ§Ä•Ä“Ä‰ÄÂÅÅ8Å`ÅàÅ±Å⁄Å€ÅÇÇÇÇMÇlÇÇñÇ®Ç∏ÇÃÇŸÇÈÇ˘É	É!É0ÉBÉãÉ≥É¥É¸Ñ ÑJÑíÑ∆Ñ ÑÿÑ‹Ö'ÖlÖÖºÖ…Ö⁄ÖÓÖÔÖ˚ÜÜÜÜTÜXÜ©ÜıÜ˘á/áàáâáüá£áıà:àÑàòàúàÌâ=âçâ◊âÒâıä<äzä¶äßä…äœãã.ã;ãzã{ã£ã§ãÒå8å>åyååÀåÈåÍçççbçØé éé"é2é8éàé©èè,èIèVèåèìèóèòèøèŸêê%ê,êQêaêòê«ê˜ëëë0ë:ëÇë†ë∆ëˆë˜íDíèí⁄ììNìÉìêìÕìÎì˝î*î?îKîqîÀî˝ïQï¥ï˛ññ<ñBñqñrñØñ‰ñÙó>óQó[ó\ó°óŸó⁄ò)ò]òöòƒò»ò…ôôôhôµöö>öDöTöZö™öÀõõGõgõïõñõ„õˇúú9úLúVúÆúﬁù0ùëùŸù‡ûûBûFûGûîû‰üüü.ü4üÅüõü–üÍ††?†F†V†u†Ñ†º†·†Í†˝°°°°0°6°Ñ°”¢#¢Z¢j¢í¢•¢Ø¢∞¢”¢Ú££d£´£◊§§5§b§o§ú§¢§¶§ß§„§˛•#•`•a•£•ﬁ¶!¶.¶]¶É¶ã¶ù¶÷ß	ßWßlßxß~ß≥®®,®O®S®T®†®Ø®µ®˛©D©q©w©ƒ©◊©‰™™!™5™X™\™]™w™£™≥™ ™Ò´´5´D´k´é´Ø´∑´ ´‘´Í´Ó´Ô¨¨#¨D¨W¨X¨|¨Ç¨Ã≠≠5≠A≠W≠r≠ã≠ë≠¥≠…≠Õ≠Œ≠ÈÆÆ7Æ]ÆÆ´ÆØÆ∞ØØØØdØ≤Ø¸∞<∞B∞~∞Ñ∞î∞ø±±B±F±G±Ç±à±‘≤#≤r≤≤Ö≤‘≥≥1≥>≥O≥p≥â≥ó≥ù≥≠≥’≥˘¥"¥@¥x¥∂¥æ¥Èµµ6µTµÅµ≤µ∫µÕµ◊∂∂)∂?∂S∂W∂X∂®∂º∂¬∑∑Z∑i∑Ö∑Æ∑≤∑≥∏∏∏\∏•∏Úπ$πAπkπoπpπ•π´π¸∫7∫=∫ä∫‹ª,ªrªxªàªéª‹ªÈºº%º=ºAºBºìº‚Ω2ΩTΩZΩ©ΩÌæææLæúæÏø:ø}øíøòøÈ¿ @:¿ @á¿ @ÿ¿ A(¿ Af¿ Al¿ A|¿ AÇ¿ AÕ¿ A·¿ B[¿ B©¿ B˙¿ C¿ CB¿ CH¿ Ce¿ CÇ¿ C¿ CÒ¿ D¿ D>¿ DB¿ DC¿ Dã¿ Dë¿ D◊¿ D‰¿ E3¿ Ec¿ Eg¿ Eh¿ Eó¿ Eù¿ EÔ¿ F7¿ Fn¿ F∫¿ G
¿ GH¿ Gå¿ Gí¿ G‡¿ H$¿ H9¿ H?¿ Há¿ H–¿ I¿ I.¿ I4¿ IÖ¿ IÕ¿ I›¿ I„¿ J3¿ Jt¿ Jz¿ J√¿ J…¿ K¿ K`¿ K§¿ KÙ¿ LD¿ Lå¿ Lÿ¿ M¿ M#¿ MŸ¿ M˛¿ N¿ N.¿ N4¿ Nl¿ Nà¿ N«¿ N”¿ N˜¿ O¿ Oi¿ O}¿ Oä¿ OÌ¿ P ¿ P¿ P
¿ P¿ PB¿ PH¿ Pó¿ Pù¿ P‚¿ PË¿ Q8¿ Q{¿ QÅ¿ Q—¿ R¿ RC¿ RI¿ Rö¿ R‹¿ R‚¿ S3¿ S9¿ SÄ¿ TI¿ Tn¿ Tã¿ Tû¿ T§¿ Tÿ¿ U¿ U/¿ Up¿ U|¿ U¢¿ U…¿ V¿ V&¿ V3¿ Vñ¿ V©¿ VØ¿ V≥¿ V¥¿ Vﬁ¿ V‰¿ W3¿ W9¿ W~¿ WÑ¿ W‘¿ X¿ X¿ Xl¿ X∑¿ X”¿ XŸ¿ Y)¿ Yj¿ Yp¿ Y¥¿ Y∫¿ Z¿ Z≈¿ ZÍ¿ [¿ [¿ [ ¿ [T¿ [å¿ [®¿ [Á¿ [Û¿ \¿ \>¿ \á¿ \õ¿ \®¿ ]	¿ ]¿ ]"¿ ]&¿ ]'¿ ]Y¿ ]_¿ ]°¿ ]ß¿ ]¯¿ ^¿ ^$¿ ^t¿ ^ª¿ ^¡¿ _¿ _¿ _[¿ _≠¿ _˝¿ `C¿ `—¿ a¿ a9¿ a`¿ ar¿ av¿ aw¿ a®¿ aÆ¿ a˝¿ b¿ bT¿ bz¿ bÄ¿ bÃ¿ c¿ cV¿ c\¿ c≠¿ cÔ¿ cı¿ d<¿ d÷¿ e2¿ er¿ eé¿ eœ¿ e˚¿ f¿ f¿ f,¿ f<¿ fù¿ f¶¿ f∫¿ f«¿ f‘¿ fÂ¿ g¿ g3¿ gK¿ g^¿ gd¿ gh¿ gi¿ gõ¿ g°¿ gÓ¿ h¿ h ¿ hp¿ hπ¿ i	¿ i¿ i\¿ iú¿ i¢¿ iÈ¿ iÔ¿ j<¿ jé¿ jﬁ¿ k$¿ kò¿ k”¿ k›¿ kÛ¿ l¿ l8¿ lJ¿ lN¿ lO¿ l[¿ lÁ¿ lÈ¿ lÍ¿ m¿ m¿ me¿ m¶¿ m™¿ m–¿ m‘¿ n$¿ np¿ nî¿ nò¿ nÁ¿ o7¿ oÑ¿ oà¿ oÿ¿ p&¿ pt¿ p¡¿ pŒ¿ p“¿ q¿ qi¿ q≥¿ qÙ¿ rD¿ rî¿ r‚¿ s(¿ sD¿ sH¿ só¿ s‚¿ t1¿ t{¿ t±¿ u¿ u¿ u¿ uk¿ uπ¿ v¿ v"¿ v&¿ vv¿ v«¿ v“¿ vÔ¿ w@¿ wà¿ wü¿ w†¿ wÍ¿ w˛¿ wˇ¿ xA¿ xZ¿ x[¿ xâ¿ xè¿ x“¿ xÿ¿ y'¿ yC¿ yI¿ yó¿ yÁ¿ z6¿ z¿ z∏¿ {	¿ {Z¿ {k¿ {q¿ {ø¿ |¿ |E¿ |K¿ |ç¿ |©¿ |œ¿ |ˇ¿ }¿ } ¿ }9¿ }=¿ }?¿ }@¿ }Ö¿ }â¿ }‡¿ }‰¿ ~¿ ~P¿ ~Q¿ ~å¿ ~ê¿ ~¡¿ ¿ ¿ I¿ á¿ †¿ º¿ Ò¿ ˜¿ ˚¿ ¸¿ Ä¿ Ä¿ Äe¿ ÄÖ¿ ÄÜ¿ Äí¿ Ä•¿ Ä¡¿ Ä˘¿ Äˇ¿ Å(¿ Å,¿ Å.¿ Å/¿ Åf¿ Åj¿ Å∫¿ Ç¿ ÇX¿ Çp¿ Çt¿ Çø¿ É¿ ÉP¿ É|¿ É≈¿ Ñ¿ Ñc¿ Ñ¥¿ Ö¿ ÖJ¿ Öê¿ Öﬁ¿ Ü)¿ Üi¿ Üµ¿ á¿ áP¿ áT¿ á£¿ áÌ¿ à:¿ àX¿ à\¿ à≠¿ à˚¿ âJ¿ âó¿ â„¿ ä1¿ är¿ äv¿ ä¬¿ ã¿ ã`¿ ã™¿ ãŸ¿ ãÔ¿ å¿ å¿ åb¿ åØ¿ å’¿ åÁ¿ ç¿ ç&¿ çB¿ çe¿ çk¿ çl¿ çº¿ ç‡¿ çÊ¿ é7¿ éÑ¿ é—¿ é¿ éˆ¿ è=¿ èä¿ è”¿ è˝¿ è˛¿ êD¿ êJ¿ êí¿ ê®¿ ê◊¿ êÿ¿ ë/¿ ë5¿ ëä¿ ë∑¿ ëÎ¿ ëÏ¿ í4¿ í:¿ í{¿ í´¿ í¨¿ íÚ¿ í¯¿ ìH¿ ìo¿ ìé¿ ì¥¿ ì—¿ ìﬁ¿ î¿ î¿ î¿ î¿ îV¿ îÅ¿ îú¿ î¬¿ î‡¿ îÓ¿ îÙ¿ ï¿ ï$¿ ïA¿ ïE¿ ïF¿ ïí¿ ï›¿ ñ¿ ñ¿ ñh¿ ñ¥¿ ñ˝¿ ó5¿ ó:¿ óv¿ ó∆¿ ò¿ ò`¿ òu¿ òú¿ òŸ¿ ò⁄¿ ô¿ ô¿ ô^¿ ôd¿ ôß¿ ô√¿ ôı¿ ö¿ ö>¿ ö?¿ öÅ¿ öá¿ ö◊¿ õ"¿ õX¿ õ^¿ õß¿ õæ¿ õ◊¿ ú
¿ ú¿ úO¿ úÑ¿ ú¿¿ úÚ¿ úˇ¿ ù	¿ ù¿ ù*¿ ùK¿ ù]¿ ùà¿ ùë¿ ùó¿ ùß¿ ù«¿ ù⁄¿ ù‰¿ ùÓ¿ û¿ ûF¿ ûâ¿ ûπ¿ ü	¿ ü?¿ üg¿ üì¿ ü≈¿ †¿ †/¿ †=¿ †I¿ †|¿ †µ¿ †ﬁ¿ †Í¿ †Ù¿ °?¿ °b¿ °ä¿ °í¿ °ì¿ °•¿ °Ã¿ °·¿ °Ì¿ ¢"¿ ¢?¿ ¢G¿ ¢∞¿ ¢¿¿ ¢Ê¿ ¢¯¿ £¿ £C¿ £X¿ £d¿ £¿ £•¿ £≠¿ £≥¿ £∑¿ £∏¿ §¿ §W¿ §§¿ §Û¿ • ¿ •T¿ •U¿ •É¿ •√¿ •‚¿ •ˆ¿ ¶¿ ¶<¿ ¶n¿ ¶Å¿ ¶ã¿ ¶ï¿ ¶ß¿ ¶∑¿ ¶‹¿ ¶Ó¿ ß'¿ ß<¿ ßH¿ ßN¿ ßR¿ ßS¿ ß•¿ ß›¿ ß„¿ ®1¿ ®E¿ ®e¿ ®~¿ ®º¿ ®¬¿ ©&¿ ©p¿ ©¥¿ ©€¿ ©„¿ ©È¿ ™¿ ™L¿ ™p¿ ™v¿ ™Ï¿ ´¿ ´)¿ ´/¿ ´3¿ ´4¿ ´p¿ ´q¿ ´Æ¿ ´¥¿ ´Û¿ ´˘¿ ¨7¿ ¨X¿ ¨à¿ ¨©¿ ¨™¿ ¨·¿ ¨Á¿ ≠0¿ ≠Ä¿ ≠—¿ ≠◊¿ Æ ¿ Æ6¿ ÆO¿ ÆÇ¿ Æî¿ Æ∆¿ Æ˚¿ Ø6¿ Øg¿ Øt¿ Ø~¿ Øì¿ Øü¿ Ø¿¿ Ø—¿ Ø¸¿ ∞¿ ∞¿ ∞¿ ∞'¿ ∞H¿ ∞]¿ ∞i¿ ∞©¿ ∞÷¿ ∞◊¿ ±¿ ±à¿ ±π¿ ≤¿ ≤H¿ ≤t¿ ≤ò¿ ≤‘¿ ≤È¿ ≥$¿ ≥2¿ ≥E¿ ≥q¿ ≥}¿ ≥á¿ ≥è¿ ≥ƒ¿ ≥‡¿ ≥Ë¿ ¥P¿ ¥`¿ ¥r¿ ¥î¿ ¥©¿ ¥µ¿ ¥–¿ ¥ˆ¿ ¥˛¿ µ¿ µ¿ µ	¿ µV¿ µ\¿ µ≠¿ µ˝¿ ∂.¿ ∂x¿ ∂¬¿ ∑¿ ∑!¿ ∑'¿ ∑p¿ ∑ç¿ ∑∆¿ ∑È¿ ∑Í¿ ∏*¿ ∏0¿ ∏Å¿ ∏±¿ ∏˝¿ π%¿ π&¿ πw¿ π√¿ π…¿ ∫¿ ∫L¿ ∫õ¿ ∫µ¿ ∫ª¿ ª¿ ª\¿ ª•¿ ª√¿ ª…¿ º¿ ºP¿ º†¿ º∆¿ Ω¿ Ω-¿ ΩJ¿ Ω~¿ ΩÇ¿ ΩÉ¿ Ω§¿ Ω˙¿ æ¿ æû¿ æÔ¿ ø¿ ø ¿ øJ¿ øl¿ øä¿ ø≤¿ ø∏¿ øº¿ øΩ¿ ø„¿ ¿¿ ¿/¿ ¿L¿ ¿P¿ ¿Q¿ ¿v¿ ¿ª¿ ¿º¿ ¡¿ ¡¿ ¡¿ ¡Q¿ ¡ö¿ ¡†¿ ¡Ì¿ ¬(¿ ¬g¿ ¬m¿ ¬∂¿ ¬–¿ ¬Û¿ √¿ √¿ √ ¿ √N¿ √T¿ √y¿ √â¿ √¨¿ √ø¿ √…¿ √”¿ ƒ#¿ ƒj¿ ƒê¿ ƒ»¿ ≈¿ ≈+¿ ≈5¿ ≈=¿ ≈k¿ ≈†¿ ≈¿¿ ≈»¿ ∆4¿ ∆D¿ ∆V¿ ∆|¿ ∆ë¿ ∆ù¿ ∆∏¿ ∆ﬁ¿ ∆Ê¿ ∆Ï¿ ∆¿ ∆Ò¿ «¿ «¿ «A¿ «`¿ «a¿ «Ä¿ «≈¿ «Ê¿ «˜¿ «˚¿ «¸¿ »I¿ »O¿ »ö¿ »È¿ …¿ …7¿ …V¿ …p¿ …£¿ …¿¿ …¡¿ …Ù¿  ¿  ¿  ¿  ¿  J¿  P¿  õ¿  Ï¿ À¿ À ¿ À?¿ Àu¿ Àã¿ À®¿ À©¿ À‹¿ ÀÚ¿ À¯¿ À¸¿ À˝¿ ÃB¿ Ãâ¿ Ã◊¿ Õ&¿ Õù¿ Õû¿ Õ ¿ Õ–¿ Œ¿ Œl¿ Œπ¿ œ¿ œQ¿ œ†¿ œÒ¿ –¿ –¿ –X¿ –|¿ –Ç¿ –”¿ —"¿ —(¿ —S¿ —|¿ —§¿ —Ã¿ “%¿ “?¿ “i¿ “Ü¿ “¶¿ “¨¿ “∞¿ “±¿ “˙¿ ” ¿ ”Q¿ ”c¿ ”i¿ ”∏¿ ‘¿ ‘/¿ ‘W¿ ‘~¿ ‘◊¿ ‘Ù¿ ’¿ ’;¿ ’Q¿ ’W¿ ’[¿ ’\¿ ’§¿ ’™¿ ’∫¿ ’¿¿ ’Ê¿ ÷¿ ÷C¿ ÷c¿ ÷g¿ ÷i¿ ÷j¿ ÷´¿ ÷Ø¿ ÷‹¿ ◊¿ ◊ ¿ ◊H¿ ◊L¿ ◊å¿ ◊Ÿ¿ ÿ(¿ ÿv¿ ÿ√¿ ÿÍ¿ ÿÓ¿ Ÿ>¿ Ÿè¿ Ÿ’¿ Ÿı¿ Ÿ˘¿ ⁄G¿ ⁄ì¿ ⁄À¿ €¿ €X¿ €^¿ €Æ¿ €¿ €ˆ¿ ‹¿ ‹¿ ‹S¿ ‹ë¿ ‹Æ¿ ‹Ø¿ ‹˝¿ ›K¿ ›d¿ ›j¿ ›ª¿ ﬁ¿ ﬁU¿ ﬁt¿ ﬁz¿ ﬁ¡¿ ﬂ¿ ﬂ^¿ ﬂd¿ ﬂt¿ ﬂz¿ ﬂ√¿ ‡¿ ‡#¿ ‡%¿ ‡&¿ ‡p¿ ‡q¿ ‡ì¿ ‡ó¿ ‡€¿ ‡˚¿ ‡ˇ¿ ·B¿ ·F¿ ·í¿ ·‚¿ ‚-¿ ‚M¿ ‚Q¿ ‚ú¿ ‚Í¿ „3¿ „É¿ „–¿ ‰¿ ‰o¿ ‰ñ¿ ‰ö¿ ‰ﬁ¿ Â¿ Â	¿ Â¿ Â¿ Âk¿ Âª¿ Ê¿ Ê&¿ Ê*¿ Êv¿ Êƒ¿ Á¿ Áe¿ Á£¿ Áß¿ ÁŒ¿ Á“¿ Ë¿ Ëf¿ Ë≥¿ Ë˛¿ ÈM¿ Èõ¿ ÈÎ¿ Í9¿ ÍÅ¿ Í–¿ Î¿ Îh¿ Î©¿ Î≠¿ Î¸¿ ÏL¿ Ïù¿ ÏŸ¿ Ï›¿ ÏÏ¿ Ï¿ Ì7¿ Ì~¿ Ìö¿ Ìû¿ ÌÏ¿ Ó=¿ Óâ¿ Ó÷¿ Ô¿ Ô\¿ Ô`¿ Ô∞¿ Ô„¿ ÔÁ¿ Ô˚¿ Ôˇ¿ J¿ y¿ }¿  ¿ Ò¿ Òi¿ Ò±¿ Ò˚¿ ÚI¿ Úñ¿ Úª¿ Úø¿ ÚÌ¿ ÚÒ¿ ÛB¿ Ûì¿ Ûﬁ¿ Ù.¿ Ù¿ Ùñ¿ Ùö¿ ÙÍ¿ Ù˙¿ Ù˛¿ ı>¿ ıå¿ ıù¿ ı°¿ ıÓ¿ ˆ=¿ ˆA¿ ˆt¿ ˆx¿ ˆ ¿ ˜¿ ˜i¿ ˜¥¿ ˜ˇ¿ ¯¿ ¯Q¿ ¯û¿ ¯Ì¿ ˘9¿ ˘à¿ ˘◊¿ ˙¿ ˙]¿ ˙≠¿ ˙∫¿ ˚¿ ˚@¿ ˚S¿ ˚¿ ˚∑¿ ˚‚¿ ¸¿ ¸¿ ¸%¿ ¸+¿ ¸p¿ ¸ù¿ ¸°¿ ¸¢¿ ¸Ò¿ ˝@¿ ˝ã¿ ˝∫¿ ˝¿¿ ˛¿ ˛R¿ ˛û¿ ˛Ω¿ ˛√¿ ˇ¿ ˇ¿ ˇ%¿ ˇ+¿ ˇX¿ ˇn¿ ˇÖ¿ ˇ´¿ ˇ¡¿ ˇ·¿ 
¿ $¿ ,¿ 0¿ 1¿ W¿ ]¿ ö¿ ∂¿  ¿ ⁄¿ ˚¿¿¿-¿1¿2¿Q¿R¿ä¿ê¿€¿*¿u¿¥¿˝¿M¿e¿k¿∂¿›¿„¿¿0¿C¿`¿å¿”¿Ÿ¿¯¿¿U¿g¿ï¿®¿À¿9¿G¿T¿q¿Ñ¿é¿í¿ì¿ü¿†¿–¿÷¿#¿r¿¬¿ ¿¿Q¿Ä¿–¿	¿	_¿	´¿	˜¿
2¿
L¿
M¿
é¿
î¿
‰¿¿L¿s¿û¿≈¿À¿œ¿–¿˙¿ ¿P¿`¿f¿≤¿¿T¿ß¿¯¿I¿ó¿Ë¿6¿b¿}¿è¿ê¿·¿¿ˆ¿7¿D¿n¿ê¿≤¿”¿Ú¿¯¿¸¿˝¿7¿=¿é¿∆¿”¿¿Ò¿¿C¿\¿]¿•¿´¿˙¿M¿^¿k¿ì¿∂¿∆¿Ê¿
¿'¿/¿x¿ã¿ï¿ñ¿≤¿…¿Ô¿¿)¿=¿Z¿`¿y¿}¿~¿–¿÷¿%¿x¿â¿ñ¿Ω¿‡¿¿.¿R¿r¿è¿©¿Ω¿”¿Ÿ¿¿¿6¿:¿;¿¿Ö¿’¿¿¿J¿P¿n¿t¿Ñ¿ä¿ﬁ¿ˆ¿˜¿D¿v¿í¿¶¿ ¿ˇ¿4¿Ñ¿Ø¿ﬂ¿¿z¿…¿¿c¿ú¿Ù¿˝¿¿	¿
¿U¿[¿®¿µ¿Ô¿¿¿a¿g¿¥¿¡¿˚¿ !¿ "¿ ]¿ c¿ ∞¿ º¿! ¿!+¿!,¿!s¿!º¿"
¿"'¿"E¿"á¿"¥¿"ƒ¿"˙¿#¿#.¿#8¿#V¿#f¿#ú¿#Ø¿#π¿#Ã¿#–¿#—¿$!¿$-¿$3¿$s¿$y¿$ø¿$¸¿%¿%¿%C¿%D¿%z¿%Ä¿%–¿& ¿&b¿&h¿&∂¿&›¿&Û¿'¿'¿'W¿'ó¿'ƒ¿'Ò¿(¿(:¿(G¿(S¿([¿(\¿(ã¿(Ÿ¿)*¿)B¿)x¿)è¿)§¿)¨¿)≠¿)⁄¿*¿*~¿*⁄¿+¿+P¿+ù¿+Ï¿,¿,¿,ò¿,Ø¿,π¿,∫¿,Ò¿-7¿-r¿-É¿-®¿-π¿-√¿-À¿-Ã¿.¿.ç¿.Ô¿/¿/¿/,¿/d¿/µ¿/—¿07¿0D¿0q¿0£¿0µ¿0Ï¿0˘¿1&¿1r¿1ë¿1»¿1’¿1·¿1È¿1Í¿2¿2H¿2¨¿3¿3<¿3n¿3Ä¿3∑¿3ƒ¿43¿4?¿4G¿4H¿4≤¿5 ¿55¿5í¿5Û¿6"¿6#¿6Y¿6j¿6ë¿6º¿6Ï¿6¸¿71¿7<¿7g¿7⁄¿7˜¿8,¿87¿8|¿8£¿8ø¿8Ù¿8ˇ¿9¿9ñ¿9˘¿:¿:¿:¿:+¿:/¿:0¿:Å¿:Æ¿:¥¿;¿;P¿;ô¿;ü¿;Í¿<#¿<s¿<ƒ¿<Ÿ¿<Ê¿=¿=.¿=>¿=[¿=n¿=x¿=ë¿=ï¿=ñ¿= ¿=–¿>¿>C¿>\¿>]¿>ß¿>≠¿>‚¿>Ë¿?¿?E¿?F¿?{¿?Å¿?Õ¿@¿@	¿@X¿@•¿@π¿@ø¿A¿A9¿AJ¿Ao¿Aå¿A®¿Aº¿B
¿BQ¿BÜ¿B∆¿Bˆ¿C¿C+¿C1¿CX¿CÉ¿C´¿C±¿CÊ¿D%¿DT¿Do¿Dá¿Dç¿D‹¿E%¿EX¿E}¿Eü¿E•¿E©¿E™¿EÃ¿E“¿F"¿FM¿FS¿F¢¿FÈ¿FÔ¿G<¿Gb¿Gs¿GÖ¿G°¿G¥¿G¿GÙ¿Gı¿H5¿H;¿Hå¿Hÿ¿I%¿I\¿Ib¿Iò¿I∂¿IÃ¿I‹¿I˘¿J¿J¿J)¿J-¿JI¿JJ¿Jm¿Jn¿J¿¿K¿K:¿K;¿K~¿KÑ¿K≈¿KÎ¿K¯¿L¿L8¿Lù¿L£¿LΩ¿L¡¿Lﬁ¿Lﬂ¿M"¿Mf¿M¨¿MÚ¿N)¿N6¿N_¿N`¿Nü¿N‡¿O¿O
¿OL¿Oç¿OÃ¿P¿PE¿Pt¿P±¿P÷¿Q¿Q$¿Q*¿QH¿Qp¿Q´¿QŒ¿QÈ¿R,¿RB¿RJ¿RP¿R|¿Rç¿Rë¿Rí¿R„¿S4¿Sz¿SÄ¿Sî¿Sö¿SÎ¿T9¿TÜ¿T≈¿TÀ¿U¿UP¿UV¿U¶¿UÔ¿V?¿Vå¿VŸ¿W&¿W`¿Wf¿Wß¿Wı¿X8¿X>¿XU¿X[¿X§¿XÓ¿Y=¿Y|¿Yπ¿Z
¿Z&¿Z,¿ZX¿Z§¿Zø¿ZÊ¿Z˛¿[A¿[O¿[U¿[z¿[ï¿[±¿\ ¿\M¿\q¿\í¿\ö¿\®¿\Æ¿\”¿\Ú¿\ˇ¿]¿]5¿]I¿]z¿]ƒ¿]–¿]Á¿]ı¿^#¿^I¿^Q¿^W¿^[¿^\¿^´¿^Ω¿^√¿_¿_X¿_ß¿_ÿ¿_ﬁ¿`¿`¿`:¿`a¿`z¿`õ¿`…¿`Ú¿a¿a¿aK¿aQ¿at¿ax¿ay¿aª¿b¿bG¿bM¿bñ¿bú¿b ¿b˚¿c¿c/¿c3¿c4¿cV¿c{¿cõ¿cÕ¿c”¿c◊¿cÿ¿c˛¿d#¿d1¿d7¿dÉ¿dØ¿dÊ¿e¿eP¿eV¿eZ¿e[¿eò¿eÿ¿e¸¿f ¿f¿fG¿fo¿fs¿ft¿f¿¿f∆¿g¿g9¿g?¿gÉ¿g§¿g¡¿g◊¿g¸¿h#¿hJ¿hh¿hx¿hû¿h±¿hª¿hÂ¿hÈ¿hÍ¿i¿i7¿i^¿iã¿iØ¿i⁄¿j¿j¿j:¿j^¿jî¿jµ¿j‘¿k¿k¿k(¿k2¿k<¿kS¿ku¿ké¿k¡¿k«¿k◊¿l¿l2¿lW¿lj¿lt¿lé¿l§¿l®¿l©¿l⁄¿l‡¿m/¿m~¿mŒ¿m¸¿n¿nP¿n†¿nÒ¿o=¿oÅ¿o—¿p¿p¿p_¿p™¿pÚ¿p¯¿qF¿qï¿q‚¿r¿r<¿rÜ¿r£¿r⁄¿s¿s¿sR¿s†¿s™¿sø¿sÀ¿sÏ¿t¿t/¿t8¿t>¿ti¿tä¿t´¿t˘¿u¿us¿uß¿uÎ¿v¿v8¿vK¿vW¿va¿v¢¿vÎ¿wK¿wÏ¿x¿x.¿xÇ¿x”¿y¿y*¿y9¿yF¿yP¿yt¿y}¿yÖ¿y©¿yÕ¿zE¿zß¿z∑¿zÊ¿z˘¿{¿{¿{<¿{N¿{ú¿{›¿|¿|<¿|à¿|´¿|≈¿|˝¿}$¿}K¿}`¿}l¿}m¿}†¿}Œ¿~¿~¿~¿~J¿~p¿~x¿~Ü¿~å¿~¨¿~˙¿I¿ó¿…¿˚¿Ä¿Ä+¿ÄO¿Äz¿Ää¿ÄÆ¿ÄÕ¿Å9¿ÅA¿ÅT¿Å^¿Åw¿Åâ¿ÅØ¿Åƒ¿Å–¿Å‹¿Åı¿Ç	¿Ç5¿ÇL¿ÇZ¿Çu¿Ç™¿Ç≤¿Çƒ¿ÇÎ¿É ¿É¿É¿É?¿ÉO¿És¿É©¿É ¿É›¿ÉÁ¿ÉÒ¿Ñ¿Ñ*¿Ñ<¿Ñf¿Ñ{¿Ñá¿Ñ†¿Ñ”¿ÑŸ¿ÑÈ¿Ö¿ÖD¿Öi¿Ö|¿ÖÜ¿Ö†¿Ö∂¿Ö∑¿ÖÓ¿Ü¿Ü¿Ü¿Ü¿Üi¿Ü≤¿Üˇ¿áK¿áú¿á…¿á÷¿áÚ¿áÛ¿à@¿ào¿àu¿àΩ¿â¿âN¿âT¿â§¿âÛ¿ä"¿ä(¿äx¿äæ¿ä¸¿ã ¿ã-¿ãP¿ãQ¿ãê¿ã“¿ãÿ¿å'¿år¿åΩ¿åˆ¿å¸¿ç;¿çP¿çV¿çß¿çˆ¿é"¿é/¿éG¿éH¿éä¿éê¿éﬂ¿è*¿èu¿èÆ¿è¥¿ê¿êU¿ê£¿êÙ¿ë¿ë¿ëW¿ë•¿ëÍ¿í:¿íÉ¿íª¿í»¿í‡¿í·¿ì(¿ìx¿ì≈¿î¿î-¿î3¿îÑ¿î“¿ï#¿ïl¿ïr¿ï√¿ñ¿ñ¿ñO¿ñ\¿ñ≠¿ñ–¿ñÛ¿ó¿óG¿óQ¿ó£¿ó≥¿óﬂ¿óÂ¿óÈ¿óÍ¿ó¯¿ó˘¿ò<¿òB¿òè¿òú¿ò‘¿ò˘¿ò˙¿ô-¿ô3¿ôÄ¿ôå¿ôŒ¿ô¯¿ô˘¿ö?¿öE¿öñ¿öﬂ¿õ0¿õB¿õH¿õò¿õÓ¿ú4¿úà¿ú≤¿ú∏¿ù	¿ù¿ù ¿ùx¿ùü¿ù†¿ùÌ¿û&¿û,¿û|¿ûô¿ü¿ü¿ü>¿üD¿üí¿ü·¿†¿†¿†b¿†∞¿†Ω¿†È¿†Í¿°¿°¿°K¿°Q¿°†¿°¶¿°Ò¿¢@¿¢ë¿¢‡¿£+¿£;¿£A¿£é¿£∏¿£æ¿§¿§b¿§Ø¿•¿•¿•k¿•π¿¶¿¶*¿¶P¿¶T¿¶U¿¶ö¿¶†¿¶¿ß=¿ßä¿ßŸ¿®,¿®z¿®¿¿©¿©Z¿©è¿©ï¿©‚¿™0¿™z¿™∆¿´¿´d¿´É¿´â¿´ÿ¿¨%¿¨q¿¨~¿¨ã¿¨©¿≠¿≠+¿≠/¿≠0¿≠=¿≠e¿≠q¿≠ã¿≠”¿Æ¿Æ;¿ÆB¿Æe¿Æi¿Æj¿Æº¿ÆΩ¿Ø¿Ø¿Øh¿Øª¿ØÀ¿Ø—¿Ø˛¿∞!¿∞=¿∞M¿∞p¿∞É¿∞ç¿∞†¿∞§¿∞•¿∞ˆ¿±8¿±>¿±é¿±ﬁ¿±Î¿±Ò¿≤-¿≤t¿≤ª¿≥¿≥G¿≥|¿≥Ç¿≥«¿¥¿¥F¿¥p¿¥ç¿¥¥¿¥¬¿¥»¿¥¿µ¿µB¿µr¿µÇ¿µä¿µã¿µ‚¿∂¿∂#¿∂+¿∂1¿∂n¿∂á¿∂¬¿∂»¿∂Ã¿∂Õ¿∑¿∑R¿∑X¿∑©¿∑—¿∑◊¿∏¿∏S¿∏q¿∏œ¿∏Ì¿∏Ò¿∏Ú¿π¿π<¿πJ¿πP¿πà¿πß¿π–¿πˆ¿∫¿∫<¿∫D¿∫L¿∫É¿∫£¿∫©¿∫¯¿ªC¿ªè¿ªÊ¿º1¿ºf¿ºÅ¿º¨¿º⁄¿Ω¿Ω¿ΩX¿ΩÉ¿Ωõ¿Ω®¿Ω”¿ΩŸ¿Ω›¿Ωﬁ¿æ¿æ#¿æt¿æ¿¿ø¿øF¿øL¿øÇ¿øà¿ø‘¿¿#¿¿h¿¿¥¿¿Ô¿¡¿¡"¿¡2¿¡N¿¡a¿¡k¿¡~¿¡Ç¿¡ù¿¡û¿¡›¿¡„¿¬4¿¬Ä¿¬Õ¿√¿√¿√B¿√o¿√Ö¿√ï¿√¡¿√‘¿√ﬁ¿√Ò¿√ı¿ƒ!¿ƒ"¿ƒi¿ƒo¿ƒ¥¿≈¿≈Q¿≈†¿≈∏¿≈æ¿∆	¿∆E¿∆K¿∆ã¿∆ÿ¿«¿« ¿«0¿«6¿«Ñ¿«÷¿«Ê¿» ¿»¿»S¿»j¿»x¿»~¿»ñ¿»‹¿»˛¿…2¿…D¿…r¿…π¿…√¿…ÿ¿…‰¿ '¿ ]¿ é¿ ©¿ ÷¿ ¸¿À¿À-¿ÀM¿ÀZ¿Àl¿Àö¿À˜¿Ã¿Ã¿Ã"¿Ãl¿Ã∂¿Ã˙¿Õ8¿ÕA¿Õ~¿ÕΩ¿Õÿ¿Õ˛¿Œ¿Œ¿Œ¿Œ¿Œ^¿Œk¿Œq¿Œ¬¿œ¿œa¿œ∞¿œ˘¿œˇ¿–P¿–†¿–√¿–…¿–Ÿ¿–ﬂ¿—/¿—n¿—ò¿—µ¿—Î¿“!¿“/¿“5¿“]¿“£¿“≈¿“˘¿”<¿”r¿”ú¿”∑¿”‰¿‘
¿‘¿‘¿‘7¿‘=¿‘A¿‘B¿‘í¿‘‡¿’1¿’z¿’≥¿’÷¿’Ï¿÷¿÷C¿÷k¿÷ñ¿÷∑¿÷⁄¿÷˛¿◊-¿◊Ñ¿◊ï¿◊ü¿◊–¿ÿ,¿ÿ=¿ÿG¿ÿh¿ÿp¿ÿä¿ÿê¿ÿî¿ÿï¿ÿ‡¿ÿÊ¿Ÿ4¿Ÿ\¿Ÿb¿Ÿ¶¿Ÿﬁ¿Ÿ˛¿⁄¿⁄9¿⁄_¿⁄~¿⁄¶¿⁄ ¿⁄„¿€¿€¿€¿€V¿€ó¿€©¿€Ø¿€Ù¿‹%¿‹B¿‹b¿‹x¿‹ù¿‹√¿‹‚¿›5¿›W¿›{¿›ë¿›ï¿›ñ¿›Ÿ¿›ˆ¿ﬁ¿ﬁ(¿ﬁ`¿ﬁ¶¿ﬁ¬¿ﬂ¿ﬂ/¿ﬂ<¿ﬂX¿ﬂ£¿ﬂæ¿ﬂÀ¿ﬂ◊¿ﬂﬂ¿ﬂÚ¿ﬂ¸¿‡H¿‡ñ¿‡‰¿·3¿·¿·Ã¿‚¿‚-¿‚;¿‚A¿‚w¿‚™¿‚º¿‚Ó¿„<¿„F¿„[¿„g¿„à¿„†¿„À¿„‘¿„⁄¿„Í¿‰¿‰9¿‰m¿‰ï¿‰À¿‰Ï¿Â¿Â ¿Â.¿ÂP¿Âå¿Â®¿Â¯¿Ê¿Ê*¿ÊQ¿Ês¿ÊÑ¿Ê§¿Ê⁄¿ÊÎ¿Á¿Á\¿Á∞¿ÁÙ¿Ë¿Ë¿Ër¿ËÉ¿Ëì¿Ëü¿Ë©¿Ë·¿Ë˘¿ÈG¿È_¿Èl¿Èà¿ÈŸ¿Í¿Í¿Í6¿ÍÑ¿Í—¿Î¿Î¿Î3¿ÎÉ¿Îê¿Îú¿Î§¿Î∑¿Î¡¿ÎÈ¿Î˘¿Ï¿ÏL¿Ïl¿Ï¨¿Ïø¿Ï…¿Ï‚¿Ì¿Ì8¿ÌB¿Ì`¿Ìπ¿Ó¿Ó*¿ÓU¿Ó[¿Ók¿Óé¿Óæ¿Ó‚¿Óı¿Óˇ¿Ô5¿ÔY¿Ô_¿Ôc¿Ôd¿Ô∞¿Ô˙¿ ¿P¿i¿Å¿Ç¿Ω¿˚¿¸¿ÒG¿ÒM¿Òô¿Òﬁ¿Ú,¿Úy¿Úü¿Ú•¿ÚÛ¿ÛC¿Ûë¿Û®¿ÛÆ¿Û˙¿ÙD¿Ùì¿Ù≈¿Ù˛¿Ùˇ¿ıO¿ıj¿ıp¿ı¿¿ˆ	¿ˆ¿ˆY¿ˆ•¿ˆÒ¿˜:¿˜Ü¿˜ø¿¯¿¯/¿¯3¿¯4¿¯{¿¯Å¿¯—¿˘¿˘n¿˘á¿˘ç¿˘‘¿˙!¿˙m¿˙Ω¿˚¿˚*¿˚]¿˚¿˚ê¿˚î¿˚ï¿˚’¿¸¿¸¿¸b¿¸â¿¸è¿¸‹¿˝ ¿˝@¿˝U¿˝[¿˝ß¿˝ˆ¿˛D¿˛ì¿˛•¿˛ÿ¿ˇ¿ˇ#¿ˇ?¿ˇu¿ˇõ¿ˇ∏¿ˇ¿¿ˇ∆¿ ¿ ]¿ |¿ œ¿ ’¿ Ú¿¿¿J¿é¿€¿·¿˜¿˚¿¸¿˝¿D¿Ü¿«¿Õ¿¿	¿O¿v¿|¿Ã¿¿i¿£¿Ô¿¿7¿Ü¿“¿¿o¿ª¿¿¿¿d¿±¿˝¿¿¿o¿Ω¿	¿	[¿	™¿	Ô¿	ı¿
¿
¿
W¿
ì¿
Ÿ¿
⁄¿
È¿
Í¿1¿V¿\¿£¿∫¿¿¿	¿-¿J¿`¿Ö¿Ø¿œ¿Ú¿¿K¿m¿q¿r¿√¿…¿¿0¿6¿¿ ¿¿a¿±¿¯¿˛¿¿¿j¿}¿É¿ë¿ÿ¿Í¿7¿o¿Ä¿°¿«¿Ê¿¿ˆ¿¿-¿7¿?¿I¿[¿h¿Ø¿–¿‘¿’¿*¿0¿{¿∂¿º¿˜¿˝¿I¿Ñ¿≠¿ª¿¡¿¿/¿P¿Ç¿à¿å¿ç¿ª¿Ù¿ı¿,¿]¿ù¿„¿Ò¿s¿Á¿¿ˆ¿!¿%¿&¿f¿ê¿´¿¨¿—¿Ó¿Ô¿¿ ¿n¿≤¿Ÿ¿ﬂ¿-¿9¿_¿x¿ë¿ó¿®¿¨¿≠¿ˆ¿¸¿K¿Q¿ö¿Ê¿˜¿¿3¿J¿s¿ë¿ô¿ù¿û¿Ê¿Ï¿3¿Ñ¿∞¿‘¿Ò¿(¿_¿ã¿ô¿ü¿†¿Î¿5¿Ö¿—¿“¿ L¿ M¿ o¿ ª¿ ˛¿!(¿!)¿!ï¿!≥¿!¥¿"¿"S¿"ù¿"ª¿#"¿#Z¿#i¿#q¿#ö¿#Ï¿$=¿$l¿$ñ¿$æ¿$∆¿$«¿$‚¿%8¿%}¿%–¿&"¿&k¿&{¿&É¿&â¿&–¿'!¿'e¿'¥¿(¿(S¿(e¿(∞¿(‚¿(Ë¿)¿)8¿)S¿)¥¿)Â¿*¿*¿*¿*¿*¿*[¿*w¿* ¿*‚¿+0¿+Ç¿+ê¿+ñ¿+Ø¿+È¿+Ô¿,/¿,x¿,º¿,√¿,‹¿- ¿-¿-=¿-¶¿-‡¿. ¿.!¿.:¿.x¿.~¿.ß¿.Î¿/'¿/j¿/Ä¿/¢¿/©¿/¬¿/Ê¿/Ï¿09¿0£¿0ß¿0®¿0Ù¿1"¿1E¿1i¿1p¿1‘¿1’¿2¿2w¿2“¿3,¿3ê¿3È¿4B¿4û¿51¿5ï¿6¿6U¿6ê¿6≠¿7¿73¿7e¿7n¿7´¿7–¿7Ú¿8¿8H¿8z¿8Ñ¿8å¿8Í¿9¿9%¿9Z¿9d¿9≠¿9¸¿:¿:O¿:à¿:ô¿:√¿:Õ¿:’¿;¿;\¿;ë¿<¿<d¿<ö¿<µ¿<¸¿=
¿=¿=S¿=]¿=e¿=m¿=n¿=∂¿=∑¿=‘¿>#¿>F¿>N¿>¿>Ò¿?¿?l¿?¿¿?‚¿@,¿@b¿@è¿@›¿@È¿A¿A¿A¿Aq¿Aô¿AÓ¿BX¿Bo¿Bz¿BÇ¿Bà¿Bâ¿B¨¿B≠¿B“¿Bı¿C¿C=¿Co¿C¥¿C˙¿D!¿D6¿DÅ¿Dä¿D¥¿D‡¿E¿Ec¿El¿Ey¿Eæ¿F¿F1¿FI¿Fu¿Fü¿F◊¿FÏ¿G7¿G@¿Gg¿G≈¿GË¿G¿Gˆ¿H¿H.¿H2¿H3¿H°¿I ¿I5¿Iy¿I£¿Iµ¿IΩ¿J¿J6¿J>¿Ja¿Jî¿J·¿K+¿KQ¿K~¿Kà¿Kê¿Kñ¿Kﬂ¿L ¿L¿L
¿L¿LD¿LJ¿Lö¿L„¿Lı¿L˚¿M4¿Mx¿M∏¿M‘¿Mÿ¿MŸ¿N¿N¿NJ¿Nõ¿NÂ¿O5¿O`¿Of¿O≤¿O ¿O–¿P¿Ph¿Pô¿P∑¿Pœ¿PÚ¿Q¿Q¿Q>¿Q∑¿R¿R¿R¿R+¿R,¿R}¿Râ¿R“¿R”¿R‘¿RÂ¿RÊ¿S4¿S|¿Sî¿Sô¿Sÿ¿T$¿T9¿Tâ¿Tÿ¿U&¿US¿Ué¿Uï¿Uö¿UÎ¿V¿V ¿V!¿VL¿VX¿Vs¿Vü¿V∏¿V‘¿VÛ¿W
¿W¿WV¿Wm¿Wî¿W‘¿Wˆ¿X¿X¿XF¿XN¿Xh¿Xã¿Xì¿X¨¿XŒ¿X÷¿Xˇ¿Y3¿Y;¿YR¿Yq¿Yy¿Y¿Yí¿Yñ¿Yó¿Y£¿Y˛¿Yˇ¿Z<¿ZÑ¿Z´¿Z∑¿Zœ¿ZÓ¿[¿[G¿[N¿[ë¿[π¿[Á¿\¿\¿\¿\¿\Z¿\â¿\è¿\⁄¿]¿]"¿]=¿]W¿]ç¿]î¿]ˇ¿^¿^¿^¿^¿^b¿^ç¿^˙¿_w¿`¿`á¿`Ê¿aP¿a∫¿a€¿b¿bb¿b∏¿b¿¿cH¿cL¿cM¿cY¿c°¿c¢¿cÛ¿d¿d
¿dU¿dô¿dü¿dÔ¿e.¿e{¿e∆¿f¿f+¿f1¿f|¿fæ¿fƒ¿f‘¿f⁄¿g&¿g_¿gu¿gì¿g£¿g ¿gÈ¿g¿h¿h.¿hV¿hj¿hÜ¿hú¿h•¿h´¿hØ¿h∞¿i¿i¿i¿im¿iº¿iÍ¿i¿j@¿jç¿j˛¿k6¿k:¿k<¿k=¿kr¿kv¿k∑¿k˜¿k˚¿l@¿lj¿lΩ¿læ¿m¿m4¿m:¿mi¿mo¿mä¿m∫¿m ¿mÎ¿n#¿n;¿nå¿nø¿nÃ¿nË¿o4¿o¿o—¿p"¿p/¿pH¿pp¿p¿¿p⁄¿q¿q¿q7¿q_¿q≤¿q–¿q¿r'¿r4¿r@¿rH¿r[¿re¿rv¿rz¿r{¿rê¿r∏¿r⁄¿r˙¿s¿s.¿s4¿sH¿sb¿s}¿sÉ¿sá¿sà¿sî¿sπ¿s“¿sÌ¿sÒ¿sÚ¿s˛¿t¿t$¿t:¿t>¿t?¿tK¿tf¿tÄ¿tù¿t£¿tß¿t®¿t¥¿tË¿u¿u¿u ¿u$¿u%¿u1¿uc¿u–¿u‘¿u÷¿u◊¿v¿v¿vd¿v•¿v·¿w¿w\¿wì¿w±¿w‰¿w˛¿wˇ¿x!¿x-¿x?¿x®¿y¿y!¿y%¿y'¿y(¿yf¿yj¿yª¿y—¿y’¿z(¿z>¿zB¿zë¿z›¿{¿{`¿{d¿{∑¿|	¿|¿|¿|Ñ¿|à¿|ñ¿|ö¿|„¿}¿}ì¿}‰¿~.¿~d¿~ú¿~Ã¿	¿¿+¿/¿|¿∆¿¯¿Ä,¿ÄX¿Äï¿Äõ¿Ä∑¿Äª¿Äº¿Ä”¿ÄÒ¿Å¿Å¿Åh¿Åç¿Åì¿Å¬¿Å»¿Å„¿Ç¿Ç#¿ÇD¿Ç|¿Çî¿ÇÂ¿É¿É%¿ÉA¿Éç¿Éÿ¿Ñ*¿Ñ{¿Ñà¿Ñ°¿Ñ…¿Ö¿Ö3¿Öj¿Öw¿Öê¿Ö∏¿Ü¿Ü)¿ÜI¿ÜÄ¿Üç¿Üô¿Ü°¿Ü¥¿Üæ¿Üœ¿Ü”¿Ü‘¿ÜÓ¿á¿áL¿áú¿áÕ¿à¿à¿à5¿àN¿ày¿à™¿àÀ¿â+¿âa¿âi¿âÑ¿â†¿â≠¿â–¿âÚ¿ä=¿äÉ¿ä’¿ã¿ãX¿ã}¿ãÆ¿ã€¿ã˜¿å¿åP¿å¿å¬¿åÛ¿ç"¿ç†¿é¿éR¿éé¿éƒ¿éÃ¿é“¿é÷¿é◊¿è&¿è,¿è|¿èÆ¿èÂ¿ê2¿ê±¿ë ¿ë"¿ëC¿ëZ¿ëâ¿ëç¿ëé¿ë–¿ëÓ¿í¿í¿í¿íc¿íé¿í™¿íÆ¿íØ¿íﬁ¿ì.¿ìw¿ìª¿ìŸ¿î¿î0¿îa¿în¿îÍ¿ï:¿ï@¿ïo¿ïí¿ï∆¿ï”¿ñG¿ñõ¿ñ°¿ñÕ¿ñı¿ó¿ó¿ó¿ó=¿óC¿ó}¿óû¿óø¿ó’¿óŸ¿ó⁄¿ò ¿ò&¿ò\¿òq¿òï¿ò±¿ô¿ô>¿ôl¿ôñ¿ôÆ¿ô¬¿ô»¿ô‡¿ô˜¿ö¿ö¿ö¿ö[¿öa¿ö∞¿õ¿õ6¿õk¿õÜ¿õ°¿õΩ¿õﬂ¿ú/¿úc¿úq¿úw¿úò¿ú«¿úﬁ¿ú‚¿ú„¿úÔ¿ù¿ù-¿ùQ¿ùm¿ùà¿ù⁄¿û¿û¿û¿û¿û¿û.¿ûB¿ûf¿ûÇ¿ûò¿ûÍ¿ü¿ü¿ü¿ü ¿ü,¿üG¿ük¿üá¿ü¢¿üÙ¿†¿†%¿†)¿†*¿†6¿†j¿†é¿†™¿†¿¿°¿°=¿°C¿°G¿°H¿°q¿°ù¿°û¿°∆¿°¿°Ò¿¢4¿¢`¿¢Ç¿¢“¿¢˛¿£¿£¿£A¿£l¿£é¿£ﬁ¿§¿§
¿§¿§¿§I¿§â¿§ß¿§Ã¿§·¿§ˆ¿•;¿•]¿•n¿•x¿•å¿•‡¿¶¿¶¿¶¿¶1¿¶5¿¶7¿¶8¿¶à¿¶°¿¶•¿¶Ú¿ßA¿ßf¿ß°¿ß¢¿ß‚¿ßË¿®)¿®l¿®º¿©¿©¿©X¿©w¿©}¿©Õ¿©Ï¿©˘¿™
¿™*¿™A¿™E¿™F¿™~¿™§¿™∞¿™˜¿´^¿´¢¿´©¿´‹¿´Í¿´¿¨$¿¨o¿¨¶¿¨›¿¨Î¿≠¿≠}¿≠Ü¿≠ú¿≠º¿≠ƒ¿≠Ã¿≠–¿≠—¿≠›¿Æ¿Æ¿Æh¿Æ∂¿Ø¿Ø<¿Øé¿Øí¿Øì¿Øü¿Ø±¿ØÁ¿∞<¿∞P¿∞T¿∞V¿∞W¿∞§¿∞∞¿∞¥¿∞◊¿±(¿±G¿±ô¿±Â¿≤	¿≤ ¿≤T¿≤Z¿≤[¿≤õ¿≤›¿≤ﬁ¿≥%¿≥v¿≥|¿≥å¿≥í¿≥‡¿¥¿¥M¿¥N¿¥õ¿¥‹¿µ¿µ¿µ¿µh¿µõ¿µü¿µË¿∂¿∂L¿∂l¿∂°¿∂«¿∂Õ¿∂Œ¿∑¿∑¿∑!¿∑d¿∑å¿∑ê¿∑ë¿∑ù¿∑ˇ¿∏¿∏¿∏P¿∏ò¿∏ú¿∏Ì¿π>¿πl¿π∂¿πÿ¿π˘¿∫.¿∫]¿∫^¿∫¨¿∫≈¿∫˜¿∫¯¿ª#¿ª$¿ªR¿ªX¿ªh¿ªn¿ªΩ¿ªÒ¿º<¿ºl¿º∑¿ºÁ¿Ω ¿Ω,¿ΩT¿Ω}¿Ω¶¿Ω’¿Ω€¿Ω‹¿æ*¿æn¿æî¿æï¿æ‡¿æ˜¿æ˝¿øK¿øÖ¿øû¿øü¿ø»¿øŒ¿¿¿¿h¿¿°¿¿ß¿¿Ò¿¡4¿¡@¿¡Ç¿¡É¿¡”¿¡Í¿¬¿¬¿¬(¿¬ç¿¬é¿¬µ¿¬∂¿¬¯¿¬˛¿√¿√L¿√i¿√î¿√∏¿√º¿√Ω¿ƒ ¿ƒ¿ƒM¿ƒå¿ƒ®¿ƒÆ¿ƒ˜¿≈4¿≈`¿≈Ç¿≈Ü¿≈à¿≈â¿≈⁄¿≈Ú¿≈ˆ¿∆E¿∆U¿∆ö¿∆µ¿∆œ¿«¿«
¿«¿«¿«0¿«S¿«r¿«õ¿«ƒ¿«Û¿«˙¿»=¿»j¿»ì¿»ª¿»„¿»‰¿…¿…9¿…d¿…k¿…ù¿…Á¿ ¿ G¿ H¿ n¿ o¿ ´¿ Ò¿À¿À8¿Àr¿À§¿À∆¿À‡¿Ã¿Ã¿Ã¿Ã`¿ÃÇ¿ÃÃ¿ÃÕ¿Õ¿Õf¿Õ∑¿Œ¿Œ¿ŒD¿ŒZ¿Œ^¿Œ_¿Œk¿Œô¿Œö¿Œı¿Œˆ¿œ¿œ¿œJ¿œN¿œO¿œ[¿œû¿œø¿œ√¿œ≈¿œ∆¿–¿–[¿–_¿–≤¿–Ï¿—7¿—X¿—r¿—å¿—√¿—ƒ¿—–¿“¿“K¿“O¿“P¿“\¿“u¿“°¿“…¿“Ú¿”¿”J¿”Q¿”ù¿”∫¿”æ¿”ø¿”À¿”Ú¿”Û¿”ˇ¿‘¿‘%¿‘2¿‘]¿‘™¿‘…¿‘–¿‘‘¿‘÷¿‘◊¿’$¿’H¿’L¿’î¿’‚¿÷¿÷¿÷R¿÷°¿÷Ô¿◊@¿◊å¿◊«¿◊À¿ÿ¿ÿd¿ÿ¨¿ÿ¡¿Ÿ¿Ÿ-¿ŸP¿Ÿt¿Ÿ†¿ŸÎ¿⁄¿⁄:¿⁄k¿⁄ñ¿⁄∞¿⁄Ó¿€¿€;¿€A¿€E¿€F¿€e¿€á¿€©¿€ ¿€À¿‹¿‹¿‹†¿‹Û¿›¿›$¿›?¿›l¿›º¿ﬁ¿ﬁW¿ﬁj¿ﬁ°¿ﬁº¿ﬂ ¿ﬂ'¿ﬂì¿ﬂ…¿ﬂ˜¿‡-¿‡i¿‡∂¿‡Õ¿·)¿·g¿·ù¿·´¿‚¿‚+¿‚L¿‚_¿‚ñ¿‚¢¿‚÷¿„@¿„m¿„ï¿„™¿„Ô¿„˝¿‰	¿‰9¿‰ü¿‰»¿‰Ï¿Â¿Â>¿ÂL¿ÂX¿Âï¿Â‘¿Â‡¿ÂÍ¿ÂÚ¿Ê9¿Ên¿Ê∞¿ÊÚ¿Ê¸¿Á#¿Á0¿ÁH¿Á`¿Á≤¿ÁÍ¿Ë¿Ëa¿Ëä¿Ë∏¿Ëƒ¿ËŒ¿Ë˛¿È¿È ¿È&¿È*¿È+¿ÈÜ¿Èá¿Èì¿È¨¿Èœ¿ÈÓ¿Í¿Í@¿Ío¿Ív¿Í•¿ÍÒ¿ÎK¿Îì¿Îô¿Î±¿Î–¿ÎÒ¿Î˘¿Ï¿Ï4¿ÏQ¿Ïg¿ÏÅ¿Ïä¿Ï€¿Ì!¿ÌY¿Ìß¿Ìı¿Ó+¿ÓQ¿ÓÑ¿ÓŒ¿Ó¸¿Ô¿Ô¿ÔR¿Ôt¿Ô∞¿Ô‰¿2¿Å¿–¿Ò¿Ò2¿ÒX¿Òc¿Òk¿Òy¿Ò¿ÒÄ¿Òƒ¿Ò¸¿Ú,¿Ú3¿Ú4¿Úv¿Ú¥¿Ú∫¿Úª¿Û¿Û6¿Ûd¿ÛÖ¿ÛÜ¿Û∫¿Û‡¿Ù¿Ù1¿Ù7¿Ù8¿ÙT¿Ùx¿ÙÉ¿Ù¢¿ÙÀ¿ı
¿ıB¿ız¿ıù¿ıæ¿ı∆¿ıÃ¿ˆ¿ˆ ¿ˆD¿ˆd¿ˆx¿ˆê¿ˆó¿ˆÊ¿˜¿˜h¿˜¥¿˜Ë¿¯¿¯=¿¯Ö¿¯±¿¯ª¿¯√¿˘
¿˘*¿˘i¿˘†¿˘¬¿˘‹¿˙¿˙¿˙<¿˙B¿˙C¿˙i¿˙•¿˙≤¿˚¿˚¿˚¿˚d¿˚†¿˚Ú¿¸D¿¸t¿¸°¿¸≥¿¸ÿ¿˝¿˝6¿˝e¿˝ö¿˝¢¿˝®¿˝…¿˝„¿˝Á¿˝Ë¿˛¿˛F¿˛n¿˛u¿˛ï¿ˇ'¿ˇ5¿ˇ9¿ˇ:¿ˇF¿ˇm¿ˇñ¿ˇö¿ˇõ¿ˇß¿ˇÍ¿ 0¿ O¿ t¿ Ü¿ é¿ Ø¿ ◊¿ ›¿ ·¿ ‚¿ Ó¿¿5¿É¿Ã¿Á¿¿7¿=¿A¿B¿e¿É¿£¿√¿…¿Õ¿Œ¿Í¿Î¿˜¿¿)¿-¿.¿l¿n¿o¿∑¿ª¿	¿A¿\¿]¿•¿´¿˙¿G¿ò¿Ë¿ˇ¿+¿S¿~¿Ö¿“¿÷¿◊¿Ô¿¿&¿9¿:¿e¿å¿ç¿∆¿˚¿¸¿1¿^¿_¿Ö¿ü¿†¿˜¿˝¿	¿	¿	x¿	‡¿
P¿
r¿
s¿
ò¿
 ¿
Ù¿6¿j¿ü¿¿¿S¿π¿»¿6¿>¿í¿Ò¿K¿ù¿£¿§¿‘¿I¿k¿™¿Â¿¿¿$¿*¿.¿/¿e¿j¿π¿–¿’¿$¿n¿±¿≤¿‡¿¿7¿J¿P¿~¿ñ¿ú¿⁄¿ﬁ¿ﬂ¿/¿~¿ª¿¿¿˙¿+¿F¿^¿u¿î¿ö¿∆¿˚¿(¿h¿ü¿º¿¬¿ˆ¿2¿6¿7¿j¿¿è¿ï¿™¿∫¿¿¿€¿ﬂ¿‡¿3¿~¿õ¿µ¿Ê¿Í¿Î¿6¿Ä¿ô¿ü¿È¿+¿1¿A¿G¿ñ¿¿¿ﬁ¿‡¿·¿5¿9¿ê¿‡¿Û¿7¿Ç¿•¿Õ¿⁄¿Ú¿¿(¿1¿3    Ä•Ä∫ÄºÄ–Ä“  ÄÂ  Å  Å8  Å`  Åà  Å±  Å€  Å  Ç  ÇÇHÉ@ÉBÉiÉâÉã  É¥ÇiÖrÅ∑/// Base class for data associated with a [RenderObject] by its parent.
///
/// Some render objects wish to store data on their children, such as the
/// children's input parameters to the parent's layout algorithm or the
/// children's position relative to other children.
///
/// See also:
///
///  * [RenderObject.setupParentData], which [RenderObject] subclasses may
///    override to attach specific types of parent data to children.    ÖÅlÖ·:/// Called when the RenderObject is removed from the tree.  ÖæÖøÖÀÖÃÖÒ*Ü   ÖÒÖÚ áâ¿ e_äÄÇ/// A place to paint.
///
/// Rather than holding a canvas directly, [RenderObject]s paint using a painting
/// context. The painting context has a [Canvas], which receives the
/// individual draw operations, and also has functions for painting child
/// render objects.
///
/// When painting a child render object, the canvas held by the painting context
/// can change because the draw operations issued before and after painting the
/// child might be recorded in separate compositing layers. For this reason, do
/// not hold a reference to the canvas across operations that might paint
/// child render objects.
///
/// New [PaintingContext] objects are created automatically when using
/// [PaintingContext.repaintCompositedChild] and [pushLayer]. ä©Ä– ã=ãL~/// Creates a painting context.
///
/// Typically only called by [PaintingContext.repaintCompositedChild]
/// and [pushLayer].ãMãS  ãcãi  ã0ã1ã}$ãí  ã¶ÅAåÿÅ/// An estimate of the bounds within which the painting context's [canvas]
/// will record painting commands. This can be useful for debugging.
///
/// The canvas will allow painting outside these bounds.
///
/// The [estimatedBounds] rectangle is in the [canvas] coordinate system. ¨¨  ¨%¨9  ¨F¨N  ™_Åé™h    ¨ZÅr≠NÄ“/// The canvas on which to paint.
///
/// The current canvas can change whenever you paint a child using this
/// context, which means it's fragile to hold a reference to the canvas
/// returned by this getter.  ≠7≠8åÏÇ™é∑Å®/// Repaint the given render object.
///
/// The render object must be attached to a [PipelineOwner], must have a
/// composited layer, and must be in need of painting. The render object's
/// layer, if any, is re-used, along with any layers in the subtree that don't
/// need to be repainted.
///
/// See also:
///
///  * [RenderObject.isRepaintBoundary], which determines if a [RenderObject]
///    has a composited layer. éŒé‹  é‰#éÍ  èèöâ-è¶  è√è—  è›#è„  êê  è˚òÀÖzöŸÅÎ/// Update the composited layer of [child] without repainting its children.
///
/// The render object must be attached to a [PipelineOwner], must have a
/// composited layer, and must be in need of a composited layer update but
/// not in need of painting. The render object's layer is re-used, and none
/// of its children are repaint or their layers updated.
///
/// See also:
///
///  * [RenderObject.isRepaintBoundary], which determines if a [RenderObject]
///    has a composited layer. öÔö˝   ûIÇ¡ü©ÅC/// In debug mode, repaint the given render object using a custom painting
/// context that can record the results of the painting operation in addition
/// to performing the regular paint of the child.
///
/// See also:
///
///  * [repaintCompositedChild], for repainting a composited child without
///    instrumentation. ü‘ü‚  üÓ#üÙ  †&†1  †°Éó¢*Å/// Paint a child [RenderObject].
///
/// If the child has its own composited layer, the child will be composited
/// into the layer subtree associated with this painting context. Otherwise,
/// the child will be painted into the current PictureLayer for this context. ¢5¢C  ¢I¢Q   §©É©§Æ  §æ§Ã  §“§⁄   ®VÇ©ÎÅp/// Adds a layer to the recording requiring that the recording is already
/// stopped.
///
/// Do not call this function directly: call [addLayer] or [pushLayer]
/// instead. This function is called internally when all layers not
/// generated from the [canvas] are added.
///
/// Subclasses that need to customize how layers are added should override
/// this method. ©˜©˛  ©Ÿ©⁄≠–Äﬁ≠’    Æ≤Çì∞ŒÅˆ/// Adds a [CompositionCallback] for the current [ContainerLayer] used by this
/// context.
///
/// Composition callbacks are called whenever the layer tree containing the
/// current layer of this painting context gets composited, or when it gets
/// detached and will not be rendered again. This happens regardless of
/// whether the layer is added via retained rendering or not.
///
/// {@macro flutter.rendering.Layer.compositionCallbacks}
///
/// See also:
///   *  [Layer.addCompositionCallback]. ∞Â∞˙   ±IÖ≥VÅ’/// Stop recording to a canvas if recording has started.
///
/// Do not call this function directly: functions in this class will call
/// this method as needed. This function is called internally to ensure that
/// recording is stopped before adding layers or finalizing the results of a
/// paint.
///
/// Subclasses that need to customize how recording to a canvas is performed
/// should override this method to save the results of the custom canvas
/// recordings.  ≥3≥4≥@≥A∂ZÅW∑pÅ/// Hints that the painting in the current layer is complex and would benefit
/// from caching.
///
/// If this hint is not set, the compositor will apply its own heuristics to
/// decide whether the current layer is complex enough to benefit from
/// caching.   ∑µÅππ+Åd/// Hints that the painting in the current layer is likely to change next frame.
///
/// This hint tells the compositor not to cache the current layer because the
/// cache will not be used in the future. If this hint is not set, the
/// compositor will apply its own heuristics to decide whether the current
/// layer is likely to be reused in the future.   πrÇŒªÇ\/// Adds a composited leaf layer to the recording.
///
/// After calling this function, the [canvas] property will change to refer to
/// a new [Canvas] that draws on top of the given layer.
///
/// A [RenderObject] that uses this function is very likely to require its
/// [RenderObject.alwaysNeedsCompositing] property to return true. That informs
/// ancestor render objects that this render object will include a composited
/// layer, which, for example, causes them to use composited clips.
///
/// See also:
///
///  * [pushLayer], for adding a layer and painting further contents within
///    it. ª˘º    ºDá˝¿ AËÖh/// Appends the given layer to the recording, and calls the `painter` callback
/// with that layer, providing the `childPaintBounds` as the estimated paint
/// bounds of the child. The `childPaintBounds` can be used for debugging but
/// have no effect on painting.
///
/// The given layer must be an unattached orphan. (Providing a newly created
/// object, rather than reusing an existing layer, satisfies that
/// requirement.)
///
/// {@template flutter.rendering.PaintingContext.pushLayer.offset}
/// The `offset` is the offset to pass to the `painter`. In particular, it is
/// not an offset applied to the layer itself. Layers conceptually by default
/// have no position or size, though they can transform their contents. For
/// example, an [OffsetLayer] applies an offset to its children.
/// {@endtemplate}
///
/// If the `childPaintBounds` are not specified then the current layer's paint
/// bounds are used. This is appropriate if the child layer does not apply any
/// transformation or clipping to its contents. The `childPaintBounds`, if
/// specified, must be in the coordinate system of the new layer (i.e. as seen
/// by its children after it applies whatever transform to its contents), and
/// should not go outside the current layer's paint bounds.
///
/// See also:
///
///  * [addLayer], for pushing a layer without painting further contents
///    within it. ¿ AÚ¿ B  ¿ B¿ B&  ¿ B.¿ B6  ¿ B?¿ BF   ¿ DEÅ!¿ DˆÄç/// Creates a painting context configured to paint into [childLayer].
///
/// The `bounds` are estimated paint bounds for debugging purposes. ¿ E	¿ E  ¿ E$¿ E*  ¿ DŸ¿ D⁄¿ Ejäü¿ M4áp/// Clip further painting using a rectangle.
///
/// {@template flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
/// The `needsCompositing` argument specifies whether the child needs
/// compositing. Typically this matches the value of
/// [RenderObject.needsCompositing] for the caller. If false, this method
/// returns null, indicating that a layer is no longer necessary. If a render
/// object calling this method stores the `oldLayer` in its
/// [RenderObject.layer] field, it should set that field to null.
///
/// When `needsCompositing` is false, this method will use a more efficient
/// way to apply the layer effect than actually creating a layer.
/// {@endtemplate}
///
/// {@template flutter.rendering.PaintingContext.pushClipRect.offset}
/// The `offset` argument is the offset from the origin of the canvas'
/// coordinate system to the origin of the caller's coordinate system.
/// {@endtemplate}
///
/// The `clipRect` is the rectangle (in the caller's coordinate system) to use
/// to clip the painting done by [painter]. It should not include the
/// `offset`.
///
/// The `painter` callback will be called while the `clipRect` is applied. It
/// is called synchronously during the call to [pushClipRect].
///
/// The `clipBehavior` argument controls how the rectangle is clipped.
///
/// {@template flutter.rendering.PaintingContext.pushClipRect.oldLayer}
/// For the `oldLayer` argument, specify the layer created in the previous
/// frame. This gives the engine more information for performance
/// optimizations. Typically this is the value of [RenderObject.layer] that a
/// render object creates once, then reuses for all subsequent frames until a
/// layer is no longer needed (e.g. the render object no longer needs
/// compositing) or until the render object changes the type of the layer
/// (e.g. from opacity layer to a clip rect layer).
/// {@endtemplate} ¿ MA¿ MG  ¿ MX¿ M`  ¿ Mg¿ Mm  ¿ Mv¿ Mè  ¿ Mô!¿ Mü  ¿ Mº¿ MÃ  ¿ M≠¿ M±¿ M≤¿ PÜ•¿ SíÉN/// Clip further painting using a rounded rectangle.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.offset}
///
/// The `bounds` argument is used to specify the region of the canvas (in the
/// caller's coordinate system) into which `painter` will paint.
///
/// The `clipRRect` argument specifies the rounded-rectangle (in the caller's
/// coordinate system) to use to clip the painting done by `painter`. It
/// should not include the `offset`.
///
/// The `painter` callback will be called while the `clipRRect` is applied. It
/// is called synchronously during the call to [pushClipRRect].
///
/// The `clipBehavior` argument controls how the rounded rectangle is clipped.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer} ¿ S†¿ S¶  ¿ S∑¿ Sø  ¿ S∆¿ SÃ  ¿ S”¿ S⁄  ¿ S‰¿ S˝  ¿ T"¿ T  ¿ T+¿ T<  ¿ T¿ T¿ T ¿ V∂Üo¿ ZÉ&/// Clip further painting using a path.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.offset}
///
/// The `bounds` argument is used to specify the region of the canvas (in the
/// caller's coordinate system) into which `painter` will paint.
///
/// The `clipPath` argument specifies the [Path] (in the caller's coordinate
/// system) to use to clip the painting done by `painter`. It should not
/// include the `offset`.
///
/// The `painter` callback will be called while the `clipPath` is applied. It
/// is called synchronously during the call to [pushClipPath].
///
/// The `clipBehavior` argument controls how the path is clipped.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer} ¿ Z¿ Z%  ¿ Z6¿ Z>  ¿ ZE¿ ZK  ¿ ZR¿ ZX  ¿ Za¿ Zz  ¿ ZÑ"¿ Zä  ¿ Z®¿ Z∏  ¿ Zò¿ Zú¿ Zù¿ ])ÑL¿ `VÇ˚/// Blend further painting with a color filter.
///
/// {@macro flutter.rendering.PaintingContext.pushLayer.offset}
///
/// The `colorFilter` argument is the [ColorFilter] value to use when blending
/// the painting done by `painter`.
///
/// The `painter` callback will be called while the `colorFilter` is applied.
/// It is called synchronously during the call to [pushColorFilter].
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer}
///
/// A [RenderObject] that uses this function is very likely to require its
/// [RenderObject.alwaysNeedsCompositing] property to return true. That informs
/// ancestor render objects that this render object will include a composited
/// layer, which, for example, causes them to use composited clips. ¿ `f¿ `n  ¿ `u¿ `Ç  ¿ `é¿ `ß  ¿ `±¿ `ƒ   ¿ ayÖÓ¿ dNÇ¶/// Transform further painting using a matrix.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
///
/// The `offset` argument is the offset to pass to `painter` and the offset to
/// the origin used by `transform`.
///
/// The `transform` argument is the [Matrix4] with which to transform the
/// coordinate system while calling `painter`. It should not include `offset`.
/// It is applied effectively after applying `offset`.
///
/// The `painter` callback will be called while the `transform` is applied. It
/// is called synchronously during the call to [pushTransform].
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer} ¿ d\¿ db  ¿ ds¿ d{  ¿ dÇ¿ dã  ¿ dï¿ dÆ  ¿ d∏¿ d…   ¿ gkÑ‚¿ k3Éñ/// Blend further painting with an alpha value.
///
/// The `offset` argument indicates an offset to apply to all the children
/// (the rendering created by `painter`).
///
/// The `alpha` argument is the alpha value to use when blending the painting
/// done by `painter`. An alpha value of 0 means the painting is fully
/// transparent and an alpha value of 255 means the painting is fully opaque.
///
/// The `painter` callback will be called while the `alpha` is applied. It
/// is called synchronously during the call to [pushOpacity].
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer}
///
/// A [RenderObject] that uses this function is very likely to require its
/// [RenderObject.alwaysNeedsCompositing] property to return true. That informs
/// ancestor render objects that this render object will include a composited
/// layer, which, for example, causes them to use composited clips. ¿ k?¿ kG  ¿ kN	¿ kS  ¿ kY¿ kr  ¿ k|¿ kã   ¿ lQÄï¿ ld   ¿ lQ¿ lR ¿ lÍêT¿ v·â‹/// An abstract set of layout constraints.
///
/// Concrete layout models (such as box) will create concrete subclasses to
/// communicate layout constraints between parents and children.
///
/// ## Writing a Constraints subclass
///
/// When creating a new [RenderObject] subclass with a new layout protocol, one
/// will usually need to create a new [Constraints] subclass to express the
/// input to the layout algorithms.
///
/// A [Constraints] subclass should be immutable (all fields final). There are
/// several members to implement, in addition to whatever fields, constructors,
/// and helper methods one may find useful for a particular layout protocol:
///
/// * The [isTight] getter, which should return true if the object represents a
///   case where the [RenderObject] class has no choice for how to lay itself
///   out. For example, [BoxConstraints] returns true for [isTight] when both
///   the minimum and maximum widths and the minimum and maximum heights are
///   equal.
///
/// * The [isNormalized] getter, which should return true if the object
///   represents its data in its canonical form. Sometimes, it is possible for
///   fields to be redundant with each other, such that several different
///   representations have the same implications. For example, a
///   [BoxConstraints] instance with its minimum width greater than its maximum
///   width is equivalent to one where the maximum width is set to that minimum
///   width (`2<w<1` is equivalent to `2<w<2`, since minimum constraints have
///   priority). This getter is used by the default implementation of
///   [debugAssertIsValid].
///
/// * The [debugAssertIsValid] method, which should assert if there's anything
///   wrong with the constraints object. (We use this approach rather than
///   asserting in constructors so that our constructors can be `const` and so
///   that it is possible to create invalid constraints temporarily while
///   building valid ones.) See the implementation of
///   [BoxConstraints.debugAssertIsValid] for an example of the detailed checks
///   that can be made.
///
/// * The [==] operator and the [hashCode] getter, so that constraints can be
///   compared for equality. If a render object is given constraints that are
///   equal, then the rendering library will avoid laying the object out again
///   if it is not dirty.
///
/// * The [toString] method, which should describe the constraints so that they
///   appear in a usefully readable form in the output of [debugDumpRenderTree]. ¿ vÒÄ≠ ¿ wê¿ wõÄî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.   ¿ w¢[¿ wıG/// Whether there is exactly one size possible given these constraints.   ¿ xX¿ xL?/// Whether the constraint is expressed in a consistent manner.   ¿ x]Ñﬂ¿ |îÑ/// Asserts that the constraints are valid.
///
/// This might involve checks more detailed than [isNormalized].
///
/// For example, the [BoxConstraints] subclass verifies that the constraints
/// are not [double.nan].
///
/// If the `isAppliedConstraint` argument is true, then even stricter rules
/// are enforced. This argument is set to true when checking constraints that
/// are about to be applied to a [RenderObject] during layout, as opposed to
/// constraints that may be further affected by other constraints. For
/// example, the asserts for verifying the validity of
/// [RenderConstrainedBox.additionalConstraints] do not set this argument, but
/// the asserts for verifying the argument passed to the [RenderObject.layout]
/// method do.
///
/// The `informationCollector` argument takes an optional callback which is
/// called when an exception is to be thrown. The collected information is
/// then included in the message after the error line.
///
/// Returns the same as [isNormalized] if asserts are disabled. ¿ |≠ ¿ |≥  ¿ |”*¿ |Í  ¿ |»¿ v«¿ v»¿ Ç¿   ¿ KÄØ¿ `¿ a¿ b ¿ c¿ r  ¿ x¿ ~  ¿ ñ¿ è¿ ò¿ ˛¿ Ä  ¿ Äf¿ Ä{G/// The callback that will be notified when the semantics tree updates.  ¿ ÄàÄ£¿ Äô   ¿ Äà¿ Äâ ¿ Å/¿ U9¿ ãﬂä©/// The pipeline owner manages the rendering pipeline.
///
/// The pipeline owner provides an interface for driving the rendering pipeline
/// and stores the state about which render objects have requested to be visited
/// in each stage of the pipeline. To flush the pipeline, call the following
/// functions in order:
///
/// 1. [flushLayout] updates any render objects that need to compute their
///    layout. During this phase, the size and position of each render
///    object is calculated. Render objects might dirty their painting or
///    compositing state during this phase.
/// 2. [flushCompositingBits] updates any render objects that have dirty
///    compositing bits. During this phase, each render object learns whether
///    any of its children require compositing. This information is used during
///    the painting phase when selecting how to implement visual effects such as
///    clipping. If a render object has a composited child, it needs to use a
///    [Layer] to create the clip in order for the clip to apply to the
///    composited child (which will be painted into its own [Layer]).
/// 3. [flushPaint] visits any render objects that need to paint. During this
///    phase, render objects get a chance to record painting commands into
///    [PictureLayer]s and construct other composited [Layer]s.
/// 4. Finally, if semantics are enabled, [flushSemantics] will compile the
///    semantics for the render objects. This semantic information is used by
///    assistive technology to improve the accessibility of the render tree.
///
/// The [RendererBinding] holds the pipeline owner for the render objects that
/// are visible on screen. You can create other pipeline owners to manage
/// off-screen objects, which can flush their pipelines independently of the
/// on-screen render objects.
///
/// [PipelineOwner]s can be organized in a tree to manage multiple render trees,
/// where each [PipelineOwner] is responsible for one of the render trees. To
/// build or modify the tree, call [adoptChild] or [dropChild]. During each of
/// the different flush phases described above, a [PipelineOwner] will first
/// perform the phase on the nodes it manages in its own render tree before
/// calling the same flush method on its children. No assumption must be made
/// about the order in which child [PipelineOwner]s are flushed.
///
/// A [PipelineOwner] may also be [attach]ed to a [PipelineManifold], which
/// gives it access to platform functionality usually exposed by the bindings
/// without tying it to a specific binding implementation. All [PipelineOwner]s
/// in a given tree must be attached to the same [PipelineManifold]. This
/// happens automatically during [adoptChild]. ¿ ãÒÅy ¿ å◊¿ å‰Ä€/// Creates a pipeline owner.
///
/// Typically created by the binding (e.g., [RendererBinding]), but can be
/// created separately from the binding to drive off-screen render objects
/// through the rendering pipeline.¿ åÎ¿ åÒ  ¿ ç¿ ç  ¿ ç*¿ ç0  ¿ çF¿ çL   ¿ çnÇç¿ èÈÇP/// Called when a render object associated with this pipeline owner wishes to
/// update its visual appearance.
///
/// Typical implementations of this function will schedule a task to flush the
/// various stages of the pipeline. This function might be called multiple
/// times in quick succession. Implementations should take care to discard
/// duplicate calls quickly.
///
/// When the [PipelineOwner] is attached to a [PipelineManifold] and
/// [onNeedVisualUpdate] is provided, the [onNeedVisualUpdate] callback is
/// invoked instead of calling [PipelineManifold.requestVisualUpdate]. ¿ ê Ä’¿ êæÄ°/// Called whenever this pipeline owner creates a semantics object.
///
/// Typical implementations will schedule the creation of the initial
/// semantics tree. ¿ ê⁄Å¿ ëÿÄ÷/// Called whenever this pipeline owner's semantics owner emits a [SemanticsUpdate].
///
/// Typical implementations will delegate the [SemanticsUpdate] to a [FlutterView]
/// that can handle the [SemanticsUpdate]. ¿ ëÓÄª¿ íëÄà/// Called whenever this pipeline owner disposes its semantics owner.
///
/// Typical implementations will tear down the semantics tree. ¿ îÉ¿ îë  ¿ òw#¿ ò| ¿ òï¿ òû9¿ ò± ¿ ò’¿ ò÷¿ ò«¿ ò‘¿ ò»¿ ô˜¿ ô¸ ¿ ö¿ ö#¿ ö ¿ ö7¿ •"0¿ •' ¿ •M¿ ßUN¿ ßn ¿ ß°¿ ß¢¿ ßì¿ ß†¿ ßî¿ ´68¿ ´I ¿ ´l¿ ´m¿ ´^¿ ´k¿ ´_¿ ¨ä¿ ¨è ¿ ¨¢¿ ∑»¿ ∑ÿ  ¿ ∏ˇ$¿ π ¿ π"¿ ¿S!¿ ¿X ¿ ¿o¿ ¿xA¿ ¿ê ¿ ¿∑¿ ¿∏¿ ¿©¿ ¿∂¿ ¿™¿ «	6¿ «" ¿ «=¿ «>¿ «.¿ «<¿ «/¿ «C¿ «U  ¿ «c¿ «r  ¿ îm¿ îjB/// The unique object managed by this pipeline that has no parent.   ¿ îûÄ¶¿ î¢  ¿ î´¿ î∫   ¿ ò‹Å¿ ôŒÄ‹/// Whether this pipeline is currently in the layout phase.
///
/// Specifically, whether [flushLayout] is currently running.
///
/// Only valid when asserts are enabled; in release builds, this
/// always returns false.   ¿ ´sÅ¿ ¨cÄ⁄/// Whether this pipeline is currently in the paint phase.
///
/// Specifically, whether [flushPaint] is currently running.
///
/// Only valid when asserts are enabled. In release builds,
/// this always returns false.   ¿ µÇ∫¿ ∑£Çk/// The object that is managing semantics for this pipeline owner, if any.
///
/// An owner is created by [ensureSemantics] or when the [PipelineManifold] to
/// which this owner is connected has [PipelineManifold.semanticsEnabled] set
/// to true. The owner is valid for as long as
/// [PipelineManifold.semanticsEnabled] remains true or while there are
/// outstanding [SemanticsHandle]s from calls to [ensureSemantics]. The
/// [semanticsOwner] field will revert to null once both conditions are no
/// longer met.
///
/// When [semanticsOwner] is null, the [PipelineOwner] skips all steps
/// relating to semantics.   ¿ ∑ÏÅ¿ ∏ªÄæ/// The number of clients registered to listen for semantics.
///
/// The number is increased whenever [ensureSemantics] is called and decreased
/// when [SemanticsHandle.dispose] is called.   ¿ Õ(t¿ Õ1    ¿ íÆÅa¿ ìvÄ∫/// Calls [onNeedVisualUpdate] if [onNeedVisualUpdate] is not null.
///
/// Used to notify the pipeline owner that an associated render object wishes
/// to update its visual appearance.   ¿ öAâu¿ õÆÅY/// Update the layout information for all dirty render objects.
///
/// This function is one of the core stages of the rendering pipeline. Layout
/// information is cleaned prior to painting so that render objects will
/// appear on screen in their up-to-date locations.
///
/// See [RendererBinding] for an example of how this function is used.   ¿ •ÖÅÃ¿ •ä  ¿ •™¿ •∏   ¿ ßßÉã¿ ®LÄó/// Updates the [RenderObject.needsCompositing] bits.
///
/// Called as part of the rendering pipeline after [flushLayout] and before
/// [flushPaint].   ¿ ¨¨à[¿ Æ'Åg/// Update the display lists for all render objects.
///
/// This function is one of the core stages of the rendering pipeline.
/// Painting occurs after layout and before the scene is recomposited so that
/// scene is composited with up-to-date display lists for every render object.
///
/// See [RendererBinding] for an example of how this function is used.   ¿ π(ÑY¿ ºÿÉ}/// Opens a [SemanticsHandle] and calls [listener] whenever the semantics tree
/// generated from the render tree owned by this [PipelineOwner] updates.
///
/// Calling this method only ensures that this particular [PipelineOwner] will
/// generate a semantics tree. Consider calling
/// [SemanticsBinding.ensureSemantics] instead to turn on semantics globally
/// for the entire app.
///
/// The [PipelineOwner] updates the semantics tree only when there are clients
/// that wish to use the semantics tree. These clients express their interest
/// by holding [SemanticsHandle] objects that notify them whenever the
/// semantics tree updates.
///
/// Clients can close their [SemanticsHandle] by calling
/// [SemanticsHandle.dispose]. Once all the outstanding [SemanticsHandle]
/// objects for a given [PipelineOwner] are closed, the [PipelineOwner] stops
/// maintaining the semantics tree. ¿ ºÍ¿ º˘   ¿ ΩÖÇ6¿ Ωä    ¿ øøÄê¿ øƒ    ¿ ¿æÜ1¿ ¬ΩÅ„/// Update the semantics for render objects marked as needing a semantics
/// update.
///
/// Initially, only the root node, as scheduled by
/// [RenderObject.scheduleInitialSemantics], needs a semantics update.
///
/// This function is one of the core stages of the rendering pipeline. The
/// semantics are compiled after painting and only after
/// [RenderObject.scheduleInitialSemantics] has been called.
///
/// See [RendererBinding] for an example of how this function is used.   ¿ «Çx¿ «á  ¿ «ó¿ «¶  ¿ «¨¿ «º   ¿ «˛Ç¿ …Å/// Mark this [PipelineOwner] as attached to the given [PipelineManifold].
///
/// Typically, this is only called directly on the root [PipelineOwner].
/// Children are automatically attached to their parent's [PipelineManifold]
/// when [adoptChild] is called. ¿ …¿ …,   ¿  Å‹¿ ÀÄÊ/// Mark this [PipelineOwner] as detached.
///
/// Typically, this is only called directly on the root [PipelineOwner].
/// Children are automatically detached from their parent's [PipelineManifold]
/// when [dropChild] is called.   ¿ Õ†Ö¿ —ZÉê/// Adds `child` to this [PipelineOwner].
///
/// During the phases of frame production (see [RendererBinding.drawFrame]),
/// the parent [PipelineOwner] will complete a phase for the nodes it owns
/// directly before invoking the flush method corresponding to the current
/// phase on its child [PipelineOwner]s. For example, during layout, the
/// parent [PipelineOwner] will first lay out its own nodes before calling
/// [flushLayout] on its children. During paint, it will first paint its own
/// nodes before calling [flushPaint] on its children. This order also applies
/// for all the other phases.
///
/// No assumptions must be made about the order in which child
/// [PipelineOwner]s are flushed.
///
/// No new children may be added after the [PipelineOwner] has started calling
/// [flushLayout] on any of its children until the end of the current frame.
///
/// To remove a child, call [dropChild]. ¿ —e¿ —t   ¿ “≥Çß¿ ‘ÅG/// Removes a child [PipelineOwner] previously added via [adoptChild].
///
/// This node will cease to call the flush methods on the `child` during frame
/// production.
///
/// No children may be removed after the [PipelineOwner] has started calling
/// [flushLayout] on any of its children until the end of the current frame. ¿ ‘¿ ‘'   ¿ ’^Å¿ ÷Ä•/// Calls `visitor` for each immediate child of this [PipelineOwner].
///
/// See also:
///
///  * [adoptChild] to add a child.
///  * [dropChild] to remove a child. ¿ ÷#¿ ÷9    ¿ ◊ â¿ ⁄¢Ér/// Manages a tree of [PipelineOwner]s.
///
/// All [PipelineOwner]s within a tree are attached to the same
/// [PipelineManifold], which gives them access to shared functionality such
/// as requesting a visual update (by calling [requestVisualUpdate]). As such,
/// the [PipelineManifold] gives the [PipelineOwner]s access to functionality
/// usually provided by the bindings without tying the [PipelineOwner]s to a
/// particular binding implementation.
///
/// The root of the [PipelineOwner] tree is attached to a [PipelineManifold] by
/// passing the manifold to [PipelineOwner.attach]. Children are attached to the
/// same [PipelineManifold] as their parent when they are adopted via
/// [PipelineOwner.adoptChild].
///
/// [PipelineOwner]s can register listeners with the [PipelineManifold] to be
/// informed when certain values provided by the [PipelineManifold] change.   ¿ ⁄ÕÅ‡¿ ‹úÅ±/// Whether [PipelineOwner]s connected to this [PipelineManifold] should
/// collect semantics information and produce a semantics tree.
///
/// The [PipelineManifold] notifies its listeners (managed with [addListener]
/// and [removeListener]) when this property changes its value.
///
/// See also:
///
///  * [SemanticsBinding.semanticsEnabled], which [PipelineManifold]
///    implementations typically use to back this property.   ¿ ‹±Éq¿ ‡É3/// Called by a [PipelineOwner] connected to this [PipelineManifold] when a
/// [RenderObject] associated with that pipeline owner wishes to update its
/// visual appearance.
///
/// Typical implementations of this function will schedule a task to flush the
/// various stages of the pipeline. This function might be called multiple
/// times in quick succession. Implementations should take care to discard
/// duplicate calls quickly.
///
/// A [PipelineOwner] connected to this [PipelineManifold] will call
/// [PipelineOwner.onNeedVisualUpdate] instead of this method if it has been
/// configured with a non-null [PipelineOwner.onNeedVisualUpdate] callback.
///
/// See also:
///
///  * [SchedulerBinding.ensureVisualUpdate], which [PipelineManifold]
///    implementations typically call to implement this method.    ¿ ‡q¿ä ¿ ˙…öH/// An object in the render tree.
///
/// The [RenderObject] class hierarchy is the core of the rendering
/// library's reason for being.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=zmbmrw07qBc}
///
/// [RenderObject]s have a [parent], and have a slot called [parentData] in
/// which the parent [RenderObject] can store child-specific data, for example,
/// the child position. The [RenderObject] class also implements the basic
/// layout and paint protocols.
///
/// The [RenderObject] class, however, does not define a child model (e.g.
/// whether a node has zero, one, or more children). It also doesn't define a
/// coordinate system (e.g. whether children are positioned in Cartesian
/// coordinates, in polar coordinates, etc) or a specific layout protocol (e.g.
/// whether the layout is width-in-height-out, or constraint-in-size-out, or
/// whether the parent sets the size and position of the child before or after
/// the child lays out, etc; or indeed whether the children are allowed to read
/// their parent's [parentData] slot).
///
/// The [RenderBox] subclass introduces the opinion that the layout
/// system uses Cartesian coordinates.
///
/// ## Lifecycle
///
/// A [RenderObject] must [dispose] when it is no longer needed. The creator
/// of the object is responsible for disposing of it. Typically, the creator is
/// a [RenderObjectElement], and that element will dispose the object it creates
/// when it is unmounted.
///
/// [RenderObject]s are responsible for cleaning up any expensive resources
/// they hold when [dispose] is called, such as [Picture] or [Image] objects.
/// This includes any [Layer]s that the render object has directly created. The
/// base implementation of dispose will nullify the [layer] property. Subclasses
/// must also nullify any other layer(s) it directly creates.
///
/// ## Writing a RenderObject subclass
///
/// In most cases, subclassing [RenderObject] itself is overkill, and
/// [RenderBox] would be a better starting point. However, if a render object
/// doesn't want to use a Cartesian coordinate system, then it should indeed
/// inherit from [RenderObject] directly. This allows it to define its own
/// layout protocol by using a new subclass of [Constraints] rather than using
/// [BoxConstraints], and by potentially using an entirely new set of objects
/// and values to represent the result of the output rather than just a [Size].
/// This increased flexibility comes at the cost of not being able to rely on
/// the features of [RenderBox]. For example, [RenderBox] implements an
/// intrinsic sizing protocol that allows you to measure a child without fully
/// laying it out, in such a way that if that child changes size, the parent
/// will be laid out again (to take into account the new dimensions of the
/// child). This is a subtle and bug-prone feature to get right.
///
/// Most aspects of writing a [RenderBox] apply to writing a [RenderObject] as
/// well, and therefore the discussion at [RenderBox] is recommended background
/// reading. The main differences are around layout and hit testing, since those
/// are the aspects that [RenderBox] primarily specializes.
///
/// ### Layout
///
/// A layout protocol begins with a subclass of [Constraints]. See the
/// discussion at [Constraints] for more information on how to write a
/// [Constraints] subclass.
///
/// The [performLayout] method should take the [constraints], and apply them.
/// The output of the layout algorithm is fields set on the object that describe
/// the geometry of the object for the purposes of the parent's layout. For
/// example, with [RenderBox] the output is the [RenderBox.size] field. This
/// output should only be read by the parent if the parent specified
/// `parentUsesSize` as true when calling [layout] on the child.
///
/// Anytime anything changes on a render object that would affect the layout of
/// that object, it should call [markNeedsLayout].
///
/// ### Hit Testing
///
/// Hit testing is even more open-ended than layout. There is no method to
/// override, you are expected to provide one.
///
/// The general behavior of your hit-testing method should be similar to the
/// behavior described for [RenderBox]. The main difference is that the input
/// need not be an [Offset]. You are also allowed to use a different subclass of
/// [HitTestEntry] when adding entries to the [HitTestResult]. When the
/// [handleEvent] method is called, the same object that was added to the
/// [HitTestResult] will be passed in, so it can be used to track information
/// like the precise coordinate of the hit, in whatever coordinate system is
/// used by the new layout protocol.
///
/// ### Adapting from one protocol to another
///
/// In general, the root of a Flutter render object tree is a [RenderView]. This
/// object has a single child, which must be a [RenderBox]. Thus, if you want to
/// have a custom [RenderObject] subclass in the render tree, you have two
/// choices: you either need to replace the [RenderView] itself, or you need to
/// have a [RenderBox] that has your class as its child. (The latter is the much
/// more common case.)
///
/// This [RenderBox] subclass converts from the box protocol to the protocol of
/// your class.
///
/// In particular, this means that for hit testing it overrides
/// [RenderBox.hitTest], and calls whatever method you have in your class for
/// hit testing.
///
/// Similarly, it overrides [performLayout] to create a [Constraints] object
/// appropriate for your class and passes that to the child's [layout] method.
///
/// ### Layout interactions between render objects
///
/// In general, the layout of a render object should only depend on the output of
/// its child's layout, and then only if `parentUsesSize` is set to true in the
/// [layout] call. Furthermore, if it is set to true, the parent must call the
/// child's [layout] if the child is to be rendered, because otherwise the
/// parent will not be notified when the child changes its layout outputs.
///
/// It is possible to set up render object protocols that transfer additional
/// information. For example, in the [RenderBox] protocol you can query your
/// children's intrinsic dimensions and baseline geometry. However, if this is
/// done then it is imperative that the child call [markNeedsLayout] on the
/// parent any time that additional information changes, if the parent used it
/// in the last layout phase. For an example of how to implement this, see the
/// [RenderBox.markNeedsLayout] method. It overrides
/// [RenderObject.markNeedsLayout] so that if a parent has queried the intrinsic
/// or baseline information, it gets marked dirty whenever the child's geometry
/// changes. ¿ ˚Åê ¿ ˚B¿ ˚N//// Initializes internal fields for subclasses.  ¿4¿9 ¿J¿¢É®¿
@És/// Data for use by the parent render object.
///
/// The parent data is used by the render object that lays out this object
/// (typically this object's parent in the render tree) to store information
/// relevant to itself and to any other nodes who happen to know exactly what
/// the data means. The parent data is opaque to the child.
///
///  * The parent data field must not be directly set, except by calling
///    [setupParentData] on the parent node.
///  * The parent data can be set before the child is added to the parent, by
///    calling [setupParentData] on the future parent node.
///  * The conventions for using the parent data depend on the layout protocol
///    used between the parent and child. For example, in box layout, the
///    parent data is completely opaque but in sector layout the child is
///    permitted to read some fields of the parent data. ¿¿É ¿å¿E¿S  ¿ÄÊ¿ËÄ√/// The object responsible for creating this render object.
///
/// Used in debug messages.
///
/// See also:
///
///  * [DebugCreator], which the [widgets] library uses as values for this field. ¿Ò"¿ˆ ¿¿˝"¿  ¿ ¿!'¿!  ¿$˛¿%  ¿%"¿%$ ¿%<¿>E¿>T  ¿J/¿J4 ¿JC¿JL¿JZ  ¿K)¿K ¿K3¿L√¿L–  ¿NbÇ¿PSÅ“/// When true, debugAssertDoesMeetConstraints() is currently
/// executing asserts for verifying the consistent behavior of
/// intrinsic dimensions methods.
///
/// This should only be set by debugAssertDoesMeetConstraints()
/// implementations. It is used by tests to selectively ignore
/// custom layout callbacks. It should not be set outside of
/// debugAssertDoesMeetConstraints(), and should not be checked in
/// release mode (where it will always be false).¿Pm¿ò÷!¿ò€ ¿òÚ¿ô–&¿ôÂ  ¿†Ï¿†ˆ  ¿ÆlN¿Æé ¿Æù¿Æ®¿Æ∑¿Æ©¿Æ∏¿Æπ¿∞ß(¿∞¨ ¿∞ ¿∂œ¿∂Ÿ  ¿¡Ñ¿¡â ¿¡ó¿√˜(¿√¸ ¿ƒ¿Ω5¿’  ¿Æ!¿≥ ¿À¿”¿‚  ¿ 3Ä˝¿ ¶b/// Whether this has been disposed.
///
/// If asserts are disabled, this property is always null.   ¿“É™¿lÉs/// The depth of this node in the tree.
///
/// The depth of nodes in a tree monotonically increases as you traverse down
/// the tree.
///
/// Nodes always have a [depth] greater than their ancestors'. There's no
/// guarantee regarding depth between siblings. The depth of a node is used to
/// ensure that nodes are processed in depth order. The [depth] of a child can
/// be more than one greater than the [depth] of the parent, because the [depth]
/// values are never decreased: all that matters is that it's greater than the
/// parent. Consider a tree with a root node A, a child B, and a grandchild C.
/// Initially, A will have [depth] 0, B [depth] 1, and C [depth] 2. If C is
/// moved to be a child of A, sibling of B, then the numbers won't change. C's
/// [depth] will still be 2. The [depth] is automatically maintained by the
/// [adoptChild] and [dropChild] methods.   ¿ÛO¿0(/// The parent of this node in the tree.   ¿Ä‚¿¿Ä¢/// Whether [performResize] for this render object is currently running.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// false.   ¿Ä‚¿ÃÄ¢/// Whether [performLayout] for this render object is currently running.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// false.   ¿ $Ä€¿ ◊Äë/// The render object that is actively computing layout.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// null.   ¿#”Å(¿$ Ä·/// Whether the parent render object is permitted to use this render object's
/// size.
///
/// Determined by the `parentUsesSize` parameter to [layout].
///
/// Only valid when asserts are enabled. In release builds, throws.   ¿%FîË¿&¡Åc/// Whether tree mutations are currently permitted.
///
/// This is only useful during layout. One should also not mutate the tree at
/// other times (e.g. during paint or while assembling the semantic tree) but
/// this function does not currently enforce those conventions.
///
/// Only valid when asserts are enabled. This will throw in release builds.   ¿:2Éb¿<˙Çê/// The [RenderObject] that's expected to call [layout] on this [RenderObject]
/// in its [performLayout] implementation.
///
/// This method is used to implement an assert that ensures the render subtree
/// actively performing layout can not get accidently mutated. It's only
/// implemented in debug mode and always returns null in release mode.
///
/// The default implementation returns [parent] and overriding is rarely
/// needed. A [RenderObject] subclass that expects its
/// [RenderObject.performLayout] to be called from a different [RenderObject]
/// that's not its [parent] should override this property to return the actual
/// layout parent.  ¿<€¿<‹¿=òÄ™¿>2ÄÄ/// The owner for this node (null if unattached).
///
/// The entire subtree that this node belongs to will have the same owner.   ¿>_ÄÂ¿?)Ä∂/// Whether this node is in a tree whose root is attached to something.
///
/// This becomes true during the call to [attach].
///
/// This becomes false during the call to [detach].   ¿G˜Ç5¿I£Åí/// Whether this render object's layout information is dirty.
///
/// This is only set in debug mode. In general, render objects should not need
/// to condition their runtime behavior on whether they are dirty or not,
/// since they should only be marked dirty immediately prior to being laid
/// out and painted. In release builds, this throws.
///
/// It is intended to be used by tests and asserts.   ¿JpÄú¿JÀO/// Whether [invokeLayoutCallback] for this render object is currently running.   ¿K=ÅÉ¿L
Äß/// The layout constraints most recently supplied by the parent.
///
/// If layout has not yet happened, accessing this getter will
/// throw a [StateError] exception.  ¿KÌ¿KÓ¿áıÉZ¿ã8É/// Whether the constraints are the only input to the sizing algorithm (in
/// particular, child nodes have no impact).
///
/// Returning false is always correct, but returning true can be more
/// efficient when computing the size of this render object because we don't
/// need to recompute the size if the constraints don't change.
///
/// Typically, subclasses will always return the same value. If the value can
/// change, then, when it does change, the subclass should make sure to call
/// [markNeedsLayoutForSizedByParentChange].
///
/// Subclasses that return true must not change the dimensions of this render
/// object in [performLayout]. Instead, that work should be done by
/// [performResize] or - for subclasses of [RenderBox] - in
/// [RenderBox.computeDryLayout].  ¿ã"¿ã#¿ó˚Äÿ¿òßÄö/// Whether [paint] for this render object is currently running.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// false.   ¿ò¸Ä—¿ôßÄâ/// The render object that is actively painting.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// null.   ¿ô˚É£¿ùÉÉ\/// Whether this render object repaints separately from its parent.
///
/// Override this in subclasses to indicate that instances of your class ought
/// to repaint independently. For example, render objects that repaint
/// frequently might want to repaint themselves without requiring their parent
/// to repaint.
///
/// If this getter returns true, the [paintBounds] are applied to this object
/// and all descendants. The framework invokes [RenderObject.updateCompositedLayer]
/// to create an [OffsetLayer] and assigns it to the [layer] field.
/// Render objects that declare themselves as repaint boundaries must not replace
/// the layer created by the framework.
///
/// If the value of this getter changes, [markNeedsCompositingBitsUpdate] must
/// be called.
///
/// See [RepaintBoundary] for more information about how repaint boundaries function.   ¿üÅ„¿†»Åú/// Whether this render object always needs compositing.
///
/// Override this in subclasses to indicate that your paint function always
/// creates at least one composited layer. For example, videos should return
/// true if they use hardware decoders.
///
/// You must call [markNeedsCompositingBitsUpdate] if the value of this getter
/// changes. (This is implied when [adoptChild] or [dropChild] are called.)  ¿†≤¿†≥¿¶WÜ◊¿¨°Öˆ/// The compositing layer that this render object uses to repaint.
///
/// If this render object is not a repaint boundary, it is the responsibility
/// of the [paint] method to populate this field. If [needsCompositing] is
/// true, this field may be populated with the root-most layer used by the
/// render object implementation. When repainting, instead of creating a new
/// layer the render object may update the layer stored in this field for better
/// performance. It is also OK to leave this field as null and create a new
/// layer on every repaint, but without the performance benefit. If
/// [needsCompositing] is false, this field must be set to null either by
/// never populating this field, or by setting it to null when the value of
/// [needsCompositing] changes from true to false.
///
/// If a new layer is created and stored in some other field on the render
/// object, the render object must use a [LayerHandle] to store it. A layer
/// handle will prevent the layer from being disposed before the render
/// object is finished with it, and it will also make sure that the layer
/// gets appropriately disposed when the render object creates a replacement
/// or nulls it out. The render object must null out the [LayerHandle.layer]
/// in its [dispose] method.
///
/// If this render object is a repaint boundary, the framework automatically
/// creates an [OffsetLayer] and populates this field prior to calling the
/// [paint] method. The [paint] method must not replace the value of this
/// field.  ¿¨Ä¿¨Å¿≠2Å6¿≠C  ¿≠I¿≠Z  ¿≠2¿≠3¿ÆøÅ‰¿∞Å2/// In debug mode, the compositing layer that this render object uses to repaint.
///
/// This getter is intended for debugging purposes only. In release builds, it
/// always returns null. In debug builds, it returns the layer even if the layer
/// is dirty.
///
/// For production code, consider [layer].   ¿∑Å‡¿∏^Å6/// Whether we or one of our descendants has a compositing layer.
///
/// If this node needs compositing as indicated by this bit, then all ancestor
/// nodes will also need compositing.
///
/// Only legal to call after [PipelineOwner.flushLayout] and
/// [PipelineOwner.flushCompositingBits] have been called.   ¿Ω‡É°¿¿˙ÇÙ/// Whether this render object's paint information is dirty.
///
/// This is only set in debug mode. In general, render objects should not need
/// to condition their runtime behavior on whether they are dirty or not,
/// since they should only be marked dirty immediately prior to being laid
/// out and painted. (In release builds, this throws.)
///
/// It is intended to be used by tests and asserts.
///
/// It is possible (and indeed, quite common) for [debugNeedsPaint] to be
/// false and [debugNeedsLayout] to be true. The render object will still be
/// repainted in the next frame when this is the case, because the
/// [markNeedsPaint] method is implicitly called by the framework after a
/// render object is laid out, prior to the paint phase.   ¿¡†ÇT¿√MÅì/// Whether this render object's layer information is dirty.
///
/// This is only set in debug mode. In general, render objects should not need
/// to condition their runtime behavior on whether they are dirty or not,
/// since they should only be marked dirty immediately prior to being laid
/// out and painted. (In release builds, this throws.)
///
/// It is intended to be used by tests and asserts.   ¿ÔfÅ¿tÄ˙/// An estimate of the bounds within which this render object will paint.
/// Useful for debugging flags such as [debugPaintLayerBordersEnabled].
///
/// These are also the bounds used by [showOnScreen] to make a [RenderObject]
/// visible on screen.   ¿˜Ç-¿    ¿(ÄÇ¿õe/// The bounding box, in the local coordinate system, of this
/// object, for accessibility purposes.   ¿ÒÅ∫¿NÅ9/// The semantics of this render object.
///
/// Exposed only for testing and debugging. To learn about the semantics of
/// render objects in production, obtain a [SemanticsHandle] from
/// [PipelineOwner.ensureSemantics].
///
/// Only valid in debug and profile mode. In release builds, always returns
/// null.   @¿ ¸§Éã¿ ˇ_Çó/// Cause the entire subtree rooted at the given [RenderObject] to be marked
/// dirty for layout, paint, etc, so that the effects of a hot reload can be
/// seen, or so that the effect of changing a global debug flag (such as
/// [debugPaintSizeEnabled]) can be applied.
///
/// This is called by the [RendererBinding] in response to the
/// `ext.flutter.reassemble` hook, which is used by development tools when the
/// application code has changed, to cause the widget tree to pick up any
/// changed implementations.
///
/// This is expensive and should not be called except during development.
///
/// See also:
///
///  * [BindingBase.reassembleApplication]   ¿TÖ=¿7Ç∞/// Release any resources held by this render object.
///
/// The object that creates a RenderObject is in charge of disposing it.
/// If this render object has created any children directly, it must dispose
/// of those children in this method as well. It must not dispose of any
/// children that were created by some other object, such as
/// a [RenderObjectElement]. Those children will be disposed when that
/// element unmounts, which may be delayed if the element is moved to another
/// part of the tree.
///
/// Implementations of this method must end with a call to the inherited
/// method, as in `super.dispose()`.
///
/// The object is no longer usable after calling dispose.  ¿!¿"¿
OÅ¿Äø/// Override to setup parent data correctly for your children.
///
/// You can call this function to set up the parent data for child before the
/// child is added to the parent's child list. ¿,¿D   ¿íÅi¿KÄû/// Adjust the [depth] of the given [child] to be greater than this node's own
/// [depth].
///
/// Only call this method from overrides of [redepthChildren]. ¿X¿f  ¿9¿:¿ˇÄ¿⁄Ä¿/// Adjust the [depth] of this node's children, if any.
///
/// Override this method in subclasses with child nodes to call [redepthChild]
/// for each child. Do not call this method directly.  ¿»¿…¿_É¿rÄÁ/// Called by subclasses when they decide a render object is a child.
///
/// Only for use by subclasses when changing their child lists. Calling this
/// in other cases will lead to an inconsistent tree and probably cause crashes. ¿}¿ã  ¿O¿P¿`¿a¿ÄÇπ¿ùÄÒ/// Called by subclasses when they decide a render object is no longer a child.
///
/// Only for use by subclasses when changing their child lists. Calling this
/// in other cases will lead to an inconsistent tree and probably cause crashes. ¿ß¿µ  ¿z¿{¿ã¿å¿=ÄÕ¿‹Äì/// Calls visitor for each immediate child of this render object.
///
/// Override in subclasses with children and call the visitor for each child. ¿Í¿ˇ   ¿˘Ñ¿˛  ¿¿  ¿¿&  ¿0¿<   ¿!.Ç°¿"PÄÚ/// Set [debugActiveLayout] to null when [inner] callback is called.
/// This is useful when you have to temporarily clear that variable to
/// disable some false-positive checks, such as when computing toStringDeep
/// or using custom trees.¿"n¿"n¿"q¿"  ¿")¿"*¿"0¿"C¿"1¿?HÜ`¿AQÅ‹/// Mark this node as attached to the given owner.
///
/// Typically called only from the [parent]'s [attach] method, and by the
/// [owner] to mark the root of a tree as attached.
///
/// Subclasses with children should override this method to first call their
/// inherited [attach] method, and then [attach] all their children to the
/// same [owner].
///
/// Implementations of this method should start with a call to the inherited
/// method, as in `super.attach(owner)`. ¿AX¿Ag  ¿A;¿A<¿E¨ÇG¿GzÅ£/// Mark this node as detached.
///
/// Typically called only from the [parent]'s [detach], and by the [owner] to
/// mark the root of a tree as detached.
///
/// Subclasses with children should override this method to first call their
/// inherited [detach] method, and then [detach] all their children.
///
/// Implementations of this method should end with a call to the inherited
/// method, as in `super.detach()`.  ¿Gd¿Ge¿L·Å}¿N=Å?/// Verify that the object's constraints are being met. Override
/// this function in a subclass to verify that your state matches
/// the constraints object. This function is only called in checked
/// mode and only when needsLayout is false. If the constraints are
/// not met, it should assert or throw an exception.  ¿N+¿N,¿PvÇ¿P{    ¿Rîã∆¿Z´á≈/// Mark this render object's layout information as dirty, and either register
/// this object with its [PipelineOwner], or defer to the parent, depending on
/// whether this object is a relayout boundary or not respectively.
///
/// ## Background
///
/// Rather than eagerly updating layout information in response to writes into
/// a render object, we instead mark the layout information as dirty, which
/// schedules a visual update. As part of the visual update, the rendering
/// pipeline updates the render object's layout information.
///
/// This mechanism batches the layout work so that multiple sequential writes
/// are coalesced, removing redundant computation.
///
/// If a render object's parent indicates that it uses the size of one of its
/// render object children when computing its layout information, this
/// function, when called for the child, will also mark the parent as needing
/// layout. In that case, since both the parent and the child need to have
/// their layout recomputed, the pipeline owner is only notified about the
/// parent; when the parent is laid out, it will call the child's [layout]
/// method and thus the child will be laid out as well.
///
/// Once [markNeedsLayout] has been called on a render object,
/// [debugNeedsLayout] returns true for that render object until just after
/// the pipeline owner has called [layout] on the render object.
///
/// ## Special cases
///
/// Some subclasses of [RenderObject], notably [RenderBox], have other
/// situations in which the parent needs to be notified if the child is
/// dirtied (e.g., if the child's intrinsic dimensions or baseline changes).
/// Such subclasses override markNeedsLayout and either call
/// `super.markNeedsLayout()`, in the normal case, or call
/// [markParentNeedsLayout], in the case where the parent needs to be laid out
/// as well as the child.
///
/// If [sizedByParent] has changed, calls
/// [markNeedsLayoutForSizedByParentChange] instead of [markNeedsLayout].   ¿^^É¿` Åù/// Mark this render object's layout information as dirty, and then defer to
/// the parent.
///
/// This function should only be called from [markNeedsLayout] or
/// [markNeedsLayoutForSizedByParentChange] implementations of subclasses that
/// introduce more reasons for deferring the handling of dirty layout to the
/// parent. See [markNeedsLayout] for details.
///
/// Only call this if [parent] is not null.  ¿`¿`¿a{Å∑¿b—ÅB/// Mark this render object's layout information as dirty (like
/// [markNeedsLayout]), and additionally also handle any necessary work to
/// handle the case where [sizedByParent] has changed value.
///
/// This should be called whenever [sizedByParent] might have changed.
///
/// Only call this if [parent] is not null.   ¿c6Ä†¿c;    ¿c⁄Å¿cﬂ    ¿eöe¿e¶  ¿e¬¿e–   ¿fo¿f  ¿f1¿f?   ¿fvÇr¿gäÅ/// Bootstrap the rendering pipeline by scheduling the very first layout.
///
/// Requires this render object to be attached and that this render object
/// is the root of the render tree.
///
/// See [RenderView] for an example of how this function is used.   ¿hÏÉª¿i   ¿hÏ¿hÌ¿hÛ¿i¿hÙ¿l´ôp¿rCÖ7/// Compute the layout for this render object.
///
/// This method is the main entry point for parents to ask their children to
/// update their layout information. The parent passes a constraints object,
/// which informs the child as to which layouts are permissible. The child is
/// required to obey the given constraints.
///
/// If the parent reads information computed during the child's layout, the
/// parent must pass true for `parentUsesSize`. In that case, the parent will
/// be marked as needing layout whenever the child is marked as needing layout
/// because the parent's layout information depends on the child's layout
/// information. If the parent uses the default value (false) for
/// `parentUsesSize`, the child can change its layout information (subject to
/// the given constraints) without informing the parent.
///
/// Subclasses should not override [layout] directly. Instead, they should
/// override [performResize] and/or [performLayout]. The [layout] method
/// delegates the actual work to [performResize] and [performLayout].
///
/// The parent's [performLayout] method should call the [layout] of all its
/// children unconditionally. It is the [layout] method's responsibility (as
/// implemented here) to return early if the child does not need to do any
/// work to update its layout information. ¿rJ¿rW  ¿re¿rk  ¿r¿r¿r¿r:¿r¿r{¿ÜÅ“¿á›Åü/// If a subclass has a "size" (the state controlled by `parentUsesSize`,
/// whatever it is in the subclass, e.g. the actual `size` property of
/// [RenderBox]), and the subclass verifies that in debug mode this "size"
/// property isn't used when [debugCanParentUseSize] isn't set, then that
/// subclass should override [debugResetSize] to reapply the current values of
/// [debugCanParentUseSize] to that state.  ¿áÀ¿áÃ¿ãSÇÛ¿é6Ç¥/// {@template flutter.rendering.RenderObject.performResize}
/// Updates the render objects size using only the constraints.
///
/// Do not call this function directly: call [layout] instead. This function
/// is called by [layout] when there is actually work to be done by this
/// render object during layout. The layout constraints provided by your
/// parent are available via the [constraints] getter.
///
/// This function is called only if [sizedByParent] is true.
/// {@endtemplate}
///
/// Subclasses that set [sizedByParent] to true should override this method to
/// compute their size. Subclasses of [RenderBox] should consider overriding
/// [RenderBox.computeDryLayout] instead.  ¿é$¿é%¿éJÑï¿íœÑL/// Do the work of computing the layout for this render object.
///
/// Do not call this function directly: call [layout] instead. This function
/// is called by [layout] when there is actually work to be done by this
/// render object during layout. The layout constraints provided by your
/// parent are available via the [constraints] getter.
///
/// If [sizedByParent] is true, then this function should not actually change
/// the dimensions of this render object. Instead, that work should be done by
/// [performResize]. If [sizedByParent] is false, then this function should
/// both change the dimensions of this render object and instruct its children
/// to layout.
///
/// In implementing this function, you must call [layout] on each of your
/// children, passing true for parentUsesSize if your layout information is
/// dependent on your child's layout information. Passing true for
/// parentUsesSize ensures that this render object will undergo layout if the
/// child undergoes layout. Otherwise, the child can change its layout
/// information without informing this render object.  ¿íΩ¿íæ¿í„Ö¿ñcÉO/// Allows mutations to be made to this object's child list (and any
/// descendants) as well as to any other dirty nodes in the render tree owned
/// by the same [PipelineOwner] as this object. The `callback` argument is
/// invoked synchronously, and the mutations are allowed only during that
/// callback's execution.
///
/// This exists to allow child lists to be built on-demand during layout (e.g.
/// based on the object's size), and to enable nodes to be moved around the
/// tree as this happens (e.g. to handle [GlobalKey] reparenting), while still
/// ensuring that any particular node is only laid out once per frame.
///
/// Calling this function disables a number of assertions that are intended to
/// catch likely bugs. As such, using this function is generally discouraged.
///
/// This function can only be called during layout.¿ñx¿ñx¿ñè¿ñ¢  ¿ñQ¿ñR¿ù¢Å_¿û†ÄÓ/// Called, in debug mode, if [isRepaintBoundary] is true, when either the
/// this render object or its parent attempt to paint.
///
/// This can be used to record metrics about whether the node should actually
/// be a repaint boundary. ¿ûƒ¿û   ¿û‡¿ûÊ  ¿û⁄¿ûı¿°ÖE¿•«É·/// Update the composited layer owned by this render object.
///
/// This method is called by the framework when [isRepaintBoundary] is true.
///
/// If [oldLayer] is `null`, this method must return a new [OffsetLayer]
/// (or subtype thereof). If [oldLayer] is not `null`, then this method must
/// reuse the layer instance that is provided - it is an error to create a new
/// layer in this instance. The layer will be disposed by the framework when
/// either the render object is disposed or if it is no longer a repaint
/// boundary.
///
/// The [OffsetLayer.offset] property will be managed by the framework and
/// must not be updated by this method.
///
/// If a property of the composited layer needs to be updated, the render object
/// must call [markNeedsCompositedLayerUpdate] which will schedule this method
/// to be called without repainting children. If this widget was marked as
/// needing to paint and needing a composited layer update, this method is only
/// called once. ¿•ﬁ(¿•ˇ   ¿∞¯Ö”¿¥MÉ//// Mark the compositing state for this render object as dirty.
///
/// This is called to indicate that the value for [needsCompositing] needs to
/// be recomputed during the next [PipelineOwner.flushCompositingBits] engine
/// phase.
///
/// When the subtree is mutated, we need to recompute our
/// [needsCompositing] bit, and some of our ancestors need to do the
/// same (in case ours changed in a way that will change theirs). To
/// this end, [adoptChild] and [dropChild] call this method, and, as
/// necessary, this method calls the parent's, etc, walking up the
/// tree to mark all the nodes that need updating.
///
/// This method does not schedule a rendering frame, because since
/// it cannot be the case that _only_ the compositing bits changed,
/// something else will have scheduled a frame for us.   ¿∏ÙÑË¿∏˘    ¿ƒ$âÎ¿«ÌÉõ/// Mark this render object as having changed its visual appearance.
///
/// Rather than eagerly updating this render object's display list
/// in response to writes, we instead mark the render object as needing to
/// paint, which schedules a visual update. As part of the visual update, the
/// rendering pipeline will give this render object an opportunity to update
/// its display list.
///
/// This mechanism batches the painting work so that multiple sequential
/// writes are coalesced, removing redundant computation.
///
/// Once [markNeedsPaint] has been called on a render object,
/// [debugNeedsPaint] returns true for that render object until just after
/// the pipeline owner has called [paint] on the render object.
///
/// See also:
///
///  * [RepaintBoundary], to scope a subtree of render objects to their own
///    layer, thus limiting the number of nodes that [markNeedsPaint] must mark
///    dirty.   ¿ŒÜ-¿—uÉ:/// Mark this render object as having changed a property on its composited
/// layer.
///
/// Render objects that have a composited layer have [isRepaintBoundary] equal
/// to true may update the properties of that composited layer without repainting
/// their children. If this render object is a repaint boundary but does
/// not yet have a composited layer created for it, this method will instead
/// mark the nearest repaint boundary parent as needing to be painted.
///
/// If this method is called on a render object that is not a repaint boundary
/// or is a repaint boundary but hasn't been composited yet, it is equivalent
/// to calling [markNeedsPaint].
///
/// See also:
///
///  * [RenderOpacity], which uses this method when its opacity is updated to
///    update the layer opacity without repainting children.   ¿’µÇﬁ¿’∫    ¿ÿóÇx¿Ÿ≠Å/// Bootstrap the rendering pipeline by scheduling the very first paint.
///
/// Requires that this render object is attached, is the root of the render
/// tree, and has a composited layer.
///
/// See [RenderView] for an example of how this function is used. ¿Ÿ¬¿Ÿ“   ¿€ÇÅ¿€˚Äÿ/// Replace the layer. This is only valid for the root of a render
/// object subtree (whatever object [scheduleInitialPaint] was
/// called on).
///
/// This might be called if, e.g., the device pixel ratio changed. ¿‹¿‹   ¿›òë ¿›ù  ¿›Ø¿›¿  ¿›»¿›–   ¿Ñv¿ƒ8/// Override this method to paint debugging information. ¿œ¿‡  ¿Ë¿   ¿˛Éˇ¿ÙÃÉ¶/// Paint this render object into the given context at the given offset.
///
/// Subclasses should override this method to provide a visual appearance
/// for themselves. The render object's local coordinate system is
/// axis-aligned with the coordinate system of the context's canvas and the
/// render object's local origin (i.e, x=0 and y=0) is placed at the given
/// offset in the context's canvas.
///
/// Do not call this function directly. If you wish to paint yourself, call
/// [markNeedsPaint] instead to schedule a call to this function. If you wish
/// to paint one of your children, call [PaintingContext.paintChild] on the
/// given `context`.
///
/// When painting one of your children (via a paint child function on the
/// given context), the current canvas held by the context might change
/// because draw operations before and after painting children might need to
/// be recorded on separate compositing layers. ¿Ù“¿Ù„  ¿ÙÎ¿ÙÛ   ¿ıÉ1¿˜∆Çß/// Applies the transform that would be applied when painting the given child
/// to the given matrix.
///
/// Used by coordinate conversion functions to translate coordinates local to
/// one render object into coordinates local to another render object.
///
/// Some RenderObjects will provide a zeroed out matrix in this method,
/// indicating that the child should not paint anything or respond to hit
/// tests currently. A parent may supply a non-zero matrix even though it
/// does not paint its child currently, for example if the parent is a
/// [RenderOffstage] with `offstage` set to true. In both of these cases,
/// the parent must return `false` from [paintsChild]. ¿˜⁄¿˜Ú  ¿˜¯¿¯   ¿¯6É]¿˚1Ç€/// Whether the given child would be painted if [paint] were called.
///
/// Some RenderObjects skip painting their children if they are configured to
/// not produce any visible effects. For example, a [RenderOffstage] with
/// its `offstage` property set to true, or a [RenderOpacity] with its opacity
/// value set to zero.
///
/// In these cases, the parent may still supply a non-zero matrix in
/// [applyPaintTransform] to inform callers about where it would paint the
/// child if the child were painted at all. Alternatively, the parent may
/// supply a zeroed out matrix if it would not otherwise be able to determine
/// a valid matrix for the child and thus cannot meaningfully determine where
/// the child would paint. ¿˚=¿˚U   ¿˚óÜc¿˛ØÇÔ/// {@template flutter.rendering.RenderObject.getTransformTo}
/// Applies the paint transform up the tree to `ancestor`.
///
/// Returns a matrix that maps the local paint coordinate system to the
/// coordinate system of `ancestor`.
///
/// If `ancestor` is null, this method returns a matrix that maps from the
/// local paint coordinate system to the coordinate system of the
/// [PipelineOwner.rootNode].
/// {@endtemplate}
///
/// For the render tree owned by the [RendererBinding] (i.e. for the main
/// render tree displayed on the device) this means that this method maps to
/// the global coordinate system in logical pixels. To get physical pixels,
/// use [applyPaintTransform] from the [RenderView] to further transform the
/// coordinate. ¿˛æ¿˛Õ   ¿ˇÇÔ¿´Çã/// Returns a rect in this object's coordinate system that describes
/// the approximate bounding box of the clip rect that would be
/// applied to the given child during the paint phase, if any.
///
/// Returns null if the child would not be clipped.
///
/// This is used in the semantics phase to avoid including children
/// that are not physically visible.
///
/// RenderObjects that respect a [Clip] behavior when painting _must_ respect
/// that same behavior when describing this value. For example, if passing
/// [Clip.none] to [PaintingContext.pushClipRect] as the `clipBehavior`, then
/// the implementation of this method must return null. ¿»¿‡   ¿ÚÖÊ¿
õÖp/// Returns a rect in this object's coordinate system that describes
/// which [SemanticsNode]s produced by the `child` should be included in the
/// semantics tree. [SemanticsNode]s from the `child` that are positioned
/// outside of this rect will be dropped. Child [SemanticsNode]s that are
/// positioned inside this rect, but outside of [describeApproximatePaintClip]
/// will be included in the tree marked as hidden. Child [SemanticsNode]s
/// that are inside of both rect will be included in the tree as regular
/// nodes.
///
/// This method only returns a non-null value if the semantics clip rect
/// is different from the rect returned by [describeApproximatePaintClip].
/// If the semantics clip rect and the paint clip rect are the same, this
/// method returns null.
///
/// A viewport would typically implement this method to include semantic nodes
/// in the semantics tree that are currently hidden just before the leading
/// or just after the trailing edge. These nodes have to be included in the
/// semantics tree to implement implicit accessibility scrolling on iOS where
/// the viewport scrolls implicitly when moving the accessibility focus from
/// the last visible node in the viewport to the first hidden one.
///
/// See also:
///
/// * [RenderViewportBase.cacheExtent], used by viewports to extend their
///   semantics clip beyond their approximate paint clip. ¿
±¿
    ¿
ÏÇÑ¿Å/// Bootstrap the semantics reporting mechanism by marking this node
/// as needing a semantics update.
///
/// Requires that this render object is attached, and is the root of
/// the render tree.
///
/// See [RendererBinding] for an example of how this function is used.   ¿tÖ_¿oÑ§/// Report the semantics of this node, for example for accessibility purposes.
///
/// This method should be overridden by subclasses that have interesting
/// semantic information.
///
/// The given [SemanticsConfiguration] object is mutable and should be
/// annotated in a manner that describes the current state. No reference
/// should be kept to that object; mutating it outside of the context of the
/// [describeSemanticsConfiguration] call (for example as a result of
/// asynchronous computation) will at best have no useful effect and at worse
/// will cause crashes as the data will be in an inconsistent state.
///
/// {@tool snippet}
///
/// The following snippet will describe the node as a button that responds to
/// tap actions.
///
/// ```dart
/// abstract class SemanticButtonRenderObject extends RenderObject {
///   @override
///   void describeSemanticsConfiguration(SemanticsConfiguration config) {
///     super.describeSemanticsConfiguration(config);
///     config
///       ..onTap = _handleTap
///       ..label = 'I am a button'
///       ..isButton = true;
///   }
///
///   void _handleTap() {
///     // Do something.
///   }
/// }
/// ```
/// {@end-tool} ¿é¿¶  ¿]¿^¿◊Ç¥¿PÅc/// Sends a [SemanticsEvent] associated with this render object's [SemanticsNode].
///
/// If this render object has no semantics information, the first parent
/// render object with a non-null semantic node is used.
///
/// If semantics are disabled, no events are dispatched.
///
/// See [SemanticsNode.sendEvent] for a full description of the behavior. ¿c¿s   ¿ØÅÌ¿˛Å,/// Removes all semantics from this render object and its descendants.
///
/// Should only be called on objects whose [parent] is not a [RenderObject].
///
/// Override this method if you instantiate new [SemanticsNode]s in an
/// overridden [assembleSemanticsNode] method, to dispose of those nodes.  ¿Ë¿È¿†ç|¿∑Å/// Mark this node as needing an update to its semantics description.
///
/// This must be called whenever the semantics configuration of this
/// [RenderObject] as annotated by [describeSemanticsConfiguration] changes in
/// any way to update the semantics tree.   ¿* ÜÜ¿*b:/// Updates the semantic information of the render object.   ¿0™óá¿1	I/// Returns the semantics that this node would like to add to its parent. ¿1&¿15  ¿1I¿1X   ¿H5É‘¿H:  ¿HU.¿Hz  ¿HÜ¿Hå  ¿Hó¿LÅ ¿MÅ\/// Called when collecting the semantics of this node.
///
/// The implementation has to return the children in paint order skipping all
/// children that are not semantically relevant (e.g. because they are
/// invisible).
///
/// The default implementation mirrors the behavior of
/// [visitChildren] (which is supposed to walk all the children). ¿Mô¿MÆ   ¿M€ÑB¿P†Ç£/// Assemble the [SemanticsNode] for this [RenderObject].
///
/// If [describeSemanticsConfiguration] sets
/// [SemanticsConfiguration.isSemanticBoundary] to true, this method is called
/// with the `node` created for this [RenderObject], the `config` to be
/// applied to that node and the `children` [SemanticsNode]s that descendants
/// of this RenderObject have generated.
///
/// By default, the method will annotate `node` with `config` and add the
/// `children` to it.
///
/// Subclasses can override this method to add additional [SemanticsNode]s
/// to the tree. If new [SemanticsNode]s are instantiated in this method
/// they must be disposed in [clearSemantics]. ¿Pª¿P   ¿P”¿PÎ  ¿Pˆ ¿Q   ¿R.Ä£¿RêN/// Override this method to handle pointer events that hit this render object. ¿Rú¿R™  ¿R∞¿R»  ¿R¿RÄ¿V#Ér¿Va(/// Returns a human understandable name.  ¿VN¿VO¿Yôd¿Y¨  ¿Y∑/¿Y»  ¿Yô¿Yö¿Y“¿Y·¿Y‚¿ZÇ¿Z¿Ä•/// Returns a description of the tree rooted at this node.
/// If the prefix argument is provided, then every line in the output
/// will be prefixed by that string. ¿Z”¿Z€  ¿ZÚ¿Z˚  ¿[0¿[&  ¿Z≠¿ZÆ¿ZÍ¿[¿[0¿[?¿[@¿\ÅÍ¿]+Äı/// Returns a one-line detailed description of the render object.
/// This description is often somewhat long.
///
/// This includes the same information for this RenderObject as given by
/// [toStringDeep], but does not recurse to any children. ¿]A¿]I  ¿][0¿]l  ¿]¿]¿]Q¿]v¿]Ö¿]Ü¿^ÖE¿^$  ¿^8&¿^U  ¿^¿^¿^¿^¿cOQ¿cq   ¿cO¿cP¿c§Ö
¿gfÉî/// Attempt to make (a portion of) this or a descendant [RenderObject] visible
/// on screen.
///
/// If `descendant` is provided, that [RenderObject] is made visible. If
/// `descendant` is omitted, this [RenderObject] is made visible.
///
/// The optional `rect` parameter describes which area of that [RenderObject]
/// should be shown on screen. If `rect` is null, the entire
/// [RenderObject] (as defined by its [paintBounds]) will be revealed. The
/// `rect` parameter is interpreted relative to the coordinate system of
/// `descendant` if that argument is provided and relative to this
/// [RenderObject] otherwise.
///
/// The `duration` parameter can be set to a non-zero value to bring the
/// target object on screen in an animation defined by `curve`.
///
/// See also:
///
/// * [RenderViewportBase.showInViewport], which [RenderViewportBase] and
///   [SingleChildScrollView] delegate this method to. ¿gy¿gà  ¿gó
¿gû  ¿gß!¿g±  ¿gŒ¿g’  ¿gª¿g√¿gƒ¿g‹¿g‚¿g„¿h≤Çá¿jüÅ /// Adds a debug representation of a [RenderObject] optimized for including in
/// error messages.
///
/// The default [style] of [DiagnosticsTreeStyle.shallow] ensures that all of
/// the properties of the render object are included in the error output but
/// none of the children of the object are.
///
/// You should always include a RenderObject in an error message if it is the
/// [RenderObject] causing the failure or contract violation of the error. ¿j∞¿j∏  ¿jø9¿j’  ¿j‹¿j¿jÒ ¿∞WÑ¬¿±ÙÅç/// Describes the semantics information a [RenderObject] wants to add to its
/// parent.
///
/// It has two notable subclasses:
///  * [_InterestingSemanticsFragment] describing actual semantic information to
///    be added to the parent.
///  * [_ContainerSemanticsFragment]: a container class to transport the semantic
///    information of multiple [_InterestingSemanticsFragment] to a parent. ¿≤N ¿≤¿≤ ¿≤$.¿≤3   ¿≤‡Åk¿¥+Å1/// Whether this fragment wants to make the semantics information of
/// previously painted [RenderObject]s unreachable for accessibility purposes.
///
/// See also:
///
///  * [SemanticsConfiguration.isBlockingSemanticsOfPreviouslyPaintedNodes]
///    describes what semantics are dropped in more detail. ¿¥PÄ«¿µÄâ/// Returns [_InterestingSemanticsFragment] describing the actual semantic
/// information that this fragment wants to add to the parent.   ¿≤]¿≤¢=/// Incorporate the fragments of children into this fragment. ¿≤©1¿≤“    ¿µÇÂ¿∂ÄÒ/// A container used when a [RenderObject] wants to add multiple independent
/// [_InterestingSemanticsFragment] to its parent.
///
/// The [_InterestingSemanticsFragment] to be added to the parent can be
/// obtained via [mergeUpFragments]. ¿∂N~ ¿∂N¿∂i ¿∂p/¿∂Ä  ¿∂• ¿∂¥   ¿∂–B¿∑   ¿∑ìj¿∑… ¿∑ì¿∑î¿∑˚¿∑¸¿∑‹¿∑˙¿∑› ¿∑x¿∑(  ¿∑/1¿∑X  ¿∑¿∑ ¿∏çÖ¿π{Åi/// A [_SemanticsFragment] that describes which concrete semantic information
/// a [RenderObject] wants to add to the [SemanticsNode] of its parent.
///
/// Specifically, it describes which children (as returned by [compileChildren])
/// should be added to the parent's [SemanticsNode] and which [config] should be
/// merged into the parent's [SemanticsNode]. ¿π∏Ä§ ¿π∏¿π’ ¿π‹¿πÛ  ¿π˝/¿∫  ¿∫D¿∫5¿∫T¿∫Z¿∫F¿∫S¿∫G¿∫U¿∫˙'¿ª  ¿¬ê#¿¬£  ¿∫`Äñ¿∫ÿb/// The [RenderObject] that owns this fragment (and any new [SemanticsNode]
/// introduced by it).   ¿ΩﬁÄµ¿æåÄç/// The [SemanticsConfiguration] the child wants to merge into the parent's
/// [SemanticsNode] or null if it doesn't want to merge anything.   ¿¡ÖÄï¿¡ıb/// Whether this fragment wants to add any semantic information to the parent
/// [SemanticsNode].   ¿¬n¿¬R   ¿¬¿¬¿ª&Ç¥¿ºÓÅÆ/// The children to be added to the parent.
///
/// See also:
///
///  * [SemanticsNode.parentSemanticsClipRect] for the source and definition
///    of the `parentSemanticsClipRect` argument.
///  * [SemanticsNode.parentPaintClipRect] for the source and definition
///    of the `parentPaintClipRect` argument.
///  * [SemanticsNode.elevationAdjustment] for the source and definition
///    of the `elevationAdjustment` argument. ¿Ω&¿Ω  ¿Ω0"¿Ω@  ¿ΩX#¿Ωi  ¿ΩÅ#¿Ωü  ¿Ω™)¿Ω»   ¿æóÅ¿øåÄÂ/// Disallows this fragment to merge any configuration into its parent's
/// [SemanticsNode].
///
/// After calling this, the fragment will only produce children to be added
/// to the parent and it will return null for [config].   ¿ø°Å‡¿¡GÅÑ/// Consume the fragments of children.
///
/// For each provided fragment it will add that fragment's children to
/// this fragment's children (as returned by [compileChildren]) and merge that
/// fragment's [config] into this fragment's [config].
///
/// If a provided fragment should not merge anything into [config] call
/// [markAsExplicit] before passing the fragment to this method. ¿¡N1¿¡w  ¿¡6¿¡7¿¬∏Å¿√%a/// Tag all children produced by [compileChildren] with `tags`.
///
/// `tags` must not be empty. ¿√-¿√E   ¿√øÅ∆¿≈;Åf/// Adds the geometric information of `ancestor` to this object.
///
/// Those information are required to properly compute the value for
/// [SemanticsNode.transform], [SemanticsNode.clipRect], and
/// [SemanticsNode.rect].
///
/// Ancestors have to be added in order from [owner] up until the next
/// [RenderObject] that owns a [SemanticsNode] is reached. ¿≈G¿≈U    ¿≈âä;¿∆[ÄÀ/// An [_InterestingSemanticsFragment] that produces the root [SemanticsNode] of
/// the semantics tree.
///
/// The root node is available as the only element in the Iterable returned by
/// [children]. ¿∆úm ¿∆ú¿∆≤ ¿∆π¿∆…  ¿∆”/¿∆„   ¿ŒúW¿Œ∆ ¿ŒÒ¿ŒÚ¿Œ“¿Œ¿Œ”¿Œa7¿Œâ   ¿Œa¿Œb¿«áP¿«  ¿«4¿«;  ¿«W¿«^  ¿«v#¿«á  ¿«ü#¿«Ω  ¿«»)¿«Ê  ¿«¿«¿Œ¯U¿œ	   ¿Œ¯¿Œ˘¿œQq¿œb  ¿œi1¿œí  ¿œQ¿œR ¿œ∆Ö¿–ÚÅ%/// A fragment with partial information that must not form an explicit
/// semantics node without merging into another _SwitchableSemanticsFragment.
///
/// This fragment is generated from synthetic SemanticsConfiguration returned from
/// [SemanticsConfiguration.childConfigurationsDelegate]. ¿—9Äâ ¿—9¿—U ¿—\¿—k  ¿—v¿—Ü  ¿—ì¿—ò¿—¿¿—π¿—ô¿—ª¿”¡/¿”Í ¿”¡¿”¬ ¿—∆Äà¿—◊  ¿—ﬁ1¿“  ¿—∆¿—«¿“RÅk¿“c  ¿“y&¿“â  ¿“•"¿“µ  ¿“Õ#¿“ﬁ  ¿“ˆ#¿”  ¿”)¿”=  ¿“R¿“S¿”ıÄﬁ¿‘   ¿”ı¿”ˆ ¿‘◊Æñ¿ÿ«ÉÈ/// An [_InterestingSemanticsFragment] that can be told to only add explicit
/// [SemanticsNode]s to the parent.
///
/// If [markAsExplicit] was not called before this fragment is added to
/// another fragment it will merge [config] into the parent's [SemanticsNode]
/// and add its [children] to it.
///
/// If [markAsExplicit] was called before adding this fragment to another
/// fragment it will create a new [SemanticsNode]. The newly created node will
/// be annotated with the [SemanticsConfiguration] that - without the call to
/// [markAsExplicit] - would have been merged into the parent's [SemanticsNode].
/// Similarly, the new node will also take over the children that otherwise
/// would have been added to the parent's [SemanticsNode].
///
/// After a call to [markAsExplicit] the only element returned by [children]
/// is the newly created node and [config] will return null as the fragment
/// no longer wants to merge any semantic information into the parent's
/// [SemanticsNode]. ¿ŸÇ6 ¿Ÿ¿Ÿ* ¿Ÿ1¿Ÿ@  ¿ŸT¿Ÿc  ¿Ÿx&¿Ÿô  ¿Ÿ§E¿Ÿÿ  ¿ŸÔ¿Ÿˇ  ¿⁄	/¿⁄  	¿⁄U¿⁄A¿⁄W¿⁄É¿⁄r¿⁄Ö¿⁄•¿⁄ù¿⁄ß¿€H¿€S  ¿€g¿€~  ¿€â¿€é ¿€¢¿€´¿€∞ ¿€√¿€ÕC¿€˝  ¿È-W¿ÈW ¿ÈÇ¿ÈÉ¿Èc¿ÈÅ¿Èd¿–¿’ ¿„¿ˇ<]¿ˇd   ¿ˇ<¿ˇ=¿0;¿9    ¿‹ç¿‹  ¿‹-¿‹4  ¿‹L¿‹S  ¿‹g¿‹|  ¿‹É¿‹ç   ¿Èâî]¿Èö  ¿È∞¿È∑  ¿È”¿È⁄  ¿ÈÚ#¿Í  ¿Í#¿Í9  ¿ÍD)¿Íb  ¿Èâ¿Èä¿˝ÍÅN¿˝˛  ¿˛&¿˛.  ¿˛J"¿˛Z   ¿ˇùÅC¿ˇÆ  ¿ˇµ1¿ˇﬁ  ¿ˇù¿ˇû¿ ‰Å\¿ ı  ¿ ˝¿  ¿ ‰¿ Â¿DÄà¿I    ¿Ì?¿˛   ¿Ì¿Ó ¿oñp¿GÄ—/// Helper class that keeps track of the geometry of a [SemanticsNode].
///
/// It is used to annotate a [SemanticsNode] with the current information for
/// [SemanticsNode.rect] and [SemanticsNode.transform]. ¿_Çv ¿Í¿¸Å~/// The `parentClippingRect` may be null if no clip is to be applied.
///
/// The `ancestors` list has to include all [RenderObject] in order that are
/// located between the [SemanticsNode] whose geometry is represented here
/// (first [RenderObject] in the list) and its closest ancestor [RenderObject]
/// that also owns its own [SemanticsNode] (last [RenderObject] in the list).¿&¿  ¿/"¿?  ¿W%¿t   ¿Ÿ¿ﬂ  ¿Ò¿˜  ¿¿  ¿(¿2  ¿p?¿Ö ¿°¿®¿©¿≠¿Æ¿¬¿« ¿◊¿<O¿s(/// Value for [SemanticsNode.transform].   ¿èk¿“6/// Value for [SemanticsNode.parentSemanticsClipRect].   ¿˛_¿=2/// Value for [SemanticsNode.parentPaintClipRect].   ¿a=¿ê#/// Value for [SemanticsNode.rect].   ¿‚Å¿¶Ä¥/// Whether the [SemanticsNode] annotated with the geometric information tracked
/// by this object can be dropped from the semantics tree without losing
/// semantics information.   ¿ÌÅ“¿°Åñ/// Whether the [SemanticsNode] annotated with the geometric information
/// tracked by this object should be marked as hidden because it is not
/// visible on screen.
///
/// Hidden elements should still be included in the tree to work around
/// platform limitations (e.g. accessibility scrolling on iOS).
///
/// See also:
///
///  * [SemanticsFlag.isHidden] for the purpose of marking a node as hidden.   ¿¢áã¿	ÁÅ3/// Computes values, ensuring `rect` is properly bounded by ancestor clipping rects.
///
/// See also:
///
/// * [RenderObject.describeSemanticsClip], typically used to determine `parentSemanticsClipRect`.
/// * [RenderObject.describeApproximatePaintClip], typically used to determine `parentPaintClipRect`. ¿	ˆ¿	˝  ¿
¿
  ¿
0¿
D   ¿¥Å)¿Ô+/// From parent to child coordinate system. ¿˛
¿  ¿
¿   ¿¸Ç9¿  ¿/¿=  ¿J¿X  ¿b¿k  ¿y¿Ç   ¿9Ä•¿F  ¿V¿]  ¿_¿f    ¿·ÇQ¿˘Å/// A class that creates [DiagnosticsNode] by wrapping [RenderObject.debugCreator].
///
/// Attach a [DiagnosticsDebugCreator] into [FlutterErrorDetails.informationCollector]
/// when a [RenderObject.debugCreator] is available. This will lead to improved
/// error message. ¿9Ä˜ ¿ß¿æi/// Create a [DiagnosticsProperty] with its [value] initialized to input
/// [RenderObject.debugCreator].¿ø¿«  
¿”¿ÿ¿.¿‚¿˙¿¿	¿¿¿           ÜÅhá7Å/// Signature for painting into a [PaintingContext].
///
/// The `offset` argument is the offset from the origin of the coordinate system
/// of the [PaintingContext.canvas] to the coordinate system of the callee.
///
/// Used by many of the methods of [PaintingContext].  á_áp  áxáÄ   ¿ }@Å¿ ~ÄŒ/// Signature for a function that is called for each [RenderObject].
///
/// Used by [RenderObject.visitChildren] and [RenderObject.visitChildrenForSemantics].
///
/// The `child` argument must not be null.  ¿ ~;¿ ~I   ¿ ~QÄΩ¿ ~…o/// Signature for a function that is called during layout.
///
/// Used by [RenderObject.invokeLayoutCallback].¿ ~ÿ¿ ~ÿ ¿ ~ˇ¿    ¿ ÷jÄ¥¿ ÷‰q/// Signature for the callback to [PipelineOwner.visitChildren].
///
/// The argument is the child being visited.  ¿ ◊	¿ ◊   ¿k=äò¿lpÅ,/// Generic mixin for render objects with one child.
///
/// Provides a child model for a render object subclass that has
/// a unique child, which is accessible via the [child] getter.
///
/// This mixin is typically used to implement render objects created
/// in a [SingleChildRenderObjectWidget].¿lã¿lã ¿r}¿rà  ¿ríG¿r…%/// The render object's unique child.   ¿r‹Ä™¿r‡  ¿rÊ¿rÚ   ¿l¿Öπ¿mëÄø/// Checks whether the given render object has the correct [runtimeType] to be
/// a child of this render object.
///
/// Does nothing if assertions are disabled.
///
/// Always returns true. ¿m§¿m≤   ¿säf¿sõ  ¿s¢¿s±  ¿sä¿sã¿sÙI¿t   ¿sÙ¿sı¿tAe¿tR   ¿tA¿tB¿t™y¿tª  ¿t…¿tﬁ  ¿t™¿t´¿u'Ä¨¿uI   ¿u'¿u( ¿u◊ÉO¿wÅ5/// Parent data to support a doubly-linked list of children.
///
/// The children can be traversed using [nextSibling] or [previousSibling],
/// which can be called on the parent data of the render objects
/// obtained via [ContainerRenderObjectMixin.firstChild] or
/// [ContainerRenderObjectMixin.lastChild].¿w,¿w, ¿w^Q¿w†4/// The previous sibling in the parent's child list. ¿w≥I¿wÒ0/// The next sibling in the parent's child list.  ¿xÅ#¿x4/// Clear the sibling pointers.  ¿x#¿x$ ¿y(≠¿}
É€/// Generic mixin for render objects with a list of children.
///
/// Provides a child model for a render object subclass that has a doubly-linked
/// list of children.
///
/// The [ChildType] specifies the type of the children (extending [RenderObject]),
/// e.g. [RenderBox].
///
/// [ParentDataType] stores parent container data on its child render objects.
/// It must extend [ContainerParentDataMixin], which provides the interface
/// for visiting children. This data is populated by
/// [RenderObject.setupParentData] implemented by the class using this mixin.
///
/// When using [RenderBox] as the child type, you will usually want to make use of
/// [RenderBoxContainerDefaultsMixin] and extend [ContainerBoxParentData] for the
/// parent data.
///
/// Moreover, this is a required mixin for render objects returned to [MultiChildRenderObjectWidget].
///
/// See also:
///
///  * [SlottedContainerRenderObjectMixin], which organizes its children
///    in different named slots.¿}%¿}%¿}E:¿}E ¿Äæ¿Ä¬ ¿Ä–¿Ü÷¿Ü·  ¿Ü¿Ü˚  ¿Ä’@¿Ä˚/// The number of children.   ¿°JR¿°Ç&/// The first child in the child list.   ¿°†O¿°◊%/// The last child in the child list.   ¿}ïÅô¿}ö  ¿}∫¿}≈  ¿}Õ¿}Ÿ   ¿1Åâ¿6  ¿R¿]  ¿e¿q   ¿ÅÖπ¿ÅÍÄø/// Checks whether the given render object has the correct [runtimeType] to be
/// a child of this render object.
///
/// Does nothing if assertions are disabled.
///
/// Always returns true. ¿Å˝¿Ç   ¿á	áÃ¿á  ¿á#¿á.  ¿á6¿áB   ¿éŸÇ≥¿èµÄŒ/// Insert child into this render object's child list after the given child.
///
/// If `after` is null, then this inserts the child at the start of the list,
/// and the child becomes the new [firstChild]. ¿èº¿è«  ¿èœ¿è€   ¿ëêÄá¿ë◊?/// Append child to the end of this render object's child list. ¿ë€¿ëÊ   ¿íÄí¿íjG/// Add all the children to the end of this render object's child list. ¿íq¿íÉ   ¿í±Ñ]¿í∂  ¿íÀ¿í÷   ¿óÄ∆¿óÑf/// Remove this child from the child list.
///
/// Requires the child to be present in the child list. ¿óã¿óñ   ¿ó‹Ç3¿òc{/// Remove all their children from this render object's child list.
///
/// More efficient than removing them individually.   ¿öÇŒ¿õ=Å/// Move the given `child` in the child list to be after another child.
///
/// More efficient than removing and re-adding the child. Requires the child
/// to already be in the child list at some position. Pass null for `after` to
/// move the child to the start of the child list. ¿õB¿õM  ¿õU¿õa   ¿úÂÅ)¿úˆ  ¿ú˝¿ù  ¿úÂ¿úÊ¿ûÅ¿û#   ¿û¿û¿ü"Å¿ü3   ¿ü"¿ü#¿†,Å¿†=  ¿†K¿†`  ¿†,¿†-¿°ÛÅ¿¢A@/// The previous child before the given child in the child list. ¿¢M¿¢X   ¿£Å¿£N;/// The next child after the given child in the child list. ¿£Y¿£d   ¿§Ç'¿§/   ¿§¿§ ¿¶8ä¿ßlÅ-/// Mixin for [RenderObject] that will call [systemFontsDidChange] whenever the
/// system fonts change.
///
/// System fonts can change when the OS installs or removes a font. Use this
/// mixin if the [RenderObject] uses [TextPainter] or [Paragraph] to correctly
/// update the text when it happens.  ¿™H4¿™M ¿™w ¿ß§Ç†¿™Ç1/// A callback that is called when system fonts have changed.
///
/// The framework defers the invocation of the callback to the
/// [SchedulerPhase.transientCallbacks] phase to ensure that the
/// [RenderObject]'s text layout is still valid when user interactions are in
/// progress (which usually take place during the [SchedulerPhase.idle] phase).
///
/// By default, [markNeedsLayout] is called on the [RenderObject]
/// implementing this mixin.
///
/// Subclass should override this method to clear any extra cache that depend
/// on font-related metrics.  ¿©Ó¿©Ô¿©˚¿©¸¿™ÄÉO¿™Ö    ¿≠”Åæ¿≠‰  ¿≠Î¿≠˙  ¿≠”¿≠‘¿ØïÄæ¿Ø¶   ¿Øï¿Øñ ¿ ‡&H¿ ‡3 ¿ ‡N  î <ÄÜÄ§Ä•Ä“Ä‰ÄÂÅÅ8Å`ÅàÅ±Å⁄Å€ÅÇÇÇÇMÇlÇÇñÇ®Ç∏ÇÃÇŸÇÈÇ˘É	É!É0ÉBÉãÉ≥É¥É¸Ñ ÑJÑíÑ∆Ñ ÑÿÑ‹Ö'ÖlÖÖºÖ…Ö⁄ÖÓÖÔÖ˚ÜÜÜÜTÜXÜ©ÜıÜ˘á/áàáâáüá£áıà:àÑàòàúàÌâ=âçâ◊âÒâıä<äzä¶äßä…äœãã.ã;ãzã{ã£ã§ãÒå8å>åyååÀåÈåÍçççbçØé éé"é2é8éàé©èè,èIèVèåèìèóèòèøèŸêê%ê,êQêaêòê«ê˜ëëë0ë:ëÇë†ë∆ëˆë˜íDíèí⁄ììNìÉìêìÕìÎì˝î*î?îKîqîÀî˝ïQï¥ï˛ññ<ñBñqñrñØñ‰ñÙó>óQó[ó\ó°óŸó⁄ò)ò]òöòƒò»ò…ôôôhôµöö>öDöTöZö™öÀõõGõgõïõñõ„õˇúú9úLúVúÆúﬁù0ùëùŸù‡ûûBûFûGûîû‰üüü.ü4üÅüõü–üÍ††?†F†V†u†Ñ†º†·†Í†˝°°°°0°6°Ñ°”¢#¢Z¢j¢í¢•¢Ø¢∞¢”¢Ú££d£´£◊§§5§b§o§ú§¢§¶§ß§„§˛•#•`•a•£•ﬁ¶!¶.¶]¶É¶ã¶ù¶÷ß	ßWßlßxß~ß≥®®,®O®S®T®†®Ø®µ®˛©D©q©w©ƒ©◊©‰™™!™5™X™\™]™w™£™≥™ ™Ò´´5´D´k´é´Ø´∑´ ´‘´Í´Ó´Ô¨¨#¨D¨W¨X¨|¨Ç¨Ã≠≠5≠A≠W≠r≠ã≠ë≠¥≠…≠Õ≠Œ≠ÈÆÆ7Æ]ÆÆ´ÆØÆ∞ØØØØdØ≤Ø¸∞<∞B∞~∞Ñ∞î∞ø±±B±F±G±Ç±à±‘≤#≤r≤≤Ö≤‘≥≥1≥>≥O≥p≥â≥ó≥ù≥≠≥’≥˘¥"¥@¥x¥∂¥æ¥Èµµ6µTµÅµ≤µ∫µÕµ◊∂∂)∂?∂S∂W∂X∂®∂º∂¬∑∑Z∑i∑Ö∑Æ∑≤∑≥∏∏∏\∏•∏Úπ$πAπkπoπpπ•π´π¸∫7∫=∫ä∫‹ª,ªrªxªàªéª‹ªÈºº%º=ºAºBºìº‚Ω2ΩTΩZΩ©ΩÌæææLæúæÏø:ø}øíøòøÈ¿ @:¿ @á¿ @ÿ¿ A(¿ Af¿ Al¿ A|¿ AÇ¿ AÕ¿ A·¿ B[¿ B©¿ B˙¿ C¿ CB¿ CH¿ Ce¿ CÇ¿ C¿ CÒ¿ D¿ D>¿ DB¿ DC¿ Dã¿ Dë¿ D◊¿ D‰¿ E3¿ Ec¿ Eg¿ Eh¿ Eó¿ Eù¿ EÔ¿ F7¿ Fn¿ F∫¿ G
¿ GH¿ Gå¿ Gí¿ G‡¿ H$¿ H9¿ H?¿ Há¿ H–¿ I¿ I.¿ I4¿ IÖ¿ IÕ¿ I›¿ I„¿ J3¿ Jt¿ Jz¿ J√¿ J…¿ K¿ K`¿ K§¿ KÙ¿ LD¿ Lå¿ Lÿ¿ M¿ M#¿ MŸ¿ M˛¿ N¿ N.¿ N4¿ Nl¿ Nà¿ N«¿ N”¿ N˜¿ O¿ Oi¿ O}¿ Oä¿ OÌ¿ P ¿ P¿ P
¿ P¿ PB¿ PH¿ Pó¿ Pù¿ P‚¿ PË¿ Q8¿ Q{¿ QÅ¿ Q—¿ R¿ RC¿ RI¿ Rö¿ R‹¿ R‚¿ S3¿ S9¿ SÄ¿ TI¿ Tn¿ Tã¿ Tû¿ T§¿ Tÿ¿ U¿ U/¿ Up¿ U|¿ U¢¿ U…¿ V¿ V&¿ V3¿ Vñ¿ V©¿ VØ¿ V≥¿ V¥¿ Vﬁ¿ V‰¿ W3¿ W9¿ W~¿ WÑ¿ W‘¿ X¿ X¿ Xl¿ X∑¿ X”¿ XŸ¿ Y)¿ Yj¿ Yp¿ Y¥¿ Y∫¿ Z¿ Z≈¿ ZÍ¿ [¿ [¿ [ ¿ [T¿ [å¿ [®¿ [Á¿ [Û¿ \¿ \>¿ \á¿ \õ¿ \®¿ ]	¿ ]¿ ]"¿ ]&¿ ]'¿ ]Y¿ ]_¿ ]°¿ ]ß¿ ]¯¿ ^¿ ^$¿ ^t¿ ^ª¿ ^¡¿ _¿ _¿ _[¿ _≠¿ _˝¿ `C¿ `—¿ a¿ a9¿ a`¿ ar¿ av¿ aw¿ a®¿ aÆ¿ a˝¿ b¿ bT¿ bz¿ bÄ¿ bÃ¿ c¿ cV¿ c\¿ c≠¿ cÔ¿ cı¿ d<¿ d÷¿ e2¿ er¿ eé¿ eœ¿ e˚¿ f¿ f¿ f,¿ f<¿ fù¿ f¶¿ f∫¿ f«¿ f‘¿ fÂ¿ g¿ g3¿ gK¿ g^¿ gd¿ gh¿ gi¿ gõ¿ g°¿ gÓ¿ h¿ h ¿ hp¿ hπ¿ i	¿ i¿ i\¿ iú¿ i¢¿ iÈ¿ iÔ¿ j<¿ jé¿ jﬁ¿ k$¿ kò¿ k”¿ k›¿ kÛ¿ l¿ l8¿ lJ¿ lN¿ lO¿ l[¿ lÁ¿ lÈ¿ lÍ¿ m¿ m¿ me¿ m¶¿ m™¿ m–¿ m‘¿ n$¿ np¿ nî¿ nò¿ nÁ¿ o7¿ oÑ¿ oà¿ oÿ¿ p&¿ pt¿ p¡¿ pŒ¿ p“¿ q¿ qi¿ q≥¿ qÙ¿ rD¿ rî¿ r‚¿ s(¿ sD¿ sH¿ só¿ s‚¿ t1¿ t{¿ t±¿ u¿ u¿ u¿ uk¿ uπ¿ v¿ v"¿ v&¿ vv¿ v«¿ v“¿ vÔ¿ w@¿ wà¿ wü¿ w†¿ wÍ¿ w˛¿ wˇ¿ xA¿ xZ¿ x[¿ xâ¿ xè¿ x“¿ xÿ¿ y'¿ yC¿ yI¿ yó¿ yÁ¿ z6¿ z¿ z∏¿ {	¿ {Z¿ {k¿ {q¿ {ø¿ |¿ |E¿ |K¿ |ç¿ |©¿ |œ¿ |ˇ¿ }¿ } ¿ }9¿ }=¿ }?¿ }@¿ }Ö¿ }â¿ }‡¿ }‰¿ ~¿ ~P¿ ~Q¿ ~å¿ ~ê¿ ~¡¿ ¿ ¿ I¿ á¿ †¿ º¿ Ò¿ ˜¿ ˚¿ ¸¿ Ä¿ Ä¿ Äe¿ ÄÖ¿ ÄÜ¿ Äí¿ Ä•¿ Ä¡¿ Ä˘¿ Äˇ¿ Å(¿ Å,¿ Å.¿ Å/¿ Åf¿ Åj¿ Å∫¿ Ç¿ ÇX¿ Çp¿ Çt¿ Çø¿ É¿ ÉP¿ É|¿ É≈¿ Ñ¿ Ñc¿ Ñ¥¿ Ö¿ ÖJ¿ Öê¿ Öﬁ¿ Ü)¿ Üi¿ Üµ¿ á¿ áP¿ áT¿ á£¿ áÌ¿ à:¿ àX¿ à\¿ à≠¿ à˚¿ âJ¿ âó¿ â„¿ ä1¿ är¿ äv¿ ä¬¿ ã¿ ã`¿ ã™¿ ãŸ¿ ãÔ¿ å¿ å¿ åb¿ åØ¿ å’¿ åÁ¿ ç¿ ç&¿ çB¿ çe¿ çk¿ çl¿ çº¿ ç‡¿ çÊ¿ é7¿ éÑ¿ é—¿ é¿ éˆ¿ è=¿ èä¿ è”¿ è˝¿ è˛¿ êD¿ êJ¿ êí¿ ê®¿ ê◊¿ êÿ¿ ë/¿ ë5¿ ëä¿ ë∑¿ ëÎ¿ ëÏ¿ í4¿ í:¿ í{¿ í´¿ í¨¿ íÚ¿ í¯¿ ìH¿ ìo¿ ìé¿ ì¥¿ ì—¿ ìﬁ¿ î¿ î¿ î¿ î¿ îV¿ îÅ¿ îú¿ î¬¿ î‡¿ îÓ¿ îÙ¿ ï¿ ï$¿ ïA¿ ïE¿ ïF¿ ïí¿ ï›¿ ñ¿ ñ¿ ñh¿ ñ¥¿ ñ˝¿ ó5¿ ó:¿ óv¿ ó∆¿ ò¿ ò`¿ òu¿ òú¿ òŸ¿ ò⁄¿ ô¿ ô¿ ô^¿ ôd¿ ôß¿ ô√¿ ôı¿ ö¿ ö>¿ ö?¿ öÅ¿ öá¿ ö◊¿ õ"¿ õX¿ õ^¿ õß¿ õæ¿ õ◊¿ ú
¿ ú¿ úO¿ úÑ¿ ú¿¿ úÚ¿ úˇ¿ ù	¿ ù¿ ù*¿ ùK¿ ù]¿ ùà¿ ùë¿ ùó¿ ùß¿ ù«¿ ù⁄¿ ù‰¿ ùÓ¿ û¿ ûF¿ ûâ¿ ûπ¿ ü	¿ ü?¿ üg¿ üì¿ ü≈¿ †¿ †/¿ †=¿ †I¿ †|¿ †µ¿ †ﬁ¿ †Í¿ †Ù¿ °?¿ °b¿ °ä¿ °í¿ °ì¿ °•¿ °Ã¿ °·¿ °Ì¿ ¢"¿ ¢?¿ ¢G¿ ¢∞¿ ¢¿¿ ¢Ê¿ ¢¯¿ £¿ £C¿ £X¿ £d¿ £¿ £•¿ £≠¿ £≥¿ £∑¿ £∏¿ §¿ §W¿ §§¿ §Û¿ • ¿ •T¿ •U¿ •É¿ •√¿ •‚¿ •ˆ¿ ¶¿ ¶<¿ ¶n¿ ¶Å¿ ¶ã¿ ¶ï¿ ¶ß¿ ¶∑¿ ¶‹¿ ¶Ó¿ ß'¿ ß<¿ ßH¿ ßN¿ ßR¿ ßS¿ ß•¿ ß›¿ ß„¿ ®1¿ ®E¿ ®e¿ ®~¿ ®º¿ ®¬¿ ©&¿ ©p¿ ©¥¿ ©€¿ ©„¿ ©È¿ ™¿ ™L¿ ™p¿ ™v¿ ™Ï¿ ´¿ ´)¿ ´/¿ ´3¿ ´4¿ ´p¿ ´q¿ ´Æ¿ ´¥¿ ´Û¿ ´˘¿ ¨7¿ ¨X¿ ¨à¿ ¨©¿ ¨™¿ ¨·¿ ¨Á¿ ≠0¿ ≠Ä¿ ≠—¿ ≠◊¿ Æ ¿ Æ6¿ ÆO¿ ÆÇ¿ Æî¿ Æ∆¿ Æ˚¿ Ø6¿ Øg¿ Øt¿ Ø~¿ Øì¿ Øü¿ Ø¿¿ Ø—¿ Ø¸¿ ∞¿ ∞¿ ∞¿ ∞'¿ ∞H¿ ∞]¿ ∞i¿ ∞©¿ ∞÷¿ ∞◊¿ ±¿ ±à¿ ±π¿ ≤¿ ≤H¿ ≤t¿ ≤ò¿ ≤‘¿ ≤È¿ ≥$¿ ≥2¿ ≥E¿ ≥q¿ ≥}¿ ≥á¿ ≥è¿ ≥ƒ¿ ≥‡¿ ≥Ë¿ ¥P¿ ¥`¿ ¥r¿ ¥î¿ ¥©¿ ¥µ¿ ¥–¿ ¥ˆ¿ ¥˛¿ µ¿ µ¿ µ	¿ µV¿ µ\¿ µ≠¿ µ˝¿ ∂.¿ ∂x¿ ∂¬¿ ∑¿ ∑!¿ ∑'¿ ∑p¿ ∑ç¿ ∑∆¿ ∑È¿ ∑Í¿ ∏*¿ ∏0¿ ∏Å¿ ∏±¿ ∏˝¿ π%¿ π&¿ πw¿ π√¿ π…¿ ∫¿ ∫L¿ ∫õ¿ ∫µ¿ ∫ª¿ ª¿ ª\¿ ª•¿ ª√¿ ª…¿ º¿ ºP¿ º†¿ º∆¿ Ω¿ Ω-¿ ΩJ¿ Ω~¿ ΩÇ¿ ΩÉ¿ Ω§¿ Ω˙¿ æ¿ æû¿ æÔ¿ ø¿ ø ¿ øJ¿ øl¿ øä¿ ø≤¿ ø∏¿ øº¿ øΩ¿ ø„¿ ¿¿ ¿/¿ ¿L¿ ¿P¿ ¿Q¿ ¿v¿ ¿ª¿ ¿º¿ ¡¿ ¡¿ ¡¿ ¡Q¿ ¡ö¿ ¡†¿ ¡Ì¿ ¬(¿ ¬g¿ ¬m¿ ¬∂¿ ¬–¿ ¬Û¿ √¿ √¿ √ ¿ √N¿ √T¿ √y¿ √â¿ √¨¿ √ø¿ √…¿ √”¿ ƒ#¿ ƒj¿ ƒê¿ ƒ»¿ ≈¿ ≈+¿ ≈5¿ ≈=¿ ≈k¿ ≈†¿ ≈¿¿ ≈»¿ ∆4¿ ∆D¿ ∆V¿ ∆|¿ ∆ë¿ ∆ù¿ ∆∏¿ ∆ﬁ¿ ∆Ê¿ ∆Ï¿ ∆¿ ∆Ò¿ «¿ «¿ «A¿ «`¿ «a¿ «Ä¿ «≈¿ «Ê¿ «˜¿ «˚¿ «¸¿ »I¿ »O¿ »ö¿ »È¿ …¿ …7¿ …V¿ …p¿ …£¿ …¿¿ …¡¿ …Ù¿  ¿  ¿  ¿  ¿  J¿  P¿  õ¿  Ï¿ À¿ À ¿ À?¿ Àu¿ Àã¿ À®¿ À©¿ À‹¿ ÀÚ¿ À¯¿ À¸¿ À˝¿ ÃB¿ Ãâ¿ Ã◊¿ Õ&¿ Õù¿ Õû¿ Õ ¿ Õ–¿ Œ¿ Œl¿ Œπ¿ œ¿ œQ¿ œ†¿ œÒ¿ –¿ –¿ –X¿ –|¿ –Ç¿ –”¿ —"¿ —(¿ —S¿ —|¿ —§¿ —Ã¿ “%¿ “?¿ “i¿ “Ü¿ “¶¿ “¨¿ “∞¿ “±¿ “˙¿ ” ¿ ”Q¿ ”c¿ ”i¿ ”∏¿ ‘¿ ‘/¿ ‘W¿ ‘~¿ ‘◊¿ ‘Ù¿ ’¿ ’;¿ ’Q¿ ’W¿ ’[¿ ’\¿ ’§¿ ’™¿ ’∫¿ ’¿¿ ’Ê¿ ÷¿ ÷C¿ ÷c¿ ÷g¿ ÷i¿ ÷j¿ ÷´¿ ÷Ø¿ ÷‹¿ ◊¿ ◊ ¿ ◊H¿ ◊L¿ ◊å¿ ◊Ÿ¿ ÿ(¿ ÿv¿ ÿ√¿ ÿÍ¿ ÿÓ¿ Ÿ>¿ Ÿè¿ Ÿ’¿ Ÿı¿ Ÿ˘¿ ⁄G¿ ⁄ì¿ ⁄À¿ €¿ €X¿ €^¿ €Æ¿ €¿ €ˆ¿ ‹¿ ‹¿ ‹S¿ ‹ë¿ ‹Æ¿ ‹Ø¿ ‹˝¿ ›K¿ ›d¿ ›j¿ ›ª¿ ﬁ¿ ﬁU¿ ﬁt¿ ﬁz¿ ﬁ¡¿ ﬂ¿ ﬂ^¿ ﬂd¿ ﬂt¿ ﬂz¿ ﬂ√¿ ‡¿ ‡#¿ ‡%¿ ‡&¿ ‡p¿ ‡q¿ ‡ì¿ ‡ó¿ ‡€¿ ‡˚¿ ‡ˇ¿ ·B¿ ·F¿ ·í¿ ·‚¿ ‚-¿ ‚M¿ ‚Q¿ ‚ú¿ ‚Í¿ „3¿ „É¿ „–¿ ‰¿ ‰o¿ ‰ñ¿ ‰ö¿ ‰ﬁ¿ Â¿ Â	¿ Â¿ Â¿ Âk¿ Âª¿ Ê¿ Ê&¿ Ê*¿ Êv¿ Êƒ¿ Á¿ Áe¿ Á£¿ Áß¿ ÁŒ¿ Á“¿ Ë¿ Ëf¿ Ë≥¿ Ë˛¿ ÈM¿ Èõ¿ ÈÎ¿ Í9¿ ÍÅ¿ Í–¿ Î¿ Îh¿ Î©¿ Î≠¿ Î¸¿ ÏL¿ Ïù¿ ÏŸ¿ Ï›¿ ÏÏ¿ Ï¿ Ì7¿ Ì~¿ Ìö¿ Ìû¿ ÌÏ¿ Ó=¿ Óâ¿ Ó÷¿ Ô¿ Ô\¿ Ô`¿ Ô∞¿ Ô„¿ ÔÁ¿ Ô˚¿ Ôˇ¿ J¿ y¿ }¿  ¿ Ò¿ Òi¿ Ò±¿ Ò˚¿ ÚI¿ Úñ¿ Úª¿ Úø¿ ÚÌ¿ ÚÒ¿ ÛB¿ Ûì¿ Ûﬁ¿ Ù.¿ Ù¿ Ùñ¿ Ùö¿ ÙÍ¿ Ù˙¿ Ù˛¿ ı>¿ ıå¿ ıù¿ ı°¿ ıÓ¿ ˆ=¿ ˆA¿ ˆt¿ ˆx¿ ˆ ¿ ˜¿ ˜i¿ ˜¥¿ ˜ˇ¿ ¯¿ ¯Q¿ ¯û¿ ¯Ì¿ ˘9¿ ˘à¿ ˘◊¿ ˙¿ ˙]¿ ˙≠¿ ˙∫¿ ˚¿ ˚@¿ ˚S¿ ˚¿ ˚∑¿ ˚‚¿ ¸¿ ¸¿ ¸%¿ ¸+¿ ¸p¿ ¸ù¿ ¸°¿ ¸¢¿ ¸Ò¿ ˝@¿ ˝ã¿ ˝∫¿ ˝¿¿ ˛¿ ˛R¿ ˛û¿ ˛Ω¿ ˛√¿ ˇ¿ ˇ¿ ˇ%¿ ˇ+¿ ˇX¿ ˇn¿ ˇÖ¿ ˇ´¿ ˇ¡¿ ˇ·¿ 
¿ $¿ ,¿ 0¿ 1¿ W¿ ]¿ ö¿ ∂¿  ¿ ⁄¿ ˚¿¿¿-¿1¿2¿Q¿R¿ä¿ê¿€¿*¿u¿¥¿˝¿M¿e¿k¿∂¿›¿„¿¿0¿C¿`¿å¿”¿Ÿ¿¯¿¿U¿g¿ï¿®¿À¿9¿G¿T¿q¿Ñ¿é¿í¿ì¿ü¿†¿–¿÷¿#¿r¿¬¿ ¿¿Q¿Ä¿–¿	¿	_¿	´¿	˜¿
2¿
L¿
M¿
é¿
î¿
‰¿¿L¿s¿û¿≈¿À¿œ¿–¿˙¿ ¿P¿`¿f¿≤¿¿T¿ß¿¯¿I¿ó¿Ë¿6¿b¿}¿è¿ê¿·¿¿ˆ¿7¿D¿n¿ê¿≤¿”¿Ú¿¯¿¸¿˝¿7¿=¿é¿∆¿”¿¿Ò¿¿C¿\¿]¿•¿´¿˙¿M¿^¿k¿ì¿∂¿∆¿Ê¿
¿'¿/¿x¿ã¿ï¿ñ¿≤¿…¿Ô¿¿)¿=¿Z¿`¿y¿}¿~¿–¿÷¿%¿x¿â¿ñ¿Ω¿‡¿¿.¿R¿r¿è¿©¿Ω¿”¿Ÿ¿¿¿6¿:¿;¿¿Ö¿’¿¿¿J¿P¿n¿t¿Ñ¿ä¿ﬁ¿ˆ¿˜¿D¿v¿í¿¶¿ ¿ˇ¿4¿Ñ¿Ø¿ﬂ¿¿z¿…¿¿c¿ú¿Ù¿˝¿¿	¿
¿U¿[¿®¿µ¿Ô¿¿¿a¿g¿¥¿¡¿˚¿ !¿ "¿ ]¿ c¿ ∞¿ º¿! ¿!+¿!,¿!s¿!º¿"
¿"'¿"E¿"á¿"¥¿"ƒ¿"˙¿#¿#.¿#8¿#V¿#f¿#ú¿#Ø¿#π¿#Ã¿#–¿#—¿$!¿$-¿$3¿$s¿$y¿$ø¿$¸¿%¿%¿%C¿%D¿%z¿%Ä¿%–¿& ¿&b¿&h¿&∂¿&›¿&Û¿'¿'¿'W¿'ó¿'ƒ¿'Ò¿(¿(:¿(G¿(S¿([¿(\¿(ã¿(Ÿ¿)*¿)B¿)x¿)è¿)§¿)¨¿)≠¿)⁄¿*¿*~¿*⁄¿+¿+P¿+ù¿+Ï¿,¿,¿,ò¿,Ø¿,π¿,∫¿,Ò¿-7¿-r¿-É¿-®¿-π¿-√¿-À¿-Ã¿.¿.ç¿.Ô¿/¿/¿/,¿/d¿/µ¿/—¿07¿0D¿0q¿0£¿0µ¿0Ï¿0˘¿1&¿1r¿1ë¿1»¿1’¿1·¿1È¿1Í¿2¿2H¿2¨¿3¿3<¿3n¿3Ä¿3∑¿3ƒ¿43¿4?¿4G¿4H¿4≤¿5 ¿55¿5í¿5Û¿6"¿6#¿6Y¿6j¿6ë¿6º¿6Ï¿6¸¿71¿7<¿7g¿7⁄¿7˜¿8,¿87¿8|¿8£¿8ø¿8Ù¿8ˇ¿9¿9ñ¿9˘¿:¿:¿:¿:+¿:/¿:0¿:Å¿:Æ¿:¥¿;¿;P¿;ô¿;ü¿;Í¿<#¿<s¿<ƒ¿<Ÿ¿<Ê¿=¿=.¿=>¿=[¿=n¿=x¿=ë¿=ï¿=ñ¿= ¿=–¿>¿>C¿>\¿>]¿>ß¿>≠¿>‚¿>Ë¿?¿?E¿?F¿?{¿?Å¿?Õ¿@¿@	¿@X¿@•¿@π¿@ø¿A¿A9¿AJ¿Ao¿Aå¿A®¿Aº¿B
¿BQ¿BÜ¿B∆¿Bˆ¿C¿C+¿C1¿CX¿CÉ¿C´¿C±¿CÊ¿D%¿DT¿Do¿Dá¿Dç¿D‹¿E%¿EX¿E}¿Eü¿E•¿E©¿E™¿EÃ¿E“¿F"¿FM¿FS¿F¢¿FÈ¿FÔ¿G<¿Gb¿Gs¿GÖ¿G°¿G¥¿G¿GÙ¿Gı¿H5¿H;¿Hå¿Hÿ¿I%¿I\¿Ib¿Iò¿I∂¿IÃ¿I‹¿I˘¿J¿J¿J)¿J-¿JI¿JJ¿Jm¿Jn¿J¿¿K¿K:¿K;¿K~¿KÑ¿K≈¿KÎ¿K¯¿L¿L8¿Lù¿L£¿LΩ¿L¡¿Lﬁ¿Lﬂ¿M"¿Mf¿M¨¿MÚ¿N)¿N6¿N_¿N`¿Nü¿N‡¿O¿O
¿OL¿Oç¿OÃ¿P¿PE¿Pt¿P±¿P÷¿Q¿Q$¿Q*¿QH¿Qp¿Q´¿QŒ¿QÈ¿R,¿RB¿RJ¿RP¿R|¿Rç¿Rë¿Rí¿R„¿S4¿Sz¿SÄ¿Sî¿Sö¿SÎ¿T9¿TÜ¿T≈¿TÀ¿U¿UP¿UV¿U¶¿UÔ¿V?¿Vå¿VŸ¿W&¿W`¿Wf¿Wß¿Wı¿X8¿X>¿XU¿X[¿X§¿XÓ¿Y=¿Y|¿Yπ¿Z
¿Z&¿Z,¿ZX¿Z§¿Zø¿ZÊ¿Z˛¿[A¿[O¿[U¿[z¿[ï¿[±¿\ ¿\M¿\q¿\í¿\ö¿\®¿\Æ¿\”¿\Ú¿\ˇ¿]¿]5¿]I¿]z¿]ƒ¿]–¿]Á¿]ı¿^#¿^I¿^Q¿^W¿^[¿^\¿^´¿^Ω¿^√¿_¿_X¿_ß¿_ÿ¿_ﬁ¿`¿`¿`:¿`a¿`z¿`õ¿`…¿`Ú¿a¿a¿aK¿aQ¿at¿ax¿ay¿aª¿b¿bG¿bM¿bñ¿bú¿b ¿b˚¿c¿c/¿c3¿c4¿cV¿c{¿cõ¿cÕ¿c”¿c◊¿cÿ¿c˛¿d#¿d1¿d7¿dÉ¿dØ¿dÊ¿e¿eP¿eV¿eZ¿e[¿eò¿eÿ¿e¸¿f ¿f¿fG¿fo¿fs¿ft¿f¿¿f∆¿g¿g9¿g?¿gÉ¿g§¿g¡¿g◊¿g¸¿h#¿hJ¿hh¿hx¿hû¿h±¿hª¿hÂ¿hÈ¿hÍ¿i¿i7¿i^¿iã¿iØ¿i⁄¿j¿j¿j:¿j^¿jî¿jµ¿j‘¿k¿k¿k(¿k2¿k<¿kS¿ku¿ké¿k¡¿k«¿k◊¿l¿l2¿lW¿lj¿lt¿lé¿l§¿l®¿l©¿l⁄¿l‡¿m/¿m~¿mŒ¿m¸¿n¿nP¿n†¿nÒ¿o=¿oÅ¿o—¿p¿p¿p_¿p™¿pÚ¿p¯¿qF¿qï¿q‚¿r¿r<¿rÜ¿r£¿r⁄¿s¿s¿sR¿s†¿s™¿sø¿sÀ¿sÏ¿t¿t/¿t8¿t>¿ti¿tä¿t´¿t˘¿u¿us¿uß¿uÎ¿v¿v8¿vK¿vW¿va¿v¢¿vÎ¿wK¿wÏ¿x¿x.¿xÇ¿x”¿y¿y*¿y9¿yF¿yP¿yt¿y}¿yÖ¿y©¿yÕ¿zE¿zß¿z∑¿zÊ¿z˘¿{¿{¿{<¿{N¿{ú¿{›¿|¿|<¿|à¿|´¿|≈¿|˝¿}$¿}K¿}`¿}l¿}m¿}†¿}Œ¿~¿~¿~¿~J¿~p¿~x¿~Ü¿~å¿~¨¿~˙¿I¿ó¿…¿˚¿Ä¿Ä+¿ÄO¿Äz¿Ää¿ÄÆ¿ÄÕ¿Å9¿ÅA¿ÅT¿Å^¿Åw¿Åâ¿ÅØ¿Åƒ¿Å–¿Å‹¿Åı¿Ç	¿Ç5¿ÇL¿ÇZ¿Çu¿Ç™¿Ç≤¿Çƒ¿ÇÎ¿É ¿É¿É¿É?¿ÉO¿És¿É©¿É ¿É›¿ÉÁ¿ÉÒ¿Ñ¿Ñ*¿Ñ<¿Ñf¿Ñ{¿Ñá¿Ñ†¿Ñ”¿ÑŸ¿ÑÈ¿Ö¿ÖD¿Öi¿Ö|¿ÖÜ¿Ö†¿Ö∂¿Ö∑¿ÖÓ¿Ü¿Ü¿Ü¿Ü¿Üi¿Ü≤¿Üˇ¿áK¿áú¿á…¿á÷¿áÚ¿áÛ¿à@¿ào¿àu¿àΩ¿â¿âN¿âT¿â§¿âÛ¿ä"¿ä(¿äx¿äæ¿ä¸¿ã ¿ã-¿ãP¿ãQ¿ãê¿ã“¿ãÿ¿å'¿år¿åΩ¿åˆ¿å¸¿ç;¿çP¿çV¿çß¿çˆ¿é"¿é/¿éG¿éH¿éä¿éê¿éﬂ¿è*¿èu¿èÆ¿è¥¿ê¿êU¿ê£¿êÙ¿ë¿ë¿ëW¿ë•¿ëÍ¿í:¿íÉ¿íª¿í»¿í‡¿í·¿ì(¿ìx¿ì≈¿î¿î-¿î3¿îÑ¿î“¿ï#¿ïl¿ïr¿ï√¿ñ¿ñ¿ñO¿ñ\¿ñ≠¿ñ–¿ñÛ¿ó¿óG¿óQ¿ó£¿ó≥¿óﬂ¿óÂ¿óÈ¿óÍ¿ó¯¿ó˘¿ò<¿òB¿òè¿òú¿ò‘¿ò˘¿ò˙¿ô-¿ô3¿ôÄ¿ôå¿ôŒ¿ô¯¿ô˘¿ö?¿öE¿öñ¿öﬂ¿õ0¿õB¿õH¿õò¿õÓ¿ú4¿úà¿ú≤¿ú∏¿ù	¿ù¿ù ¿ùx¿ùü¿ù†¿ùÌ¿û&¿û,¿û|¿ûô¿ü¿ü¿ü>¿üD¿üí¿ü·¿†¿†¿†b¿†∞¿†Ω¿†È¿†Í¿°¿°¿°K¿°Q¿°†¿°¶¿°Ò¿¢@¿¢ë¿¢‡¿£+¿£;¿£A¿£é¿£∏¿£æ¿§¿§b¿§Ø¿•¿•¿•k¿•π¿¶¿¶*¿¶P¿¶T¿¶U¿¶ö¿¶†¿¶¿ß=¿ßä¿ßŸ¿®,¿®z¿®¿¿©¿©Z¿©è¿©ï¿©‚¿™0¿™z¿™∆¿´¿´d¿´É¿´â¿´ÿ¿¨%¿¨q¿¨~¿¨ã¿¨©¿≠¿≠+¿≠/¿≠0¿≠=¿≠e¿≠q¿≠ã¿≠”¿Æ¿Æ;¿ÆB¿Æe¿Æi¿Æj¿Æº¿ÆΩ¿Ø¿Ø¿Øh¿Øª¿ØÀ¿Ø—¿Ø˛¿∞!¿∞=¿∞M¿∞p¿∞É¿∞ç¿∞†¿∞§¿∞•¿∞ˆ¿±8¿±>¿±é¿±ﬁ¿±Î¿±Ò¿≤-¿≤t¿≤ª¿≥¿≥G¿≥|¿≥Ç¿≥«¿¥¿¥F¿¥p¿¥ç¿¥¥¿¥¬¿¥»¿¥¿µ¿µB¿µr¿µÇ¿µä¿µã¿µ‚¿∂¿∂#¿∂+¿∂1¿∂n¿∂á¿∂¬¿∂»¿∂Ã¿∂Õ¿∑¿∑R¿∑X¿∑©¿∑—¿∑◊¿∏¿∏S¿∏q¿∏œ¿∏Ì¿∏Ò¿∏Ú¿π¿π<¿πJ¿πP¿πà¿πß¿π–¿πˆ¿∫¿∫<¿∫D¿∫L¿∫É¿∫£¿∫©¿∫¯¿ªC¿ªè¿ªÊ¿º1¿ºf¿ºÅ¿º¨¿º⁄¿Ω¿Ω¿ΩX¿ΩÉ¿Ωõ¿Ω®¿Ω”¿ΩŸ¿Ω›¿Ωﬁ¿æ¿æ#¿æt¿æ¿¿ø¿øF¿øL¿øÇ¿øà¿ø‘¿¿#¿¿h¿¿¥¿¿Ô¿¡¿¡"¿¡2¿¡N¿¡a¿¡k¿¡~¿¡Ç¿¡ù¿¡û¿¡›¿¡„¿¬4¿¬Ä¿¬Õ¿√¿√¿√B¿√o¿√Ö¿√ï¿√¡¿√‘¿√ﬁ¿√Ò¿√ı¿ƒ!¿ƒ"¿ƒi¿ƒo¿ƒ¥¿≈¿≈Q¿≈†¿≈∏¿≈æ¿∆	¿∆E¿∆K¿∆ã¿∆ÿ¿«¿« ¿«0¿«6¿«Ñ¿«÷¿«Ê¿» ¿»¿»S¿»j¿»x¿»~¿»ñ¿»‹¿»˛¿…2¿…D¿…r¿…π¿…√¿…ÿ¿…‰¿ '¿ ]¿ é¿ ©¿ ÷¿ ¸¿À¿À-¿ÀM¿ÀZ¿Àl¿Àö¿À˜¿Ã¿Ã¿Ã"¿Ãl¿Ã∂¿Ã˙¿Õ8¿ÕA¿Õ~¿ÕΩ¿Õÿ¿Õ˛¿Œ¿Œ¿Œ¿Œ¿Œ^¿Œk¿Œq¿Œ¬¿œ¿œa¿œ∞¿œ˘¿œˇ¿–P¿–†¿–√¿–…¿–Ÿ¿–ﬂ¿—/¿—n¿—ò¿—µ¿—Î¿“!¿“/¿“5¿“]¿“£¿“≈¿“˘¿”<¿”r¿”ú¿”∑¿”‰¿‘
¿‘¿‘¿‘7¿‘=¿‘A¿‘B¿‘í¿‘‡¿’1¿’z¿’≥¿’÷¿’Ï¿÷¿÷C¿÷k¿÷ñ¿÷∑¿÷⁄¿÷˛¿◊-¿◊Ñ¿◊ï¿◊ü¿◊–¿ÿ,¿ÿ=¿ÿG¿ÿh¿ÿp¿ÿä¿ÿê¿ÿî¿ÿï¿ÿ‡¿ÿÊ¿Ÿ4¿Ÿ\¿Ÿb¿Ÿ¶¿Ÿﬁ¿Ÿ˛¿⁄¿⁄9¿⁄_¿⁄~¿⁄¶¿⁄ ¿⁄„¿€¿€¿€¿€V¿€ó¿€©¿€Ø¿€Ù¿‹%¿‹B¿‹b¿‹x¿‹ù¿‹√¿‹‚¿›5¿›W¿›{¿›ë¿›ï¿›ñ¿›Ÿ¿›ˆ¿ﬁ¿ﬁ(¿ﬁ`¿ﬁ¶¿ﬁ¬¿ﬂ¿ﬂ/¿ﬂ<¿ﬂX¿ﬂ£¿ﬂæ¿ﬂÀ¿ﬂ◊¿ﬂﬂ¿ﬂÚ¿ﬂ¸¿‡H¿‡ñ¿‡‰¿·3¿·¿·Ã¿‚¿‚-¿‚;¿‚A¿‚w¿‚™¿‚º¿‚Ó¿„<¿„F¿„[¿„g¿„à¿„†¿„À¿„‘¿„⁄¿„Í¿‰¿‰9¿‰m¿‰ï¿‰À¿‰Ï¿Â¿Â ¿Â.¿ÂP¿Âå¿Â®¿Â¯¿Ê¿Ê*¿ÊQ¿Ês¿ÊÑ¿Ê§¿Ê⁄¿ÊÎ¿Á¿Á\¿Á∞¿ÁÙ¿Ë¿Ë¿Ër¿ËÉ¿Ëì¿Ëü¿Ë©¿Ë·¿Ë˘¿ÈG¿È_¿Èl¿Èà¿ÈŸ¿Í¿Í¿Í6¿ÍÑ¿Í—¿Î¿Î¿Î3¿ÎÉ¿Îê¿Îú¿Î§¿Î∑¿Î¡¿ÎÈ¿Î˘¿Ï¿ÏL¿Ïl¿Ï¨¿Ïø¿Ï…¿Ï‚¿Ì¿Ì8¿ÌB¿Ì`¿Ìπ¿Ó¿Ó*¿ÓU¿Ó[¿Ók¿Óé¿Óæ¿Ó‚¿Óı¿Óˇ¿Ô5¿ÔY¿Ô_¿Ôc¿Ôd¿Ô∞¿Ô˙¿ ¿P¿i¿Å¿Ç¿Ω¿˚¿¸¿ÒG¿ÒM¿Òô¿Òﬁ¿Ú,¿Úy¿Úü¿Ú•¿ÚÛ¿ÛC¿Ûë¿Û®¿ÛÆ¿Û˙¿ÙD¿Ùì¿Ù≈¿Ù˛¿Ùˇ¿ıO¿ıj¿ıp¿ı¿¿ˆ	¿ˆ¿ˆY¿ˆ•¿ˆÒ¿˜:¿˜Ü¿˜ø¿¯¿¯/¿¯3¿¯4¿¯{¿¯Å¿¯—¿˘¿˘n¿˘á¿˘ç¿˘‘¿˙!¿˙m¿˙Ω¿˚¿˚*¿˚]¿˚¿˚ê¿˚î¿˚ï¿˚’¿¸¿¸¿¸b¿¸â¿¸è¿¸‹¿˝ ¿˝@¿˝U¿˝[¿˝ß¿˝ˆ¿˛D¿˛ì¿˛•¿˛ÿ¿ˇ¿ˇ#¿ˇ?¿ˇu¿ˇõ¿ˇ∏¿ˇ¿¿ˇ∆¿ ¿ ]¿ |¿ œ¿ ’¿ Ú¿¿¿J¿é¿€¿·¿˜¿˚¿¸¿˝¿D¿Ü¿«¿Õ¿¿	¿O¿v¿|¿Ã¿¿i¿£¿Ô¿¿7¿Ü¿“¿¿o¿ª¿¿¿¿d¿±¿˝¿¿¿o¿Ω¿	¿	[¿	™¿	Ô¿	ı¿
¿
¿
W¿
ì¿
Ÿ¿
⁄¿
È¿
Í¿1¿V¿\¿£¿∫¿¿¿	¿-¿J¿`¿Ö¿Ø¿œ¿Ú¿¿K¿m¿q¿r¿√¿…¿¿0¿6¿¿ ¿¿a¿±¿¯¿˛¿¿¿j¿}¿É¿ë¿ÿ¿Í¿7¿o¿Ä¿°¿«¿Ê¿¿ˆ¿¿-¿7¿?¿I¿[¿h¿Ø¿–¿‘¿’¿*¿0¿{¿∂¿º¿˜¿˝¿I¿Ñ¿≠¿ª¿¡¿¿/¿P¿Ç¿à¿å¿ç¿ª¿Ù¿ı¿,¿]¿ù¿„¿Ò¿s¿Á¿¿ˆ¿!¿%¿&¿f¿ê¿´¿¨¿—¿Ó¿Ô¿¿ ¿n¿≤¿Ÿ¿ﬂ¿-¿9¿_¿x¿ë¿ó¿®¿¨¿≠¿ˆ¿¸¿K¿Q¿ö¿Ê¿˜¿¿3¿J¿s¿ë¿ô¿ù¿û¿Ê¿Ï¿3¿Ñ¿∞¿‘¿Ò¿(¿_¿ã¿ô¿ü¿†¿Î¿5¿Ö¿—¿“¿ L¿ M¿ o¿ ª¿ ˛¿!(¿!)¿!ï¿!≥¿!¥¿"¿"S¿"ù¿"ª¿#"¿#Z¿#i¿#q¿#ö¿#Ï¿$=¿$l¿$ñ¿$æ¿$∆¿$«¿$‚¿%8¿%}¿%–¿&"¿&k¿&{¿&É¿&â¿&–¿'!¿'e¿'¥¿(¿(S¿(e¿(∞¿(‚¿(Ë¿)¿)8¿)S¿)¥¿)Â¿*¿*¿*¿*¿*¿*[¿*w¿* ¿*‚¿+0¿+Ç¿+ê¿+ñ¿+Ø¿+È¿+Ô¿,/¿,x¿,º¿,√¿,‹¿- ¿-¿-=¿-¶¿-‡¿. ¿.!¿.:¿.x¿.~¿.ß¿.Î¿/'¿/j¿/Ä¿/¢¿/©¿/¬¿/Ê¿/Ï¿09¿0£¿0ß¿0®¿0Ù¿1"¿1E¿1i¿1p¿1‘¿1’¿2¿2w¿2“¿3,¿3ê¿3È¿4B¿4û¿51¿5ï¿6¿6U¿6ê¿6≠¿7¿73¿7e¿7n¿7´¿7–¿7Ú¿8¿8H¿8z¿8Ñ¿8å¿8Í¿9¿9%¿9Z¿9d¿9≠¿9¸¿:¿:O¿:à¿:ô¿:√¿:Õ¿:’¿;¿;\¿;ë¿<¿<d¿<ö¿<µ¿<¸¿=
¿=¿=S¿=]¿=e¿=m¿=n¿=∂¿=∑¿=‘¿>#¿>F¿>N¿>¿>Ò¿?¿?l¿?¿¿?‚¿@,¿@b¿@è¿@›¿@È¿A¿A¿A¿Aq¿Aô¿AÓ¿BX¿Bo¿Bz¿BÇ¿Bà¿Bâ¿B¨¿B≠¿B“¿Bı¿C¿C=¿Co¿C¥¿C˙¿D!¿D6¿DÅ¿Dä¿D¥¿D‡¿E¿Ec¿El¿Ey¿Eæ¿F¿F1¿FI¿Fu¿Fü¿F◊¿FÏ¿G7¿G@¿Gg¿G≈¿GË¿G¿Gˆ¿H¿H.¿H2¿H3¿H°¿I ¿I5¿Iy¿I£¿Iµ¿IΩ¿J¿J6¿J>¿Ja¿Jî¿J·¿K+¿KQ¿K~¿Kà¿Kê¿Kñ¿Kﬂ¿L ¿L¿L
¿L¿LD¿LJ¿Lö¿L„¿Lı¿L˚¿M4¿Mx¿M∏¿M‘¿Mÿ¿MŸ¿N¿N¿NJ¿Nõ¿NÂ¿O5¿O`¿Of¿O≤¿O ¿O–¿P¿Ph¿Pô¿P∑¿Pœ¿PÚ¿Q¿Q¿Q>¿Q∑¿R¿R¿R¿R+¿R,¿R}¿Râ¿R“¿R”¿R‘¿RÂ¿RÊ¿S4¿S|¿Sî¿Sô¿Sÿ¿T$¿T9¿Tâ¿Tÿ¿U&¿US¿Ué¿Uï¿Uö¿UÎ¿V¿V ¿V!¿VL¿VX¿Vs¿Vü¿V∏¿V‘¿VÛ¿W
¿W¿WV¿Wm¿Wî¿W‘¿Wˆ¿X¿X¿XF¿XN¿Xh¿Xã¿Xì¿X¨¿XŒ¿X÷¿Xˇ¿Y3¿Y;¿YR¿Yq¿Yy¿Y¿Yí¿Yñ¿Yó¿Y£¿Y˛¿Yˇ¿Z<¿ZÑ¿Z´¿Z∑¿Zœ¿ZÓ¿[¿[G¿[N¿[ë¿[π¿[Á¿\¿\¿\¿\¿\Z¿\â¿\è¿\⁄¿]¿]"¿]=¿]W¿]ç¿]î¿]ˇ¿^¿^¿^¿^¿^b¿^ç¿^˙¿_w¿`¿`á¿`Ê¿aP¿a∫¿a€¿b¿bb¿b∏¿b¿¿cH¿cL¿cM¿cY¿c°¿c¢¿cÛ¿d¿d
¿dU¿dô¿dü¿dÔ¿e.¿e{¿e∆¿f¿f+¿f1¿f|¿fæ¿fƒ¿f‘¿f⁄¿g&¿g_¿gu¿gì¿g£¿g ¿gÈ¿g¿h¿h.¿hV¿hj¿hÜ¿hú¿h•¿h´¿hØ¿h∞¿i¿i¿i¿im¿iº¿iÍ¿i¿j@¿jç¿j˛¿k6¿k:¿k<¿k=¿kr¿kv¿k∑¿k˜¿k˚¿l@¿lj¿lΩ¿læ¿m¿m4¿m:¿mi¿mo¿mä¿m∫¿m ¿mÎ¿n#¿n;¿nå¿nø¿nÃ¿nË¿o4¿o¿o—¿p"¿p/¿pH¿pp¿p¿¿p⁄¿q¿q¿q7¿q_¿q≤¿q–¿q¿r'¿r4¿r@¿rH¿r[¿re¿rv¿rz¿r{¿rê¿r∏¿r⁄¿r˙¿s¿s.¿s4¿sH¿sb¿s}¿sÉ¿sá¿sà¿sî¿sπ¿s“¿sÌ¿sÒ¿sÚ¿s˛¿t¿t$¿t:¿t>¿t?¿tK¿tf¿tÄ¿tù¿t£¿tß¿t®¿t¥¿tË¿u¿u¿u ¿u$¿u%¿u1¿uc¿u–¿u‘¿u÷¿u◊¿v¿v¿vd¿v•¿v·¿w¿w\¿wì¿w±¿w‰¿w˛¿wˇ¿x!¿x-¿x?¿x®¿y¿y!¿y%¿y'¿y(¿yf¿yj¿yª¿y—¿y’¿z(¿z>¿zB¿zë¿z›¿{¿{`¿{d¿{∑¿|	¿|¿|¿|Ñ¿|à¿|ñ¿|ö¿|„¿}¿}ì¿}‰¿~.¿~d¿~ú¿~Ã¿	¿¿+¿/¿|¿∆¿¯¿Ä,¿ÄX¿Äï¿Äõ¿Ä∑¿Äª¿Äº¿Ä”¿ÄÒ¿Å¿Å¿Åh¿Åç¿Åì¿Å¬¿Å»¿Å„¿Ç¿Ç#¿ÇD¿Ç|¿Çî¿ÇÂ¿É¿É%¿ÉA¿Éç¿Éÿ¿Ñ*¿Ñ{¿Ñà¿Ñ°¿Ñ…¿Ö¿Ö3¿Öj¿Öw¿Öê¿Ö∏¿Ü¿Ü)¿ÜI¿ÜÄ¿Üç¿Üô¿Ü°¿Ü¥¿Üæ¿Üœ¿Ü”¿Ü‘¿ÜÓ¿á¿áL¿áú¿áÕ¿à¿à¿à5¿àN¿ày¿à™¿àÀ¿â+¿âa¿âi¿âÑ¿â†¿â≠¿â–¿âÚ¿ä=¿äÉ¿ä’¿ã¿ãX¿ã}¿ãÆ¿ã€¿ã˜¿å¿åP¿å¿å¬¿åÛ¿ç"¿ç†¿é¿éR¿éé¿éƒ¿éÃ¿é“¿é÷¿é◊¿è&¿è,¿è|¿èÆ¿èÂ¿ê2¿ê±¿ë ¿ë"¿ëC¿ëZ¿ëâ¿ëç¿ëé¿ë–¿ëÓ¿í¿í¿í¿íc¿íé¿í™¿íÆ¿íØ¿íﬁ¿ì.¿ìw¿ìª¿ìŸ¿î¿î0¿îa¿în¿îÍ¿ï:¿ï@¿ïo¿ïí¿ï∆¿ï”¿ñG¿ñõ¿ñ°¿ñÕ¿ñı¿ó¿ó¿ó¿ó=¿óC¿ó}¿óû¿óø¿ó’¿óŸ¿ó⁄¿ò ¿ò&¿ò\¿òq¿òï¿ò±¿ô¿ô>¿ôl¿ôñ¿ôÆ¿ô¬¿ô»¿ô‡¿ô˜¿ö¿ö¿ö¿ö[¿öa¿ö∞¿õ¿õ6¿õk¿õÜ¿õ°¿õΩ¿õﬂ¿ú/¿úc¿úq¿úw¿úò¿ú«¿úﬁ¿ú‚¿ú„¿úÔ¿ù¿ù-¿ùQ¿ùm¿ùà¿ù⁄¿û¿û¿û¿û¿û¿û.¿ûB¿ûf¿ûÇ¿ûò¿ûÍ¿ü¿ü¿ü¿ü ¿ü,¿üG¿ük¿üá¿ü¢¿üÙ¿†¿†%¿†)¿†*¿†6¿†j¿†é¿†™¿†¿¿°¿°=¿°C¿°G¿°H¿°q¿°ù¿°û¿°∆¿°¿°Ò¿¢4¿¢`¿¢Ç¿¢“¿¢˛¿£¿£¿£A¿£l¿£é¿£ﬁ¿§¿§
¿§¿§¿§I¿§â¿§ß¿§Ã¿§·¿§ˆ¿•;¿•]¿•n¿•x¿•å¿•‡¿¶¿¶¿¶¿¶1¿¶5¿¶7¿¶8¿¶à¿¶°¿¶•¿¶Ú¿ßA¿ßf¿ß°¿ß¢¿ß‚¿ßË¿®)¿®l¿®º¿©¿©¿©X¿©w¿©}¿©Õ¿©Ï¿©˘¿™
¿™*¿™A¿™E¿™F¿™~¿™§¿™∞¿™˜¿´^¿´¢¿´©¿´‹¿´Í¿´¿¨$¿¨o¿¨¶¿¨›¿¨Î¿≠¿≠}¿≠Ü¿≠ú¿≠º¿≠ƒ¿≠Ã¿≠–¿≠—¿≠›¿Æ¿Æ¿Æh¿Æ∂¿Ø¿Ø<¿Øé¿Øí¿Øì¿Øü¿Ø±¿ØÁ¿∞<¿∞P¿∞T¿∞V¿∞W¿∞§¿∞∞¿∞¥¿∞◊¿±(¿±G¿±ô¿±Â¿≤	¿≤ ¿≤T¿≤Z¿≤[¿≤õ¿≤›¿≤ﬁ¿≥%¿≥v¿≥|¿≥å¿≥í¿≥‡¿¥¿¥M¿¥N¿¥õ¿¥‹¿µ¿µ¿µ¿µh¿µõ¿µü¿µË¿∂¿∂L¿∂l¿∂°¿∂«¿∂Õ¿∂Œ¿∑¿∑¿∑!¿∑d¿∑å¿∑ê¿∑ë¿∑ù¿∑ˇ¿∏¿∏¿∏P¿∏ò¿∏ú¿∏Ì¿π>¿πl¿π∂¿πÿ¿π˘¿∫.¿∫]¿∫^¿∫¨¿∫≈¿∫˜¿∫¯¿ª#¿ª$¿ªR¿ªX¿ªh¿ªn¿ªΩ¿ªÒ¿º<¿ºl¿º∑¿ºÁ¿Ω ¿Ω,¿ΩT¿Ω}¿Ω¶¿Ω’¿Ω€¿Ω‹¿æ*¿æn¿æî¿æï¿æ‡¿æ˜¿æ˝¿øK¿øÖ¿øû¿øü¿ø»¿øŒ¿¿¿¿h¿¿°¿¿ß¿¿Ò¿¡4¿¡@¿¡Ç¿¡É¿¡”¿¡Í¿¬¿¬¿¬(¿¬ç¿¬é¿¬µ¿¬∂¿¬¯¿¬˛¿√¿√L¿√i¿√î¿√∏¿√º¿√Ω¿ƒ ¿ƒ¿ƒM¿ƒå¿ƒ®¿ƒÆ¿ƒ˜¿≈4¿≈`¿≈Ç¿≈Ü¿≈à¿≈â¿≈⁄¿≈Ú¿≈ˆ¿∆E¿∆U¿∆ö¿∆µ¿∆œ¿«¿«
¿«¿«¿«0¿«S¿«r¿«õ¿«ƒ¿«Û¿«˙¿»=¿»j¿»ì¿»ª¿»„¿»‰¿…¿…9¿…d¿…k¿…ù¿…Á¿ ¿ G¿ H¿ n¿ o¿ ´¿ Ò¿À¿À8¿Àr¿À§¿À∆¿À‡¿Ã¿Ã¿Ã¿Ã`¿ÃÇ¿ÃÃ¿ÃÕ¿Õ¿Õf¿Õ∑¿Œ¿Œ¿ŒD¿ŒZ¿Œ^¿Œ_¿Œk¿Œô¿Œö¿Œı¿Œˆ¿œ¿œ¿œJ¿œN¿œO¿œ[¿œû¿œø¿œ√¿œ≈¿œ∆¿–¿–[¿–_¿–≤¿–Ï¿—7¿—X¿—r¿—å¿—√¿—ƒ¿—–¿“¿“K¿“O¿“P¿“\¿“u¿“°¿“…¿“Ú¿”¿”J¿”Q¿”ù¿”∫¿”æ¿”ø¿”À¿”Ú¿”Û¿”ˇ¿‘¿‘%¿‘2¿‘]¿‘™¿‘…¿‘–¿‘‘¿‘÷¿‘◊¿’$¿’H¿’L¿’î¿’‚¿÷¿÷¿÷R¿÷°¿÷Ô¿◊@¿◊å¿◊«¿◊À¿ÿ¿ÿd¿ÿ¨¿ÿ¡¿Ÿ¿Ÿ-¿ŸP¿Ÿt¿Ÿ†¿ŸÎ¿⁄¿⁄:¿⁄k¿⁄ñ¿⁄∞¿⁄Ó¿€¿€;¿€A¿€E¿€F¿€e¿€á¿€©¿€ ¿€À¿‹¿‹¿‹†¿‹Û¿›¿›$¿›?¿›l¿›º¿ﬁ¿ﬁW¿ﬁj¿ﬁ°¿ﬁº¿ﬂ ¿ﬂ'¿ﬂì¿ﬂ…¿ﬂ˜¿‡-¿‡i¿‡∂¿‡Õ¿·)¿·g¿·ù¿·´¿‚¿‚+¿‚L¿‚_¿‚ñ¿‚¢¿‚÷¿„@¿„m¿„ï¿„™¿„Ô¿„˝¿‰	¿‰9¿‰ü¿‰»¿‰Ï¿Â¿Â>¿ÂL¿ÂX¿Âï¿Â‘¿Â‡¿ÂÍ¿ÂÚ¿Ê9¿Ên¿Ê∞¿ÊÚ¿Ê¸¿Á#¿Á0¿ÁH¿Á`¿Á≤¿ÁÍ¿Ë¿Ëa¿Ëä¿Ë∏¿Ëƒ¿ËŒ¿Ë˛¿È¿È ¿È&¿È*¿È+¿ÈÜ¿Èá¿Èì¿È¨¿Èœ¿ÈÓ¿Í¿Í@¿Ío¿Ív¿Í•¿ÍÒ¿ÎK¿Îì¿Îô¿Î±¿Î–¿ÎÒ¿Î˘¿Ï¿Ï4¿ÏQ¿Ïg¿ÏÅ¿Ïä¿Ï€¿Ì!¿ÌY¿Ìß¿Ìı¿Ó+¿ÓQ¿ÓÑ¿ÓŒ¿Ó¸¿Ô¿Ô¿ÔR¿Ôt¿Ô∞¿Ô‰¿2¿Å¿–¿Ò¿Ò2¿ÒX¿Òc¿Òk¿Òy¿Ò¿ÒÄ¿Òƒ¿Ò¸¿Ú,¿Ú3¿Ú4¿Úv¿Ú¥¿Ú∫¿Úª¿Û¿Û6¿Ûd¿ÛÖ¿ÛÜ¿Û∫¿Û‡¿Ù¿Ù1¿Ù7¿Ù8¿ÙT¿Ùx¿ÙÉ¿Ù¢¿ÙÀ¿ı
¿ıB¿ız¿ıù¿ıæ¿ı∆¿ıÃ¿ˆ¿ˆ ¿ˆD¿ˆd¿ˆx¿ˆê¿ˆó¿ˆÊ¿˜¿˜h¿˜¥¿˜Ë¿¯¿¯=¿¯Ö¿¯±¿¯ª¿¯√¿˘
¿˘*¿˘i¿˘†¿˘¬¿˘‹¿˙¿˙¿˙<¿˙B¿˙C¿˙i¿˙•¿˙≤¿˚¿˚¿˚¿˚d¿˚†¿˚Ú¿¸D¿¸t¿¸°¿¸≥¿¸ÿ¿˝¿˝6¿˝e¿˝ö¿˝¢¿˝®¿˝…¿˝„¿˝Á¿˝Ë¿˛¿˛F¿˛n¿˛u¿˛ï¿ˇ'¿ˇ5¿ˇ9¿ˇ:¿ˇF¿ˇm¿ˇñ¿ˇö¿ˇõ¿ˇß¿ˇÍ¿ 0¿ O¿ t¿ Ü¿ é¿ Ø¿ ◊¿ ›¿ ·¿ ‚¿ Ó¿¿5¿É¿Ã¿Á¿¿7¿=¿A¿B¿e¿É¿£¿√¿…¿Õ¿Œ¿Í¿Î¿˜¿¿)¿-¿.¿l¿n¿o¿∑¿ª¿	¿A¿\¿]¿•¿´¿˙¿G¿ò¿Ë¿ˇ¿+¿S¿~¿Ö¿“¿÷¿◊¿Ô¿¿&¿9¿:¿e¿å¿ç¿∆¿˚¿¸¿1¿^¿_¿Ö¿ü¿†¿˜¿˝¿	¿	¿	x¿	‡¿
P¿
r¿
s¿
ò¿
 ¿
Ù¿6¿j¿ü¿¿¿S¿π¿»¿6¿>¿í¿Ò¿K¿ù¿£¿§¿‘¿I¿k¿™¿Â¿¿¿$¿*¿.¿/¿e¿j¿π¿–¿’¿$¿n¿±¿≤¿‡¿¿7¿J¿P¿~¿ñ¿ú¿⁄¿ﬁ¿ﬂ¿/¿~¿ª¿¿¿˙¿+¿F¿^¿u¿î¿ö¿∆¿˚¿(¿h¿ü¿º¿¬¿ˆ¿2¿6¿7¿j¿¿è¿ï¿™¿∫¿¿¿€¿ﬂ¿‡¿3¿~¿õ¿µ¿Ê¿Í¿Î¿6¿Ä¿ô¿ü¿È¿+¿1¿A¿G¿ñ¿¿¿ﬁ¿‡¿·¿5¿9¿ê¿‡¿Û¿7¿Ç¿•¿Õ¿⁄¿Ú¿¿(¿1¿3    
ParentDataPaintingContextConstraints_LocalSemanticsHandlePipelineOwnerPipelineManifold_flutterRenderingLibraryRenderObjectRenderObjectWithChildMixinContainerParentDataMixinContainerRenderObjectMixin"RelayoutWhenSystemFontsChangeMixin_SemanticsFragment_ContainerSemanticsFragment_InterestingSemanticsFragment_RootSemanticsFragment_IncompleteSemanticsFragment_SwitchableSemanticsFragment_SemanticsGeometryDiagnosticsDebugCreator D}