ÄƒbodyappBar	bodyScrimbottomSheetsnackBarmaterialBannerpersistentFooterbottomNavigationBarfloatingActionButtondrawer	endDrawer	statusBarchildofmaybeOfcreateState
_scaffolds_materialBanners_materialBannerController
_snackBars_snackBarController_snackBarTimer_accessibleNavigationdidChangeDependencies	_register_unregister_updateScaffolds_isRootshowSnackBar_handleSnackBarStatusChangedremoveCurrentSnackBarhideCurrentSnackBarclearSnackBarsshowMaterialBanner"_handleMaterialBannerStatusChangedremoveCurrentMaterialBannerhideCurrentMaterialBannerclearMaterialBannersbuilddispose_scaffoldMessengerStateupdateShouldNotifyfloatingActionButtonSizebottomSheetSizecontentBottom
contentTop	minInsetsminViewPaddingscaffoldSizesnackBarSizematerialBannerSizetextDirectionbeginendanimatorprogress	getOffsettoStringbottomNavigationBarTopfloatingActionButtonArea_scaleFloatingActionButtoncopyWithcontextfloatingActionButtonScalegeometryvalue_updateWithbottomWidgetsHeightappBarHeightmaterialBannerHeight==hashCode
extendBodyextendBodyBehindAppBargeometryNotifier$previousFloatingActionButtonLocation#currentFloatingActionButtonLocation)floatingActionButtonMoveAnimationProgress"floatingActionButtonMotionAnimatorisSnackBarFloatingsnackBarWidthextendBodyBehindMaterialBannerperformLayoutshouldRelayoutfabMoveAnimationfabMotionAnimatorcurrentController_previousController_previousScaleAnimation_previousRotationAnimation_currentScaleAnimation_extendedCurrentScaleAnimation_currentRotationAnimation_previousChild	initStatedidUpdateWidget_entranceTurnTween_updateAnimations%_handlePreviousAnimationStatusChanged_isExtendedFloatingActionButton_onProgressChanged_updateGeometryScalefloatingActionButtonLocationfloatingActionButtonAnimatorpersistentFooterButtonspersistentFooterAlignmentonDrawerChangedonEndDrawerChangeddrawerScrimColorbackgroundColorresizeToAvoidBottomInsetprimarydrawerDragStartBehaviordrawerEdgeDragWidthdrawerEnableOpenDragGestureendDrawerEnableOpenDragGesturerestorationId
geometryOf	hasDrawerrestoreState
_drawerKey_endDrawerKey_bodyKey	hasAppBarhasEndDrawerhasFloatingActionButton_appBarMaxHeightappBarMaxHeight_drawerOpened_endDrawerOpenedisDrawerOpenisEndDrawerOpen_drawerOpenedCallback_endDrawerOpenedCallback
openDraweropenEndDrawer_scaffoldMessenger_messengerSnackBar_updateSnackBar_messengerMaterialBanner_updateMaterialBanner_dismissedBottomSheets_currentBottomSheet_currentBottomSheetKey_persistentSheetHistoryEntry _maybeBuildPersistentBottomSheet_closeCurrentBottomSheetcloseDrawercloseEndDrawer_updatePersistentBottomSheet_buildBottomSheetshowBottomSheet#_floatingActionButtonMoveController_floatingActionButtonAnimator%_previousFloatingActionButtonLocation_floatingActionButtonLocation)_floatingActionButtonVisibilityController$_floatingActionButtonVisibilityValue_showFloatingActionButton_moveFloatingActionButton_handleStatusBarTap_geometryNotifier_resizeToAvoidBottomInset_addIfNonNull_buildEndDrawer_buildDrawer_showBodyScrim_bodyScrimColorshowBodyScrim	isEnabledinvoke_widget
_completerclosedclosesetStatestartingPointcurve	transformanimationController
enableDrag	onClosingonDismissed	onDisposebuilderisPersistent	elevationshapeclipBehaviorconstraintsanimationCurve_handleDragStart_handleDragEnd_handleStatusChangeextentChanged_isLocalHistoryEntry%_kDefaultFloatingActionButtonLocation%_kDefaultFloatingActionButtonAnimator_standardBottomSheetCurve _kBottomSheetDominatesPercentage_kMinBottomSheetScrimOpacity_kMaxBottomSheetScrimOpacity_ScaffoldSlotScaffoldMessengerScaffoldMessengerState_ScaffoldMessengerScopeScaffoldPrelayoutGeometry_TransitionSnapshotFabLocationScaffoldGeometry_ScaffoldGeometryNotifier_BodyBoxConstraints_BodyBuilder_ScaffoldLayout_FloatingActionButtonTransition$_FloatingActionButtonTransitionStateScaffoldScaffoldState_DismissDrawerActionScaffoldFeatureController_BottomSheetSuspendedCurve_StandardBottomSheet_StandardBottomSheetStatePersistentBottomSheetController_ScaffoldScopeÅ÷
lerpDoubleDragStartBehaviorFloatingActionButtonLocationendFloatFloatingActionButtonAnimatorscalingCurvestandardEasingdoubleSnackBarMaterialBannerBuildContextofshowSnackBarshowMaterialBannerdebugCheckHasScaffoldMessengerStatefulWidgetWidget	GlobalKeyMaterialAppscaffoldMessengerKey"dependOnInheritedWidgetOfExactType_scaffoldMessengerStateoverrideStateTickerProviderStateMixinLinkedHashSetQueueMaterialBannerClosedReasonAnimationControllerSnackBarClosedReasonTimerboolvoid
MediaQueryaccessibleNavigationOfcontextisActivereasontimeoutdidChangeDependenciesadd
isNotEmpty_updateSnackBar_updateMaterialBannerremovescaffoldfindAncestorStateOfTypecontainsdurationclosebehaviorSnackBarBehaviorfloatingfloatingActionButtonpersistentFooterButtonsbottomNavigationBarcreateAnimationControllervsyncaddStatusListenerisEmptyisDismissedforward_withAnimationfallbackKey	UniqueKey	CompleterfirstsetStateaddLast	exceptionFlutterErrorStringdiagnosticstoDescriptionListDiagnosticsNodeErrorSummaryErrorDescription	ErrorHintdescribeOwnershipChain	fromPartsAnimationStatus	dismissedremoveFirst	completedreverse
_completerisCompletedcompletecancelvaluehidestatusthenmountedcleardebugCheckHasMediaQuery
ModalRoutedynamic	isCurrent_widgetactionscaffoldMessengerStatechildwidgetdisposeInheritedWidgetFloatingActionButtonOffset	immutableSizezeroBottomSheetbody
EdgeInsetsbottomappBartopMediaQueryDatapaddingresizeToAvoidBottomInsetviewPadding
viewInsetsTextDirection	getOffsetbeginendprogressobjectRuntimeTypeValueNotifier
geometryOfBottomAppBarRectbottomNavigationBarToplerpcenterfloatingActionButtonAreaChangeNotifierValueListenableRenderObjectfindRenderObjectownerdebugDoingPaint_scaleFloatingActionButtonfloatingActionButtonScalecopyWithnotifyListenersBoxConstraintsObjectmaterialBannerHeightbottomWidgetsHeightappBarHeightinthashhashCodeStatelessWidgetLayoutBuilderbuilderconstraintsmaxdataMultiChildLayoutDelegateloosetightenwidthheighthasChildlayoutChildpositionChildpersistentFootermaxWidth	maxHeightmaterialBannerclampDouble	bodyScrimsnackBarbottomSheetbottomSheetSizecontentBottom
contentTopfloatingActionButtonSize	minInsetsscaffoldSizesnackBarSizematerialBannerSizetextDirectionminViewPaddingsizemin	statusBardrawertight	endDrawer_updateWith)floatingActionButtonMoveAnimationProgress$previousFloatingActionButtonLocation#currentFloatingActionButtonLocation
extendBodyextendBodyBehindAppBar	Animation	initStatekFloatingActionButtonSeguecurrentControllerdidUpdateWidgetfabMotionAnimatorfabMoveAnimationkey
AnimatableTween!kFloatingActionButtonTurnIntervalchain
CurveTweencurveCurveseaseInCurvedAnimationparentanimatedrivegetScaleAnimationgetRotationAnimationAnimationMinIntervalTrainHoppingAnimationaddListener
isExtendedStack	alignment	AlignmentcenterRightchildrenFadeTransitionopacityScaleTransitionscaleRotationTransitionturnsgeometryNotifiershowBottomSheetTextCenterAppBarcenterDockedSafeAreaDraggableScrollableSheetshowBodyScrimTabBar
TabBarViewTabControllerDrawerBottomNavigationBarshowModalBottomSheetAlignmentDirectional	centerEndstartCircularNotchedRectanglebackgroundColorPreferredSizeWidgetSizedBoxexpandListView
TextButtonOverflowBarltrrtl
openDrawercloseDrawer	NavigatorpopdrawerEnableOpenDragGestureDrawerCallbackopenEndDrawercloseEndDrawerendDrawerEnableOpenDragGestureDrawerThemeData
scrimColorColorsblack54ColorMaterial	ThemeDatascaffoldBackgroundColorLocalHistoryEntryBottomSheetThemeDataprimaryRestorationBucketRestorationScopeRestorationManagerBuilderdescribeElementregisterForUpdates	hasDrawerRestorationMixinrestorationIdregisterForRestorationDrawerControllerStateRestorableBoolcurrentStateonDrawerChangedcallonEndDrawerChanged
IconButtonopen
_snackBars_materialBannersDraggableScrollableNotificationextentinitialExtentprecisionErrorToleranceonRemoveDraggableScrollableActuatorresetaddLocalHistoryEntrygrowablesheetanimationControllerNotificationListeneronNotificationStatefulBuilderStateSettershrinkisPersistent_isLocalHistoryEntryfuturewhenCompleteWidgetBuilderShapeBorderClipblackwithOpacity
enableDrag	onClosingonDismissed	onDispose shouldDisposeAnimationController	elevationshapeclipBehaviorVoidCallbackfntransitionAnimationController
lowerBound
upperBoundTickerFutureisAnimatinggetAnimationRestartfromScrollControllerPrimaryScrollControllermaybeOf
hasClients	animateToDurationmillisecondseaseOutCircfloatingActionButtonLocationfloatingActionButtonAnimator_unregister	_registerLayoutIdremovePadding
removeLeftremoveLeftPadding	removeTopremoveTopPaddingremoveRightremoveRightPaddingremoveBottomremoveBottomPaddingremoveBottomInsetremoveViewInsetsmaintainBottomViewPaddingidDrawerControllerDrawerAlignmentdrawerCallbackdragStartBehaviordrawerDragStartBehaviordrawerScrimColoredgeDragWidthdrawerEdgeDragWidthenableOpenDragGestureisDrawerOpenModalBarrierdebugCheckHasDirectionalityThemeDirectionalityKeyedSubtreedismissiblecolor	paddingOfpreferredHeightForpreferredSizeisFiniteConstrainedBoxFlexibleSpaceBarcreateSettingscurrentExtentbottomCentersnackBarThemefixedMaterialBannerThemeDataMaterialBannerTheme	Container
decorationBoxDecorationborderBorderDividercreateBorderSideIntrinsicHeightpersistentFooterAlignmentallspacingoverflowAlignmentOverflowBarAlignmentplatformTargetPlatformiOSmacOSGestureDetectorHitTestBehavioropaqueonTapexcludeFromSemanticsandroidfuchsialinuxwindowsviewInsetsOfviewPaddingOfScrollNotificationObserverAnimatedBuilder	animationActionsactionsTypeActionIntentDismissIntentCustomMultiChildLayoutdelegate"floatingActionButtonMotionAnimatorisSnackBarFloatingextendBodyBehindMaterialBannersnackBarWidthDismissActionisEndDrawerOpenFutureeaseOutParametricCurveeaseOutCubic	transformdescribeIdentityDragStartDetailslinearDragEndDetails$_floatingActionButtonVisibilityValue	minExtentshouldCloseOnMinExtentAligntopStartheightFactor	Semantics	container	onDismissonDragStart	onDragEndStatefulWidgetStateTickerProviderStateMixinInheritedWidgetFloatingActionButtonLocationChangeNotifierValueListenableBoxConstraintsStatelessWidgetMultiChildLayoutDelegateRestorationMixinDismissActionParametricCurveScaffoldFeatureControllerºë¸eJ-EºTøŒ?    Ä¶  
dart:async  Äª  dart:collection  Ä’  ÄÁmathÄÍ	dart:mathÅÅ
lerpDouble ÄÒ  dart:ui  Å  package:flutter/foundation.dartÅdÅzDragStartBehavior Å>  package:flutter/gestures.dart  Å}  package:flutter/widgets.dart  Å•  app_bar.dart  Åº  banner.dart  Å“  banner_theme.dart  ÅÓ  bottom_sheet.dart  Ç
  colors.dart  Ç   curves.dart  Ç6  
debug.dart  ÇK  divider.dart  Çb  drawer.dart  Çx  flexible_space_bar.dart  Çö  floating_action_button.dart  Ç¿  $floating_action_button_location.dart  ÇÔ  material.dart  É  snack_bar.dart  É   snack_bar_theme.dart  É?  
theme.dart    	dart:core¿ Î ¿Û≤å« <ÄÜÄ§Ä•Ä∫Ä‘ÄÅÅÅ=Å|Å£Å§ÅªÅ—ÅÌÇ	ÇÇ5ÇJÇaÇwÇôÇøÇÓÉÉÉ>ÉSÉTÉlÉëÉ∑É”ÉÈÑÑÑÉÑÙÑıÖ-ÖyÖùÖ“ÜÜ4Ü5ÜJÜRÜ\ÜiÜxÜÑÜñÜ™Ü¡ÜŸÜ„ÜÜ˝Üˇá áJáNáëáïáÂàààhà≤à„ââ"âjâªääYä|äÄäîä„äÁã:ãJãNãëãïã£ãßãıåFåòåÏç:çeçøçé<éXégéÄéÜéáé∑éΩéÓèèèUèdèjèÄèÃêêêkê}êÉê÷ë(ëtëæëÛë˘íí_í¨íÛì>ìäìØìµîîî%îqî´î±î¡î«ïïVï¶ï”ññCñDñ∂ñ‡ñ‰ñÂó5óLóRó•ó´óªó¡ò
òYòöòõôô8ô<ô=ôIôçôèôêôµôπö öQöúöÁöıö˘õ,õäõ‹úîú∆ù`ùåù•ùƒù≈ù—ùÚûDûîûﬁü.üTü}üûü¿üË†)†/†a†Ñ†à†â†¥†“†”†°°7°?°@°i°ì°õ°°°•°¶°”¢	¢<¢Q¢U¢V¢r¢©¢»¢Ï£££$£(£)£y£¡£Í§G§Ç§Ü§á§ô§ö§È•6•}•¢•®•˜¶D¶ì¶°¶ß¶¯¶˛ßOßèßﬁ®®®\®|®Ç®ò®È®Ô©Y©k©q©•©´©˝™M™õ™Ì´=´ì´µ´ª´—¨<¨B¨¨¨æ¨ƒ≠"≠.≠K≠ö≠«≠ŒÆÆSÆqÆ°Æ«ÆÕØØjØπ∞	∞(∞v∞ü∞¨∞ﬁ∞ˇ±
±c±j±t±à±∞±∫±‘±Ó≤≤*≤x≤ ≥≥k≥ã≥⁄¥0¥g¥x¥ë¥Âµ;µÄµ◊∂-∂l∂}∂´∂˙∑∑∑Q∑]∑g∑|∑à∑ó∑ù∑û∑µ∑π∑∫∑¯∏∏4∏[∏q∏ï∏°∏Ω∏‚πππ<πRπ|πÕπŸπı∫∫(∫L∫[∫a∫e∫f∫∞∫√∫…ªªhª∆ª‰ªÚª¯ºKºmºèºïº≥ºŒΩΩ.Ω2Ω3Ω~ΩÑΩ æ$æ~æåæíæÂøø/øQø^øùø∂ø‹¿ @¿ @¿ @¿ @¿ @:¿ @U¿ @Y¿ @Z¿ @£¿ @‰¿ @˛¿ AX¿ Af¿ Al¿ A‘¿ AÏ¿ B¿ B,¿ B0¿ B1¿ BJ¿ BK¿ B†¿ BÛ¿ C@¿ Ce¿ Ck¿ C¿¿ D¿ Dn¿ D|¿ DÇ¿ Dﬂ¿ E¿ Et¿ E©¿ EØ¿ E¯¿ F¿ F¿ F4¿ Fã¿ Fë¿ G¿ G¿ Gè¿ Gõ¿ G∏¿ H¿ H:¿ HA¿ Hô¿ Hÿ¿ H¸¿ I2¿ I^¿ Id¿ Iø¿ J¿ Jo¿ Jø¿ Jﬁ¿ K8¿ Kg¿ Kv¿ K¨¿ K—¿ K⁄¿ L9¿ L@¿ LR¿ L~¿ LÜ¿ Lû¿ Lµ¿ Lπ¿ L∫¿ L˛¿ M¿ M:¿ Mg¿ M}¿ Mß¿ M≥¿ Mœ¿ M˙¿ N*¿ N4¿ NZ¿ Nv¿ Nö¿ N©¿ NÕ¿ N‹¿ N‚¿ NÊ¿ NÁ¿ O7¿ OJ¿ OP¿ Oß¿ O˚¿ Pk¿ Pè¿ Pù¿ P£¿ Q¿ Q$¿ QF¿ QL¿ QM¿ Qá¿ Q≥¿ Q∑¿ Q∏¿ R	¿ R¿ RU¿ R¡¿ S'¿ S5¿ S;¿ Sö¿ Sº¿ SÍ¿ T¿ T¿ T^¿ Tw¿ Tù¿ T√¿ TÕ¿ T◊¿ T›¿ T·¿ T‚¿ U3¿ U|¿ Uú¿ V¿ V¿ V¿ Vñ¿ V¥¿ VÂ¿ W¿ W
¿ W¿ W¿ W>¿ Wl¿ W¥¿ Wµ¿ W÷¿ X¿ XE¿ Xè¿ XÕ¿ Y¿ Y¿ Yb¿ Y¨¿ Yª¿ Z ¿ ZY¿ Zo¿ Z}¿ Zƒ¿ Z“¿ Z‹¿ Z‰¿ ZÍ¿ ZÎ¿ [¿ [3¿ [N¿ [U¿ [Y¿ [Z¿ [f¿ [y¿ [ù¿ [ª¿ [÷¿ [Î¿ [Ô¿ [Ò¿ [Ú¿ \*¿ \L¿ \f¿ \¢¿ \€¿ \‹¿ ]¿ ]¿ ]!¿ ]ì¿ ]ï¿ ]ñ¿ ]„¿ ^
¿ ^¿ ^H¿ ^ê¿ ^Ã¿ ^–¿ _¿ _E¿ _P¿ _r¿ _√¿ `¿ `/¿ `R¿ `s¿ `ë¿ `Ω¿ `⁄¿ `¸¿ a¿ a<¿ ab¿ aÉ¿ aâ¿ aä¿ aø¿ a≈¿ b¿ b8¿ b9¿ bm¿ bs¿ bµ¿ b’¿ bÛ¿ bÙ¿ c<¿ cS¿ cY¿ cû¿ cË¿ d6¿ dM¿ dS¿ d£¿ d¿ e@¿ eZ¿ ex¿ ey¿ e¿¿ e◊¿ e›¿ f"¿ fi¿ fó¿ fù¿ fÌ¿ g:¿ gä¿ gû¿ gπ¿ g∫¿ h¿ h¿ h!¿ hk¿ hé¿ h‚¿ i¿ i¿ iS¿ iâ¿ iß¿ i®¿ iı¿ j¿ j¿ jc¿ j±¿ j˝¿ kM¿ kp¿ kì¿ kî¿ kæ¿ kƒ¿ l¿ l_¿ lî¿ lö¿ lÁ¿ m5¿ mÖ¿ mÆ¿ m¥¿ n¿ n&¿ nA¿ nB¿ ns¿ ny¿ n»¿ n„¿ n‰¿ o¿ o!¿ ov¿ oó¿ oò¿ o÷¿ o˚¿ o˝¿ o˛¿ pJ¿ pN¿ pó¿ p¯¿ q¿ qO¿ qP¿ q¨¿ q≠¿ qŸ¿ r¿ r2¿ rK¿ rL¿ rX¿ rô¿ r∏¿ rË¿ s¿ s.¿ s5¿ s9¿ s:¿ sF¿ s\¿ s÷¿ s⁄¿ s‹¿ s›¿ t*¿ t.¿ tp¿ tü¿ t£¿ tÓ¿ uB¿ uF¿ uí¿ u‘¿ u¿ uÙ¿ vB¿ vá¿ ví¿ v´¿ vÔ¿ w
¿ w+¿ wN¿ wT¿ wU¿ wû¿ wÎ¿ wÒ¿ x'¿ xO¿ xP¿ xê¿ xñ¿ x⁄¿ y¿ y¿ yG¿ ye¿ yx¿ y~¿ y¿ yù¿ yº¿ yÙ¿ y˝¿ z¿ z¿ z-¿ za¿ zÅ¿ zî¿ zú¿ zŸ¿ z›¿ zﬁ¿ {6¿ {L¿ {j¿ {é¿ {≤¿ {π¿ {÷¿ |+¿ |Ü¿ |ç¿ |ë¿ |ì¿ |î¿ |˙¿ }4¿ }5¿ }S¿ }x¿ }ï¿ }ñ¿ }¢¿ }¡¿ }—¿ ~¿ ~`¿ ~|¿ ~–¿ &¿ Ö¿ ê¿ ò¿ ´¿ µ¿ Ä¿ Ä¿ Ä¿ Ä¿ Ä?¿ Äc¿ Ää¿ Äë¿ ÄÛ¿ Å¿ ÅK¿ ÅÖ¿ Åå¿ Å£¿ Åß¿ Å©¿ Å™¿ Åˆ¿ ÇH¿ ÇK¿ Çñ¿ ÇÈ¿ É8¿ ÉÜ¿ É’¿ É˜¿ Ñ*¿ ÑH¿ Ñ\¿ Ñq¿ Ñò¿ Ñ∏¿ Ñ‡¿ Ö	¿ Ö+¿ ÖU¿ ÖV¿ Öz¿ Öó¿ Öº¿ ÖΩ¿ Ü¿ Ü_¿ Ü≤¿ Ü˚¿ á¿ á*¿ áD¿ áX¿ á^¿ áÜ¿ áƒ¿ à ¿ à/¿ à3¿ à4¿ à@¿ à¨¿ àÆ¿ àØ¿ â¿ âS¿ âo¿ âr¿ â«¿ ä¿ äC¿ äZ¿ äx¿ ä¢¿ ä∫¿ ä¿¿ ä¡¿ ä÷¿ äÔ¿ ã¿ ã¿ ã!¿ ãH¿ ãz¿ ãç¿ ãì¿ ãî¿ ãÆ¿ ãÚ¿ åJ¿ åâ¿ åä¿ å≥¿ ç¿ ç)¿ ç*¿ ç\¿ çÜ¿ çŸ¿ ç˙¿ ç˚¿ é¿ é8¿ ég¿ é¿ éù¿ é¨¿ éπ¿ é–¿ é€¿ é‰¿ éÎ¿ éÔ¿ éÒ¿ éÚ¿ è+¿ è?¿ è\¿ è~¿ èü¿ è√¿ èÂ¿ ê¿ êT¿ êë¿ ê«¿ êÌ¿ ë¿ ë,¿ ëV¿ ëà¿ ëé¿ ëè¿ ë®¿ ëÕ¿ ëÎ¿ í¿ í3¿ íg¿ íh¿ í≥¿ í˝¿ ì7¿ ìÄ¿ ìÅ¿ ì¢¿ ì¡¿ ì¬¿ ìÔ¿ ì¿ ì¸¿ î¿ îf¿ îg¿ îµ¿ ï¿ ïT¿ ïê¿ ïë¿ ïÓ¿ ñ¿ ñ2¿ ñX¿ ñw¿ ñx¿ ñ¢¿ ñ˜¿ ó7¿ óo¿ óu¿ óv¿ óö¿ ó—¿ òM¿ òÖ¿ ò—¿ ô.¿ ô4¿ ô5¿ ôi¿ ô®¿ ôŸ¿ ö&¿ ö/¿ ö¢¿ ö◊¿ õF¿ õL¿ õM¿ õv¿ õ®¿ ú¿ úR¿ úS¿ úÜ¿ ú≥¿ ú‰¿ úÏ¿ úÚ¿ úÛ¿ ùA¿ ùÖ¿ ùß¿ û¿ û¿ û:¿ ûÇ¿ ûÉ¿ ûõ¿ û…¿ ü+¿ üÑ¿ üå¿ üç¿ üœ¿ † ¿ †"¿ †[¿ ††¿ †ƒ¿ †Õ¿ °¿ °G¿ °M¿ °N¿ °†¿ °Ô¿ ¢6¿ ¢Ä¿ ¢á¿ ¢‹¿ £¿ £m¿ £∫¿ §
¿ §1¿ §2¿ §X¿ §{¿ §®¿ §Ò¿ •"¿ •D¿ •M¿ •ñ¿ •—¿ •◊¿ •ÿ¿ ¶¿ ¶J¿ ¶ç¿ ¶›¿ ¶„¿ ¶‰¿ ß¿ ßW¿ ßà¿ ß∆¿ ßœ¿ ®'¿ ®≥¿ ®π¿ ®∫¿ ®‚¿ ©¿ ©x¿ ©y¿ ©«¿ ©Î¿ ™>¿ ™h¿ ™é¿ ™ÿ¿ ´;¿ ´]¿ ´à¿ ´¶¿ ´¬¿ ´Ê¿ ¨¿ ¨<¿ ¨d¿ ¨m¿ ¨”¿ ≠;¿ ≠à¿ ≠™¿ ≠…¿ Æ¿ Æ¿ ÆS¿ Æâ¿ Æè¿ Æê¿ Æº¿ Ø¿ Ø;¿ Ø_¿ ØÅ¿ Ø≈¿ Ø–¿ Øÿ¿ ØŸ¿ ∞¿ ∞O¿ ∞ã¿ ∞ö¿ ∞ﬁ¿ ±.¿ ±¿ ±À¿ ±‡¿ ≤,¿ ≤]¿ ≤í¿ ≤≠¿ ≤µ¿ ≤∂¿ ≥¿ ≥v¿ ≥w¿ ≥à¿ ≥…¿ ≥‘¿ ¥9¿ ¥õ¿ µ¿ µ(¿ µÅ¿ µ£¿ µﬂ¿ ∂&¿ ∂F¿ ∂•¿ ∂¸¿ ∑S¿ ∑•¿ ∑∂¿ ∑œ¿ ∏@¿ ∏Q¿ ∏a¿ ∏m¿ ∏w¿ ∏å¿ ∏ò¿ ∏û¿ ∏ü¿ ∏Ã¿ π-¿ πh¿ πn¿ πo¿ πô¿ πﬁ¿ ∫¿ ∫¿ ∫¿ ∫J¿ ∫í¿ ∫Õ¿ ∫”¿ ∫‘¿ ∫ˆ¿ ª,¿ ªf¿ ªm¿ ªq¿ ªr¿ ª~¿ ª≥¿ ª·¿ º¿ ºK¿ º∑¿ Ω¿ Ωy¿ Ωß¿ ΩÓ¿ ΩÚ¿ ΩÙ¿ Ωı¿ æB¿ æF¿ æè¿ æì¿ æŒ¿ ø¿ øR¿ øå¿ øÀ¿ øı¿ ¿¿ ¿2¿ ¿W¿ ¿{¿ ¿†¿ ¿¶¿ ¿ß¿ ¿æ¿ ¿Í¿ ¡"¿ ¡V¿ ¡W¿ ¡í¿ ¡¡¿ ¡¬¿ ¡Œ¿ ¬.¿ ¬0¿ ¬1¿ ¬´¿ √¿ √:¿ √j¿ √ú¿ √—¿ ƒJ¿ ƒ{¿ ƒ¥¿ ƒË¿ ≈¿ ≈¿ ≈¿ ≈$¿ ≈;¿ ≈<¿ ≈k¿ ≈ó¿ ≈™¿ ≈Î¿ ∆¿ ∆¿ ∆%¿ ∆x¿ ∆í¿ ∆æ¿ ∆À¿ «¿ «e¿ «Ü¿ «å¿ «ê¿ «ë¿ «ù¿ «∞¿ «”¿ «Ë¿ «Ï¿ «Ì¿ «˘¿ »=¿ »c¿ »ﬂ¿ …,¿ …G¿ …M¿ …Ü¿ …º¿  ¿  #¿  )¿  l¿  Æ¿  Í¿ À9¿ Àt¿ Àì¿ À∑¿ ÀÂ¿ ÀÔ¿ À˛¿ ÃM¿ Ãõ¿ ÃÊ¿ Õ¿ Õ,¿ ÕM¿ Õd¿ Õí¿ Õö¿ Õ†¿ Õ§¿ Õ•¿ ÕÎ¿ Œ¿ Œ-¿ ŒZ¿ Œ[¿ Œx¿ Œ©¿ ŒÒ¿ œ¿ œ0¿ œ7¿ œ†¿ œ∑¿ œ‹¿ œ˙¿ –¿ –
¿ –¿ –V¿ –~¿ –ö¿ –°¿ —¿ —¿ —K¿ —…¿ “M¿ “N¿ “o¿ “”¿ ”9¿ ”©¿ ”™¿ ‘¿ ‘à¿ ‘â¿ ‘≈¿ ’¿ ’¿ ’¿ ’N¿ ’`¿ ’©¿ ’˜¿ ÷#¿ ÷+¿ ÷3¿ ÷7¿ ÷8¿ ÷q¿ ÷õ¿ ÷π¿ ÷Ω¿ ÷æ¿ ÷ ¿ ÷Ò¿ ◊¿ ◊+¿ ◊E¿ ◊ä¿ ◊…¿ ◊Â¿ ÿ¿ ÿ:¿ ÿH¿ ÿW¿ ÿt¿ ÿ¢¿ ÿÀ¿ ÿ˛¿ Ÿ%¿ Ÿ6¿ ŸE¿ ŸÄ¿ Ÿõ¿ ŸŒ¿ ŸÒ¿ ⁄ ¿ ⁄C¿ ⁄R¿ ⁄^¿ ⁄k¿ ⁄Ü¿ ⁄±¿ ⁄ÿ¿ €¿ €+¿ €:¿ €G¿ €P¿ €W¿ €[¿ €\¿ €z¿ €€¿ €ﬂ¿ €‡¿ ‹¿ ‹5¿ ‹]¿ ‹d¿ ‹h¿ ‹j¿ ‹k¿ ‹≠¿ ‹±¿ ‹ı¿ ‹˘¿ ›.¿ ›¿ ›≠¿ ›±¿ ›≈¿ ﬁ¿ ﬁ_¿ ﬁß¿ ﬁœ¿ ﬁ”¿ ﬂ¿ ﬂ,¿ ﬂ0¿ ﬂD¿ ﬂí¿ ﬂ·¿ ‡0¿ ‡j¿ ‡n¿ ‡”¿ ‡◊¿ · ¿ ·0¿ ·4¿ ·H¿ ·ï¿ ·Ê¿ ‚2¿ ‚j¿ ‚π¿ ‚¿ ‚Ù¿ „W¿ „[¿ „§¿ „¥¿ „∏¿ „Ù¿ „¯¿ ‰?¿ ‰Ü¿ ‰Õ¿ Â¿ ÂX¿ Âç¿ Â—¿ Ê¿ Ê"¿ Ê&¿ Êf¿ Ê¨¿ ÊÏ¿ Á-¿ Áe¿ Á¶¿ Á¿¿ Áƒ¿ Ë¿ Ë¿ ËN¿ Ëù¿ ËÒ¿ Ëı¿ ÈD¿ È¨¿ ÈÒ¿ Èı¿ Í]¿ Í≤¿ Í∂¿ ÍÕ¿ Í—¿ ÍÍ¿ ÍÓ¿ Î+¿ Îb¿ Î†¿ ÎŒ¿ Î“¿ Ï¿ ÏV¿ Ï§¿ ÏÓ¿ Ì3¿ Ì>¿ ÌB¿ ÌV¿ Ìß¿ ÌÒ¿ Ìı¿ Ó¿ ÓN¿ Óz¿ Óê¿ Ó‘¿ Ô
¿ Ô¿ Ô¿ Ô%¿ Ô-¿ Ô=¿ ÔA¿ ÔÖ¿ Ôƒ¿ Ô˚¿ Ôˇ¿ ¿ ¿ a¿ Ö¿ ‘¿ Ò¿ Ò`¿ Ò±¿ Òˇ¿ ÚG¿ ÚX¿ Úß¿ Ú¿ Û¿ ÛR¿ Û°¿ ÛÚ¿ Ù0¿ ÙÄ¿ ÙΩ¿ ı¿ ıT¿ ıâ¿ ı›¿ ˆ%¿ ˆl¿ ˆ…¿ ˆÒ¿ ˜.¿ ˜A¿ ˜P¿ ˜a¿ ˜p¿ ˜è¿ ˜∂¿ ˜›¿ ˜ˇ¿ ¯D¿ ¯U¿ ¯o¿ ¯É¿ ¯†¿ ¯æ¿ ¯‘¿ ¯Ó¿ ˘¿ ˘*¿ ˘f¿ ˘É¿ ˘¨¿ ˘«¿ ˘Â¿ ˙¿ ˙B¿ ˙Z¿ ˙`¿ ˙a¿ ˙ß¿ ˙Ú¿ ˚:¿ ˚b¿ ˚h¿ ˚µ¿ ¸¿ ¸	¿ ¸P¿ ¸ñ¿ ¸‚¿ ˝+¿ ˝q¿ ˝w¿ ˝á¿ ˝ç¿ ˝’¿ ˝˙¿ ˛¿ ˛¿ ˛b¿ ˛Æ¿ ˛‹¿ ˛‚¿ ˇ(¿ ˇA¿ ˇG¿ ˇÖ¿ ˇã¿ ˇõ¿ ˇ°¿ ˇÎ¿ ¿ *¿ +¿ c¿ à¿ â¿ ¥¿ ∫¿ ˛¿?¿ã¿ÿ¿¿¿_¿∞¿ˇ¿F¿o¿u¿√¿¿`¿ï¿´¿¨¿¯¿˛¿(¿N¿O¿ù¿£¿¿R¿S¿Æ¿¥¿¿b¿c¿¨¿≤¿¸¿D¿J¿É¿â¿ƒ¿ˆ¿	%¿	&¿	u¿	{¿	Ø¿	Á¿	Ë¿
2¿
~¿
®¿
Æ¿
 ¿
–¿¿¿p¿ü¿•¿ª¿ı¿6¿á¿ë¿ó¿È¿˚¿¿¿k¿î¿ï¿ﬂ¿$¿N¿T¿p¿v¿¿¿∆¿¿K¿Q¿g¿ó¿€¿)¿9¿?¿ï¿ß¿¬¿√¿¿I¿J¿•¿´¿ı¿/¿P¿Q¿û¿§¿Ê¿¿¿O¿U¿£¿ƒ¿ ¿¿0¿U¿V¿Ñ¿ä¿Ÿ¿'¿]¿c¿≥¿¿P¿w¿}¿≈¿¿@¿F¿ì¿‹¿Ò¿˜¿C¿é¿⁄¿˙¿ ¿¿¿d¿õ¿·¿-¿o¿å¿ç¿÷¿%¿q¿w¿ø¿¿\¿b¿z¿¢¿£¿Ï¿Ú¿?¿à¿é¿“¿Û¿	¿
¿M¿Ä¿Å¿À¿Ÿ¿ﬂ¿%¿o¿Ω¿ ¿ 8¿ d¿ â¿ ä¿ Œ¿ Á¿ Ì¿!&¿!,¿!e¿!è¿!ê¿!“¿!Î¿!Ò¿"*¿"0¿"i¿"ñ¿"ó¿"›¿"„¿#.¿#a¿#g¿#¥¿$¿$¿$¿$!¿$n¿$Ä¿$ü¿$†¿$Ì¿%¿%¿%b¿%¶¿%¨¿%Ï¿%Ú¿&¿&X¿&â¿&è¿&›¿&Ô¿&ı¿'¿'[¿'¶¿'Û¿(D¿(ã¿(ù¿(£¿(Ò¿)¿)	¿)V¿)°¿)Ò¿*A¿*{¿*Å¿*—¿+¿+^¿+d¿+±¿+¯¿,*¿,~¿,ò¿,≠¿,≥¿,Á¿,˚¿-L¿-U¿-m¿-ÿ¿.:¿.ç¿.ñ¿.ß¿/
¿/b¿/è¿/÷¿/ﬂ¿/¿0P¿0Æ¿1¿1m¿1 ¿2$¿2Q¿2Z¿2ë¿2ô¿2ù¿2û¿2Î¿3¿3¿3d¿3¨¿3≤¿3Ú¿3¯¿4¿4¿4W¿4¢¿4∫¿4Ú¿5/¿53¿54¿5Å¿5±¿5∑¿5˙¿6 ¿6J¿6î¿6‚¿6Ù¿6˙¿7G¿7ï¿7€¿8
¿8¿8[¿8™¿8˘¿9C¿9U¿9£¿:¿:,¿:b¿:x¿:”¿:ﬁ¿:¯¿;\¿;±¿;º¿;œ¿<4¿<é¿<Ω¿=¿=¿=$¿=Ü¿=Ê¿>F¿>∞¿>ª¿>Ù¿>˛¿?¿?/¿?3¿?4¿?Ç¿?ê¿?ñ¿?„¿@1¿@~¿@œ¿@‰¿@Í¿A*¿A0¿A@¿AF¿Aó¿A‹¿B0¿BN¿B≥¿Bﬁ¿BÎ¿CC¿Cn¿Ct¿Cx¿Cy¿CÖ¿C∑¿Cπ¿C∫¿C÷¿C⁄¿D&¿DN¿D¨¿D∏¿DÌ¿DÓ¿D˙¿EC¿E}¿Eæ¿E¬¿E√¿E”¿E‘¿F.¿Fã¿Få¿F∂¿F∑¿Fı¿G$¿Gb¿Gë¿G“¿H¿HS¿Hû¿Hü¿Hª¿HÏ¿HÚ¿I;¿In¿I¨¿IÌ¿IÓ¿J¿J#¿J3¿J9¿JÖ¿Jö¿J ¿JÀ¿J˝¿K¿K¿K¿Ki¿KÄ¿K∂¿K∑¿KÂ¿L3¿LG¿Lo¿Ly¿Lß¿L≠¿L±¿L≤¿L„¿M7¿MK¿Mv¿MÄ¿M±¿M∑¿Mª¿Mº¿Mﬂ¿MÂ¿N6¿Nh¿Nn¿Nº¿O¿O¿O ¿Oh¿O¿OÖ¿O÷¿OÏ¿P4¿P_¿Pe¿Pä¿Pé¿Pè¿Pª¿P¡¿Q¿QP¿QV¿Q§¿QÙ¿R¿R¿RP¿Rg¿Rm¿Ræ¿R◊¿S¿SA¿SG¿So¿Ss¿St¿S≠¿S€¿S‹¿SÓ¿T?¿T@¿Tç¿T®¿U+¿UZ¿Uj¿Uk¿Uû¿U≤¿U‚¿UÏ¿UÚ¿Uˆ¿U˜¿V¿V¿Vj¿Vü¿W¿W¿WV¿Ww¿X¿XG¿XW¿XX¿Xó¿X´¿XÁ¿XÒ¿X˜¿X˚¿X¸¿Y¿Y¿Yc¿YØ¿Y¬¿Z¿ZY¿Zë¿Zƒ¿Z≈¿ZÒ¿[6¿[ã¿[›¿\¿\x¿\÷¿]0¿]f¿]≤¿]˘¿^"¿^\¿^è¿^ü¿^¯¿_¿_?¿_q¿_{¿_ë¿_ô¿_ö¿_Ú¿`L¿`h¿`ó¿a¿aL¿ay¿aÉ¿a≥¿aª¿aº¿aÒ¿b¿bZ¿bö¿b ¿b¿c¿ce¿c≠¿c¿¿c—¿c‡¿cÌ¿c¯¿d¿dF¿dO¿dU¿dY¿dZ¿d~¿d•¿d›¿e¿e¿e¿e^¿eç¿eô¿eÆ¿e∫¿e¿¿eƒ¿e≈¿eˇ¿f¿fV¿fm¿fë¿f∏¿fΩ¿f¡¿f¬¿fˇ¿g¿gV¿gp¿gõ¿g∆¿gÃ¿g–¿g—¿g˘¿h3¿h7¿h8¿hs¿hê¿h∞¿hÊ¿i¿i¿i1¿iI¿ij¿iÄ¿i≤¿iπ¿i…¿j ¿j<¿já¿j»¿k$¿k/¿k7¿kJ¿kT¿kU¿kà¿k¿l¿l¿l;¿lZ¿l[¿lí¿lÆ¿l‡¿m¿m=¿mE¿mK¿mL¿mr¿mç¿m∂¿m∆¿mŒ¿n	¿n<¿n_¿n`¿nz¿nØ¿n∑¿n∏¿n‰¿n¯¿o¿oQ¿ou¿o¿oÄ¿o≈¿oˆ¿o˛¿p¿p ¿p!¿pS¿p`¿pâ¿pË¿q¿q¿q(¿q)¿qJ¿qv¿qï¿qÆ¿qÀ¿q”¿qŸ¿q⁄¿r¿r¿rM¿r|¿rí¿rΩ¿rœ¿rŸ¿s¿s5¿s>¿sV¿sí¿s™¿s‚¿s¿s˙¿t¿t¿t6¿tU¿tÖ¿tÆ¿t∏¿t¡¿tŸ¿t˚¿u#¿u?¿uS¿uu¿uï¿uú¿uù¿u∂¿uÚ¿u¯¿u˘¿v*¿v=¿vN¿vb¿vy¿vù¿vÂ¿v˙¿w¿w¿w¿wT¿wï¿wõ¿wÌ¿x¿x¿xH¿xó¿x™¿x∞¿x˚¿yJ¿yn¿yt¿y«¿z¿zZ¿z`¿z∞¿z˛¿{2¿{8¿{á¿{’¿|¿|¿|a¿|≤¿|˛¿}%¿}+¿}A¿}ã¿}’¿~¿~¿~n¿~Ä¿~ê¿~ñ¿~Â¿~˘¿E¿í¿¢¿Û¿ÄF¿Ä¢¿Ä€¿Ä¯¿Å¿Å+¿ÅC¿Å[¿Å|¿Åí¿Å ¿Å—¿Å·¿Ç	¿Ç%¿Çp¿Ç±¿É¿É¿É ¿É3¿É=¿Ék¿Él¿Éå¿Ñ¿Ñ$¿ÑV¿Ñg¿ÑÑ¿Ñ≠¿Ñ◊¿Ñı¿Ö¿Ö/¿ÖQ¿Öq¿Ö¬¿ÖÀ¿Ö”¿Ü¿Ü¿Ü¿Ü?¿Ü¿Ü¬¿á	¿áH¿áI¿áè¿áê¿á—¿á¯¿à^¿à_¿à†¿à‰¿â"¿ân¿â™¿âÊ¿âÌ¿âÒ¿âÚ¿ä#¿äP¿äê¿äî¿äï¿äÁ¿ã:¿ãé¿ãµ¿å+¿åf¿ç1¿ç¨¿ç≤¿ç≥¿ç≈¿é¿é8¿é@¿éA¿éü¿é¸¿è¿è^¿èb¿èc¿èî¿èï¿èÂ¿ê1¿ê[¿êz¿ê⁄¿ë+¿ëT¿ëa¿ëó¿ë∫¿ë√¿ë…¿ëÕ¿ëŒ¿ë›¿ëﬁ¿í¿í¿í:¿ín¿ír¿ís¿í¿íî¿í´¿ì¿ìs¿ìÂ¿î0¿îo¿îÇ¿îî¿îƒ¿îÀ¿îÃ¿ï¿ï=¿ïP¿ïW¿ï[¿ï\¿ïh¿ïï¿ïª¿ñ.¿ñá¿ñ˚¿ó¿óZ¿ó…¿óœ¿ò¿ò¿òz¿ò¥¿òŒ¿ô'¿ôa¿ôp¿ôá¿ô¿¿ö¿öX¿ög¿öu¿ö¿öî¿ö†¿ö»¿öÏ¿õ<¿õh¿õw¿õü¿õß¿õ≠¿õ±¿õ≤¿õæ¿õﬂ¿ú0¿úg¿ú»¿ù¿ù>¿ùú¿ù…¿ùœ¿û¿ûG¿ûp¿ûq¿ûô¿ûº¿û¿¿û¡¿ûÕ¿û‡¿ü¿ü4¿üm¿üò¿üµ¿ü’¿üÍ¿üÓ¿üÔ¿†¿†"¿†5¿†K¿†p¿†î¿†∫¿†·¿°¿°1¿°8¿°x¿°ù¿°¿¿°Á¿¢¿¢¿¢4¿¢l¿¢r¿¢s¿¢π¿¢’¿£¿£'¿£-¿£.¿£G¿£[¿£m¿£Ñ¿£ª¿£∆¿£œ¿£’¿£Ÿ¿£⁄¿§)¿§M¿§i¿§~¿§ê¿§™¿§»¿§Ú¿•&¿•c¿•í¿•«¿¶¿¶?¿¶c¿¶n¿¶è¿¶”¿ß¿ß3¿ßs¿ßó¿ß†¿ß¶¿ß™¿ß´¿ß˜¿®¿®1¿®F¿®X¿®r¿®ç¿®π¿®Í¿©'¿©V¿©ã¿©–¿©˝¿™¿™)¿™G¿™ã¿™ ¿™Î¿´+¿´O¿´X¿´^¿´b¿´c¿´Ç¿´™¿´´¿´Ò¿´˜¿¨%¿¨X¿¨°¿¨Ø¿¨µ¿¨«¿¨Â¿≠ ¿≠(¿≠,¿≠-¿≠9¿≠`¿≠é¿≠¿¿≠Û¿Æ7¿Æ8¿Æj¿Æ}¿Æç¿Ææ¿ÆÂ¿Ø$¿Ød¿Øm¿Øá¿Øß¿Ø÷¿Ø˜¿∞`¿∞î¿∞õ¿∞µ¿∞ ¿∞‹¿∞Ú¿±¿±2¿±=¿±^¿±¿±ü¿±¡¿±‰¿±Ì¿±Û¿±Ù¿≤¿≤o¿≤◊¿≥¿≥2¿≥D¿≥\¿≥°¿≥”¿¥¿¥$¿¥1¿¥<¿¥Z¿¥|¿¥ù¿¥¿¿¥„¿¥Ï¿¥Ú¿¥Û¿µ¿µ3¿µ4¿µÄ¿µ¢¿µÕ¿µÈ¿∂¿∂W¿∂b¿∂k¿∂Ä¿∂í¿∂°¿∂ƒ¿∂Ê¿∑¿∑)¿∑a¿∑j¿∑p¿∑q¿∑ö¿∑¿¿∏¿∏A¿∏d¿∏Æ¿π¿π	¿π¿π0¿πU¿πu¿πó¿π∑¿π⁄¿∫E¿∫Ñ¿∫ç¿∫ì¿∫î¿∫≈¿∫Ù¿ª ¿ªs¿ªﬂ¿º¿º¿º.¿º@¿ºk¿ºë¿º≥¿º‰¿Ω¿Ω*¿Ωi¿Ωr¿Ωx¿Ωy¿Ω´¿Ω¿¿Ω“¿ΩÂ¿æ
¿æ&¿æh¿æw¿æÑ¿æü¿æ∑¿æ€¿æ˚¿ø8¿øj¿øé¿ø¨¿øÎ¿¿(¿¿;¿¿L¿¿[¿¿h¿¿s¿¿õ¿¿Ω¿¿›¿¡ ¿¡A¿¡Ä¿¡â¿¡è¿¡ê¿¡æ¿¡”¿¡Â¿¬	¿¬4¿¬V¿¬v¿¬ô¿¬Ω¿¬¸¿√¿√¿√¿√¿√/¿√V¿√ï¿√œ¿√¸¿ƒB¿ƒn¿ƒw¿ƒ°¿ƒ¿¿ƒﬁ¿ƒ˛¿≈¿≈&¿≈'¿≈I¿≈h¿≈â¿≈†¿≈¥¿≈œ¿≈˝¿∆%¿∆Ü¿∆Æ¿∆ª¿∆ﬁ¿«¿«$¿«I¿«n¿«y¿«ú¿«ø¿«‡¿»¿»¿»¿»¿»;¿»h¿»ò¿»•¿»’¿…¿…¿…	¿…Q¿…ö¿…Û¿…˙¿…˚¿ E¿ |¿ Œ¿À6¿À=¿À>¿Àm¿Àµ¿À∂¿À—¿ÀÌ¿Ã¿ÃA¿ÃZ¿Ã®¿Õ*¿ÕF¿Õu¿Õ≥¿Õƒ¿ÕÒ¿Œ¿ŒF¿Œè¿Œ∑¿ŒÈ¿œ@¿œ®¿œ˝¿–4¿–î¿–ƒ¿–˛¿—P¿—Ä¿—ì¿—∑¿—»¿—◊¿—Â¿—¿—˘¿“ ¿“¿“¿“¿“:¿“`¿“a¿“¿“Ä¿“å¿“µ¿”¿”¿”¿”¿”B¿”j¿”ï¿”ô¿”õ¿”ú¿”ÿ¿”‹¿‘ ¿‘E¿‘|¿‘€¿‘Ó¿’¿’¿’a¿’é¿’è¿’Ô¿÷¿÷¿÷\¿÷{¿÷}¿÷~¿÷ ¿◊¿◊k¿◊º¿◊¿◊Ù¿ÿ?¿ÿâ¿ÿ⁄¿ÿ¿ÿÙ¿ŸA¿Ÿé¿Ÿﬁ¿⁄)¿⁄a¿⁄e¿⁄•¿⁄Ë¿€	¿€-¿€I¿€s¿€}¿€~¿€∂¿€º¿€Í¿‹¿‹	¿‹A¿‹V¿‹W¿‹c¿‹Ç¿‹§¿‹ﬁ¿‹ﬂ¿‹¸¿›¿›¿›¿›'¿›7¿›=¿›>¿›ä¿›…¿ﬁ ¿ﬁ¿ﬁ¿ﬁ¿ﬁ'¿ﬁg¿ﬁk¿ﬁm¿ﬁn¿ﬁ¢¿ﬁ¡¿ﬁ–¿ﬁ˜¿ﬂ¿ﬂ0¿ﬂO¿ﬂj¿ﬂâ¿ﬂ£¿ﬂ∑¿ﬂ«¿ﬂﬁ¿ﬂÙ¿‡¿‡¿‡¿‡Å¿‡ö¿‡ª¿‡ﬁ¿‡ˇ¿·¿·9¿·Y¿·t¿·ê¿·¨¿·—¿·“¿·ﬁ¿‚(¿‚*¿‚+¿‚q¿‚∑¿‚∏¿‚ƒ¿‚Ÿ¿‚¿‚¸¿„?¿„ä¿„ë¿„ÿ¿„‹¿„›¿„È¿„¸¿‰¿‰/¿‰3¿‰4¿‰@¿‰y¿‰ü¿‰Ë¿‰Ï¿‰Ì¿‰˛¿Â(¿ÂF¿ÂJ¿ÂK¿Â¿Âƒ¿ÂË¿ÂÏ¿ÂÌ¿Ê2¿Ê¿Ê∞¿Êÿ¿Á ¿Á¿Á¿Á¿ÁA¿Áp¿Áí¿Áò¿Áú¿Áù¿Á‚¿Ë ¿ËY¿Ëó¿È¿È4¿ÈZ¿È∞¿È∫¿È«¿Í¿Í,¿Í2¿Í¿Í∏¿ÍÁ¿Î¿Î%¿Î+¿Î=¿ÎA¿ÎB¿ÎN¿Îu¿Îë¿Îæ¿Îı¿Ï¿Ï?¿Ïì¿Ï´¿Ï∂¿Ïø¿Ï◊¿Ï¿Ì(¿Ìo¿Ìò¿Ì∂¿ÌÛ¿Ó¿ÓI¿Óp¿Óö¿Óø¿ÓÙ¿Ô¿Ô>¿Ôm¿Ôö¿Ôß¿Ô≤¿Ôª¿Ô¬¿Ô∆¿Ô«¿Ô…¿Ô ¿¿¿Y¿]¿®¿Í¿Ò¿Òl¿Òó¿Ò©¿Òæ¿Òœ¿ÒÔ¿Ú¿Ú¿Ú ¿ÚC¿ÚE¿ÚF¿Úu¿Úé¿Ú´¿Úœ¿ÚÈ¿ÚÔ¿Ú¿Û¿Û<¿Û=¿ÛI¿Û¿Û¨¿Û∞¿Û≤    Ä•  Ä∫  Ä‘ÄÎ Ä ÅÅÅ  Å= ÅdÅzÅ|  Å§  Åª  Å—  ÅÌ  Ç	  Ç  Ç5  ÇJ  Ça  Çw  Çô  Çø  ÇÓ  É  É  É>    á íéç≈Üæ/// Manages [SnackBar]s and [MaterialBanner]s for descendant [Scaffold]s.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=lytQi-slT5Y}
///
/// This class provides APIs for showing snack bars and material banners at the
/// bottom and top of the screen, respectively.
///
/// To display one of these notifications, obtain the [ScaffoldMessengerState]
/// for the current [BuildContext] via [ScaffoldMessenger.of] and use the
/// [ScaffoldMessengerState.showSnackBar] or the
/// [ScaffoldMessengerState.showMaterialBanner] functions.
///
/// When the [ScaffoldMessenger] has nested [Scaffold] descendants, the
/// ScaffoldMessenger will only present the notification to the root Scaffold of
/// the subtree of Scaffolds. In order to show notifications for the inner, nested
/// Scaffolds, set a new scope by instantiating a new ScaffoldMessenger in
/// between the levels of nesting.
///
/// {@tool dartpad}
/// Here is an example of showing a [SnackBar] when the user presses a button.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger.0.dart **
/// {@end-tool}
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=lytQi-slT5Y}
///
/// See also:
///
///  * [SnackBar], which is a temporary notification typically shown near the
///    bottom of the app using the [ScaffoldMessengerState.showSnackBar] method.
///  * [MaterialBanner], which is a temporary notification typically shown at the
///    top of the app using the [ScaffoldMessengerState.showMaterialBanner] method.
///  * [debugCheckHasScaffoldMessenger], which asserts that the given context
///    has a [ScaffoldMessenger] ancestor.
///  * Cookbook: [Display a SnackBar](https://flutter.dev/docs/cookbook/design/snackbars) çÚÄì éDéUI/// Creates a widget that manages [SnackBar]s for [Scaffold] descendants.é\	éc  ékéz   éâyé˝`/// The widget below this widget in the tree.
///
/// {@macro flutter.widgets.ProxyWidget.child}  èá‹ïÛÜÖ/// The state from the closest instance of this class that encloses the given
/// context.
///
/// {@tool dartpad}
/// Typical usage of the [ScaffoldMessenger.of] function is to call it in
/// response to a user gesture or an application state change.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger.of.0.dart **
/// {@end-tool}
///
/// A less elegant but more expedient solution is to assign a [GlobalKey] to the
/// [ScaffoldMessenger], then use the `key.currentState` property to obtain the
/// [ScaffoldMessengerState] rather than using the [ScaffoldMessenger.of]
/// function. The [MaterialApp.scaffoldMessengerKey] refers to the root
/// ScaffoldMessenger that is provided by default.
///
/// {@tool dartpad}
/// Sometimes [SnackBar]s are produced by code that doesn't have ready access
/// to a valid [BuildContext]. One such example of this is when you show a
/// SnackBar from a method outside of the `build` function. In these
/// cases, you can assign a [GlobalKey] to the [ScaffoldMessenger]. This
/// example shows a key being used to obtain the [ScaffoldMessengerState]
/// provided by the [MaterialApp].
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger.of.1.dart **
/// {@end-tool}
///
/// If there is no [ScaffoldMessenger] in scope, then this will assert in
/// debug mode, and throw an exception in release mode.
///
/// See also:
///
///  * [maybeOf], which is a similar function but will return null instead of
///    throwing if there is no [ScaffoldMessenger] ancestor.
///  * [debugCheckHasScaffoldMessenger], which asserts that the given context
///    has a [ScaffoldMessenger] ancestor. ïˆñ   ñÁÇTòzÅa/// The state from the closest instance of this class that encloses the given
/// context, if any.
///
/// Will return null if a [ScaffoldMessenger] is not found in the given context.
///
/// See also:
///
///  * [of], which is a similar function, except that it will throw an
///    exception if a [ScaffoldMessenger] is not found in the given context. òÇòê   ô?Môb   ô?ô@ ôê¿ B`õ2Åõ/// State for a [ScaffoldMessenger].
///
/// A [ScaffoldMessengerState] object can be used to [showSnackBar] or
/// [showMaterialBanner] for every registered [Scaffold] that is a descendant of
/// the associated [ScaffoldMessenger]. Scaffolds will register to receive
/// [SnackBar]s and [MaterialBanner]s from their closest ScaffoldMessenger
/// ancestor.
///
/// Typically obtained via [ScaffoldMessenger.of].  õåNõØ õºõ…õ◊õ õÿõŸõﬁÄ¥ú1 
úDúIúèúJúcúéúdútúêúëúñ.ú´  ú»Äñù 
ùù!ù[ù"ù;ùZù<ùFù\ù]ùb(ùw  ùéùï  ùßù≠   ù«Ç¿ùÿ   ù«ù»†ãÅ†ê  †ö†©   °®Ä¨°≠  °π°»   ¢XÄœ¢]    £√Ä¬£»  £–£ﬂ   §úì≠ á’/// Shows a [SnackBar] across all registered [Scaffold]s. Scaffolds register
/// to receive snack bars from their closest [ScaffoldMessenger] ancestor.
/// If there are several registered scaffolds the snack bar is shown
/// simultaneously on all of them.
///
/// A scaffold can show at most one snack bar at a time. If this function is
/// called while another snack bar is already visible, the given snack bar
/// will be added to a queue and displayed after the earlier snack bars have
/// closed.
///
/// To control how long a [SnackBar] remains visible, use [SnackBar.duration].
///
/// To remove the [SnackBar] with an exit animation, use [hideCurrentSnackBar]
/// or call [ScaffoldFeatureController.close] on the returned
/// [ScaffoldFeatureController]. To remove a [SnackBar] suddenly (without an
/// animation), use [removeCurrentSnackBar].
///
/// See [ScaffoldMessenger.of] for information about how to obtain the
/// [ScaffoldMessengerState].
///
/// {@tool dartpad}
/// Here is an example of showing a [SnackBar] when the user presses a button.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger_state.show_snack_bar.0.dart **
/// {@end-tool}
///
/// ## Relative positioning of floating SnackBars
///
/// A [SnackBar] with [SnackBar.behavior] set to [SnackBarBehavior.floating] is
/// positioned above the widgets provided to [Scaffold.floatingActionButton],
/// [Scaffold.persistentFooterButtons], and [Scaffold.bottomNavigationBar].
/// If some or all of these widgets take up enough space such that the SnackBar
/// would not be visible when positioned above them, an error will be thrown.
/// In this case, consider constraining the size of these widgets to allow room for
/// the SnackBar to be visible.
///
/// {@tool dartpad}
/// Here is an example showing that a floating [SnackBar] appears above [Scaffold.floatingActionButton].
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger_state.show_snack_bar.1.dart **
/// {@end-tool}
/// ≠≠   ∑ºÇ®∑¡  ∑ﬁ∑Ô   ∫hÇ…ªoÄ˜/// Removes the current [SnackBar] (if any) immediately from registered
/// [Scaffold]s.
///
/// The removed snack bar does not run its normal exit animation. If there are
/// any queued snack bars, they begin their entrance animation immediately. ªá9ªù  ª•ªπª∫Ω5É#Ω—Äê/// Removes the current [SnackBar] by running its normal exit animation.
///
/// The closed completer is called after the animation is complete. ΩÁ7Ω˝  æææ¿ @\Å”¿ @ÎÄÖ/// Removes all the snackBars currently in queue by clearing the queue
/// and running normal exit animation on the current snackBar.   ¿ BMäk¿ G[Ñô/// Shows a [MaterialBanner] across all registered [Scaffold]s. Scaffolds register
/// to receive material banners from their closest [ScaffoldMessenger] ancestor.
/// If there are several registered scaffolds the material banner is shown
/// simultaneously on all of them.
///
/// A scaffold can show at most one material banner at a time. If this function is
/// called while another material banner is already visible, the given material banner
/// will be added to a queue and displayed after the earlier material banners have
/// closed.
///
/// To remove the [MaterialBanner] with an exit animation, use [hideCurrentMaterialBanner]
/// or call [ScaffoldFeatureController.close] on the returned
/// [ScaffoldFeatureController]. To remove a [MaterialBanner] suddenly (without an
/// animation), use [removeCurrentMaterialBanner].
///
/// See [ScaffoldMessenger.of] for information about how to obtain the
/// [ScaffoldMessengerState].
///
/// {@tool dartpad}
/// Here is an example of showing a [MaterialBanner] when the user presses a button.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger_state.show_material_banner.0.dart **
/// {@end-tool} ¿ Gn¿ G~   ¿ LºÇ)¿ L¡  ¿ L‰¿ Lı   ¿ NÈÇÕ¿ PÅ	/// Removes the current [MaterialBanner] (if any) immediately from registered
/// [Scaffold]s.
///
/// The removed material banner does not run its normal exit animation. If there are
/// any queued material banners, they begin their entrance animation immediately. ¿ P E¿ P<  ¿ PD¿ P^¿ P_¿ Q∫É&¿ R\Äñ/// Removes the current [MaterialBanner] by running its normal exit animation.
///
/// The closed completer is called after the animation is complete. ¿ RxC¿ Rî  ¿ Rú¿ R∂¿ R∑¿ T‰Ç%¿ UÉÄï/// Removes all the [MaterialBanner]s currently in queue by clearing the queue
/// and running normal exit animation on the current [MaterialBanner].   ¿ WÑK¿ W   ¿ W&¿ W4  ¿ W¿ W¿ [\Äí¿ [m   ¿ [\¿ [] ¿ [ÚÅ¢¿ [¯  ¿ \,ÄÆ ¿ \2¿ \I ¿ \P¿ \`  ¿ \j6¿ \ã  ¿ \¡¿ \©¿ \√¿ \ﬁ4¿ \˚   ¿ ]{¿ ](  ¿ ];¿ ]T  ¿ ]¿ ] ¿ ]ñíf¿ _VÅÆ/// The geometry of the [Scaffold] after all its contents have been laid out
/// except the [FloatingActionButton].
///
/// The [Scaffold] passes this pre-layout geometry to its
/// [FloatingActionButtonLocation], which produces an [Offset] that the
/// [Scaffold] uses to position the [FloatingActionButton].
///
/// For a description of the [Scaffold]'s geometry after it has
/// finished laying out, see the [ScaffoldGeometry]. ¿ _tÇ ¿ `¿ `,Äî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.
¿ `3¿ `B  ¿ `V¿ `e  ¿ `w¿ `Ü  ¿ `ï&¿ `§  ¿ `¡¿ `–  ¿ `ﬁ¿ `Ì  ¿ a ¿ a  ¿ a ¿ a/  ¿ a@ ¿ aO  ¿ af¿ au   
¿ aåÄ™¿ bÄÄ/// The [Size] of [Scaffold.floatingActionButton].
///
/// If [Scaffold.floatingActionButton] is null, this will be [Size.zero]. ¿ b;Ä∂¿ b‚Äì/// The [Size] of the [Scaffold]'s [BottomSheet].
///
/// If the [Scaffold] is not currently showing a [BottomSheet],
/// this will be [Size.zero]. ¿ bˆÇÄ¿ eiÇM/// The vertical distance from the Scaffold's origin to the bottom of
/// [Scaffold.body].
///
/// This is useful in a [FloatingActionButtonLocation] designed to
/// place the [FloatingActionButton] at the bottom of the screen, while
/// keeping it above the [BottomSheet], the [Scaffold.bottomNavigationBar],
/// or the keyboard.
///
/// The [Scaffold.body] is laid out with respect to [minInsets] already. This
/// means that a [FloatingActionButtonLocation] does not need to factor in
/// [EdgeInsets.bottom] of [minInsets] when aligning a [FloatingActionButton]
/// to [contentBottom]. ¿ e{Ç<¿ g≠Ç/// The vertical distance from the [Scaffold]'s origin to the top of
/// [Scaffold.body].
///
/// This is useful in a [FloatingActionButtonLocation] designed to
/// place the [FloatingActionButton] at the top of the screen, while
/// keeping it below the [Scaffold.appBar].
///
/// The [Scaffold.body] is laid out with respect to [minInsets] already. This
/// means that a [FloatingActionButtonLocation] does not need to factor in
/// [EdgeInsets.top] of [minInsets] when aligning a [FloatingActionButton] to
/// [contentTop]. ¿ gºÅÈ¿ iúÅ∫/// The minimum padding to inset the [FloatingActionButton] by for it
/// to remain visible.
///
/// This value is the result of calling [MediaQueryData.padding] in the
/// [Scaffold]'s [BuildContext],
/// and is useful for insetting the [FloatingActionButton] to avoid features like
/// the system status bar or the keyboard.
///
/// If [Scaffold.resizeToAvoidBottomInset] is set to false,
/// [EdgeInsets.bottom] of [minInsets] will be 0.0. ¿ i™ÅÁ¿ kÉÅ∑/// The minimum padding to inset interactive elements to be within a safe,
/// un-obscured space.
///
/// This value reflects the [MediaQueryData.viewPadding] of the [Scaffold]'s
/// [BuildContext] when [Scaffold.resizeToAvoidBottomInset] is false or and
/// the [MediaQueryData.viewInsets] > 0.0. This helps distinguish between
/// different types of obstructions on the screen, such as software keyboards
/// and physical device notches. ¿ kñÇ©¿ n3Çw/// The [Size] of the whole [Scaffold].
///
/// If the [Size] of the [Scaffold]'s contents is modified by values such as
/// [Scaffold.resizeToAvoidBottomInset] or the keyboard opening, then the
/// [scaffoldSize] will not reflect those changes.
///
/// This means that [FloatingActionButtonLocation]s designed to reposition
/// the [FloatingActionButton] based on events such as the keyboard popping
/// up should use [minInsets] to make sure that the [FloatingActionButton] is
/// inset by enough to remain visible.
///
/// See [minInsets] and [MediaQueryData.padding] for more information on the
/// appropriate insets to apply. ¿ nDÄù¿ n’/// The [Size] of the [Scaffold]'s [SnackBar].
///
/// If the [Scaffold] is not showing a [SnackBar], this will be [Size.zero]. ¿ nÊÄØ¿ oÉÄã/// The [Size] of the [Scaffold]'s [MaterialBanner].
///
/// If the [Scaffold] is not showing a [MaterialBanner], this will be [Size.zero]. ¿ oö_¿ oÏ;/// The [TextDirection] of the [Scaffold]'s [BuildContext].   ¿ _E¿ _F¿ o˛É›¿ q	Ä˘/// A snapshot of a transition between two [FloatingActionButtonLocation]s.
///
/// [ScaffoldState] uses this to seamlessly change transition animations
/// when a running [FloatingActionButtonLocation] transition is interrupted by a new transition. ¿ qRY ¿ qX¿ qv ¿ qw
¿ q}  ¿ qÉ¿ qâ  ¿ qç¿ qì  ¿ qú¿ q¢   ¿ qØ(¿ q“  ¿ q€&¿ q˛  ¿ r+¿ r(  ¿ r4¿ rA   ¿ rNÄÍ¿ ra  ¿ rk*¿ rÜ  ¿ rN¿ rO¿ s<Äù¿ sO   ¿ s<¿ s=¿ p¯¿ p˘¿ s›àµ¿ vòÇ©/// Geometry information for [Scaffold] components after layout is finished.
///
/// To get a [ValueNotifier] for the scaffold geometry of a given
/// [BuildContext], use [Scaffold.geometryOf].
///
/// The ScaffoldGeometry is only available during the paint phase, because
/// its value is computed during the animation and layout phases prior to painting.
///
/// For an example of using the [ScaffoldGeometry], see the [BottomAppBar],
/// which uses the [ScaffoldGeometry] to paint a notch around the
/// [FloatingActionButton].
///
/// For information about the [Scaffold]'s geometry that is used while laying
/// out the [FloatingActionButton], see [ScaffoldPrelayoutGeometry]. ¿ v≠Ä¶ ¿ v˜¿ wA/// Create an object that describes the geometry of a [Scaffold].¿ w¿ w  ¿ w/¿ w5   ¿ wWÄˆ¿ x7Ä…/// The distance from the [Scaffold]'s top edge to the top edge of the
/// rectangle in which the [Scaffold.bottomNavigationBar] bar is laid out.
///
/// Null if [Scaffold.bottomNavigationBar] is null. ¿ xRÄÆ¿ xËÄÉ/// The [Scaffold.floatingActionButton]'s bounding rectangle.
///
/// This is null when there is no floating action button showing.  ¿ yÅ◊¿ y  ¿ y1¿ y9   ¿ z‡Å∞¿ {_i/// Creates a copy of this [ScaffoldGeometry] but with the given fields replaced with
/// the new values. ¿ {n¿ {w  ¿ {í¿ {ô   ¿ vá¿ và¿ |îÖ¿ |ö  ¿ |¸7 ¿ |¸¿ } ¿ }¿ }  ¿ }%¿ }+   ¿ }7¿ }J  ¿ }U!¿ }]  ¿ }z¿ }ã  ¿ }òÇl¿ }π   ¿ }ò¿ }ô¿ ÄÅû¿ Ä  ¿ Ä¿ Ä(  ¿ ÄC¿ ÄJ  ¿ Äg!¿ Äp    ¿ É˜Ñ∂¿ É˝  ¿ Ñ,Å( ¿ Ñ2¿ ÑE ¿ ÑL¿ ÑS  ¿ Ñ`¿ Ñg  ¿ Ñu!¿ ÑÑ  ¿ Ñú¿ Ñ´  ¿ Ñº"¿ ÑÀ  ¿ ÑÁ¿ ÑÌ¿ Ö¿ Ö¿ ÑÓ¿ Ö¿ Ö¿ Ö¿ Ö(¿ Ö$¿ Ö¿ Ö'¿ Ö2¿ Ö8¿ ÖR¿ ÖN¿ Ö9¿ ÖQ¿ ÖX ¿ Öe  ¿ Ö|¿ Öâ  ¿ Öô!¿ Ö¶  ¿ à6u¿ àJ   ¿ à6¿ à7¿ Ü˝Å5¿ á  ¿ á¿ á"  ¿ Ü˝¿ Ü˛ ¿ äÑ⁄¿ ä  ¿ äEz ¿ äK¿ äW ¿ ä^¿ äm  ¿ ä|$¿ äã  ¿ ä¶¿ äµ   ¿ ä√¿ ä–  ¿ äÿ¿ ä„  ¿ äÒ!¿ ä¸   ¿ ãÉ◊¿ ã*  ¿ ã0¿ ã>  ¿ ã¿ ã ¿ éÚØ¿ é¯  ¿ è-Ç` ¿ è-¿ è< ¿ èC¿ èR  ¿ è`¿ èo  ¿ èÇ¿ èë  ¿ è£¿ è≤  ¿ èÈ2¿ è¯  ¿ ê!1¿ ê0  ¿ êX7¿ êg  ¿ êï0¿ ê§  ¿ êÀ ¿ ê⁄  ¿ êÒ¿ ë   ¿ ë¿ ë!  ¿ ë0$¿ ë?  ¿ ëZ,¿ ëi   ¿ ëë¿ ëú  ¿ ë™!¿ ëµ  ¿ ëœ¿ ë‡  ¿ ëÌ¿ ë˛  ¿ í!¿ í$  ¿ í50¿ íU  ¿ íjG¿ íç  ¿ íµF¿ íÿ  ¿ íˇ6¿ ì  ¿ ì9E¿ ì\  ¿ ìÉ¿ ìé  ¿ ì§¿ ì≤  ¿ ìƒ)¿ ìœ   ¿ ìÚß~¿ î  ¿ î	¿ î  ¿ ìÚ¿ ìÛ¿ ªtÇ}¿ ªÖ  ¿ ªî¿ ª•  ¿ ªt¿ ªu ¿ ΩıÑ:¿ øíÅñ/// Handler for scale and rotation animations in the [FloatingActionButton].
///
/// Currently, there are two types of [FloatingActionButton] animations:
///
/// * Entrance/Exit animations, which this widget triggers
///   when the [FloatingActionButton] is added, updated, or removed.
/// * Motion animations, which are triggered by the [Scaffold]
///   when its [FloatingActionButtonLocation] is updated. ¿ øÕÄÿ ¿ ø”¿ øÚ ¿ ø˘¿ ¿  ¿ ¿¿ ¿!  ¿ ¿6¿ ¿E  ¿ ¿[¿ ¿j  ¿ ¿¿ ¿é   ¿ ¿©¿ ¿∑  ¿ ¿¿(¿ ¿ÿ  ¿ ¿Ï4¿ ¡  ¿ ¡$0¿ ¡D  ¿ ¡Yf¿ ¡Æ8/// Controls the current child widget.child as it exits.  ¿ ¡ƒi¿ ¡ı   ¿ ¡ƒ¿ ¡≈ ¿ ¬1ö8¿ ¬7   ¿ √<,¿ √U  ¿ √l.¿ √É  ¿ √û1¿ √µ  ¿ ƒL-¿ ƒc  ¿ ƒ}5¿ ƒî  ¿ ƒ∂0¿ ƒÕ  ¿ ƒÍ¿ ƒÚ  ¿ ÕßÄ±¿ Õ« ¿ Õ‹¿ Õ·¿ ÕË¿ Õ‚¿ ÕÈ¿ Œ/¿ ÕÙ¿ ÕÔ¿ Õ˙¿ Õˆ¿ Õ¸¿ Œ&¿ Œ#¿ Œ(¿ Œ0¿ Œ1¿ Œ6¿ ŒW¿ Œ7¿ ŒA¿ ŒV¿ ŒG¿ ŒB¿ ŒI¿ ŒO¿ ŒP 	¿ ≈Çä¿ ≈   ¿ ≈¿ ≈¿ «ìX¿ «§   ¿ «ì¿ «î¿ «ÔÖ¥¿ »   ¿ »)¿ »1  ¿ «Ô¿ «¿ Œ]Ü®¿ Œb    ¿ ’	Å-¿ ’  ¿ ’4¿ ’E   ¿ ÷:ÄÇ¿ ÷?  ¿ ÷_¿ ÷h   ¿ ÷¿Ñö¿ ÷”  ¿ ÷Ÿ¿ ÷Á  ¿ ÷¿¿ ÷¡¿ €^ÄÄ¿ €c    ¿ €‚ÄÖ¿ €Á  ¿ €¸¿ ‹    ¿ ‹k¿ gM¿ ˆœö]/// Implements the basic Material Design visual layout structure.
///
/// This class provides APIs for showing drawers and bottom sheets.
///
/// To display a persistent bottom sheet, obtain the
/// [ScaffoldState] for the current [BuildContext] via [Scaffold.of] and use the
/// [ScaffoldState.showBottomSheet] function.
///
/// {@tool dartpad}
/// This example shows a [Scaffold] with a [body] and [FloatingActionButton].
/// The [body] is a [Text] placed in a [Center] in order to center the text
/// within the [Scaffold]. The [FloatingActionButton] is connected to a
/// callback that increments a counter.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.0.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This example shows a [Scaffold] with a blueGrey [backgroundColor], [body]
/// and [FloatingActionButton]. The [body] is a [Text] placed in a [Center] in
/// order to center the text within the [Scaffold]. The [FloatingActionButton]
/// is connected to a callback that increments a counter.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/material/scaffold_background_color.png)
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.1.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This example shows a [Scaffold] with an [AppBar], a [BottomAppBar] and a
/// [FloatingActionButton]. The [body] is a [Text] placed in a [Center] in order
/// to center the text within the [Scaffold]. The [FloatingActionButton] is
/// centered and docked within the [BottomAppBar] using
/// [FloatingActionButtonLocation.centerDocked]. The [FloatingActionButton] is
/// connected to a callback that increments a counter.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/material/scaffold_bottom_app_bar.png)
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.2.dart **
/// {@end-tool}
///
/// ## Scaffold layout, the keyboard, and display "notches"
///
/// The scaffold will expand to fill the available space. That usually
/// means that it will occupy its entire window or device screen. When
/// the device's keyboard appears the Scaffold's ancestor [MediaQuery]
/// widget's [MediaQueryData.viewInsets] changes and the Scaffold will
/// be rebuilt. By default the scaffold's [body] is resized to make
/// room for the keyboard. To prevent the resize set
/// [resizeToAvoidBottomInset] to false. In either case the focused
/// widget will be scrolled into view if it's within a scrollable
/// container.
///
/// The [MediaQueryData.padding] value defines areas that might
/// not be completely visible, like the display "notch" on the iPhone
/// X. The scaffold's [body] is not inset by this padding value
/// although an [appBar] or [bottomNavigationBar] will typically
/// cause the body to avoid the padding. The [SafeArea]
/// widget can be used within the scaffold's body to avoid areas
/// like display notches.
///
/// ## Floating action button with a draggable scrollable bottom sheet
///
/// If [Scaffold.bottomSheet] is a [DraggableScrollableSheet],
/// [Scaffold.floatingActionButton] is set, and the bottom sheet is dragged to
/// cover greater than 70% of the Scaffold's height, two things happen in parallel:
///
///   * Scaffold starts to show scrim (see [ScaffoldState.showBodyScrim]), and
///   * [Scaffold.floatingActionButton] is scaled down through an animation with a [Curves.easeIn], and
///     disappears when the bottom sheet covers the entire Scaffold.
///
/// And as soon as the bottom sheet is dragged down to cover less than 70% of the [Scaffold], the scrim
/// disappears and [Scaffold.floatingActionButton] animates back to its normal size.
///
/// ## Troubleshooting
///
/// ### Nested Scaffolds
///
/// The Scaffold is designed to be a top level container for
/// a [MaterialApp]. This means that adding a Scaffold
/// to each route on a Material app will provide the app with
/// Material's basic visual layout structure.
///
/// It is typically not necessary to nest Scaffolds. For example, in a
/// tabbed UI, where the [bottomNavigationBar] is a [TabBar]
/// and the body is a [TabBarView], you might be tempted to make each tab bar
/// view a scaffold with a differently titled AppBar. Rather, it would be
/// better to add a listener to the [TabController] that updates the
/// AppBar
///
/// {@tool snippet}
/// Add a listener to the app's tab controller so that the [AppBar] title of the
/// app's one and only scaffold is reset each time a new tab is selected.
///
/// ```dart
/// TabController(vsync: tickerProvider, length: tabCount)..addListener(() {
///   if (!tabController.indexIsChanging) {
///     setState(() {
///       // Rebuild the enclosing scaffold with a new AppBar title
///       appBarTitle = 'Tab ${tabController.index}';
///     });
///   }
/// })
/// ```
/// {@end-tool}
///
/// Although there are some use cases, like a presentation app that
/// shows embedded flutter content, where nested scaffolds are
/// appropriate, it's best to avoid nesting scaffolds.
///
/// See also:
///
///  * [AppBar], which is a horizontal bar typically shown at the top of an app
///    using the [appBar] property.
///  * [BottomAppBar], which is a horizontal bar typically shown at the bottom
///    of an app using the [bottomNavigationBar] property.
///  * [FloatingActionButton], which is a circular button typically shown in the
///    bottom right corner of the app using the [floatingActionButton] property.
///  * [Drawer], which is a vertical panel that is typically displayed to the
///    left of the body (and often hidden on phones) using the [drawer]
///    property.
///  * [BottomNavigationBar], which is a horizontal array of buttons typically
///    shown along the bottom of the app using the [bottomNavigationBar]
///    property.
///  * [BottomSheet], which is an overlay typically shown near the bottom of the
///    app. A bottom sheet can either be persistent, in which case it is shown
///    using the [ScaffoldState.showBottomSheet] method, or modal, in which case
///    it is shown using the [showModalBottomSheet] function.
///  * [SnackBar], which is a lightweight message with an optional action which
///    briefly displays at the bottom of the screen. Use the
///    [ScaffoldMessengerState.showSnackBar] method to show snack bars.
///  * [MaterialBanner], which displays an important, succinct message, at the
///    top of the screen, below the app bar. Use the
///    [ScaffoldMessengerState.showMaterialBanner] method to show material banners.
///  * [ScaffoldState], which is the state associated with this widget.
///  * <https://material.io/design/layout/responsive-layout-grid.html>
///  * Cookbook: [Add a Drawer to a screen](https://flutter.dev/docs/cookbook/design/drawer) ¿ ˆÛÉl ¿ ˜6¿ ˜>:/// Creates a visual scaffold for Material Design widgets.¿ ˜E	¿ ˜L  ¿ ˜T¿ ˜Z  ¿ ˜e	¿ ˜k  ¿ ˜t¿ ˜z  ¿ ˜ì!¿ ˜ô  ¿ ˜∫!¿ ˜¿  ¿ ˜·¿ ˜Á  ¿ ¯?¿ ¯	  ¿ ¯H¿ ¯N  ¿ ¯Y¿ ¯_  ¿ ¯s¿ ¯y  ¿ ¯á¿ ¯ç  ¿ ¯§¿ ¯™  ¿ ¯¬¿ ¯»  ¿ ¯ÿ¿ ¯ﬁ  ¿ ¯Ú¿ ¯¯  ¿ ˘¿ ˘  ¿ ˘.6¿ ˘4  ¿ ˘j¿ ˘p  ¿ ˘á#¿ ˘ç  ¿ ˘∞¿ ˘∂  ¿ ˘À¿ ˘—  ¿ ˘È'¿ ˘Ô  ¿ ˙*¿ ˙  ¿ ˙F¿ ˙L  ¿ ¯$¿ ¯8¿ ¯9¿ ˘$¿ ˘M¿ ˘^¿ ˘_¿ ˘|¿ ˘•¿ ˙¿ ˙<¿ ˙cÉÆ¿ ˛Ét/// If true, and [bottomNavigationBar] or [persistentFooterButtons]
/// is specified, then the [body] extends to the bottom of the Scaffold,
/// instead of only extending to the top of the [bottomNavigationBar]
/// or the [persistentFooterButtons].
///
/// If true, a [MediaQuery] widget whose bottom padding matches the height
/// of the [bottomNavigationBar] will be added above the scaffold's [body].
///
/// This property is often useful when the [bottomNavigationBar] has
/// a non-rectangular shape, like [CircularNotchedRectangle], which
/// adds a [FloatingActionButton] sized notch to the top edge of the bar.
/// In this case specifying `extendBody: true` ensures that scaffold's
/// body will be visible through the bottom navigation bar's notch.
///
/// See also:
///
///  * [extendBodyBehindAppBar], which extends the height of the body
///    to the top of the scaffold. ¿ ˛Ç¿ Å÷/// If true, and an [appBar] is specified, then the height of the [body] is
/// extended to include the height of the app bar and the top of the body
/// is aligned with the top of the app bar.
///
/// This is useful if the app bar's [AppBar.backgroundColor] is not
/// completely opaque.
///
/// This property is false by default. It must not be null.
///
/// See also:
///
///  * [extendBody], which extends the height of the body to the bottom
///    of the scaffold. ¿ -Y¿ Ä5/// An app bar to display at the top of the scaffold. ¿ ãÑ¿•ÉÁ/// The primary content of the scaffold.
///
/// Displayed below the [appBar], above the bottom of the ambient
/// [MediaQuery]'s [MediaQueryData.viewInsets], and behind the
/// [floatingActionButton] and [drawer]. If [resizeToAvoidBottomInset] is
/// false then the body is not resized when the onscreen keyboard appears,
/// i.e. it is not inset by `viewInsets.bottom`.
///
/// The widget in the body of the scaffold is positioned at the top-left of
/// the available space between the app bar and the bottom of the scaffold. To
/// center this widget instead, consider putting it in a [Center] widget and
/// having that be the body. To expand this widget instead, consider
/// putting it in a [SizedBox.expand].
///
/// If you have a column of widgets that should normally fit on the screen,
/// but may overflow and would in such cases need to scroll, consider using a
/// [ListView] as the body of the scaffold. This is also a good choice for
/// the case where your body is a scrollable list. ¿ÆÄû¿8u/// A button displayed floating above [body], in the bottom right corner.
///
/// Typically a [FloatingActionButton]. ¿QÄˇ¿4Ä∏/// Responsible for determining where the [floatingActionButton] should go.
///
/// If null, the [ScaffoldState] will use the default location, [FloatingActionButtonLocation.endFloat]. ¿UÅ¿DÄƒ/// Animator to move the [floatingActionButton] to a new [floatingActionButtonLocation].
///
/// If null, the [ScaffoldState] will use the default animator, [FloatingActionButtonAnimator.scaling]. ¿eÅæ¿	ÅÄ/// A set of buttons that are displayed at the bottom of the scaffold.
///
/// Typically this is a list of [TextButton] widgets. These buttons are
/// persistently visible, even if the [body] of the scaffold scrolls.
///
/// These widgets will be wrapped in an [OverflowBar].
///
/// The [persistentFooterButtons] are rendered above the
/// [bottomNavigationBar] but below the [body]. ¿	(ÄΩ¿	ÃÄÇ/// The alignment of the [persistentFooterButtons] inside the [OverflowBar].
///
/// Defaults to [AlignmentDirectional.centerEnd]. ¿	ÍÉ'¿ÇÏ/// A panel displayed to the side of the [body], often hidden on mobile
/// devices. Swipes in from either left-to-right ([TextDirection.ltr]) or
/// right-to-left ([TextDirection.rtl])
///
/// Typically a [Drawer].
///
/// To open the drawer, use the [ScaffoldState.openDrawer] function.
///
/// To close the drawer, use either [ScaffoldState.closeDrawer], [Navigator.pop]
/// or press the escape key on the keyboard.
///
/// {@tool dartpad}
/// To disable the drawer edge swipe on mobile, set the
/// [Scaffold.drawerEnableOpenDragGesture] to false. Then, use
/// [ScaffoldState.openDrawer] to open the drawer and [Navigator.pop] to close
/// it.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.drawer.0.dart **
/// {@end-tool} ¿|¿ÉT/// Optional callback that is called when the [Scaffold.drawer] is opened or closed. ¿óÉ)¿∑ÇÎ/// A panel displayed to the side of the [body], often hidden on mobile
/// devices. Swipes in from right-to-left ([TextDirection.ltr]) or
/// left-to-right ([TextDirection.rtl])
///
/// Typically a [Drawer].
///
/// To open the drawer, use the [ScaffoldState.openEndDrawer] function.
///
/// To close the drawer, use either [ScaffoldState.closeEndDrawer], [Navigator.pop]
/// or press the escape key on the keyboard.
///
/// {@tool dartpad}
/// To disable the drawer edge swipe, set the
/// [Scaffold.endDrawerEnableOpenDragGesture] to false. Then, use
/// [ScaffoldState.openEndDrawer] to open the drawer and [Navigator.pop] to
/// close it.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.end_drawer.0.dart **
/// {@end-tool} ¿≈ÄÇ¿5W/// Optional callback that is called when the [Scaffold.endDrawer] is opened or closed. ¿LÅ¿>Ä‹/// The color to use for the scrim that obscures primary content while a drawer is open.
///
/// If this is null, then [DrawerThemeData.scrimColor] is used. If that
/// is also null, then it defaults to [Colors.black54]. ¿SÄ±¿ıÄé/// The color of the [Material] widget that underlies the entire Scaffold.
///
/// The theme's [ThemeData.scaffoldBackgroundColor] by default. ¿	ÅJ¿@Å/// A bottom navigation bar to display at the bottom of the scaffold.
///
/// Snack bars slide from underneath the bottom navigation bar while bottom
/// sheets are stacked on top.
///
/// The [bottomNavigationBar] is rendered below the [persistentFooterButtons]
/// and the [body]. ¿XÜ2¿Ö⁄/// The persistent bottom sheet to display.
///
/// A persistent bottom sheet shows information that supplements the primary
/// content of the app. A persistent bottom sheet remains visible even when
/// the user interacts with other parts of the app.
///
/// A closely related widget is a modal bottom sheet, which is an alternative
/// to a menu or a dialog and prevents the user from interacting with the rest
/// of the app. Modal bottom sheets can be created and displayed with the
/// [showModalBottomSheet] function.
///
/// Unlike the persistent bottom sheet displayed by [showBottomSheet]
/// this bottom sheet is not a [LocalHistoryEntry] and cannot be dismissed
/// with the scaffold appbar's back button.
///
/// If a persistent bottom sheet created with [showBottomSheet] is already
/// visible, it must be closed before building the Scaffold with a new
/// [bottomSheet].
///
/// The value of [bottomSheet] can be any widget at all. It's unlikely to
/// actually be a [BottomSheet], which is used by the implementations of
/// [showBottomSheet] and [showModalBottomSheet]. Typically it's a widget
/// that includes [Material].
///
/// See also:
///
///  * [showBottomSheet], which displays a bottom sheet as a route that can
///    be dismissed with the scaffold's back button.
///  * [showModalBottomSheet], which displays a modal bottom sheet.
///  * [BottomSheetThemeData], which can be used to customize the default
///    bottom sheet property values when using a [BottomSheet]. ¿èÇ¿àÅ⁄/// If true the [body] and the scaffold's floating widgets should size
/// themselves to avoid the onscreen keyboard whose height is defined by the
/// ambient [MediaQuery]'s [MediaQueryData.viewInsets] `bottom` property.
///
/// For example, if there is an onscreen keyboard displayed above the
/// scaffold, the body can be resized to avoid overlapping the keyboard, which
/// prevents widgets inside the body from being obscured by the keyboard.
///
/// Defaults to true. ¿•Åb¿ ÅA/// Whether this scaffold is being displayed at the top of the screen.
///
/// If true then the height of the [appBar] will be extended by the height
/// of the screen's status bar, i.e. the top padding for [MediaQuery].
///
/// The default value of this property, like the default value of
/// [AppBar.primary], is true. ¿r¿g@/// {@macro flutter.material.DrawerController.dragStartBehavior} ¿ÉÇ¿ tÅ–/// The width of the area within which a horizontal swipe will open the
/// drawer.
///
/// By default, the value used is 20.0 added to the padding edge of
/// `MediaQuery.paddingOf(context)` that corresponds to the surrounding
/// [TextDirection]. This ensures that the drag area for notched devices is
/// not obscured. For example, if `TextDirection.of(context)` is set to
/// [TextDirection.ltr], 20.0 will be added to
/// `MediaQuery.paddingOf(context).left`. ¿ åÅ¿!rÄŒ/// Determines if the [Scaffold.drawer] can be opened with a drag
/// gesture on mobile.
///
/// On desktop platforms, the drawer is not draggable.
///
/// By default, the drag gesture is enabled on mobile. ¿!íÅ¿"vÄÃ/// Determines if the [Scaffold.endDrawer] can be opened with a
/// gesture on mobile.
///
/// On desktop platforms, the drawer is not draggable.
///
/// By default, the drag gesture is enabled on mobile. ¿"ôÇ¿$êÅ–/// Restoration ID to save and restore the state of the [Scaffold].
///
/// If it is non-null, the scaffold will persist and restore whether the
/// [drawer] and [endDrawer] was open or closed.
///
/// The state of this widget is persisted in a [RestorationBucket] claimed
/// from the surrounding [RestorationScope] using the provided restoration ID.
///
/// See also:
///
///  * [RestorationManager], which explains how state restoration works in
///    Flutter.  ¿$¢ç˙¿,á/// Finds the [ScaffoldState] from the closest instance of this class that
/// encloses the given context.
///
/// If no instance of this class encloses the given context, will cause an
/// assert in debug mode, and throw an exception in release mode.
///
/// This method can be expensive (it walks the element tree).
///
/// {@tool dartpad}
/// Typical usage of the [Scaffold.of] function is to call it from within the
/// `build` method of a child of a [Scaffold].
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.of.0.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// When the [Scaffold] is actually created in the same `build` function, the
/// `context` argument to the `build` function can't be used to find the
/// [Scaffold] (since it's "above" the widget being returned in the widget
/// tree). In such cases, the following technique with a [Builder] can be used
/// to provide a new scope with a [BuildContext] that is "under" the
/// [Scaffold]:
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.of.1.dart **
/// {@end-tool}
///
/// A more efficient solution is to split your build function into several
/// widgets. This introduces a new context from which you can obtain the
/// [Scaffold]. In this solution, you would have an outer widget that creates
/// the [Scaffold] populated by instances of your new inner widgets, and then
/// in these inner widgets you would use [Scaffold.of].
///
/// A less elegant but more expedient solution is assign a [GlobalKey] to the
/// [Scaffold], then use the `key.currentState` property to obtain the
/// [ScaffoldState] rather than using the [Scaffold.of] function.
///
/// If there is no [Scaffold] in scope, then this will throw an exception.
/// To return null if there is no [Scaffold], use [maybeOf] instead. ¿,¿,    ¿2†Çí¿4“Ç/// Finds the [ScaffoldState] from the closest instance of this class that
/// encloses the given context.
///
/// If no instance of this class encloses the given context, will return null.
/// To throw an exception instead, use [of] instead of this function.
///
/// This method can be expensive (it walks the element tree).
///
/// See also:
///
///  * [of], a similar function to this one that throws if no instance
///    encloses the given context. Also includes some sample code in its
///    documentation. ¿4⁄¿4Ë   ¿56â¸¿9ÄÉ¯/// Returns a [ValueListenable] for the [ScaffoldGeometry] for the closest
/// [Scaffold] ancestor of the given context.
///
/// The [ValueListenable.value] is only available at paint time.
///
/// Notifications are guaranteed to be sent before the first paint pass
/// with the new geometry, but there is no guarantee whether a build or
/// layout passes are going to happen between the notification and the next
/// paint pass.
///
/// The closest [Scaffold] ancestor for the context might change, e.g when
/// an element is moved from one scaffold to another. For [StatefulWidget]s
/// using this listenable, a change of the [Scaffold] ancestor will
/// trigger a [State.didChangeDependencies].
///
/// A typical pattern for listening to the scaffold geometry would be to
/// call [Scaffold.geometryOf] in [State.didChangeDependencies], compare the
/// return value with the previous listenable, if it has changed, unregister
/// the listener, and register a listener to the new [ScaffoldGeometry]
/// listenable. ¿9ã¿9ô   ¿?6ÑA¿AÍÇâ/// Whether the Scaffold that most tightly encloses the given context has a
/// drawer.
///
/// If this is being used during a build (for example to decide whether to
/// show an "open drawer" button), set the `registerForUpdates` argument to
/// true. This will then set up an [InheritedWidget] relationship with the
/// [Scaffold] so that the client widget gets rebuilt whenever the [hasDrawer]
/// value changes.
///
/// This method can be expensive (it walks the element tree).
///
/// See also:
///
///  * [Scaffold.of], which provides access to the [ScaffoldState] object as a
///    whole, from which you can show bottom sheets, and so forth. ¿AÙ¿B  ¿B¿B  ¿B&¿C{;¿Cï   ¿C{¿C| ¿C∫¿ éK¿DTÄì/// State for a [Scaffold].
///
/// Can display [BottomSheet]s. Retrieve a [ScaffoldState] from the current
/// [BuildContext] using [Scaffold.of].  ¿E÷V¿E˝ ¿F
¿F¿F)¿F¿F*¿F+¿F0Y¿FW ¿Fg¿Fp¿FÜ¿Fq¿Fá¿Fà¿Fé&¿Fû ¿F©¿F≤¿F≥¿H°¿H©  ¿Ip:¿IÖ ¿Iï¿I£¿I©¿I§¿IÆ=¿I√ ¿I÷¿I‰¿IÍ¿IÂ¿SØ*¿S«  ¿SM¿T+  ¿V°_¿VË  ¿YƒR¿YÂ ¿Z¿Z¿Y˛¿Z¿Yˇ¿Z=¿ZD  ¿Z[4¿Zk ¿ZÑ¿Zç¿Zé¿Zì/¿Z¶  ¿ÜA<¿ÜZ  ¿ÜÅ?¿Ü£  ¿ÜƒC¿Ü‚  ¿á;¿á)  ¿áKB¿ád  ¿ë‡0¿ëˇ  ¿´e¿´j ¿´{¿´Ñ$¿´ä ¿´ú¿´¢¿´£¿DÆ>¿D∆   ¿DÆ¿DØ¿Fπj¿G ;/// Whether this scaffold has a non-null [Scaffold.appBar].   ¿G&j¿Gm;/// Whether this scaffold has a non-null [Scaffold.drawer].   ¿Gìs¿G›>/// Whether this scaffold has a non-null [Scaffold.endDrawer].   ¿H	Äî¿H^I/// Whether this scaffold has a non-null [Scaffold.floatingActionButton].   ¿HΩÄ∞¿IIy/// The max height the [Scaffold.appBar] uses.
///
/// This is based on the appBar preferred height plus the top padding.   ¿IÄŸ¿J•Äü/// Whether the [Scaffold.drawer] is opened.
///
/// See also:
///
///  * [ScaffoldState.openDrawer], which opens the [Scaffold.drawer] of a
///    [Scaffold].   ¿JÕÄË¿KãÄ®/// Whether the [Scaffold.endDrawer] is opened.
///
/// See also:
///
///  * [ScaffoldState.openEndDrawer], which opens the [Scaffold.endDrawer] of
///    a [Scaffold].   ¿áíÄÀ¿àc/// Gets the current value of the visibility animation for the
/// [Scaffold.floatingActionButton].   ¿àaÅè¿àÍÄÄ/// Sets the current value of the visibility animation for the
/// [Scaffold.floatingActionButton]. This value must not be null. ¿â¿â   ¿í\¿í    ¿DÄ—¿E  ¿E¿E"  ¿E,¿E2  ¿D¿DÒ¿KπÄ˜¿Kæ  ¿K‘¿K⁄   ¿L¥Å¿Lπ  ¿L“¿Lÿ   ¿MæÇœ¿O›Åˇ/// Opens the [Drawer] (if any).
///
/// If the scaffold has a non-null [Scaffold.drawer], this function will cause
/// the drawer to begin its entrance animation.
///
/// Normally this is not needed since the [Scaffold] automatically shows an
/// appropriate [IconButton], and handles the edge-swipe gesture, to show the
/// drawer.
///
/// To close the drawer, use either [ScaffoldState.closeEndDrawer] or
/// [Navigator.pop].
///
/// See [Scaffold.of] for information about how to obtain the [ScaffoldState].   ¿PëÇ·¿R≈Ç/// Opens the end side [Drawer] (if any).
///
/// If the scaffold has a non-null [Scaffold.endDrawer], this function will cause
/// the end side drawer to begin its entrance animation.
///
/// Normally this is not needed since the [Scaffold] automatically shows an
/// appropriate [IconButton], and handles the edge-swipe gesture, to show the
/// drawer.
///
/// To close the drawer, use either [ScaffoldState.closeEndDrawer] or
/// [Navigator.pop].
///
/// See [Scaffold.of] for information about how to obtain the [ScaffoldState].   ¿TèÅf¿Tî    ¿WXÅ¢¿W]    ¿Z«âë¿ZÃ    ¿d\Åg¿da    ¿e«Ä˘¿f]Ää/// Closes [Scaffold.drawer] if it is currently opened.
///
/// See [Scaffold.of] for information about how to obtain the [ScaffoldState].   ¿fƒÅ¿g]Äç/// Closes [Scaffold.endDrawer] if it is currently opened.
///
/// See [Scaffold.of] for information about how to obtain the [ScaffoldState].   ¿g”c¿gÿ    ¿h:é ¿h] ¿ho¿ho
¿hw¿hÜ  ¿hî¿h£  ¿h¥0¿h“  ¿hÍ¿hÚ  ¿i¿i  ¿i¿i+  ¿i5¿i<  ¿iM¿i^  ¿in¿iu  ¿iÑ,¿iä  ¿i¨¿wè¿Ä«â;/// Shows a Material Design bottom sheet in the nearest [Scaffold]. To show
/// a persistent bottom sheet, use the [Scaffold.bottomSheet].
///
/// Returns a controller that can be used to close and otherwise manipulate the
/// bottom sheet.
///
/// To rebuild the bottom sheet (e.g. if it is stateful), call
/// [PersistentBottomSheetController.setState] on the controller returned by
/// this method.
///
/// The new bottom sheet becomes a [LocalHistoryEntry] for the enclosing
/// [ModalRoute] and a back button is added to the app bar of the [Scaffold]
/// that closes the bottom sheet.
///
/// The [transitionAnimationController] controls the bottom sheet's entrance and
/// exit animations. It's up to the owner of the controller to call
/// [AnimationController.dispose] when the controller is no longer needed.
///
/// To create a persistent bottom sheet that is not a [LocalHistoryEntry] and
/// does not add a back button to the enclosing Scaffold's app bar, use the
/// [Scaffold.bottomSheet] constructor parameter.
///
/// A persistent bottom sheet shows information that supplements the primary
/// content of the app. A persistent bottom sheet remains visible even when
/// the user interacts with other parts of the app.
///
/// A closely related widget is a modal bottom sheet, which is an alternative
/// to a menu or a dialog and prevents the user from interacting with the rest
/// of the app. Modal bottom sheets can be created and displayed with the
/// [showModalBottomSheet] function.
///
/// {@tool dartpad}
/// This example demonstrates how to use [showBottomSheet] to display a
/// bottom sheet when a user taps a button. It also demonstrates how to
/// close a bottom sheet using the Navigator.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_state.show_bottom_sheet.0.dart **
/// {@end-tool}
/// See also:
///
///  * [BottomSheet], which becomes the parent of the widget returned by the
///    `builder`.
///  * [showBottomSheet], which calls this method given a [BuildContext].
///  * [showModalBottomSheet], which can be used to display a modal bottom
///    sheet.
///  * [Scaffold.of], for information about how to obtain the [ScaffoldState].
///  * The Material 2 spec at <https://m2.material.io/components/sheets-bottom>.
///  * The Material 3 spec at <https://m3.material.io/components/bottom-sheets/overview>.¿Ä◊¿Ä◊¿Äﬂ¿ÄÓ  ¿Ä¸¿Å  ¿Å¿Å!  ¿Å/¿Å=  ¿ÅG¿ÅN  ¿Å_¿Åp  ¿ÅÄ¿Åá  ¿Åñ2¿Å¨   ¿âÙÄü¿ä2./// Shows the [Scaffold.floatingActionButton].   ¿äÈÑx¿äÓ  ¿ã.¿ã,   ¿ê]Åo¿êb    ¿íuÇÂ¿íÜ   ¿íu¿ív¿ï^ÜR¿ïo  ¿ï¿ïâ  ¿ï^¿ï_¿õ¥É¿õ≈   ¿õ¥¿õµ¿û√Å*¿û‘   ¿û√¿ûƒ¿üÒÉÁ¿üˆ  	¿†	¿†  ¿†&¿†/  ¿†9¿†A  ¿†O¿†^  ¿†t¿†É  ¿†ò ¿†ß  ¿†æ!¿†Õ  ¿†Â¿†Î  ¿°	&¿°  ¿†˛¿°*¿£‹ÉÕ¿£·  ¿£Ò¿§  ¿§
¿§   ¿ß≠É¥¿ß≤  ¿ßø¿ßœ  ¿ßÿ¿ßÁ   ¿´≠Å~¿¨,s/// Whether to show a [ModalBarrier] over the body of the scaffold.
///
/// The `value` parameter must not be null. ¿¨:
¿¨@  ¿¨F¿¨N   ¿≠/§‘¿≠B  ¿≠H¿≠V  ¿≠/¿≠0 ¿“Åì¿“  ¿“<# ¿“<¿“P ¿“Q¿“W   ¿“c¿“v   ¿“ÇÄå¿“ì  ¿“ù¿“¨  ¿“Ç¿“É¿”ÄÜ¿”#  ¿”*¿”9  ¿”¿” ¿”úÇ‡¿‘KÄ®/// An interface for controlling a feature of a [Scaffold].
///
/// Commonly obtained from [ScaffoldMessengerState.showSnackBar] or
/// [ScaffoldState.showBottomSheet].¿‘e¿‘e¿‘w¿‘w¿‘~\¿‘ù¿‘û¿‘ü ¿‘†¿‘¶  ¿‘Æ¿‘¥  ¿‘ø
¿‘≈  ¿‘À¿‘—   ¿‘›¿‘Â  ¿‘¿’  ¿’ëx¿÷]/// Remove the feature (e.g., bottom sheet, snack bar, or material banner) from the scaffold. ¿÷k¿÷qM/// Mark the feature (e.g., bottom sheet or snack bar) as needing to rebuild. ¿’{¿’qN/// Completes when the feature controlled by this object is no longer visible.     ¿◊áR¿⁄´Éä/// A curve that progresses linearly until a specified [startingPoint], at which
/// point [curve] will begin. Unlike [Interval], [curve] will not start at zero,
/// but will use [startingPoint] as the Y position.
///
/// For example, if [startingPoint] is set to `0.5`, and [curve] is set to
/// [Curves.easeOut], then the bottom-left quarter of the curve will be a
/// straight line, and the top-right quarter will contain the entire contents of
/// [Curves.easeOut].
///
/// This is useful in situations where a widget must track the user's finger
/// (which requires a linear animation), and afterwards can be flung using a
/// curve specified with the [curve] argument, after the finger is released. In
/// such a case, the value of [startingPoint] would be the progress of the
/// animation at the time when the finger was released.
///
/// The [startingPoint] and [curve] arguments must not be null. ¿⁄ÍÄí ¿€¿€+/// Creates a suspended curve.¿€3¿€9  ¿€Q ¿€W  ¿€^¿€d¿€e¿€ÄÄÜ¿€˘e/// The progress value at which [curve] should begin.
///
/// This defaults to [Curves.easeOutCubic]. ¿‹I¿‹O5/// The curve to use when [startingPoint] is reached.  ¿‹YÅ™¿‹l  ¿‹v¿‹~  ¿‹Y¿‹Z¿ﬁc¿ﬁ   ¿ﬁ¿ﬁ ¿ﬁnÉª¿ﬁt  ¿ﬁ§Åi ¿ﬁ™¿ﬁæ ¿ﬁ≈	¿ﬁÃ  ¿ﬁ‘!¿ﬁ„  ¿ﬁ˚¿ﬂ  ¿ﬂ¿ﬂ&  ¿ﬂ4¿ﬂC  ¿ﬂS¿ﬂb  ¿ﬂn¿ﬂt  ¿ﬂç¿ﬂì  ¿ﬂß¿ﬂ≠  ¿ﬂª
¿ﬂ¡  ¿ﬂÀ¿ﬂ—  ¿ﬂ‚¿ﬂË  ¿ﬂ¯¿ﬂ˛  ¿ﬂ¿ﬂÇ¿‡-¿‡+  ¿‡É¿‡é  ¿‡ú¿‡∞  ¿‡Ω¿‡—  ¿‡‡¿‡Ù  ¿·¿·  ¿· ¿·+  ¿·;¿·H  ¿·[¿·i  ¿·v¿·â  ¿·í¿·û  ¿·Æ!¿·ƒ   ¿·‘S¿·˙   ¿·‘¿·’ ¿‚+çù¿‚1   ¿‚sB¿‚ã ¿‚ú 	¿‚∫Å!¿‚À   ¿‚∫¿‚ª¿„ﬂS¿„   ¿„ﬂ¿„‡¿‰6Äµ¿‰G  ¿‰W¿‰m  ¿‰6¿‰7¿‰ÔZ¿‰Ù    ¿ÂMÄû¿ÂR  ¿Âc¿Âu   ¿ÂÔÅ¿ÂÙ  ¿Ê¿Ê  ¿Ê¿Ê$   ¿ÁÄç¿Á  ¿Á'¿Á8   ¿ÁüÉ°¿Á§  ¿Á≤,¿Á”   ¿ÎDÑÅ¿ÎW  ¿Î]¿Îk  ¿ÎD¿ÎE ¿Ô Çz¿ÒÅ;/// A [ScaffoldFeatureController] for standard bottom sheets.
///
/// This is the type of objects returned by [ScaffoldState.showBottomSheet].
///
/// This controller is used to display both standard and persistent bottom
/// sheets. A bottom sheet is only persistent if it is set as the
/// [Scaffold.bottomSheet].¿Ò,¿Ò,¿ÒnÄ∞¿Òì¿Òî¿Òï ¿Òõ¿Ò¢  ¿Ò≠¿Ò¥  ¿Ò¬¿Ò…  ¿Ò”¿ÒÊ  ¿ÒÛ¿Ò˘  ¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú"¿Ú-     ¿ÚFÅk¿ÚL  ¿Úww ¿Ú}¿Úã ¿Úí¿Ú°  ¿ÚØ¿Úæ  ¿Ú”¿Ú„   ¿ÚÚ¿Ú˝  ¿Û
0¿Û*   ¿Û?p¿ÛP  ¿Ûc¿Ûs  ¿Û?¿Û@  Ü5Ä…Ü:   ÜLÜL  ÜTÜT  Ü^	Ü^  ÜkÜk  ÜzÜz  ÜÜÜÜ  ÜòÜò  Ü¨Ü¨  Ü√Ü√  Ü€Ü€  ÜÂ	ÜÂ  ÜÚ	ÜÚ           ÑpÑ4 Ñ\ÑxÑyÑÉoÑ¶ ÑŒÑÍÑÎÑı6Ö ÖÖù3Ö™ ÖÕÖ“/Öﬂ Ö˛Ü/Ü Ü/  å« <ÄÜÄ§Ä•Ä∫Ä‘ÄÅÅÅ=Å|Å£Å§ÅªÅ—ÅÌÇ	ÇÇ5ÇJÇaÇwÇôÇøÇÓÉÉÉ>ÉSÉTÉlÉëÉ∑É”ÉÈÑÑÑÉÑÙÑıÖ-ÖyÖùÖ“ÜÜ4Ü5ÜJÜRÜ\ÜiÜxÜÑÜñÜ™Ü¡ÜŸÜ„ÜÜ˝Üˇá áJáNáëáïáÂàààhà≤à„ââ"âjâªääYä|äÄäîä„äÁã:ãJãNãëãïã£ãßãıåFåòåÏç:çeçøçé<éXégéÄéÜéáé∑éΩéÓèèèUèdèjèÄèÃêêêkê}êÉê÷ë(ëtëæëÛë˘íí_í¨íÛì>ìäìØìµîîî%îqî´î±î¡î«ïïVï¶ï”ññCñDñ∂ñ‡ñ‰ñÂó5óLóRó•ó´óªó¡ò
òYòöòõôô8ô<ô=ôIôçôèôêôµôπö öQöúöÁöıö˘õ,õäõ‹úîú∆ù`ùåù•ùƒù≈ù—ùÚûDûîûﬁü.üTü}üûü¿üË†)†/†a†Ñ†à†â†¥†“†”†°°7°?°@°i°ì°õ°°°•°¶°”¢	¢<¢Q¢U¢V¢r¢©¢»¢Ï£££$£(£)£y£¡£Í§G§Ç§Ü§á§ô§ö§È•6•}•¢•®•˜¶D¶ì¶°¶ß¶¯¶˛ßOßèßﬁ®®®\®|®Ç®ò®È®Ô©Y©k©q©•©´©˝™M™õ™Ì´=´ì´µ´ª´—¨<¨B¨¨¨æ¨ƒ≠"≠.≠K≠ö≠«≠ŒÆÆSÆqÆ°Æ«ÆÕØØjØπ∞	∞(∞v∞ü∞¨∞ﬁ∞ˇ±
±c±j±t±à±∞±∫±‘±Ó≤≤*≤x≤ ≥≥k≥ã≥⁄¥0¥g¥x¥ë¥Âµ;µÄµ◊∂-∂l∂}∂´∂˙∑∑∑Q∑]∑g∑|∑à∑ó∑ù∑û∑µ∑π∑∫∑¯∏∏4∏[∏q∏ï∏°∏Ω∏‚πππ<πRπ|πÕπŸπı∫∫(∫L∫[∫a∫e∫f∫∞∫√∫…ªªhª∆ª‰ªÚª¯ºKºmºèºïº≥ºŒΩΩ.Ω2Ω3Ω~ΩÑΩ æ$æ~æåæíæÂøø/øQø^øùø∂ø‹¿ @¿ @¿ @¿ @¿ @:¿ @U¿ @Y¿ @Z¿ @£¿ @‰¿ @˛¿ AX¿ Af¿ Al¿ A‘¿ AÏ¿ B¿ B,¿ B0¿ B1¿ BJ¿ BK¿ B†¿ BÛ¿ C@¿ Ce¿ Ck¿ C¿¿ D¿ Dn¿ D|¿ DÇ¿ Dﬂ¿ E¿ Et¿ E©¿ EØ¿ E¯¿ F¿ F¿ F4¿ Fã¿ Fë¿ G¿ G¿ Gè¿ Gõ¿ G∏¿ H¿ H:¿ HA¿ Hô¿ Hÿ¿ H¸¿ I2¿ I^¿ Id¿ Iø¿ J¿ Jo¿ Jø¿ Jﬁ¿ K8¿ Kg¿ Kv¿ K¨¿ K—¿ K⁄¿ L9¿ L@¿ LR¿ L~¿ LÜ¿ Lû¿ Lµ¿ Lπ¿ L∫¿ L˛¿ M¿ M:¿ Mg¿ M}¿ Mß¿ M≥¿ Mœ¿ M˙¿ N*¿ N4¿ NZ¿ Nv¿ Nö¿ N©¿ NÕ¿ N‹¿ N‚¿ NÊ¿ NÁ¿ O7¿ OJ¿ OP¿ Oß¿ O˚¿ Pk¿ Pè¿ Pù¿ P£¿ Q¿ Q$¿ QF¿ QL¿ QM¿ Qá¿ Q≥¿ Q∑¿ Q∏¿ R	¿ R¿ RU¿ R¡¿ S'¿ S5¿ S;¿ Sö¿ Sº¿ SÍ¿ T¿ T¿ T^¿ Tw¿ Tù¿ T√¿ TÕ¿ T◊¿ T›¿ T·¿ T‚¿ U3¿ U|¿ Uú¿ V¿ V¿ V¿ Vñ¿ V¥¿ VÂ¿ W¿ W
¿ W¿ W¿ W>¿ Wl¿ W¥¿ Wµ¿ W÷¿ X¿ XE¿ Xè¿ XÕ¿ Y¿ Y¿ Yb¿ Y¨¿ Yª¿ Z ¿ ZY¿ Zo¿ Z}¿ Zƒ¿ Z“¿ Z‹¿ Z‰¿ ZÍ¿ ZÎ¿ [¿ [3¿ [N¿ [U¿ [Y¿ [Z¿ [f¿ [y¿ [ù¿ [ª¿ [÷¿ [Î¿ [Ô¿ [Ò¿ [Ú¿ \*¿ \L¿ \f¿ \¢¿ \€¿ \‹¿ ]¿ ]¿ ]!¿ ]ì¿ ]ï¿ ]ñ¿ ]„¿ ^
¿ ^¿ ^H¿ ^ê¿ ^Ã¿ ^–¿ _¿ _E¿ _P¿ _r¿ _√¿ `¿ `/¿ `R¿ `s¿ `ë¿ `Ω¿ `⁄¿ `¸¿ a¿ a<¿ ab¿ aÉ¿ aâ¿ aä¿ aø¿ a≈¿ b¿ b8¿ b9¿ bm¿ bs¿ bµ¿ b’¿ bÛ¿ bÙ¿ c<¿ cS¿ cY¿ cû¿ cË¿ d6¿ dM¿ dS¿ d£¿ d¿ e@¿ eZ¿ ex¿ ey¿ e¿¿ e◊¿ e›¿ f"¿ fi¿ fó¿ fù¿ fÌ¿ g:¿ gä¿ gû¿ gπ¿ g∫¿ h¿ h¿ h!¿ hk¿ hé¿ h‚¿ i¿ i¿ iS¿ iâ¿ iß¿ i®¿ iı¿ j¿ j¿ jc¿ j±¿ j˝¿ kM¿ kp¿ kì¿ kî¿ kæ¿ kƒ¿ l¿ l_¿ lî¿ lö¿ lÁ¿ m5¿ mÖ¿ mÆ¿ m¥¿ n¿ n&¿ nA¿ nB¿ ns¿ ny¿ n»¿ n„¿ n‰¿ o¿ o!¿ ov¿ oó¿ oò¿ o÷¿ o˚¿ o˝¿ o˛¿ pJ¿ pN¿ pó¿ p¯¿ q¿ qO¿ qP¿ q¨¿ q≠¿ qŸ¿ r¿ r2¿ rK¿ rL¿ rX¿ rô¿ r∏¿ rË¿ s¿ s.¿ s5¿ s9¿ s:¿ sF¿ s\¿ s÷¿ s⁄¿ s‹¿ s›¿ t*¿ t.¿ tp¿ tü¿ t£¿ tÓ¿ uB¿ uF¿ uí¿ u‘¿ u¿ uÙ¿ vB¿ vá¿ ví¿ v´¿ vÔ¿ w
¿ w+¿ wN¿ wT¿ wU¿ wû¿ wÎ¿ wÒ¿ x'¿ xO¿ xP¿ xê¿ xñ¿ x⁄¿ y¿ y¿ yG¿ ye¿ yx¿ y~¿ y¿ yù¿ yº¿ yÙ¿ y˝¿ z¿ z¿ z-¿ za¿ zÅ¿ zî¿ zú¿ zŸ¿ z›¿ zﬁ¿ {6¿ {L¿ {j¿ {é¿ {≤¿ {π¿ {÷¿ |+¿ |Ü¿ |ç¿ |ë¿ |ì¿ |î¿ |˙¿ }4¿ }5¿ }S¿ }x¿ }ï¿ }ñ¿ }¢¿ }¡¿ }—¿ ~¿ ~`¿ ~|¿ ~–¿ &¿ Ö¿ ê¿ ò¿ ´¿ µ¿ Ä¿ Ä¿ Ä¿ Ä¿ Ä?¿ Äc¿ Ää¿ Äë¿ ÄÛ¿ Å¿ ÅK¿ ÅÖ¿ Åå¿ Å£¿ Åß¿ Å©¿ Å™¿ Åˆ¿ ÇH¿ ÇK¿ Çñ¿ ÇÈ¿ É8¿ ÉÜ¿ É’¿ É˜¿ Ñ*¿ ÑH¿ Ñ\¿ Ñq¿ Ñò¿ Ñ∏¿ Ñ‡¿ Ö	¿ Ö+¿ ÖU¿ ÖV¿ Öz¿ Öó¿ Öº¿ ÖΩ¿ Ü¿ Ü_¿ Ü≤¿ Ü˚¿ á¿ á*¿ áD¿ áX¿ á^¿ áÜ¿ áƒ¿ à ¿ à/¿ à3¿ à4¿ à@¿ à¨¿ àÆ¿ àØ¿ â¿ âS¿ âo¿ âr¿ â«¿ ä¿ äC¿ äZ¿ äx¿ ä¢¿ ä∫¿ ä¿¿ ä¡¿ ä÷¿ äÔ¿ ã¿ ã¿ ã!¿ ãH¿ ãz¿ ãç¿ ãì¿ ãî¿ ãÆ¿ ãÚ¿ åJ¿ åâ¿ åä¿ å≥¿ ç¿ ç)¿ ç*¿ ç\¿ çÜ¿ çŸ¿ ç˙¿ ç˚¿ é¿ é8¿ ég¿ é¿ éù¿ é¨¿ éπ¿ é–¿ é€¿ é‰¿ éÎ¿ éÔ¿ éÒ¿ éÚ¿ è+¿ è?¿ è\¿ è~¿ èü¿ è√¿ èÂ¿ ê¿ êT¿ êë¿ ê«¿ êÌ¿ ë¿ ë,¿ ëV¿ ëà¿ ëé¿ ëè¿ ë®¿ ëÕ¿ ëÎ¿ í¿ í3¿ íg¿ íh¿ í≥¿ í˝¿ ì7¿ ìÄ¿ ìÅ¿ ì¢¿ ì¡¿ ì¬¿ ìÔ¿ ì¿ ì¸¿ î¿ îf¿ îg¿ îµ¿ ï¿ ïT¿ ïê¿ ïë¿ ïÓ¿ ñ¿ ñ2¿ ñX¿ ñw¿ ñx¿ ñ¢¿ ñ˜¿ ó7¿ óo¿ óu¿ óv¿ óö¿ ó—¿ òM¿ òÖ¿ ò—¿ ô.¿ ô4¿ ô5¿ ôi¿ ô®¿ ôŸ¿ ö&¿ ö/¿ ö¢¿ ö◊¿ õF¿ õL¿ õM¿ õv¿ õ®¿ ú¿ úR¿ úS¿ úÜ¿ ú≥¿ ú‰¿ úÏ¿ úÚ¿ úÛ¿ ùA¿ ùÖ¿ ùß¿ û¿ û¿ û:¿ ûÇ¿ ûÉ¿ ûõ¿ û…¿ ü+¿ üÑ¿ üå¿ üç¿ üœ¿ † ¿ †"¿ †[¿ ††¿ †ƒ¿ †Õ¿ °¿ °G¿ °M¿ °N¿ °†¿ °Ô¿ ¢6¿ ¢Ä¿ ¢á¿ ¢‹¿ £¿ £m¿ £∫¿ §
¿ §1¿ §2¿ §X¿ §{¿ §®¿ §Ò¿ •"¿ •D¿ •M¿ •ñ¿ •—¿ •◊¿ •ÿ¿ ¶¿ ¶J¿ ¶ç¿ ¶›¿ ¶„¿ ¶‰¿ ß¿ ßW¿ ßà¿ ß∆¿ ßœ¿ ®'¿ ®≥¿ ®π¿ ®∫¿ ®‚¿ ©¿ ©x¿ ©y¿ ©«¿ ©Î¿ ™>¿ ™h¿ ™é¿ ™ÿ¿ ´;¿ ´]¿ ´à¿ ´¶¿ ´¬¿ ´Ê¿ ¨¿ ¨<¿ ¨d¿ ¨m¿ ¨”¿ ≠;¿ ≠à¿ ≠™¿ ≠…¿ Æ¿ Æ¿ ÆS¿ Æâ¿ Æè¿ Æê¿ Æº¿ Ø¿ Ø;¿ Ø_¿ ØÅ¿ Ø≈¿ Ø–¿ Øÿ¿ ØŸ¿ ∞¿ ∞O¿ ∞ã¿ ∞ö¿ ∞ﬁ¿ ±.¿ ±¿ ±À¿ ±‡¿ ≤,¿ ≤]¿ ≤í¿ ≤≠¿ ≤µ¿ ≤∂¿ ≥¿ ≥v¿ ≥w¿ ≥à¿ ≥…¿ ≥‘¿ ¥9¿ ¥õ¿ µ¿ µ(¿ µÅ¿ µ£¿ µﬂ¿ ∂&¿ ∂F¿ ∂•¿ ∂¸¿ ∑S¿ ∑•¿ ∑∂¿ ∑œ¿ ∏@¿ ∏Q¿ ∏a¿ ∏m¿ ∏w¿ ∏å¿ ∏ò¿ ∏û¿ ∏ü¿ ∏Ã¿ π-¿ πh¿ πn¿ πo¿ πô¿ πﬁ¿ ∫¿ ∫¿ ∫¿ ∫J¿ ∫í¿ ∫Õ¿ ∫”¿ ∫‘¿ ∫ˆ¿ ª,¿ ªf¿ ªm¿ ªq¿ ªr¿ ª~¿ ª≥¿ ª·¿ º¿ ºK¿ º∑¿ Ω¿ Ωy¿ Ωß¿ ΩÓ¿ ΩÚ¿ ΩÙ¿ Ωı¿ æB¿ æF¿ æè¿ æì¿ æŒ¿ ø¿ øR¿ øå¿ øÀ¿ øı¿ ¿¿ ¿2¿ ¿W¿ ¿{¿ ¿†¿ ¿¶¿ ¿ß¿ ¿æ¿ ¿Í¿ ¡"¿ ¡V¿ ¡W¿ ¡í¿ ¡¡¿ ¡¬¿ ¡Œ¿ ¬.¿ ¬0¿ ¬1¿ ¬´¿ √¿ √:¿ √j¿ √ú¿ √—¿ ƒJ¿ ƒ{¿ ƒ¥¿ ƒË¿ ≈¿ ≈¿ ≈¿ ≈$¿ ≈;¿ ≈<¿ ≈k¿ ≈ó¿ ≈™¿ ≈Î¿ ∆¿ ∆¿ ∆%¿ ∆x¿ ∆í¿ ∆æ¿ ∆À¿ «¿ «e¿ «Ü¿ «å¿ «ê¿ «ë¿ «ù¿ «∞¿ «”¿ «Ë¿ «Ï¿ «Ì¿ «˘¿ »=¿ »c¿ »ﬂ¿ …,¿ …G¿ …M¿ …Ü¿ …º¿  ¿  #¿  )¿  l¿  Æ¿  Í¿ À9¿ Àt¿ Àì¿ À∑¿ ÀÂ¿ ÀÔ¿ À˛¿ ÃM¿ Ãõ¿ ÃÊ¿ Õ¿ Õ,¿ ÕM¿ Õd¿ Õí¿ Õö¿ Õ†¿ Õ§¿ Õ•¿ ÕÎ¿ Œ¿ Œ-¿ ŒZ¿ Œ[¿ Œx¿ Œ©¿ ŒÒ¿ œ¿ œ0¿ œ7¿ œ†¿ œ∑¿ œ‹¿ œ˙¿ –¿ –
¿ –¿ –V¿ –~¿ –ö¿ –°¿ —¿ —¿ —K¿ —…¿ “M¿ “N¿ “o¿ “”¿ ”9¿ ”©¿ ”™¿ ‘¿ ‘à¿ ‘â¿ ‘≈¿ ’¿ ’¿ ’¿ ’N¿ ’`¿ ’©¿ ’˜¿ ÷#¿ ÷+¿ ÷3¿ ÷7¿ ÷8¿ ÷q¿ ÷õ¿ ÷π¿ ÷Ω¿ ÷æ¿ ÷ ¿ ÷Ò¿ ◊¿ ◊+¿ ◊E¿ ◊ä¿ ◊…¿ ◊Â¿ ÿ¿ ÿ:¿ ÿH¿ ÿW¿ ÿt¿ ÿ¢¿ ÿÀ¿ ÿ˛¿ Ÿ%¿ Ÿ6¿ ŸE¿ ŸÄ¿ Ÿõ¿ ŸŒ¿ ŸÒ¿ ⁄ ¿ ⁄C¿ ⁄R¿ ⁄^¿ ⁄k¿ ⁄Ü¿ ⁄±¿ ⁄ÿ¿ €¿ €+¿ €:¿ €G¿ €P¿ €W¿ €[¿ €\¿ €z¿ €€¿ €ﬂ¿ €‡¿ ‹¿ ‹5¿ ‹]¿ ‹d¿ ‹h¿ ‹j¿ ‹k¿ ‹≠¿ ‹±¿ ‹ı¿ ‹˘¿ ›.¿ ›¿ ›≠¿ ›±¿ ›≈¿ ﬁ¿ ﬁ_¿ ﬁß¿ ﬁœ¿ ﬁ”¿ ﬂ¿ ﬂ,¿ ﬂ0¿ ﬂD¿ ﬂí¿ ﬂ·¿ ‡0¿ ‡j¿ ‡n¿ ‡”¿ ‡◊¿ · ¿ ·0¿ ·4¿ ·H¿ ·ï¿ ·Ê¿ ‚2¿ ‚j¿ ‚π¿ ‚¿ ‚Ù¿ „W¿ „[¿ „§¿ „¥¿ „∏¿ „Ù¿ „¯¿ ‰?¿ ‰Ü¿ ‰Õ¿ Â¿ ÂX¿ Âç¿ Â—¿ Ê¿ Ê"¿ Ê&¿ Êf¿ Ê¨¿ ÊÏ¿ Á-¿ Áe¿ Á¶¿ Á¿¿ Áƒ¿ Ë¿ Ë¿ ËN¿ Ëù¿ ËÒ¿ Ëı¿ ÈD¿ È¨¿ ÈÒ¿ Èı¿ Í]¿ Í≤¿ Í∂¿ ÍÕ¿ Í—¿ ÍÍ¿ ÍÓ¿ Î+¿ Îb¿ Î†¿ ÎŒ¿ Î“¿ Ï¿ ÏV¿ Ï§¿ ÏÓ¿ Ì3¿ Ì>¿ ÌB¿ ÌV¿ Ìß¿ ÌÒ¿ Ìı¿ Ó¿ ÓN¿ Óz¿ Óê¿ Ó‘¿ Ô
¿ Ô¿ Ô¿ Ô%¿ Ô-¿ Ô=¿ ÔA¿ ÔÖ¿ Ôƒ¿ Ô˚¿ Ôˇ¿ ¿ ¿ a¿ Ö¿ ‘¿ Ò¿ Ò`¿ Ò±¿ Òˇ¿ ÚG¿ ÚX¿ Úß¿ Ú¿ Û¿ ÛR¿ Û°¿ ÛÚ¿ Ù0¿ ÙÄ¿ ÙΩ¿ ı¿ ıT¿ ıâ¿ ı›¿ ˆ%¿ ˆl¿ ˆ…¿ ˆÒ¿ ˜.¿ ˜A¿ ˜P¿ ˜a¿ ˜p¿ ˜è¿ ˜∂¿ ˜›¿ ˜ˇ¿ ¯D¿ ¯U¿ ¯o¿ ¯É¿ ¯†¿ ¯æ¿ ¯‘¿ ¯Ó¿ ˘¿ ˘*¿ ˘f¿ ˘É¿ ˘¨¿ ˘«¿ ˘Â¿ ˙¿ ˙B¿ ˙Z¿ ˙`¿ ˙a¿ ˙ß¿ ˙Ú¿ ˚:¿ ˚b¿ ˚h¿ ˚µ¿ ¸¿ ¸	¿ ¸P¿ ¸ñ¿ ¸‚¿ ˝+¿ ˝q¿ ˝w¿ ˝á¿ ˝ç¿ ˝’¿ ˝˙¿ ˛¿ ˛¿ ˛b¿ ˛Æ¿ ˛‹¿ ˛‚¿ ˇ(¿ ˇA¿ ˇG¿ ˇÖ¿ ˇã¿ ˇõ¿ ˇ°¿ ˇÎ¿ ¿ *¿ +¿ c¿ à¿ â¿ ¥¿ ∫¿ ˛¿?¿ã¿ÿ¿¿¿_¿∞¿ˇ¿F¿o¿u¿√¿¿`¿ï¿´¿¨¿¯¿˛¿(¿N¿O¿ù¿£¿¿R¿S¿Æ¿¥¿¿b¿c¿¨¿≤¿¸¿D¿J¿É¿â¿ƒ¿ˆ¿	%¿	&¿	u¿	{¿	Ø¿	Á¿	Ë¿
2¿
~¿
®¿
Æ¿
 ¿
–¿¿¿p¿ü¿•¿ª¿ı¿6¿á¿ë¿ó¿È¿˚¿¿¿k¿î¿ï¿ﬂ¿$¿N¿T¿p¿v¿¿¿∆¿¿K¿Q¿g¿ó¿€¿)¿9¿?¿ï¿ß¿¬¿√¿¿I¿J¿•¿´¿ı¿/¿P¿Q¿û¿§¿Ê¿¿¿O¿U¿£¿ƒ¿ ¿¿0¿U¿V¿Ñ¿ä¿Ÿ¿'¿]¿c¿≥¿¿P¿w¿}¿≈¿¿@¿F¿ì¿‹¿Ò¿˜¿C¿é¿⁄¿˙¿ ¿¿¿d¿õ¿·¿-¿o¿å¿ç¿÷¿%¿q¿w¿ø¿¿\¿b¿z¿¢¿£¿Ï¿Ú¿?¿à¿é¿“¿Û¿	¿
¿M¿Ä¿Å¿À¿Ÿ¿ﬂ¿%¿o¿Ω¿ ¿ 8¿ d¿ â¿ ä¿ Œ¿ Á¿ Ì¿!&¿!,¿!e¿!è¿!ê¿!“¿!Î¿!Ò¿"*¿"0¿"i¿"ñ¿"ó¿"›¿"„¿#.¿#a¿#g¿#¥¿$¿$¿$¿$!¿$n¿$Ä¿$ü¿$†¿$Ì¿%¿%¿%b¿%¶¿%¨¿%Ï¿%Ú¿&¿&X¿&â¿&è¿&›¿&Ô¿&ı¿'¿'[¿'¶¿'Û¿(D¿(ã¿(ù¿(£¿(Ò¿)¿)	¿)V¿)°¿)Ò¿*A¿*{¿*Å¿*—¿+¿+^¿+d¿+±¿+¯¿,*¿,~¿,ò¿,≠¿,≥¿,Á¿,˚¿-L¿-U¿-m¿-ÿ¿.:¿.ç¿.ñ¿.ß¿/
¿/b¿/è¿/÷¿/ﬂ¿/¿0P¿0Æ¿1¿1m¿1 ¿2$¿2Q¿2Z¿2ë¿2ô¿2ù¿2û¿2Î¿3¿3¿3d¿3¨¿3≤¿3Ú¿3¯¿4¿4¿4W¿4¢¿4∫¿4Ú¿5/¿53¿54¿5Å¿5±¿5∑¿5˙¿6 ¿6J¿6î¿6‚¿6Ù¿6˙¿7G¿7ï¿7€¿8
¿8¿8[¿8™¿8˘¿9C¿9U¿9£¿:¿:,¿:b¿:x¿:”¿:ﬁ¿:¯¿;\¿;±¿;º¿;œ¿<4¿<é¿<Ω¿=¿=¿=$¿=Ü¿=Ê¿>F¿>∞¿>ª¿>Ù¿>˛¿?¿?/¿?3¿?4¿?Ç¿?ê¿?ñ¿?„¿@1¿@~¿@œ¿@‰¿@Í¿A*¿A0¿A@¿AF¿Aó¿A‹¿B0¿BN¿B≥¿Bﬁ¿BÎ¿CC¿Cn¿Ct¿Cx¿Cy¿CÖ¿C∑¿Cπ¿C∫¿C÷¿C⁄¿D&¿DN¿D¨¿D∏¿DÌ¿DÓ¿D˙¿EC¿E}¿Eæ¿E¬¿E√¿E”¿E‘¿F.¿Fã¿Få¿F∂¿F∑¿Fı¿G$¿Gb¿Gë¿G“¿H¿HS¿Hû¿Hü¿Hª¿HÏ¿HÚ¿I;¿In¿I¨¿IÌ¿IÓ¿J¿J#¿J3¿J9¿JÖ¿Jö¿J ¿JÀ¿J˝¿K¿K¿K¿Ki¿KÄ¿K∂¿K∑¿KÂ¿L3¿LG¿Lo¿Ly¿Lß¿L≠¿L±¿L≤¿L„¿M7¿MK¿Mv¿MÄ¿M±¿M∑¿Mª¿Mº¿Mﬂ¿MÂ¿N6¿Nh¿Nn¿Nº¿O¿O¿O ¿Oh¿O¿OÖ¿O÷¿OÏ¿P4¿P_¿Pe¿Pä¿Pé¿Pè¿Pª¿P¡¿Q¿QP¿QV¿Q§¿QÙ¿R¿R¿RP¿Rg¿Rm¿Ræ¿R◊¿S¿SA¿SG¿So¿Ss¿St¿S≠¿S€¿S‹¿SÓ¿T?¿T@¿Tç¿T®¿U+¿UZ¿Uj¿Uk¿Uû¿U≤¿U‚¿UÏ¿UÚ¿Uˆ¿U˜¿V¿V¿Vj¿Vü¿W¿W¿WV¿Ww¿X¿XG¿XW¿XX¿Xó¿X´¿XÁ¿XÒ¿X˜¿X˚¿X¸¿Y¿Y¿Yc¿YØ¿Y¬¿Z¿ZY¿Zë¿Zƒ¿Z≈¿ZÒ¿[6¿[ã¿[›¿\¿\x¿\÷¿]0¿]f¿]≤¿]˘¿^"¿^\¿^è¿^ü¿^¯¿_¿_?¿_q¿_{¿_ë¿_ô¿_ö¿_Ú¿`L¿`h¿`ó¿a¿aL¿ay¿aÉ¿a≥¿aª¿aº¿aÒ¿b¿bZ¿bö¿b ¿b¿c¿ce¿c≠¿c¿¿c—¿c‡¿cÌ¿c¯¿d¿dF¿dO¿dU¿dY¿dZ¿d~¿d•¿d›¿e¿e¿e¿e^¿eç¿eô¿eÆ¿e∫¿e¿¿eƒ¿e≈¿eˇ¿f¿fV¿fm¿fë¿f∏¿fΩ¿f¡¿f¬¿fˇ¿g¿gV¿gp¿gõ¿g∆¿gÃ¿g–¿g—¿g˘¿h3¿h7¿h8¿hs¿hê¿h∞¿hÊ¿i¿i¿i1¿iI¿ij¿iÄ¿i≤¿iπ¿i…¿j ¿j<¿já¿j»¿k$¿k/¿k7¿kJ¿kT¿kU¿kà¿k¿l¿l¿l;¿lZ¿l[¿lí¿lÆ¿l‡¿m¿m=¿mE¿mK¿mL¿mr¿mç¿m∂¿m∆¿mŒ¿n	¿n<¿n_¿n`¿nz¿nØ¿n∑¿n∏¿n‰¿n¯¿o¿oQ¿ou¿o¿oÄ¿o≈¿oˆ¿o˛¿p¿p ¿p!¿pS¿p`¿pâ¿pË¿q¿q¿q(¿q)¿qJ¿qv¿qï¿qÆ¿qÀ¿q”¿qŸ¿q⁄¿r¿r¿rM¿r|¿rí¿rΩ¿rœ¿rŸ¿s¿s5¿s>¿sV¿sí¿s™¿s‚¿s¿s˙¿t¿t¿t6¿tU¿tÖ¿tÆ¿t∏¿t¡¿tŸ¿t˚¿u#¿u?¿uS¿uu¿uï¿uú¿uù¿u∂¿uÚ¿u¯¿u˘¿v*¿v=¿vN¿vb¿vy¿vù¿vÂ¿v˙¿w¿w¿w¿wT¿wï¿wõ¿wÌ¿x¿x¿xH¿xó¿x™¿x∞¿x˚¿yJ¿yn¿yt¿y«¿z¿zZ¿z`¿z∞¿z˛¿{2¿{8¿{á¿{’¿|¿|¿|a¿|≤¿|˛¿}%¿}+¿}A¿}ã¿}’¿~¿~¿~n¿~Ä¿~ê¿~ñ¿~Â¿~˘¿E¿í¿¢¿Û¿ÄF¿Ä¢¿Ä€¿Ä¯¿Å¿Å+¿ÅC¿Å[¿Å|¿Åí¿Å ¿Å—¿Å·¿Ç	¿Ç%¿Çp¿Ç±¿É¿É¿É ¿É3¿É=¿Ék¿Él¿Éå¿Ñ¿Ñ$¿ÑV¿Ñg¿ÑÑ¿Ñ≠¿Ñ◊¿Ñı¿Ö¿Ö/¿ÖQ¿Öq¿Ö¬¿ÖÀ¿Ö”¿Ü¿Ü¿Ü¿Ü?¿Ü¿Ü¬¿á	¿áH¿áI¿áè¿áê¿á—¿á¯¿à^¿à_¿à†¿à‰¿â"¿ân¿â™¿âÊ¿âÌ¿âÒ¿âÚ¿ä#¿äP¿äê¿äî¿äï¿äÁ¿ã:¿ãé¿ãµ¿å+¿åf¿ç1¿ç¨¿ç≤¿ç≥¿ç≈¿é¿é8¿é@¿éA¿éü¿é¸¿è¿è^¿èb¿èc¿èî¿èï¿èÂ¿ê1¿ê[¿êz¿ê⁄¿ë+¿ëT¿ëa¿ëó¿ë∫¿ë√¿ë…¿ëÕ¿ëŒ¿ë›¿ëﬁ¿í¿í¿í:¿ín¿ír¿ís¿í¿íî¿í´¿ì¿ìs¿ìÂ¿î0¿îo¿îÇ¿îî¿îƒ¿îÀ¿îÃ¿ï¿ï=¿ïP¿ïW¿ï[¿ï\¿ïh¿ïï¿ïª¿ñ.¿ñá¿ñ˚¿ó¿óZ¿ó…¿óœ¿ò¿ò¿òz¿ò¥¿òŒ¿ô'¿ôa¿ôp¿ôá¿ô¿¿ö¿öX¿ög¿öu¿ö¿öî¿ö†¿ö»¿öÏ¿õ<¿õh¿õw¿õü¿õß¿õ≠¿õ±¿õ≤¿õæ¿õﬂ¿ú0¿úg¿ú»¿ù¿ù>¿ùú¿ù…¿ùœ¿û¿ûG¿ûp¿ûq¿ûô¿ûº¿û¿¿û¡¿ûÕ¿û‡¿ü¿ü4¿üm¿üò¿üµ¿ü’¿üÍ¿üÓ¿üÔ¿†¿†"¿†5¿†K¿†p¿†î¿†∫¿†·¿°¿°1¿°8¿°x¿°ù¿°¿¿°Á¿¢¿¢¿¢4¿¢l¿¢r¿¢s¿¢π¿¢’¿£¿£'¿£-¿£.¿£G¿£[¿£m¿£Ñ¿£ª¿£∆¿£œ¿£’¿£Ÿ¿£⁄¿§)¿§M¿§i¿§~¿§ê¿§™¿§»¿§Ú¿•&¿•c¿•í¿•«¿¶¿¶?¿¶c¿¶n¿¶è¿¶”¿ß¿ß3¿ßs¿ßó¿ß†¿ß¶¿ß™¿ß´¿ß˜¿®¿®1¿®F¿®X¿®r¿®ç¿®π¿®Í¿©'¿©V¿©ã¿©–¿©˝¿™¿™)¿™G¿™ã¿™ ¿™Î¿´+¿´O¿´X¿´^¿´b¿´c¿´Ç¿´™¿´´¿´Ò¿´˜¿¨%¿¨X¿¨°¿¨Ø¿¨µ¿¨«¿¨Â¿≠ ¿≠(¿≠,¿≠-¿≠9¿≠`¿≠é¿≠¿¿≠Û¿Æ7¿Æ8¿Æj¿Æ}¿Æç¿Ææ¿ÆÂ¿Ø$¿Ød¿Øm¿Øá¿Øß¿Ø÷¿Ø˜¿∞`¿∞î¿∞õ¿∞µ¿∞ ¿∞‹¿∞Ú¿±¿±2¿±=¿±^¿±¿±ü¿±¡¿±‰¿±Ì¿±Û¿±Ù¿≤¿≤o¿≤◊¿≥¿≥2¿≥D¿≥\¿≥°¿≥”¿¥¿¥$¿¥1¿¥<¿¥Z¿¥|¿¥ù¿¥¿¿¥„¿¥Ï¿¥Ú¿¥Û¿µ¿µ3¿µ4¿µÄ¿µ¢¿µÕ¿µÈ¿∂¿∂W¿∂b¿∂k¿∂Ä¿∂í¿∂°¿∂ƒ¿∂Ê¿∑¿∑)¿∑a¿∑j¿∑p¿∑q¿∑ö¿∑¿¿∏¿∏A¿∏d¿∏Æ¿π¿π	¿π¿π0¿πU¿πu¿πó¿π∑¿π⁄¿∫E¿∫Ñ¿∫ç¿∫ì¿∫î¿∫≈¿∫Ù¿ª ¿ªs¿ªﬂ¿º¿º¿º.¿º@¿ºk¿ºë¿º≥¿º‰¿Ω¿Ω*¿Ωi¿Ωr¿Ωx¿Ωy¿Ω´¿Ω¿¿Ω“¿ΩÂ¿æ
¿æ&¿æh¿æw¿æÑ¿æü¿æ∑¿æ€¿æ˚¿ø8¿øj¿øé¿ø¨¿øÎ¿¿(¿¿;¿¿L¿¿[¿¿h¿¿s¿¿õ¿¿Ω¿¿›¿¡ ¿¡A¿¡Ä¿¡â¿¡è¿¡ê¿¡æ¿¡”¿¡Â¿¬	¿¬4¿¬V¿¬v¿¬ô¿¬Ω¿¬¸¿√¿√¿√¿√¿√/¿√V¿√ï¿√œ¿√¸¿ƒB¿ƒn¿ƒw¿ƒ°¿ƒ¿¿ƒﬁ¿ƒ˛¿≈¿≈&¿≈'¿≈I¿≈h¿≈â¿≈†¿≈¥¿≈œ¿≈˝¿∆%¿∆Ü¿∆Æ¿∆ª¿∆ﬁ¿«¿«$¿«I¿«n¿«y¿«ú¿«ø¿«‡¿»¿»¿»¿»¿»;¿»h¿»ò¿»•¿»’¿…¿…¿…	¿…Q¿…ö¿…Û¿…˙¿…˚¿ E¿ |¿ Œ¿À6¿À=¿À>¿Àm¿Àµ¿À∂¿À—¿ÀÌ¿Ã¿ÃA¿ÃZ¿Ã®¿Õ*¿ÕF¿Õu¿Õ≥¿Õƒ¿ÕÒ¿Œ¿ŒF¿Œè¿Œ∑¿ŒÈ¿œ@¿œ®¿œ˝¿–4¿–î¿–ƒ¿–˛¿—P¿—Ä¿—ì¿—∑¿—»¿—◊¿—Â¿—¿—˘¿“ ¿“¿“¿“¿“:¿“`¿“a¿“¿“Ä¿“å¿“µ¿”¿”¿”¿”¿”B¿”j¿”ï¿”ô¿”õ¿”ú¿”ÿ¿”‹¿‘ ¿‘E¿‘|¿‘€¿‘Ó¿’¿’¿’a¿’é¿’è¿’Ô¿÷¿÷¿÷\¿÷{¿÷}¿÷~¿÷ ¿◊¿◊k¿◊º¿◊¿◊Ù¿ÿ?¿ÿâ¿ÿ⁄¿ÿ¿ÿÙ¿ŸA¿Ÿé¿Ÿﬁ¿⁄)¿⁄a¿⁄e¿⁄•¿⁄Ë¿€	¿€-¿€I¿€s¿€}¿€~¿€∂¿€º¿€Í¿‹¿‹	¿‹A¿‹V¿‹W¿‹c¿‹Ç¿‹§¿‹ﬁ¿‹ﬂ¿‹¸¿›¿›¿›¿›'¿›7¿›=¿›>¿›ä¿›…¿ﬁ ¿ﬁ¿ﬁ¿ﬁ¿ﬁ'¿ﬁg¿ﬁk¿ﬁm¿ﬁn¿ﬁ¢¿ﬁ¡¿ﬁ–¿ﬁ˜¿ﬂ¿ﬂ0¿ﬂO¿ﬂj¿ﬂâ¿ﬂ£¿ﬂ∑¿ﬂ«¿ﬂﬁ¿ﬂÙ¿‡¿‡¿‡¿‡Å¿‡ö¿‡ª¿‡ﬁ¿‡ˇ¿·¿·9¿·Y¿·t¿·ê¿·¨¿·—¿·“¿·ﬁ¿‚(¿‚*¿‚+¿‚q¿‚∑¿‚∏¿‚ƒ¿‚Ÿ¿‚¿‚¸¿„?¿„ä¿„ë¿„ÿ¿„‹¿„›¿„È¿„¸¿‰¿‰/¿‰3¿‰4¿‰@¿‰y¿‰ü¿‰Ë¿‰Ï¿‰Ì¿‰˛¿Â(¿ÂF¿ÂJ¿ÂK¿Â¿Âƒ¿ÂË¿ÂÏ¿ÂÌ¿Ê2¿Ê¿Ê∞¿Êÿ¿Á ¿Á¿Á¿Á¿ÁA¿Áp¿Áí¿Áò¿Áú¿Áù¿Á‚¿Ë ¿ËY¿Ëó¿È¿È4¿ÈZ¿È∞¿È∫¿È«¿Í¿Í,¿Í2¿Í¿Í∏¿ÍÁ¿Î¿Î%¿Î+¿Î=¿ÎA¿ÎB¿ÎN¿Îu¿Îë¿Îæ¿Îı¿Ï¿Ï?¿Ïì¿Ï´¿Ï∂¿Ïø¿Ï◊¿Ï¿Ì(¿Ìo¿Ìò¿Ì∂¿ÌÛ¿Ó¿ÓI¿Óp¿Óö¿Óø¿ÓÙ¿Ô¿Ô>¿Ôm¿Ôö¿Ôß¿Ô≤¿Ôª¿Ô¬¿Ô∆¿Ô«¿Ô…¿Ô ¿¿¿Y¿]¿®¿Í¿Ò¿Òl¿Òó¿Ò©¿Òæ¿Òœ¿ÒÔ¿Ú¿Ú¿Ú ¿ÚC¿ÚE¿ÚF¿Úu¿Úé¿Ú´¿Úœ¿ÚÈ¿ÚÔ¿Ú¿Û¿Û<¿Û=¿ÛI¿Û¿Û¨¿Û∞¿Û≤    %_kDefaultFloatingActionButtonLocation%_kDefaultFloatingActionButtonAnimator_standardBottomSheetCurve _kBottomSheetDominatesPercentage_kMinBottomSheetScrimOpacity_kMaxBottomSheetScrimOpacity_ScaffoldSlotScaffoldMessengerScaffoldMessengerState_ScaffoldMessengerScopeScaffoldPrelayoutGeometry_TransitionSnapshotFabLocationScaffoldGeometry_ScaffoldGeometryNotifier_BodyBoxConstraints_BodyBuilder_ScaffoldLayout_FloatingActionButtonTransition$_FloatingActionButtonTransitionStateScaffoldScaffoldState_DismissDrawerActionScaffoldFeatureController_BottomSheetSuspendedCurve_StandardBottomSheet_StandardBottomSheetStatePersistentBottomSheetController_ScaffoldScope H