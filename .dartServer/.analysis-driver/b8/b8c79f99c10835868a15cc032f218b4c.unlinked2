Åívaluealphaopacityredgreenblue	withAlphawithOpacitywithRed	withGreenwithBlue_linearizeColorComponentcomputeLuminancelerp
alphaBlendgetAlphaFromOpacity==hashCodetoStringclearsrcdstsrcOverdstOversrcIndstInsrcOutdstOutsrcATopdstATopxorplusmodulatescreenoverlaydarkenlighten
colorDodge	colorBurn	hardLight	softLight
difference	exclusionmultiplyhue
saturationcolor
luminositynonelowmediumhighbuttroundsquaremiterbevelfillstrokehardEdge	antiAliasantiAliasWithSaveLayer_data_kIsAntiAliasIndex_kColorIndex_kBlendModeIndex_kStyleIndex_kStrokeWidthIndex_kStrokeCapIndex_kStrokeJoinIndex_kStrokeMiterLimitIndex_kFilterQualityIndex_kMaskFilterIndex_kMaskFilterBlurStyleIndex_kMaskFilterSigmaIndex_kInvertColorIndex_kDitherIndex_kIsAntiAliasOffset_kColorOffset_kBlendModeOffset_kStyleOffset_kStrokeWidthOffset_kStrokeCapOffset_kStrokeJoinOffset_kStrokeMiterLimitOffset_kFilterQualityOffset_kMaskFilterOffset_kMaskFilterBlurStyleOffset_kMaskFilterSigmaOffset_kInvertColorOffset_kDitherOffset_kDataByteCount_objects_ensureObjectsInitialized_kShaderIndex_kColorFilterIndex_kImageFilterIndex_kObjectCountisAntiAlias_kColorDefault_kBlendModeDefault	blendModestylestrokeWidth	strokeCap
strokeJoin_kStrokeMiterLimitDefaultstrokeMiterLimit
maskFilterfilterQualityshadercolorFilterimageFilterinvertColors_ditherenableDitheringsRGBextendedSRGBrawRgbarawStraightRgbarawUnmodifiedrawExtendedRgba128pngrgba8888bgra8888rgbaFloat32_imageonCreate	onDispose_debugStackwidthheight	_disposeddisposedebugDisposed
toByteData
colorSpacedebugGetOpenHandleStackTracesclone	isCloneOf_toByteData_dispose_handlesdurationimage
frameCountrepetitionCountgetNextFrame_cachedFrameCount_frameCount_cachedRepetitionCount_repetitionCount_getNextFramenonZeroevenOdd	intersectunionreverseDifferencefillTypemoveTorelativeMoveTolineTorelativeLineToquadraticBezierTorelativeQuadraticBezierTocubicTorelativeCubicToconicTorelativeConicToarcTo
arcToPointrelativeArcToPointaddRectaddOvaladdArc
addPolygonaddRRectaddPathextendWithPathcloseresetcontainsshift	transform	getBoundscombinecomputeMetrics_constructor_clone_getFillType_setFillType_arcTo_arcToPoint_relativeArcToPoint_addRect_addOval_addArc_addPolygon	_addRRect_addPath_addPathWithMatrix_extendWithPath_extendWithPathAndMatrix	_contains_shift
_transform
_getBounds_oppositionvectorangle	_iteratoriterator_pathMetric_pathMeasurecurrentmoveNextlengthisClosedcontourIndex_measuregetTangentForOffsetextractPath_length
_getPosTan_extractPath	_isClosed_nextContour_nativeNextContourcurrentContourIndexnormalsolidouterinner_style_sigma	_TypeNone	_TypeBlur_color
_blendMode_matrix_type
_kTypeMode_kTypeMatrix_kTypeLinearToSrgbGamma_kTypeSrgbToLinearGamma_toNativeImageFilter_toNativeColorFilter_shortDescriptioncreator	_initMode_initMatrix_initLinearToSrgbGamma_initSrgbToLinearGammadatanativeFiltersigmaXsigmaYtileMode_modeStringradiusXradiusYinnerFilterouterFilter	_initBlur_initDilate
_initErode_initColorFilter_initComposed_debugDisposedclamprepeatedmirrordecal_initLinear_initRadial_initConical
_initSweep_validateColorStops_initWithImage
_debugName	fromAsset_shaderRegistry_reinitializeShader_uniformFloatCount_samplerCount_initFromAssetfragmentShader_kEmptyFloat32List_floatssetFloatsetImageSampler_setImageSampler_validateSamplers	trianglestriangleStriptriangleFan_initpointslinespolygonsave	saveLayerrestorerestoreToCountgetSaveCount	translatescalerotateskewgetTransformclipRect	clipRRectclipPathgetLocalClipBoundsgetDestinationClipBounds	drawColordrawLine	drawPaintdrawRect	drawRRect
drawDRRectdrawOval
drawCircledrawArcdrawPath	drawImagedrawImageRectdrawImageNinedrawPicturedrawParagraph
drawPointsdrawRawPointsdrawVertices	drawAtlasdrawRawAtlas
drawShadow	_recorder_saveLayerWithoutBounds
_saveLayer_scale_getTransform	_clipRect
_clipRRect	_clipPath_getLocalClipBounds_getDestinationClipBounds
_drawColor	_drawLine
_drawPaint	_drawRect
_drawRRect_drawDRRect	_drawOval_drawCircle_drawArc	_drawPath
_drawImage_drawImageRect_drawImageNine_drawPicture_drawPoints_drawVertices
_drawAtlas_drawShadowtoImagetoImageSyncapproximateBytesUsed_toImage_toImageSyncisRecordingendRecording_endRecording_canvas_kBytesPerShadow	_kXOffset	_kYOffset_kBlurOffsetoffset
blurRadiusconvertRadiusToSigma	blurSigmatoPaintlerpList_encodeShadowsfromUint8ListfromFilePath_initFromFileencodedbytesPerPixelinstantiateCodec_initEncoded_initRaw_width	_getWidth_height
_getHeight_bytesPerPixel_getBytesPerPixel_instantiateCodecmessagestackS_rectIsValid_rrectIsValid_offsetIsValid_matrix4IsValid_radiusIsValid_scaleAlphaColor	BlendModeFilterQuality	StrokeCap
StrokeJoinPaintingStyleClipPaint
ColorSpaceImageByteFormatPixelFormatImageEventCallbackImage_ImageImageDecoderCallback	FrameInfoCodec_NativeCodecinstantiateImageCodecinstantiateImageCodecFromBufferinstantiateImageCodecWithSize_getDefaultImageSizeTargetImageSizeCallbackTargetImageSizedecodeImageFromList_decodeImageFromListAsyncdecodeImageFromPixelsPathFillTypePathOperationEngineLayer_NativeEngineLayerPath_NativePathTangentPathMetricsPathMetricIterator
PathMetric_PathMeasure	BlurStyle
MaskFilterColorFilter_ColorFilterImageFilter_MatrixImageFilter_GaussianBlurImageFilter_DilateImageFilter_ErodeImageFilter_ComposeImageFilter_ImageFilterShaderTileMode_encodeColorList_encodePointList_encodeTwoPointsGradientImageShaderFragmentProgramFragmentShader
VertexModeVertices	PointModeClipOpCanvas_NativeCanvasPictureEventCallbackPicture_NativePicturePictureRecorder_NativePictureRecorderShadowImmutableBufferImageDescriptor_NativeImageDescriptor	_Callback_Callbacker	_futurizePictureRasterizationExceptionÅçdartuiboolRecthasNaNRRectOffsetdxisNaNdyFloat64ListlengtheverydoublevalueisFiniteRadiusxy	withAlphaalpharoundclampintpragmafromRGBOfromARGBmathpowHSVColormaterialColorstransparentCurveselasticInOutAnimationController	_clampInt_lerpInttoIntredgreenblueclampDoubleoverrideObject	identicalruntimeTypehashCodeStringtoRadixStringpadLeftsrcdstclear	saveLayerrestore	blendModesrcOverdstInsrcOutsrcIndstOutdstATopdstOversrcATopmultiplyscreenoverlaymodulate	hardLight
colorDodge	colorBurncolor	exclusion
difference
luminosityhue	softLight
saturationblurBackdropFilternonelowmediumhighfilterQualitymatrix	drawImagedrawImageRectdrawImageNine	drawAtlas	strokeCapAsquarestrokeWidthbuttdrawPath
drawPoints
strokeJoinstrokeMiterLimitstyle
drawCirclehardEdge	antiAliasantiAliasWithSaveLayerisAntiAliasByteDataListfilledgetInt32_kFakeHostEndiansetInt32indexvaluesfillstroke
getFloat32
setFloat32miterbevel	_TypeNone	_TypeBlur_style_sigmadebugDisposed_validateSamplers	Exception
_debugNamecreator_toNativeColorFilter_toNativeImageFilterfromEnvironmenttoStringStringBufferwritetoStringAsFixed
toByteDataextendedSRGBrawExtendedRgba128
colorSpacevoidwidgets
StackTracecurrent_handlesaddcallMemoryAllocations	_disposedcontainsremoveisEmptydispose
StateErrorformatrawRgbaFuturesRGBUnsupportedErrormaphandle_debugStacktoList__imageNativeFieldWrapperClass1NativeInt32PointerVoidsymbolisLeaf	Uint8Listcallbackencodedbuffer
asByteDataHandleSetgetNextFramecloneDurationimage	CompletersyncdecodeErrorcompleteErrorcompletewidthheightdurationmillisecondsdurationMillisecondsfuturefromUint8ListtargetWidthtargetHeightallowUpscalinggetTargetSizeintrinsicWidthintrinsicHeightinstantiateCodecthenrawrowBytespixelFormatcodec	frameInfofillTypecombinereverseDifferencexor	intersectSceneBuilderclipPath_clonenonZerozero
fromCircle_opextractPathIterablefromDoublelefttoprightbottomBoolradiusrotationlargeArc	clockwiseFloat32List_getValue32matrix4fromLTRBforceClosedgetTangentForOffsetcossinatan2computeMetricslineTomoveToIterableBaseIterator
RangeError_nextContourcurrentContourIndexisClosedcloseaddRectstartWithMoveTonextContour
maskFilter
drawShadowhashcolorFilterfromColorFiltermodelinearToSrgbGammasrgbToLinearGamma_type_listEquals_matrix_color
_blendModehashAll
_kTypeMode_kTypeMatrixfromList_kTypeLinearToSrgbGamma_kTypeSrgbToLinearGammaImageFilteredpushBackdropFilterpushImageFiltersigmaXsigmaYtileModeradiusXradiusYMatrix4	diagonal3ArgumentErrordatainnerFilterinnerouterFilteroutermirrorrepeateddecaldilateerodecomposed_shortDescriptionshaderpaintingGradientLinearGradientRadialGradientBoxDecorationlinearradial	Int32ListiNoSuchMethodError
colorStopsfocalfocalRadiuspi
startAngleendAngle
isNotEmptyUripath
encodeFulltarget	microtask
_fromAssetWeakReferenceMap_initFromAsset	debugNamefragmentShader_uniformFloatCount_samplerCountdrawVertices	trianglestriangleStriptriangleFannew
Uint16ListcolorstextureCoordinatesindicesdrawRawPointsclipRectSceneendRecordingCustomPainterpaintsydoAntiAliasarcTo	ParagraphlayoutParagraphStyleParagraphBuilder	TextAlignParagraphConstraintspointslinespolygonRSTransformscosssintxtyisRecording_canvascullRectlargest_objects_dataclipOpUint32stack_NativeParagraph_needsLayout_paint
addPicturedrawPicture	onDisposeUint64	_recorderonCreate	TextStylenormaloffset
blurRadiusscalelerp_lerpDoubleminshadowIndex_kColorDefaultconvertRadiusToSigma_init_length_initFromFile_initEncodedTttoImageSyncwritelnNativeFieldWrapperClass1CodecEngineLayerPathIterableBaseIteratorImageFilterShaderCanvasPicturePictureRecorderImageDescriptor	Exception∆M{ÛÂpz.‚íhË…=5      	dart:core¿i‘ ¿H∑õE <ÄÜÄ§ÄµÄ∂ÄŒÄÔÅ-ÅFÅzÅ≠ÅÆÅ˚ÇEÇïÇÊÉ6ÉÑÉ’ÑÑÑdÑäÑãÑ™ÑÍÑ˘Ñ˚Ñ¸ÖÖ`ÖoÖqÖrÖóÖÒÜ ÜÜÜ/ÜpÜŒÜ›ÜﬂÜ‡áá]álánáoáõá€á›áﬁàààfà∂ââ-â1âaâeâqâôâ÷ääFäNäRä£äÚãBãnãrã~ãÀåååå-å1åÑå åÿçççEçKçsçôç¿çÂçÎé;éâé∑éΩèèPèuèëè»è…ê	êê\êlêëê∏êﬁê‰ë'ë-ëxëÖë∫ë‹ë˛í íNíOí§í™íœíˆììiìôìüì‚ìËî0înî§î⁄ïïRïSïÅïáïØïµï›ññ*ñOñbñcñúñ¢ñÒóóBóCóvó|óÕóÔòòòMòzò{ò¥ò‚ò„ôôHôIôíô»ôŒöö!öQöUöVöüöÁöÌõ%õKõyõ™õÆõØõˇú,ú2újúÉúµúπú∫ùù9ù?ùwùíù¬ù∆ù«ûûEûKûÉûùûŒû“û”üüNünüéüîü’üŸü⁄†%†+††ù†£†·†ˇ°?°z°∑°Û¢$¢(¢)¢X¢^¢¶¢È¢Ô£9£Ü£≈§§§^§®§Û•?•ç•›¶*¶{¶®¶Æ¶˝ßßRßgß~ßìß¢ß ß“ßﬂßˆ®®'®F®ä® ©©P©[©c©i©m©n©±©˜©˝™I™ê™€´*´u´µ´›¨¨5¨;¨b¨à¨ø¨‹¨Í≠0≠z≠¬≠À≠ËÆÆHÆhÆÖÆóÆ‚Ø1Ø~ØáØçØëØíØﬂØÂ∞∞C∞~∞Ç∞É∞è∞≤∞‘∞Á∞Ì±±-±3±M±n±r±s±±•±¶±≤≤ ≤≤≤6≤:≤á≤—≤≤Ù≥E≥í≥·¥/¥¥ µµµbµ≠µ˛∂J∂ò∂Â∑,∑w∑∆∏∏'∏+∏y∏∆ππbπØ∫ ∫A∫E∫l∫p∫æ∫ˇªPªùªÓº=ºåºßº´ºπºΩΩΩΩ*ΩyΩåΩ“Ω”æææYæ_æºæ≈æ∆øøøZøiøoø™ø∞¿ @¿ @¿ @¿ @R¿ @X¿ @£¿ @¥¿ @∫¿ @¸¿ A¿ A]¿ Ad¿ Ae¿ A¢¿ A®¿ Aˆ¿ BG¿ Bd¿ Bj¿ B∏¿ BÂ¿ BÎ¿ CJ¿ CU¿ CV¿ Cî¿ Cö¿ C√¿ C…¿ D¿ D¿ D|¿ DÇ¿ D—¿ D¸¿ E¿ E¿ EP¿ Eù¿ EÍ¿ E¯¿ E˛¿ F=¿ FC¿ Fê¿ Fÿ¿ FË¿ FÓ¿ G:¿ G@¿ Gù¿ G¶¿ Gß¿ GÙ¿ HB¿ Hå¿ Hí¿ HÃ¿ H“¿ I¿ Iq¿ Iw¿ I√¿ I…¿ J&¿ J/¿ J0¿ J¿ J“¿ K!¿ K'¿ Kg¿ Km¿ K∫¿ L¿ L¿ L^¿ Ld¿ L¬¿ LÃ¿ LÕ¿ M!¿ Mo¿ Mπ¿ Mø¿ M˙¿ N ¿ NR¿ Nû¿ N§¿ NÒ¿ N˜¿ OU¿ O_¿ O`¿ OØ¿ Oœ¿ O’¿ P#¿ P)¿ Py¿ P≈¿ P˘¿ Pˇ¿ QJ¿ Q[¿ Qa¿ Q¿¿ QÀ¿ QÃ¿ R¿ R6¿ R<¿ Rä¿ Rê¿ R‡¿ S'¿ S[¿ Sa¿ S¨¿ SΩ¿ S√¿ T"¿ T-¿ T.¿ T~¿ T≤¿ T∏¿ U¿ U¿ Uf¿ Um¿ Un¿ U≠¿ U≥¿ V¿ VN¿ Vt¿ Vz¿ V»¿ VŒ¿ W*¿ W2¿ W3¿ W}¿ WÉ¿ W“¿ X!¿ X'¿ Xx¿ X°¿ Xß¿ X¯¿ X˛¿ Y^¿ Yd¿ Yt¿ Yz¿ Yº¿ Z¿ Z ¿ Zj¿ ZÅ¿ Zç¿ Zé¿ Z÷¿ Z◊¿ ["¿ [H¿ [N¿ [ö¿ [Á¿ \¿ \¿ \m¿ \π¿ \ﬂ¿ \Â¿ ]5¿ ]Ñ¿ ]’¿ ]€¿ ^*¿ ^L¿ ^R¿ ^∞¿ ^∂¿ ^∆¿ ^Ã¿ _¿ _-¿ _u¿ _ë¿ _€¿ _Ú¿ `¿ `¿ `_¿ `é¿ `î¿ `Â¿ a3¿ aÑ¿ a£¿ a©¿ aı¿ bB¿ bq¿ bw¿ b÷¿ b‹¿ bÏ¿ bÚ¿ c+¿ cr¿ c¬¿ cÌ¿ c¯¿ c˘¿ dG¿ df¿ dl¿ dµ¿ d∆¿ dÃ¿ e*¿ e4¿ e5¿ eÑ¿ e£¿ e©¿ eÚ¿ f¿ f	¿ fh¿ fs¿ ft¿ fØ¿ fµ¿ g¿ gN¿ g}¿ gÉ¿ gÂ¿ gÛ¿ gÙ¿ hG¿ hM¿ hô¿ hÊ¿ i¿ i¿ i|¿ iâ¿ iä¿ i”¿ i˝¿ j¿ jS¿ jú¿ jÍ¿ k¿ k¿ ki¿ k∂¿ kÂ¿ kÎ¿ lL¿ lR¿ lb¿ lh¿ l°¿ lË¿ m7¿ mc¿ mp¿ mq¿ mø¿ m◊¿ m›¿ n¿ n%¿ nÜ¿ nå¿ nú¿ n¢¿ n€¿ nË¿ nÈ¿ o2¿ o8¿ oá¿ oû¿ o§¿ oÌ¿ o˛¿ p¿ p<¿ pB¿ p§¿ p≤¿ p≥¿ pˇ¿ q¿ q¿ qb¿ qy¿ q¿ q»¿ qŸ¿ qﬂ¿ r¿ r¿ r~¿ rã¿ rå¿ r⁄¿ rÛ¿ r˘¿ sH¿ só¿ sù¿ sÈ¿ t6¿ t~¿ tÑ¿ t”¿ t˜¿ t˝¿ u]¿ uÜ¿ uá¿ uÿ¿ uÒ¿ u˜¿ v@¿ vF¿ vè¿ vﬂ¿ w¿ w¿ wf¿ wl¿ w|¿ wÇ¿ w“¿ w˚¿ xJ¿ x{¿ xÇ¿ xÉ¿ x‘¿ xÌ¿ xÛ¿ y<¿ yå¿ yπ¿ yø¿ z¿ z ¿ z0¿ z6¿ zx¿ z«¿ z›¿ zÎ¿ zÏ¿ {=¿ {V¿ {\¿ {•¿ {´¿ {Ù¿ |D¿ |y¿ |¿ |‹¿ |‚¿ |Ú¿ |¯¿ }.¿ }|¿ } ¿ }”¿ }‘¿ ~%¿ ~>¿ ~D¿ ~ç¿ ~›¿ 
¿ ¿ r¿ x¿ à¿ é¿ ›¿ Û¿ Ä>¿ ÄW¿ Äe¿ Äg¿ Äh¿ Ä¿¿ Ä˚¿ Äˇ¿ Å\¿ Å£¿ Åß¿ Å¸¿ ÇP¿ Ç¶¿ Ç˙¿ Ç˛¿ ÉL¿ Éá¿ Éã¿ É‰¿ ÉË¿ Ñ5¿ Ñ}¿ Ñú¿ Ñ†¿ ÑÆ¿ Ñ≤¿ Ñ˝¿ Ö6¿ ÖL¿ Öi¿ ÖÑ¿ Ö£¿ Ö¬¿ Ö›¿ ÖÚ¿ ÜH¿ Üp¿ Üq¿ Üµ¿ Üª¿ á¿ áF¿ áN¿ áO¿ áá¿ áç¿ áœ¿ á˛¿ à¿ à¿ àP¿ àx¿ à~¿ à…¿ â¿ â_¿ â™¿ â∞¿ â‡¿ â¿ âˆ¿ äE¿ äy¿ äé¿ äò¿ äô¿ äÈ¿ äˆ¿ ä¸¿ ãJ¿ ãá¿ ãç¿ ã¥¿ ã∫¿ å¿ å\¿ åß¿ å≠¿ å⁄¿ å‚¿ å‰¿ åÂ¿ ç	¿ ç¿ ç¿ ç¿ çT¿ çó¿ ç”¿ ç‰¿ é$¿ é*¿ é{¿ éﬂ¿ éÂ¿ è3¿ èe¿ èm¿ èn¿ è©¿ èØ¿ è˘¿ êI¿ êπ¿ êø¿ ë¿ ë4¿ ë=¿ ë>¿ ëÅ¿ ë∆¿ ëÎ¿ ëÒ¿ í@¿ í±¿ í∑¿ ì¿ ì,¿ ì2¿ ìÄ¿ ì†¿ ì™¿ ì¨¿ ì≠¿ ì◊¿ ì€¿ î(¿ îl¿ îp¿ î~¿ îÇ¿ îŒ¿ î⁄¿ ï¿ ïR¿ ïd¿ ïö¿ ï†¿ ñ	¿ ñ¿ ñW¿ ñß¿ ñ≥¿ ñπ¿ ñ…¿ ñœ¿ ó¿ ó.¿ ó¿ ó∏¿ ó¡¿ ó¬¿ ó˜¿ ó˝¿ òd¿ òj¿ ò≤¿ ô¿ ô¿ ô¿ ô$¿ ô*¿ ôx¿ ôâ¿ ôí¿ ôì¿ ô·¿ ö¿ ö¿ öÄ¿ öÜ¿ öŒ¿ õ¿ õ*¿ õ0¿ õ@¿ õF¿ õî¿ õ•¿ õÆ¿ õ∞¿ õ±¿ õÎ¿ õÔ¿ ú¿ úB¿ úW¿ ú¢¿ ú∞¿ ú±¿ ú˜¿ ù=¿ ùd¿ ùl¿ ùm¿ ù±¿ ù˜¿ û>¿ û|¿ ûÜ¿ ûà¿ ûâ¿ û∏¿ ûƒ¿ û⁄¿ û‡¿ ü+¿ ü|¿ üÇ¿ üŒ¿ ü‰¿ †1¿ †ä¿ †ﬂ¿ †¯¿ ° ¿ °¿ °-¿ °3¿ °å¿ °Ω¿ °√¿ ¢¿ ¢	¿ ¢a¿ ¢º¿ ¢¬¿ ¢“¿ ¢ÿ¿ £4¿ £X¿ £d¿ £e¿ £Ñ¿ £ä¿ £÷¿ £‹¿ §/¿ §5¿ §|¿ §Ç¿ §◊¿ §ˆ¿ •M¿ •S¿ •c¿ •i¿ •±¿ •¸¿ ¶-¿ ¶ä¿ ¶ó¿ ¶ò¿ ¶‰¿ ¶Í¿ ß=¿ ßè¿ ß∏¿ ßæ¿ ®¿ ®]¿ ®Ø¿ ©¿ ©¿ ©W¿ ©ß¿ ©ı¿ ™E¿ ™ã¿ ™ë¿ ™°¿ ™ß¿ ™ı¿ ´¿ ´¿ ´¿ ´T¿ ´X¿ ´û¿ ´Ω¿ ´À¿ ¨¿ ¨)¿ ¨5¿ ¨P¿ ¨f¿ ¨l¿ ¨p¿ ¨q¿ ¨†¿ ¨•¿ ¨¿ ≠;¿ ≠ä¿ ≠ÿ¿ Æ'¿ Æ,¿ Æ|¿ ÆÕ¿ Æﬁ¿ Æ„¿ Ø+¿ Ø,¿ ØM¿ Øi¿ Øù¿ Øû¿ Ø…¿ ØÓ¿ ∞¿ ∞<¿ ∞g¿ ∞ê¿ ∞∫¿ ∞Í¿ ±¿ ±A¿ ±u¿ ±•¿ ±—¿ ±¯¿ ±˘¿ ≤;¿ ≤q¿ ≤Ø¿ ≤Â¿ ≥'¿ ≥e¿ ≥•¿ ≥Ò¿ ¥7¿ ¥w¿ ¥…¿ µ¿ µU¿ µç¿ µŒ¿ µ˜¿ µ¯¿ ∂<¿ ∂]¿ ∂y¿ ∂î¿ ∂ï¿ ∂√¿ ∑¿ ∑
¿ ∑¿ ∑1¿ ∑\¿ ∑á¿ ∑€¿ ∑‹¿ ∏"¿ ∏0¿ ∏6¿ ∏N¿ ∏g¿ ∏Æ¿ ∏≤¿ ∏“¿ π"¿ πL¿ πs¿ π∑¿ πª¿ πº¿ πÙ¿ ∫$¿ ∫%¿ ∫^¿ ∫d¿ ∫Ñ¿ ∫ä¿ ∫ö¿ ∫†¿ ∫Ê¿ ª¿ ª_¿ ªe¿ ª≠¿ ª¬¿ ª÷¿ º¿ ºK¿ ºO¿ ºj¿ º†¿ ºﬁ¿ º‚¿ º„¿ Ω¿ Ω\¿ Ω]¿ Ω©¿ ΩØ¿ ΩÒ¿ æB¿ æì¿ æ¥¿ æ∫¿ ø¿ ø(¿ ø.¿ øU¿ ø[¿ øk¿ øq¿ ø¿¿ øÙ¿ ¿>¿ ¿T¿ ¿p¿ ¿Ω¿ ¿¯¿ ¿¸¿ ¡¿ ¡Y¿ ¡õ¿ ¡ü¿ ¡†¿ ¡‰¿ ¡Í¿ ¬¿ ¬.¿ ¬Ä¿ ¬Ñ¿ ¬ß¿ ¬Ã¿ √
¿ √¿ √¿ √I¿ √ò¿ √’¿ √€¿ ƒ¿ ƒ3¿ ƒw¿ ƒ{¿ ƒù¿ ƒø¿ ≈¿ ≈	¿ ≈
¿ ≈K¿ ≈{¿ ≈Å¿ ≈≥¿ ≈œ¿ ∆!¿ ∆%¿ ∆H¿ ∆m¿ ∆Ø¿ ∆≥¿ ∆¥¿ ∆ı¿ ∆˚¿ «L¿ «ó¿ «ù¿ «◊¿ «›¿ «˚¿ »¿ »j¿ »p¿ »◊¿ »›¿ …D¿ …J¿ …ñ¿ …Á¿ …Û¿ …˘¿  	¿  ¿  ^¿  ä¿  ”¿ À¿ À0¿ ÀÑ¿ Àà¿ À≠¿ À“¿ Ã¿ Ã¿ Ã¿ ÃR¿ Ãâ¿ Ãä¿ Ã’¿ Õ#¿ Õn¿ Õª¿ Œ	¿ Œ¿ ŒT¿ ŒZ¿ Œ®¿ ŒÃ¿ Œ“¿ œ;¿ œA¿ œ™¿ œ∞¿ –¿ –¿ –k¿ –º¿ –»¿ –Œ¿ –ﬁ¿ –‰¿ —.¿ —I¿ —í¿ —≤¿ —˚¿ —ˇ¿ “&¿ “d¿ “Ø¿ “≥¿ “¥¿ ”¿ ”B¿ ”H¿ ”l¿ ”ã¿ ”œ¿ ”¿ ‘¿ ‘&¿ ‘F¿ ‘°¿ ‘Ë¿ ‘Û¿ ‘˘¿ ’
¿ ’¿ ’4¿ ’M¿ ’ü¿ ’Á¿ ÷/¿ ÷<¿ ÷â¿ ÷ª¿ ◊¿ ◊f¿ ◊∑¿ ◊Ω¿ ◊¡¿ ◊¬¿ ÿ¿ ÿh¿ ÿ¥¿ ÿ∫¿ ÿ‚¿ Ÿ/¿ ŸS¿ Ÿ≠¿ Ÿ±¿ Ÿ‹¿ ⁄¿ ⁄G¿ ⁄K¿ ⁄L¿ ⁄Ü¿ ⁄å¿ ⁄¬¿ ⁄»¿ ⁄ÿ¿ ⁄ﬁ¿ €¿ €R¿ €Ñ¿ €Ã¿ €„¿ ‹¿ ‹¿ ‹5¿ ‹E¿ ‹S¿ ‹Ç¿ ‹π¿ ‹¬¿ ‹’¿ ‹ﬂ¿ ‹Ô¿ ›¿ ›>¿ ›û¿ ›®¿ ›∞¿ ›√¿ ›Õ¿ ﬁ¿ ﬁ	¿ ﬁ
¿ ﬁQ¿ ﬁc¿ ﬁi¿ ﬁé¿ ﬁî¿ ﬁÂ¿ ﬂ¿ ﬂ]¿ ﬂ¿ ﬂÉ¿ ﬂ´¿ ﬂÒ¿ ‡¿ ‡/¿ ‡]¿ ‡e¿ ‡r¿ ‡∏¿ ‡æ¿ ‡¬¿ ‡√¿ ‡˛¿ ·¿ ·K¿ ·e¿ ·k¿ ·y¿ ·¶¿ ·¿¿ ·“¿ ·Ï¿ ‚<¿ ‚G¿ ‚O¿ ‚Y¿ ‚_¿ ‚o¿ ‚u¿ ‚∞¿ ‚—¿ „(¿ „J¿ „N¿ „v¿ „è¿ „≠¿ „€¿ „„¿ „¿ ‰1¿ ‰á¿ ‰≤¿ ‰ˆ¿ ‰˛¿ Â¿ Â¿ Â	¿ ÂH¿ ÂN¿ Âö¿ Â‰¿ Ê¿ Ê/¿ Êv¿ Êz¿ Êõ¿ ÊÂ¿ ÊÈ¿ ÊÍ¿ Êˇ¿ ÁA¿ ÁE¿ Áa¿ Á¶¿ Á™¿ Á´¿ Á„¿ ÁÈ¿ Ë5¿ Ë{¿ ËÆ¿ Ë¥¿ Ë˙¿ È¿ È!¿ Èn¿ È∫¿ È›¿ È„¿ Í*¿ Íx¿ Íü¿ Í†¿ Í¨¿ Í¬¿ Í˚¿ Î¿ Î ¿ ÎP¿ Îk¿ Îá¿ Î∞¿ ÎŒ¿ ÎÓ¿ Ï*¿ Ï9¿ Ï\¿ Ïd¿ Ïç¿ Ï≤¿ Ï∫¿ ÏÊ¿ Ì#¿ Ìx¿ ÌÇ¿ Ìë¿ Ì∑¿ Ìø¿ Ì◊¿ Ì›¿ Ì¸¿ Ó-¿ ÓE¿ ÓK¿ Ó{¿ Ó£¿ Óª¿ Ó¡¿ ÓÚ¿ Ô¿ Ô6¿ Ô<¿ Ô[¿ Ôò¿ Ô∞¿ Ô∂¿ Ô‘¿ ¿ '¿ -¿ \¿ ù¿ µ¿ ª¿ ’¿ Ò¿ Ò ¿ Ò&¿ ÒE¿ ÒÇ¿ Òö¿ Ò†¿ Ò∏¿ ÒÒ¿ Ò˜¿ Ú
¿ Ú>¿ ÚD¿ Ú[¿ Úy¿ Ú}¿ Ú¿ ÚÄ¿ ÚÀ¿ Úœ¿ Û¿ Û\¿ Ûß¿ ÛŸ¿ Û›¿ Ù¿ Ù¿ ÙL¿ Ù^¿ Ùz¿ ÙÄ¿ ÙÕ¿ Ù˘¿ Ùˇ¿ ı2¿ ı:¿ ıá¿ ı’¿ ˆ¿ ˆF¿ ˆV¿ ˆX¿ ˆY¿ ˆõ¿ ˆ≥¿ ˜¿ ˜N¿ ˜ñ¿ ˜‡¿ ˜˜¿ ¯¿ ¯¿ ¯r¿ ¯}¿ ¯~¿ ¯û¿ ¯§¿ ¯˝¿ ˘¿ ˘¿ ˘.¿ ˘4¿ ˘Ñ¿ ˘ø¿ ˘–¿ ˘—¿ ˘˜¿ ˘˝¿ ˙I¿ ˙v¿ ˙|¿ ˙ë¿ ˙ó¿ ˙•¿ ˙√¿ ˙„¿ ˙È¿ ˚1¿ ˚O¿ ˚•¿ ˚Á¿ ¸¿ ¸"¿ ¸<¿ ¸V¿ ¸p¿ ¸{¿ ¸É¿ ¸ç¿ ¸£¿ ¸§¿ ¸∂¿ ¸º¿ ˝¿ ˝Z¿ ˝¶¿ ˝Û¿ ˛<¿ ˛B¿ ˛ì¿ ˛ü¿ ˛•¿ ˛µ¿ ˛ª¿ ˇ¿ ˇ_¿ ˇf¿ ˇh¿ ˇi¿ ˇ®¿ ˇª¿ 	¿ Y¿ å¿ ò¿ ô¿ Ë¿7¿j¿v¿w¿«¿¿]¿ò¿ß¿©¿™¿÷¿¿¿F¿J¿ä¿é¿‹¿Ù¿¯¿G¿ñ¿›¿%¿s¿Å¿Ö¿—¿ ¿g¿k¿y¿}¿Î¿:¿`¿Ø¿Ω¿Ô¿ˇ¿'¿:¿D¿c¿}¿Å¿Ç¿£¿ø¿÷¿◊¿	¿	¿	f¿	®¿	…¿	¿	Ò¿
0¿
6¿
Å¿
ƒ¿
Â¿¿¿)¿*¿n¿Å¿Ç¿ƒ¿ÿ¿Ÿ¿Û¿@¿q¿w¿»¿„¿È¿4¿¿Œ¿Ó¿¿¿I¿u¿ã¿¬¿◊¿˙¿¿¿¿¿a¿g¿µ¿À¿Ê¿˙¿
¿&¿9¿C¿±¿µ¿∂¿Î¿Ò¿=¿M¿S¿ò¿Á¿.¿4¿Å¿ö¿Í¿9¿É¿œ¿$¿Q¿¿É¿Ñ¿¿¿∆¿¿a¿ç¿ì¿‚¿0¿c¿Ø¿‹¿˙¿-¿L¿Z¿z¿à¿∞¿ø¿¿¿¿¿i¿ã¿ë¿—¿¿%¿5¿â¿ú¿¶¿π¿Ω¿æ¿Ô¿ı¿D¿ì¿‰¿0¿|¿ ¿¿4¿:¿à¿±¿∑¿ˇ¿P¿f¿l¿¢¿®¿∂¿—¿Ò¿	¿¿G¿Ü¿•¿Ô¿ ¿¿2¿Ç¿–¿ˆ¿ ,¿ 7¿ X¿ `¿ f¿ à¿ º¿!¿!2¿!u¿!π¿!ˆ¿"¿"¿"Q¿"Å¿"á¿"§¿"æ¿"ƒ¿"Ê¿#¿#¿#'¿#-¿#I¿#l¿#r¿#ç¿#ì¿#∂¿#Ô¿#˘¿#ˇ¿$*¿$2¿$<¿$B¿$á¿$’¿$˘¿%¿% ¿%8¿%c¿%¥¿&¿&D¿&M¿&S¿&r¿&ù¿&°¿&¢¿&Ó¿'4¿':¿'á¿'—¿(!¿(p¿(∫¿)¿)@¿)A¿)M¿)w¿)y¿)z¿)î¿)…¿*¿*-¿*2¿*Ä¿*¢¿*æ¿*Ã¿*Õ¿+¿+6¿+7¿+á¿+¢¿+£¿+¯¿,.¿,l¿,ú¿,¶¿,Æ¿,≤¿,≥¿,Ô¿-E¿-ë¿-í¿-¨¿-ø¿-◊¿-„¿-˚¿.H¿.`¿.™¿.‚¿.È¿.ˇ¿/¿/¿/¿/_¿/Ñ¿/∆¿/‚¿/„¿0¿0¿0S¿0r¿0s¿0¿0Ø¿0±¿0≤¿0‰¿1 ¿1!¿1U¿1Y¿1ï¿1Ø¿1≥¿1˝¿2F¿2î¿2⁄¿3%¿3N¿3R¿3ã¿3è¿3õ¿3ß¿3·¿4"¿4@¿4ç¿4ÿ¿4ı¿5A¿5`¿5Å¿5á¿5è¿5ì¿5©¿5≠¿5π¿5∆¿6 ¿6A¿6Å¿6¿¿7¿7&¿7u¿7Ω¿7ﬁ¿7‰¿7Ï¿7˛¿8H¿8d¿8j¿8®¿8ƒ¿9¿9¿92¿98¿9Ö¿9†¿9°¿9 ¿9–¿:¿:¿:j¿:¿:Å¿:Ç¿:¢¿:¶¿:Ó¿;¿;¿;D¿;a¿;x¿;û¿;¥¿;µ¿;‰¿;Í¿<¿<C¿<^¿<_¿<á¿<ç¿<—¿<◊¿=(¿=.¿=o¿=ü¿=√¿=ƒ¿>¿>7¿>=¿>à¿>≠¿>ø¿>¡¿>¬¿>‹¿?(¿?-¿?v¿?ë¿?ñ¿?œ¿?Ì¿@	¿@¿@¿@8¿@9¿@E¿@Ä¿@Å¿@’¿@ı¿@ˆ¿A¿A¿A"¿Al¿Am¿A∆¿AÎ¿AÏ¿A¯¿B#¿Bk¿B”¿BÓ¿C¿Cr¿C|¿Cµ¿Cƒ¿CÏ¿D(¿Dj¿Dv¿D~¿DÜ¿Dü¿DΩ¿D√¿D‡¿D‰¿DÂ¿E!¿Er¿E¬¿E√¿Eœ¿F¿F,¿F.¿F/¿FR¿FV¿F•¿Fı¿GC¿Gf¿Gj¿Gº¿H
¿H%¿He¿Hä¿H€¿I!¿Im¿IΩ¿I–¿I‘¿J¿Ji¿Jπ¿K¿KT¿K•¿KÙ¿L<¿Lx¿L|¿L∆¿M¿M`¿Mú¿M†¿MÌ¿M˘¿N¿N2¿NF¿N[¿Ny¿NÑ¿N–¿N˙¿O¿O$¿OD¿Oh¿Om¿Oo¿Op¿Oì¿Oó¿OÊ¿P6¿PÑ¿Pß¿P´¿Pˇ¿QM¿QÜ¿Qä¿Q‹¿R,¿R8¿R<¿Rá¿R—¿S!¿Sp¿Sº¿T¿T\¿T§¿T‡¿T‰¿U.¿Ux¿U»¿V¿V¿VU¿Va¿Ve¿Vä¿Vé¿Vﬁ¿W)¿Wt¿Wú¿WÀ¿WÁ¿W˚¿X¿X.¿X3¿X[¿Xg¿X¶¿X√¿Y¿Y/¿Y9¿YÄ¿Y™¿Y¥¿Yº¿Z¿Z¿Z¿Z¿Z¿Z6¿Z:¿ZÖ¿Zâ¿Z÷¿[%¿[d¿[h¿[±¿\ ¿\¿\¿\h¿\µ¿]¿]B¿]ë¿]·¿^1¿^Å¿^∏¿^º¿_¿_P¿_Ñ¿_à¿_’¿_·¿_Â¿`
¿`¿`^¿`©¿`Ù¿a¿aI¿ae¿aè¿aö¿aƒ¿b¿b¿bs¿b≤¿bÛ¿c¿c@¿cg¿cn¿c|¿cí¿cñ¿cò¿cô¿cÈ¿d¿d¿d¿d]¿dÜ¿dä¿dò¿dú¿dÊ¿e¿eC¿eY¿ep¿es¿et¿eπ¿eΩ¿eÀ¿eœ¿f¿fY¿fÅ¿fô¿f≈¿fÀ¿g¿g2¿ge¿gë¿gø¿g¿¿gÓ¿gÙ¿hC¿hì¿h·¿i.¿iY¿i_¿iï¿i©¿i™¿iŸ¿iﬂ¿j/¿j~¿jÀ¿k¿kC¿kI¿k¿kî¿kï¿k°¿k›¿kﬂ¿k‡¿l)¿l-¿l|¿l ¿m¿m[¿mà¿mä¿mã¿mÈ¿n"¿n\¿ny¿n{¿n|¿nπ¿nΩ¿o¿oV¿on¿or¿oæ¿p¿pN¿pR¿pù¿pÁ¿q7¿qÜ¿q“¿r#¿rr¿r∫¿rˆ¿r˙¿sD¿sé¿sﬁ¿t¿t6¿tJ¿tW¿te¿t{¿tû¿tØ¿t√¿tÿ¿tˆ¿t˚¿u¿uL¿uP¿un¿u§¿u®¿u©¿u—¿uˆ¿v4¿vD¿vZ¿vr¿vé¿v´¿v¥¿vµ¿v“¿w¿wB¿wL¿wï¿w¡¿wÀ¿w”¿w‘¿wÂ¿x ¿x$¿xJ¿xT¿xr¿x∂¿x—¿xÌ¿x¯¿y¿y:¿yZ¿y[¿yá¿yì¿yô¿yõ¿yú¿yÈ¿y˘¿y˝¿z4¿zH¿zí¿zò¿zÈ¿{8¿{á¿{≤¿{∏¿{¿{˚¿{¸¿|>¿|D¿|ï¿|Ê¿|Ï¿}%¿}0¿}2¿}3¿}W¿}[¿}i¿}m¿}º¿}‚¿}˜¿~+¿~1¿~¿~ ¿¿¿!¿'¿v¿ê¿û¿Ì¿Ä¿Ä¿Äg¿Äµ¿Äœ¿Ä’¿ÄÂ¿Å¿Å)¿Åt¿Åz¿Å»¿Ç¿ÇH¿ÇQ¿Çú¿Ç’¿Ç€¿É)¿É}¿ÉÉ¿Éì¿É–¿É◊¿Ñ¿Ñ¿Ñ_¿Ñ™¿ÑÎ¿ÑÒ¿Ö¿Ö¿ÖP¿Öi¿Ö~¿ÖÄ¿ÖÅ¿Ö“¿ÖÔ¿Ü?¿Üb¿Üh¿Ü∏¿á¿áR¿áõ¿áµ¿áª¿à
¿àV¿àê¿àñ¿à·¿â¿â¿â¿â¿â5¿âç¿â◊¿âÛ¿ä¿ä)¿ä*¿ä6¿ä~¿äô¿äõ¿äú¿äŒ¿ä“¿ã¿ã¿ã^¿ãù¿ã±¿ãµ¿ã˚¿å&¿å*¿åi¿å¨¿å‘¿åÿ¿ç¿çU¿çk¿çã¿çå¿ç¥¿ç∫¿é¿éV¿éy¿é≠¿é›¿éÙ¿é¯¿é˘¿è7¿è=¿èÇ¿èü¿è√¿èƒ¿è˘¿ê¿ê¿êe¿êí¿êì¿ê⁄¿êÁ¿ë
¿ë¿ëR¿ëÑ¿ë±¿ë≤¿ëı¿í5¿íD¿íJ¿íª¿ì0¿ìv¿ìw¿ì∫¿î¿îF¿îS¿î°¿î¢¿îÁ¿ï.¿ï=¿ïC¿ï∞¿ñ!¿ñs¿ñt¿ñπ¿ó ¿óE¿óZ¿ó¥¿óµ¿ó˚¿ò?¿òÑ¿òÀ¿ò¿òˆ¿ôc¿ô‘¿ö¿ö¿öa¿ö•¿öÍ¿õ1¿õw¿õü¿õÌ¿õÓ¿ú1¿úS¿úY¿úú¿ú¿¿ú∆¿ù¿ùM¿ùî¿ùÿ¿û¿ûc¿ûë¿ûó¿û‹¿ü¿üc¿üd¿ü≥¿ü¯¿ü˛¿†M¿†ñ¿†⁄¿°¿°¿°L¿°õ¿°Á¿°Ì¿¢¿¢1¿¢L¿¢g¿¢Ç¿¢à¿¢â¿¢ÿ¿£¿£#¿£W¿£]¿£¨¿£˙¿§=¿§á¿§ç¿§–¿•¿•k¿•Ç¿•ù¿•∑¿•ÿ¿•Û¿¶¿¶)¿¶/¿¶0¿¶w¿¶é¿¶©¿¶™¿¶Ï¿ß¿ß ¿ßr¿ß¿¿ß€¿ß‹¿®$¿®a¿®†¿®·¿©'¿©k¿©Ø¿©ª¿©¡¿™-¿™ù¿™£¿´¿´á¿´«¿´»¿¨¿¨(¿¨.¿¨}¿¨¢¿¨®¿¨Ô¿≠#¿≠$¿≠f¿≠©¿≠π¿≠◊¿≠ÿ¿Æ¿Æ$¿Æq¿Æø¿ÆÍ¿Ø,¿Ø-¿Øs¿Ø≤¿ØÔ¿Øı¿∞B¿∞ì¿∞æ¿±¿±¿±M¿±é¿±û¿±ü¿±‰¿≤(¿≤C¿≤S¿≤T¿≤§¿≤Ò¿≥¿≥¿≥^¿≥d¿≥©¿≥»¿≥…¿¥	¿¥8¿¥U¿¥V¿¥ñ¿¥∆¿¥Ì¿¥Ó¿µ#¿µ)¿µy¿µ∆¿∂¿∂P¿∂V¿∂ß¿∂ˆ¿∑H¿∑ï¿∑ﬂ¿∏-¿∏;¿∏Ä¿∏î¿∏ï¿∏·¿∏Ù¿∏˙¿πJ¿πò¿π“¿∫¿∫G¿∫ò¿∫´¿∫±¿ª(¿ª,¿ª-¿ª|¿ª≠¿ª≥¿ªˇ¿ºG¿ºñ¿ºÂ¿Ω/¿Ωg¿Ωm¿Ω∏¿æ¿æN¿æÇ¿æà¿æÿ¿ø%¿øu¿ø∏¿¿¿¿R¿¿°¿¿Ò¿¡@¿¡F¿¡î¿¡„¿¬¿¬¿¬n¿¬π¿¬Û¿¬ı¿¬ˆ¿√¿√Z¿√Ç¿√û¿√¬¿√√¿ƒ¿ƒV¿ƒi¿ƒj¿ƒ£¿ƒ√¿ƒƒ¿≈¿≈1¿≈2¿≈>¿≈Ç¿≈é¿≈œ¿≈–¿∆$¿∆C¿∆D¿∆û¿∆ ¿∆À¿∆◊¿«5¿«a¿«b¿«n¿«‘¿»
¿»¿»¿»u¿»°¿»¢¿»Æ¿…¿…J¿…K¿…W¿…–¿ ¿  ¿ ,¿ ≠¿ ÿ¿À¿À¿À¿Àó¿ÀÚ¿ÀÛ¿Àˇ¿ÃÜ¿ÃÈ¿ÃÍ¿Ãˆ¿Õm¿Õº¿ÕΩ¿Õ…¿ŒH¿Œü¿Œ†¿Œ¨¿Œ˛¿œ¿œ}¿œÅ¿œÇ¿–¿–ã¿–å¿–ò¿–ª¿–‹¿–˜¿—¿—-¿—4¿—X¿—|¿—÷¿—⁄¿—€¿“a¿“Ó¿“Ô¿“˚¿”¿”0¿”Q¿”l¿”á¿”¢¿”©¿”“¿”ˆ¿‘b¿‘f¿‘g¿‘ı¿’¿’0¿’F¿’\¿’r¿’â¿’û¿’µ¿’∂¿’¬¿’ﬁ¿’˛¿÷:¿÷>¿÷?¿÷Æ¿÷˛¿÷ˇ¿◊¿◊'¿◊G¿◊É¿◊á¿◊à¿◊˜¿ÿG¿ÿH¿ÿT¿ÿï¿ÿµ¿Ÿ¿Ÿ¿Ÿ¿Ÿã¿⁄ ¿⁄¿⁄¿⁄B¿⁄t¿⁄x¿⁄y¿⁄À¿€¿€	¿€¿€4¿€V¿€z¿€~¿€¿€…¿€˜¿€¯¿‹¿‹G¿‹k¿‹Ü¿‹Æ¿‹¸¿›	¿›D¿›J¿›N¿›O¿›Ø¿›Ò¿›Ú¿ﬁd¿ﬁƒ¿ﬁ≈¿ﬁ—¿ﬂ¿ﬂ?¿ﬂZ¿ﬂÇ¿ﬂ÷¿ﬂ„¿‡%¿‡+¿‡/¿‡0¿‡ó¿‡‡¿‡·¿·Y¿·ø¿·¿¿·Ã¿‚¿‚2¿‚3¿‚?¿‚å¿‚•¿‚¶¿‚≤¿‚“¿‚ı¿„¿„#¿„$¿„Ñ¿„≥¿„¥¿„¿¿„ﬁ¿‰¿‰0¿‰X¿‰i¿‰m¿‰n¿‰≈¿Â¿Â¿Â¿Â6¿Â\¿Âä¿Â©¿Â∫¿Âæ¿Âø¿Ê¿ÊQ¿ÊR¿Ê^¿Ês¿Êû¿Ê‹¿Ê‡¿Ê·¿Á&¿ÁK¿ÁL¿Á≠¿Á˜¿Á¯¿Ë¿Ë?¿Ël¿Ëp¿Ër¿Ës¿Ëµ¿Ëπ¿Ë«¿È%¿È5¿Èf¿Èl¿Èí¿Èø¿È¿¿Í¿Í¿Í`¿Íå¿Í…¿Î¿Î¿Î¿Î5¿Î;¿Îé¿Î“¿ÎÎ¿ÎÏ¿Ï¿Ï¿Ïp¿Ï¬¿Ïﬁ¿Ïı¿Ïˆ¿Ì&¿Ì,¿Ì|¿ÌÀ¿ÌÁ¿ÌÌ¿Ó;¿Óä¿ÓŸ¿Ô'¿Ô8¿Ô}¿Ô∂¿Ô∏¿Ôπ¿¿¿V¿¢¿Ë¿Ï¿Ò2¿Ò6¿ÒÇ¿Ò—¿ÒÔ¿ÒÛ¿Ú=¿Úç¿ÚÆ¿ÚÓ¿Û¿Ûs¿Ût¿Ûú¿Ûù¿Û©¿Û€¿Û›¿Ûﬁ¿Ù-¿ÙG¿ÙÇ¿Ù≠¿ÙÆ¿Ù…¿ÙÏ¿ÙÌ¿Ù˘¿ı¿ıG¿ıh¿ıÄ¿ı„¿ˆ?¿ˆ≥¿ˆº¿ˆ¬¿ˆ‹¿ˆ‡¿ˆ·¿ˆÌ¿˜¿˜(¿˜X¿˜k¿˜q¿˜â¿˜õ¿˜ü¿˜°¿˜¢¿˜·¿˜Â¿¯-¿¯x¿¯∆¿¯Í¿¯Ó¿˘<¿˘ã¿˘◊¿˙'¿˙u¿˙É¿˙ñ¿˙¥¿˙Ú¿˚4¿˚g¿˚h¿˚û¿˚§¿˚Ì¿¸7¿¸Ä¿¸ó¿¸ò¿¸Ω¿¸√¿˝¿˝W¿˝ß¿˝∆¿˝›¿˝ﬁ¿˛	¿˛¿˛_¿˛¶¿˛Ù¿ˇC¿ˇ|¿ˇÇ¿ˇ–¿  ¿ o¿ ®¿ ¬¿ √¿ ‚¿ „¿3¿Z¿`¿Ø¿¸¿¿¿O¿U¿õ¿Õ¿¿¿¿\¿b¿§¿Ë¿6¿ì¿ó¿ò¿§¿¿¿¿J¿¿§¿®¿©¿˛¿@¿A¿e¿€¿˝¿¿¿c¿ê¿ë¿’¿¿S¿ñ¿—¿Ì¿	 ¿	¿	#¿	I¿	n¿	w¿	}¿	Å¿	Ç¿	›¿
#¿
$¿
c¿
ä¿ ¿.¿q¿Ç¿Ü¿á¿˜¿e¿f¿ä¿ ¿$¿(¿)¿á¿¥¿µ¿‡¿Â¿:¿d¿|¿®¿∏¿’¿€¿Ï¿¿Ò¿K¿q¿r¿æ¿ƒ¿¿%¿'¿(¿]¿ô¿™¿‚¿„¿0¿s¿}¿~¿Ã¿¿F¿O¿P¿ù¿Ó¿1¿:¿;¿ã¿ô¿¢¿§¿•¿Ú¿B¿T¿X¿©¿º¿¿¿A¿G¿ò¿û¿Ì¿;¿ã¿ú¿¢¿Ò¿˜¿¿#¿3¿9¿Ü¿ü¿∞¿¡¿∆¿«¿·¿¯¿˘¿?¿ä¿¥¿Í¿Î¿˜¿¿9¿[¿~¿Ç¿É¿è¿¬¿√¿œ¿ ¿"¿#¿t¿√¿¿]¿é¿í¿€¿Ë¿¿`¿±¿ı¿˚¿L¿ö¿«¿¿¿:¿R¿n¿o¿Ω¿¿	¿V¿~¿Ñ¿∑¿Í¿ ¿ P¿ É¿ â¿ ÿ¿!$¿!*¿!8¿!x¿!è¿!¶¿!Ω¿!‘¿!ﬁ¿!Ë¿!Ó¿" ¿"¿"'¿"-¿";¿"y¿"ï¿"±¿"Õ¿"È¿"Û¿"˝¿#¿#ä¿#ê¿#û¿#€¿#˛¿$!¿$D¿$g¿$q¿${¿$Å¿%
¿%¿%¿%_¿%Ö¿%´¿%—¿%˜¿&¿&¿&;¿&R¿&m¿&á¿&•¿&¶¿&Ú¿'¿'*¿'A¿'\¿'t¿'ù¿'û¿'Ï¿(¿(/¿(F¿(a¿(y¿(¢¿(£¿(∫¿(Ÿ¿(¯¿)¿)¿)<¿)q¿)µ¿)˛¿*G¿*H¿*`¿*l¿*π¿*∫¿*„¿*¯¿+¿+C¿+Z¿+d¿+å¿+•¿+ƒ¿+€¿+Â¿,2¿,\¿,Ä¿,µ¿,Ÿ¿-¿-¿-_¿-e¿-i¿-j¿-v¿-ô¿-≈¿-Ÿ¿-ﬂ¿-ˇ¿.¿.V¿.x¿.£¿.ß¿.®¿.¥¿/%¿/&¿/2¿/S¿/h¿/¿/∏¿/—¿0 ¿0$¿0V¿0z¿0¨¿0ª¿0‡¿0Ê¿0Í¿0Î¿0˜¿1¿1"¿19¿1r¿1ã¿1∫¿1ﬁ¿2¿24¿2f¿2u¿3¿3¿3¿3¿3¿3\¿3`¿3∞¿3˚¿4M¿4c¿4û¿4¿¿4¯¿5¿5M¿5Q¿5R¿5v¿5∞¿5ƒ¿5˝¿6¿60¿6u¿6â¿6ß¿6´¿6¨¿6€¿7 ¿74¿7R¿7V¿7W¿7•¿7À¿7Ë¿7È¿8)¿8I¿8J¿8Ø¿8‰¿8Â¿98¿9i¿9j¿9Œ¿9¯¿9˘¿:]¿:á¿:â¿:ä¿:Ω¿:¡¿:œ¿:”¿;"¿;o¿;æ¿;Ê¿<2¿<]¿<z¿<Ã¿<˘¿<˙¿=6¿=•¿=˛¿>¿>¿>P¿>ñ¿>Â¿?(¿?,¿?-¿?q¿?√¿@¿@S¿@W¿@X¿@ú¿@¢¿@¿A:¿Al¿A∏¿Aÿ¿B¿B¿B~¿BÇ¿BÉ¿BÕ¿B”¿C"¿CY¿C~¿C⁄¿D"¿D&¿D'¿Dx¿D≈¿DÏ¿DÌ¿E6¿En¿Eé¿Eê¿Eë¿E√¿F¿F¿F)¿FN¿FO¿Fp¿F¥¿F¿¿F˜¿F¯¿G¿GG¿GH¿GT¿Gò¿Gô¿G•¿G»¿GÙ¿H¿H¿H5¿He¿Hó¿Hõ¿Hú¿H®¿H¿HÚ¿HÛ¿I+¿Iè¿Iê¿Iß¿Iæ¿IŸ¿I⁄¿IÓ¿J0¿J<¿Js¿Jt¿Jè¿Jß¿J“¿Jˇ¿K0¿K[¿Ka¿Ke¿Kf¿Kr¿Kº¿KΩ¿K…¿L¿L¿L!¿LD¿Lp¿LÑ¿Lä¿L∑¿LŸ¿L˚¿M"¿M&¿M'¿M3¿Mf¿Mh¿Mi¿Mõ¿M„¿M‰¿M¸¿N¿N¿NY¿Ne¿Nú¿Nù¿N©¿NÈ¿NÍ¿Nˆ¿O7¿O8¿OD¿Og¿Oì¿Oß¿O≠¿O‘¿O¯¿P¿P!¿P"¿P.¿Pc¿Pe¿Pf¿Pó¿Pﬁ¿Pﬂ¿P˜¿Q¿Q¿QS¿Q_¿Qñ¿Qó¿Q£¿Q‚¿Q„¿QÔ¿R/¿R0¿R<¿R_¿Rã¿Rü¿R•¿RÀ¿RÔ¿S¿S¿S¿S%¿SZ¿S\¿S]¿Sê¿S·¿S‚¿T¿T$¿T%¿T?¿TÖ¿Të¿T»¿T…¿T’¿U?¿U@¿UL¿U¢¿U£¿UØ¿U“¿U˛¿V¿V¿V@¿Vl¿Vô¿Vù¿Vû¿V™¿VÁ¿VÈ¿VÍ¿W)¿W-¿W}¿W–¿X¿XO¿Xã¿X¿¿XŸ¿XÌ¿Y1¿Y5¿Y6¿YÉ¿Y…¿Y˙¿Z¿Z'¿ZX¿Z\¿Z]¿Z°¿ZÛ¿["¿[;¿[O¿[¿[É¿[Ñ¿[»¿[Œ¿\¿\f¿\ó¿\∞¿\‘¿]¿]¿],¿]f¿]j¿]k¿]ù¿]–¿]È¿]˝¿^C¿^g¿^k¿^l¿^ü¿^”¿^Ï¿_ ¿_V¿_¨¿_Â¿_È¿_Í¿`*¿`J¿`K¿`π¿a ¿a¿aj¿aß¿a®¿b¿bL¿bM¿bß¿bÏ¿bÌ¿cL¿câ¿cä¿c˙¿dM¿dN¿dú¿d¬¿dﬂ¿d·¿d‚¿e(¿e]¿eí¿e‹¿e¯¿f¿f"¿f#¿fB¿fC¿fl¿fr¿f√¿fﬁ¿fˆ¿g¿g'¿g:¿gD¿gY¿g]¿g^¿gÆ¿g—¿g◊¿h$¿hn¿h∑¿i¿i¿iL¿i_¿io¿ié¿i´¿iæ¿i»¿iÃ¿iŒ¿iœ¿j$¿j=¿jA¿jé¿j‹¿k)¿ky¿k}¿k“¿l&¿l¿l◊¿m*¿mS¿mW¿m±¿m÷¿m⁄¿mË¿mÏ¿n0¿nz¿n ¿nÙ¿o>¿oÜ¿o≠¿o˙¿pH¿pb¿pù¿p≠¿q¿q¿qY¿qü¿q•¿q˝¿r¿r#¿rÜ¿rÈ¿sK¿sT¿sU¿s¶¿s¨¿t¿tb¿té¿tî¿tÓ¿uK¿uQ¿u∑¿v¿vÇ¿vé¿vè¿v‚¿vË¿w@¿wò¿wÓ¿x	¿x¿xi¿xø¿x‘¿x⁄¿y>¿y¢¿z¿z¿z¿zP¿zV¿z∞¿{¿{¿{!¿{z¿{ö¿{†¿|¿|f¿|»¿|—¿|”¿|‘¿}¿}-¿}_¿}à¿}©¿}≠¿}æ¿}¿¿}¡¿}ı¿~¿~W¿~Ä¿~û¿~¡¿~Â¿¿'¿F¿J¿[¿]¿^¿õ¿Ω¿ﬂ¿Ä¿Ä%¿Ä>¿ÄW¿Äp¿ÄÅ¿ÄÉ¿ÄÑ¿ÄÃ¿Ä–¿Å"¿Å5¿Å9¿ÅG¿ÅK¿Å¡¿Å≈¿ÅÍ¿Ç¿Ç%¿Çt¿Ç≈¿É¿ÉD¿ÉJ¿Éô¿Éœ¿É’¿Ñ8¿Ñõ¿Ñˇ¿Öe¿Ök¿Ö∂¿Ö¸¿Ü¿Ü¿Üj¿ÜΩ¿Ü˝¿á¿á!¿á0¿áJ¿áh¿áê¿á™¿áœ¿áÚ¿à.¿àA¿àn¿à≤¿àÔ¿âW¿âk¿â∆¿â ¿âÀ¿ä¿ä6¿ä<¿äã¿ä‹¿ã&¿ã[¿ãa¿ãØ¿ãÂ¿ãÎ¿åN¿å±¿ç¿ç{¿çÅ¿ç“¿é¿é3¿é9¿éÜ¿éŸ¿è¿è¿èk¿èπ¿ê¿êQ¿ê†¿ê≈¿êÿ¿êÎ¿ê˛¿ë¿ë6¿ë^¿ëx¿ëã¿ë®¿ëœ¿í¿í¿íK¿íà¿í¿íÒ¿ìV¿ì≤¿ìˆ¿î¿îv¿îÉ¿îÏ¿ï¿ïé¿ïî¿ïò¿ïô¿ïÈ¿ñ¿ñ¿ñX¿ñ¶¿ñ·¿ñÁ¿ó6¿óá¿ó—¿ò¿ò¿ò\¿òù¿ò£¿ô¿ôg¿ô ¿ö/¿ö5¿öÑ¿ö‘¿ö˜¿ö˝¿õJ¿õù¿õ›¿õÔ¿ú¿ú¿ú:¿úb¿ú¿ú¢¿úº¿ú„¿ù	¿ùE¿ùX¿ùÖ¿ù¬¿û*¿û>¿û≥¿û∑¿û∏¿ûı¿ü¿ü¿üÖ¿†¿†	¿†à¿†•¿†ª¿†—¿†Ê¿†˛¿°¿°1¿°N¿°O¿°Ô¿¢¿¢"¿¢7¿¢Q¿¢d¿¢w¿¢è¿¢ß¿¢∆¿¢⁄¿¢˜¿¢¯¿£~¿£ö¿£∞¿£∆¿£ﬁ¿£˝¿§¿§*¿§A¿§]¿§^¿§Å¿§∑¿§’¿§ı¿•M¿•U¿•b¿•í¿•Ó¿•ˆ¿•¸¿¶ ¿¶¿¶¿¶A¿¶i¿¶è¿¶ï¿¶—¿ß ¿ßf¿ßò¿ßû¿ßÓ¿®=¿®K¿®Q¿®ò¿®ﬁ¿©¿©¿©W¿©ß¿©Ù¿™¿™-¿™{¿™ù¿™§¿™∆¿™÷¿™ˆ¿´4¿´:¿´N¿´¡¿´⁄¿´¯¿´˛¿¨¿¨¿¨¿¨"¿¨7¿¨G¿¨K¿¨L¿¨å¿¨¨¿¨≠¿≠)¿≠ô¿≠ö¿≠Â¿Æ
¿ÆR¿Æn¿Æp¿Æq¿Æª¿Æ–¿Æ‘¿Æ˛¿ØN¿Øå¿Ø®¿Øÿ¿ØÏ¿∞ ¿∞=¿∞\¿∞b¿∞r¿∞è¿∞¢¿∞¨¿∞∞¿∞±¿∞«¿∞»¿±¿±¿±\¿±°¿±Ó¿≤¿≤B¿≤á¿≤–¿≥¿≥G¿≥è¿≥Ÿ¿≥Ù¿¥)¿¥/¿¥a¿¥Ø¿¥¸¿µ¿µ¿µ¿µ¿µX¿µ©¿µ˜¿∂G¿∂S¿∂†¿∂“¿∂”¿∑¿∑S¿∑°¿∑Õ¿∏¿∏=¿∏K¿∏Q¿∏R¿∏ä¿∏•¿∏≥¿∏π¿∏∫¿∏ˆ¿π¿πD¿πJ¿πN¿πO¿πk¿πä¿πã¿πß¿π¡¿π¬¿∫¿∫&¿∫'¿∫É¿∫∂¿∫∑¿∫Î¿ª?¿ªA¿ªB¿ªu¿ªy¿ªÆ¿ªˆ¿ºF¿ºî¿º∫¿ºæ¿Ω¿ΩX¿Ω¶¿ΩÔ¿æ(¿æS¿æº¿æÿ¿æÁ¿ø	¿ø&¿ø-¿ø1¿ø2¿øN¿øO¿øè¿øª¿øº¿ø¿øˆ¿¿D¿¿í¿¿›¿¡+¿¡{¿¡•¿¡´¿¡Ú¿¡¯¿¬¿¬"¿¬D¿¬c¿¬~¿¬à¿¬é¿¬‹¿¬Ê¿¬Ï¿¬˙¿√K¿√v¿√ß¿√ÿ¿√ﬁ¿ƒ¿ƒ\¿ƒß¿ƒÚ¿≈=¿≈C¿≈j¿≈î¿≈ú¿≈¶¿≈¨¿≈˘¿∆N¿∆_¿∆e¿∆Ø¿∆⁄¿«/¿«K¿«O¿«P¿«Ü¿«å¿«‰¿»'¿»-¿»z¿»õ¿»Ã¿… ¿…K¿…O¿…P¿…í¿…ò¿…Á¿ 3¿ n¿ z¿ ç¿ ¢¿ ƒ¿ ‘¿ ÿ¿ Ÿ¿À>¿À§¿À•¿Ã¿ÃM¿ÃN¿Ã™¿Ãœ¿Ã–¿Õ#¿Õ?¿ÕA¿ÕB¿Õì¿Õó¿Õ∫¿Õ˜¿Œ	¿ŒQ¿Œ^¿Œ_¿Œ≠¿Œæ¿Œø¿œ¿œ%¿œ+¿œv¿œ¥¿œı¿–¿–¿–¿–?¿–C¿–í¿–ÿ¿—#¿—o¿—ø¿—Â¿—È¿“6¿“Ñ¿“”¿“„¿“Á¿”3¿”Ç¿”—¿‘¿‘k¿‘ª¿’
¿’W¿’r¿’v¿’√¿÷¿÷Z¿÷|¿÷Ä¿÷œ¿◊¿◊a¿◊≤¿ÿ¿ÿS¿ÿv¿ÿ≠¿ÿÙ¿ÿ˙¿ŸH¿Ÿï¿Ÿ„¿⁄.¿⁄]¿⁄c¿⁄∞¿⁄Ÿ¿⁄ﬂ¿€0¿€~¿€Õ¿‹
¿‹(¿‹.¿‹}¿‹Ã¿‹“¿›$¿›M¿›S¿›£¿›Ù¿ﬁE¿ﬁë¿ﬁﬂ¿ﬂ*¿ﬂu¿ﬂÖ¿ﬂã¿ﬂŸ¿‡¿‡	¿‡G¿‡M¿‡ô¿‡Í¿·;¿·á¿·Æ¿·∫¿·œ¿·Ì¿‚¿‚,¿‚D¿‚K¿‚ä¿‚’¿‚€¿„2¿„â¿„è¿„™¿„Í¿‰¿‰;¿‰á¿‰Œ¿Â¿Â&¿Â0¿Â8¿Â>¿ÂÑ¿Â‘¿Ê¿Ê¿ÊC¿Êd¿Êr¿Ê©¿ÊŒ¿Ê‹¿Ê›¿ÁM¿Áè¿Áï¿Áô¿Áö¿ÁÎ¿Ë¿Ë ¿Ën¿Ëª¿È	¿ÈT¿ÈÉ¿Èâ¿È÷¿Í ¿Íl¿Íª¿ÍŒ¿Í‘¿Î%¿Ît¿Îª¿Ï¿Ï]¿Ï¨¿Ï„¿ÏÈ¿Ì8¿Ìá¿Ìÿ¿Ó!¿ÓZ¿Ó`¿Ó∞¿Ô¿ÔR¿Ô¢¿ÔÏ¿8¿â¿∂¿º¿Ò
¿ÒZ¿Ò©¿Ò◊¿Ò›¿Ú¿Ú+¿Ú@¿Ú]¿Út¿Úô¿Ú≤¿Úπ¿Úﬁ¿ÛN¿ÛT¿Ûó¿Û‚¿ÛË¿Ù?¿Ùñ¿Ùú¿Ù∑¿Ù˜¿ı-¿ıL¿ıò¿ı‰¿ˆ/¿ˆ<¿ˆF¿ˆN¿ˆT¿ˆ®¿ˆÍ¿ˆ¿ˆÙ¿ˆı¿˜W¿˜ä¿˜±¿˜Â¿¯#¿¯S¿¯Ü¿¯á¿¯◊¿¯˙¿˘¿˘%¿˘5¿˘M¿˘`¿˘j¿˘z¿˘~¿˘¿˘ ¿˘Ô¿˙4¿˙P¿˙Q¿˙k¿˙µ¿˙ª¿˚	¿˚¿˚:¿˚N¿˚^¿˚z¿˚ç¿˚ó¿¸¿¸¿¸¿¸¿¸]¿¸a¿¸ù¿¸·¿¸Ú¿˝¿˝¿˝h¿˝≤¿˝Î¿˝Ò¿˛>¿˛ç¿˛£¿˛≠¿˛Æ¿˛Ë¿˛Ó¿ˇ4¿ˇ:¿ˇ|¿ˇí¿ˇõ¿ˇú¿ˇ“¿ˇÿ¿ ¿ 0¿ ;¿ =¿ >¿ à¿ î¿ ò¿ ∑¿ ≈¿ ˝¿¿¿E¿R¿T¿U¿ä¿é¿’¿¿Z¿^¿ß¿˜¿@¿]¿a¿±¿˙¿/¿3¿Ä¿ø¿◊¿¿8¿>¿á¿œ¿¿n¿ª¿˛¿¿K¿a¿±¿≤¿˙¿ ¿,¿2¿B¿H¿ô¿Œ¿›¿ﬁ¿	/¿	Ä¿	œ¿
¿
'¿
-¿
y¿
 ¿¿`¿Æ¿¯¿˛¿K¿Q¿u¿{¿…¿¿e¿µ¿⁄¿‡¿.¿w¿»¿¿d¿¥¿¸¿)¿/¿y¿í¿ò¿¶¿”¿˚¿¿R¿{¿≤¿Î¿¿¿'¿1¿7¿Ü¿‘¿"¿@¿F¿T¿Å¿ƒ¿Ï¿¿C¿z¿≥¿Õ¿’¿ﬂ¿Â¿6¿|¿∆¿Ã¿⁄¿¿¿r¿´¿≈¿‹¿=¿v¿ê¿ò¿¢¿®¿Û¿<¿ç¿≈¿À¿Ô¿ı¿4¿:¿à¿÷¿'¿r¿¡¿¿Z¿•¿ˆ¿G¿b¿h¿x¿~¿Œ¿¿8¿N¿{¿|¿º¿€¿·¿ ¿&¿o¿≥¿≈¿∆¿"¿o¿¡¿«¿ ¿ ¿ Z¿ ™¿ Ã¿ Ó¿ Ô¿!2¿!w¿!æ¿!Û¿!˘¿"¿"4¿"5¿"Ö¿"’¿"˝¿"˛¿#M¿#ó¿#®¿#Æ¿#Ù¿$¿$-¿$.¿$É¿$¢¿$£¿$Ù¿%@¿%è¿%∏¿%€¿%‹¿&,¿&g¿&é¿&è¿&‚¿'8¿'T¿'Z¿'¨¿'˙¿(J¿(w¿(ï¿(ñ¿(‰¿(˚¿)¿)W¿)]¿)°¿)ß¿)˘¿*A¿*j¿*p¿*∫¿*Œ¿+)¿+*¿+x¿+ó¿+ù¿+Ù¿+˙¿,>¿,D¿,ñ¿,ﬁ¿-.¿-h¿-i¿-∑¿-À¿-—¿.'¿.-¿.q¿.w¿.…¿/¿/:¿/q¿/r¿/√¿0¿0h¿0y¿0¿0”¿1&¿1x¿1«¿2¿2i¿2º¿3¿3\¿3x¿3~¿3∂¿4¿4\¿4´¿4Ì¿4Û¿5A¿5h¿5n¿5|¿5ù¿5º¿5ı¿62¿6Q¿6ã¿6«¿6÷¿6ﬁ¿6Ë¿6Ó¿7?¿7ã¿7Ê¿8:¿8J¿8P¿8ñ¿8„¿9¿9¿9m¿9º¿:¿: ¿:5¿:R¿:S¿:§¿:ˆ¿;I¿;O¿;ü¿;Ò¿<A¿<ë¿<„¿=7¿=ä¿=ó¿=ù¿=“¿=ı¿=ˆ¿>9¿>Ö¿>¢¿>÷¿>◊¿?&¿?n¿?t¿?¬¿?»¿@3¿@¢¿@÷¿@◊¿A¿A¿AQ¿Al¿Aã¿Aå¿A‹¿B¿B¿Bà¿B˜¿C ¿C!¿Cr¿C¥¿C∫¿D&¿Dñ¿D¬¿D√¿E¿Ec¿Eâ¿Eè¿E‘¿F¿F¿F\¿F≠¿F–¿F÷¿GA¿G∞¿GŸ¿G⁄¿H%¿Hw¿H∆¿HÈ¿HÔ¿I\¿IÕ¿J¿J¿JC¿JI¿Jâ¿J÷¿K ¿Kt¿K≈¿L¿LA¿LG¿L∂¿M)¿M/¿Má¿MÂ¿MÊ¿N¿N!¿Nj¿N≥¿Nﬂ¿O¿O	¿OW¿OÆ¿OÈ¿OÍ¿P9¿PÖ¿Pã¿P⁄¿PÛ¿P˘¿QE¿Qé¿Q°¿QÂ¿QÊ¿R-¿R3¿RÅ¿Rœ¿S¿Si¿S¨¿S≤¿T ¿TM¿Tõ¿T‚¿TÛ¿U:¿U;¿UÇ¿Uõ¿U¿¿U¡¿V¿V¿V#¿Vn¿V{¿VÅ¿VÕ¿W¿WX¿W^¿W≠¿W˘¿Wˇ¿XP¿Xù¿XÍ¿X¿Y:¿YÜ¿Y”¿Z¿Z¿ZS¿ZY¿Z†¿Z¶¿ZÏ¿[6¿[<¿[L¿[R¿[¢¿[ª¿\¿\¿\K¿\Q¿\°¿\Ó¿\Ù¿]:¿]Ñ¿]ä¿]ö¿]†¿]Ó¿^¿^X¿^Y¿^£¿^©¿^ı¿_¿_¿_U¿_¶¿_Ω¿_√¿`¿`Z¿`¶¿`Ó¿a>¿aâ¿a‘¿b#¿bt¿b¬¿b¸¿c¿c)¿c/¿c?¿cê¿c‹¿d¿dU¿dü¿d†¿d‰¿dÍ¿e;¿eî¿eÁ¿f;¿fs¿fy¿f…¿g¿gi¿gª¿h¿h_¿h´¿h±¿i¿iR¿iß¿i˛¿j.¿jÇ¿j–¿k¿k¿km¿kº¿l¿lU¿l™¿l∞¿m¿mU¿mû¿m§¿mı¿n¿n¿n$¿n9¿nb¿nu¿nå¿nî¿nö¿n»¿n˛¿o¿o]¿o{¿oú¿o¢¿o¥¿o„¿p¿p;¿po¿pô¿p∏¿p‘¿q¿q/¿qM¿qì¿q¡¿qÔ¿r ¿r¿rI¿rå¿r≥¿rΩ¿r√¿r“¿r⁄¿r‰¿rÍ¿sC¿sI¿sW¿sl¿s∞¿s√¿s⁄¿sÌ¿t¿t¿t¿tB¿tx¿t~¿t◊¿tı¿u¿u¿u.¿u]¿u~¿uµ¿uÈ¿v¿v>¿vZ¿vó¿vµ¿v”¿w¿wG¿wu¿wÜ¿wõ¿wœ¿x¿x(¿x\¿xê¿xº¿x∆¿xÃ¿x€¿x„¿xÌ¿xÛ¿y<¿yá¿y∫¿y¿¿y–¿y÷¿z$¿z;¿zY¿zà¿z´¿z—¿z¯¿{¿{8¿{9¿{}¿{É¿{‘¿|-¿|Ä¿|‘¿}&¿}x¿}Ø¿}µ¿~¿~M¿~S¿~§¿~‰¿¿¿c¿≠¿≥¿ˇ¿ÄL¿Äú¿Ä¢¿Ä˝¿Å¿Å¿Å"¿Å7¿Å`¿Ås¿Åä¿Åí¿Åò¿Å∆¿Å¸¿Ç¿Ç[¿Çy¿Çö¿Ç†¿Ç≤¿Ç·¿É1¿ÉÄ¿É—¿ÉÌ¿Ñ2¿Ñ|¿Ñ¥¿Ñﬂ¿Ö¿Ö>¿Öe¿Öï¿ÖΩ¿Ö√¿Ü¿Üw¿Ü—¿á¿á?¿ák¿á™¿áÈ¿áı¿à¿àt¿à~¿àÑ¿àì¿àõ¿à•¿à´¿â¿â
¿â¿â-¿âq¿âÑ¿âõ¿âÆ¿â«¿âœ¿â’¿ä¿ä9¿ä?¿äò¿ä∂¿ä◊¿ä›¿äÔ¿ã¿ãn¿ãΩ¿å¿å*¿åo¿åπ¿å˜¿ç/¿çZ¿çê¿çπ¿ç‡¿é¿é8¿é>¿éô¿é¿èK¿è®¿èÛ¿ê9¿êb¿ê|¿ê∑¿ê”¿êÔ¿ë3¿ë_¿ëã¿ëö¿ë—¿í¿í=¿ír¿íx¿í“¿ì,¿ìÑ¿ìÀ¿ì˙¿î¿î'¿îï¿îü¿î•¿î¥¿îº¿î∆¿îÃ¿î‹¿î‚¿ï/¿ïD¿ïe¿ïî¿ïª¿ï‚¿ñ¿ñ0¿ñR¿ñS¿ñ†¿ñ¶¿ñˆ¿ó¿ó¿ó7¿óé¿óê¿óë¿óﬂ¿ó˚¿ò<¿ò\¿òπ¿òø¿òÛ¿ô¿ô1¿ôç¿ôë¿ôí¿ô¸¿öq¿ör¿öŒ¿õ*¿õo¿õî¿õï¿õ°¿õÔ¿ú¿ú¿ú¿úB¿ú\¿úò¿ú•¿ú…¿ù.¿ù4¿ù8¿ù9¿ùõ¿ùı¿ùˆ¿ûk¿ûÓ¿ûÔ¿û˚¿üL¿üg¿üh¿üt¿ü”¿ü˛¿üˇ¿†¿†b¿†Å¿†Ç¿†é¿†Ò¿°"¿°#¿°/¿°n¿°o¿°Œ¿°¸¿°˝¿¢	¿¢a¿¢â¿¢ä¿¢ñ¿¢Ù¿£ ¿£!¿£-¿£U¿£u¿£≥¿£π¿£“¿£÷¿£◊¿§$¿§U¿§V¿§b¿§Å¿§≤¿§Œ¿§‚¿§Ê¿§Á¿•7¿•k¿•l¿•x¿•‘¿•Ù¿¶L¿¶P¿¶Q¿¶–¿ß?¿ß@¿ßL¿ßá¿ß©¿ß€¿ßﬂ¿ß‡¿®3¿®t¿®u¿®Å¿®π¿®Í¿®Ó¿®Ô¿©H¿©á¿©à¿©î¿©≤¿©·¿™¿™H¿™L¿™M¿™£¿™‹¿™›¿™È¿´¿´<¿´c¿´©¿´≠¿´Æ¿¨
¿¨I¿¨J¿¨V¿¨ã¿¨π¿¨Ω¿¨æ¿≠ ¿≠V¿≠W¿≠c¿≠ò¿≠∏¿≠ÿ¿Æ ¿Æ$¿Æ%¿Æô¿Ø¿Ø¿Ø¿Ø>¿Øk¿Øo¿Øp¿Ø≈¿∞¿∞¿∞¿∞I¿∞i¿∞√¿∞«¿∞»¿±<¿±æ¿±ø¿±À¿±¯¿≤¿≤\¿≤`¿≤a¿≤æ¿≥¿≥¿≥+¿≥f¿≥à¿≥™¿¥¿¥¿¥¿¥m¿¥·¿¥‚¿¥Ó¿µ¿µ8¿µí¿µñ¿µó¿∂¿∂ç¿∂é¿∂ö¿∂‘¿∂Û¿∑5¿∑9¿∑:¿∑®¿∏¿∏¿∏&¿∏Ö¿∏•¿π!¿π%¿π&¿πØ¿π…¿π‹¿πÓ¿∫¿∫¿∫0¿∫I¿∫_¿∫Ç¿∫ù¿∫û¿∫™¿∫‘¿ª¿ª¿ª¿ª}¿ª€¿ª‹¿ªË¿º$¿ºF¿ºj¿ºÏ¿Ω¿ΩS¿ΩY¿Ω]¿Ω^¿Ω€¿æe¿æf¿ær¿æ∑¿æŸ¿æ¯¿ø¿øN¿øÅ¿ø≥¿øÁ¿¿¿¿O¿¿Å¿¿µ¿¿Í¿¡#¿¡Y¿¡û¿¡∑¿¬¿¬¿¬¿¬¿¬¡¿¬‰¿¬¯¿√¿√#¿√:¿√R¿√h¿√}¿√î¿√¨¿√œ¿√È¿ƒ¿ƒ	¿ƒ¿ƒ]¿ƒ¿ƒ°¿ƒ¿¿ƒ˜¿≈-¿≈b¿≈ô¿≈—¿∆¿∆6¿∆j¿∆ü¿∆ÿ¿«¿«S¿«l¿«∫¿«¿¿«ƒ¿«≈¿»v¿»ô¿»≠¿»∆¿»ﬁ¿»¯¿…¿…)¿…>¿…U¿…m¿…ê¿…™¿……¿… ¿…÷¿…¸¿  ¿ M¿ Q¿ R¿ ®¿ ﬁ¿ ﬂ¿ Î¿À&¿Àr¿Àû¿À¬¿ÀÌ¿Ã%¿Ã)¿Ã*¿Ã6¿ÃÅ¿Ã⁄¿Ãﬁ¿Ãﬂ¿ÃÎ¿Õ8¿ÕZ¿Õ•¿Õ´¿ÕÚ¿Õˆ¿Õ˜¿Œ\¿ŒÕ¿ŒŒ¿Œ⁄¿œ%¿œJ¿œï¿œô¿œö¿–¿–z¿–{¿–á¿–•¿–‘¿–˜¿—¿—D¿—e¿—Ö¿—ß¿—Í¿—Î¿“¿“=¿“à¿“é¿“€¿”C¿”I¿”J¿”ë¿”–¿”—¿”˚¿‘¿‘@¿‘e¿‘ä¿‘¿¿‘‚¿’¿’:¿’p¿’§¿’ÿ¿’˛¿÷#¿÷J¿÷r¿÷x¿÷y¿÷‚¿◊#¿◊[¿◊\¿◊Ç¿◊·¿ÿ'¿ÿ.¿ÿ/¿ÿH¿ÿñ¿ÿú¿ÿ†¿ÿ°¿ÿ≠¿ÿŒ¿ÿ˝¿Ÿ$¿ŸK¿Ÿu¿Ÿô¿Ÿº¿ŸÌ¿ŸÓ¿⁄¿⁄C¿⁄ë¿⁄ó¿⁄µ¿€¿€¿€U¿€Œ¿€‘¿‹¿‹¿‹3¿‹à¿‹“¿‹Ÿ¿‹⁄¿‹Û¿›A¿›G¿›K¿›L¿›‡¿›ˇ¿ﬁ"¿ﬁ<¿ﬁZ¿ﬁn¿ﬁè¿ﬁ®¿ﬁ¡¿ﬁ÷¿ﬁÙ¿ﬁı¿ﬂ¿ﬂY¿ﬂ¨¿ﬂ∞¿ﬂ±¿‡¿‡Ç¿‡Ñ¿‡Ö¿‡≥¿‡Ú¿‡Û¿·;¿·?¿·s¿·w¿·æ¿‚ ¿‚B¿‚[¿‚ö¿‚†¿‚Î¿„-¿„N¿„w¿„x¿„π¿„ø¿‰
¿‰M¿‰n¿‰ò¿‰ô¿‰√¿‰…¿Â¿Âg¿Â∞¿Â‡¿Â·¿Ê#¿Ê)¿Ê`¿ÊØ¿Ê˛¿ÁG¿ÁM¿Áù¿ÁÎ¿Ë¿Ë¿Ën¿Ë∑¿Ë–¿Ë÷¿È%¿È:¿Èf¿Èg¿È∑¿È⁄¿ÈÏ¿ÈÌ¿Í3¿Í9¿Íá¿Íù¿Í∑¿Í∏¿Î¿Î¿ÎX¿Îä¿Î™¿Î¨¿Î≠¿Î«¿Ï¿Ïa¿Ï}¿ÏÉ¿Ïπ¿Ï’¿ÏÎ¿ÏÏ¿Ï¯¿Ì)¿ÌA¿Ìf¿Ìö¿Ì†¿Ì∂¿Ó¿Ó#¿Ó=¿ÓN¿Óç¿Óó¿Ó°¿Ó®¿Ó¨¿Ó≠¿Ô¿Ô`¿Ôa¿Ôm¿Ôö¿Ô≤¿Ô◊¿¿¿¿7¿_¿ï¿ô¿ö¿˙¿Ò@¿ÒA¿ÒM¿Ò`¿Òx¿Òà¿Ò†¿Ò≥¿ÒΩ¿Ò‡¿Ò¿ÒÙ¿Òı¿Ú@¿Úe¿Ú©¿Ú≈¿Ú∆¿Ú‡¿Ú·¿ÚÌ¿Û¿Û¿Û,¿ÛH¿Û[¿Ûe¿Û’¿ÛŸ¿Û⁄¿ÛÊ¿ÙD¿Ùm¿Ùo¿Ùp¿Ù∑¿Ùª¿ı ¿ıE¿ıf¿ıß¿ıÓ¿ˆ
¿ˆ@¿ˆA¿ˆ|¿ˆÇ¿ˆ∆¿˜¿˜D¿˜â¿˜≈¿˜›¿˜ﬁ¿¯¿¯¿¯^¿¯Æ¿¯Û¿˘¿˘¿˘¿˘p¿˘å¿˘ª¿˘º¿˙ ¿˙ ¿˙!¿˙-¿˙X¿˙Y¿˙e¿˙Ä¿˙õ¿˙ﬂ¿˙Â¿˚¿˚8¿˚W¿˚k¿˚æ¿¸¿¸*¿¸>¿¸B¿¸C¿¸ú¿¸÷¿¸◊¿¸Ò¿¸Û¿¸Ù¿˝	¿˝¿˝I¿˝X¿˝r¿˝x¿˝√¿˛¿˛(¿˛.¿˛o¿˛u¿˛ƒ¿˛›¿˛Ó¿ˇ¿ˇ;¿ˇV¿ˇ´¿ˇ¨¿ˇ‹¿  ¿ *¿ U¿ |¿ £¿ Õ¿ Œ¿ ˛¿¿V¿y¿é¿è¿Œ¿‘¿"¿n¿∞¿«¿»¿¿5¿6¿h¿n¿°¿ß¿‘¿G¿}¿±¿µ¿∂¿Ú¿¯¿+¿g¿h¿µ¿ª¿¯¿G¿n¿t¿∏¿¿P¿r¿Ü¿ô¿Ø¿Ú¿ˆ¿˜¿I¿W¿w¿ä¿û¿Ω¿‰¿Î¿Ô¿¿	 ¿	&¿	o¿	¥¿	ÿ¿	ﬁ¿
¿
Q¿
õ¿
Ê¿2¿Ä¿–¿¿a¿g¿∂¿÷¿Î¿#¿8¿O¿d¿s¿î¿ú¿©¿¿¿€¿Í¿¿4¿k¿≠¿∏¿¿¿∆¿ ¿À¿¿
¿R¿X¿{¿…¿Î¿˛¿¿¿0¿\¿ó¿«¿ˆ¿¸¿3¿Z¿`¿ó¿∏¿æ¿—¿’¿÷¿‚¿¿'¿:¿@¿[¿{¿ù¿»¿Ã¿Õ¿Ÿ¿¿¿d¿∂¿“¿¿'¿A¿G¿H¿Ö¿ª¿º¿÷¿#¿U¿ä¿ã¿ƒ¿¿¿C¿p¿q¿®¿’¿÷¿%¿_¿Ö¿ã¿å¿§¿®¿©¿µ¿¯¿˙¿˚¿B¿F¿ï¿´¿È¿¿¿[¿p¿±¿ˆ¿(¿U¿s¿w¿x¿≤¿∏¿Ò¿/¿t¿Ω¿¿4¿|¿∑¿Ë¿$¿?¿Y¿Ö¿ç¿∂¿æ¿¬¿√¿Ù¿˙¿3¿p¿´¿‹¿¿,¿F¿Ä¿à¿±¿π¿Ω¿æ¿ ¿ V¿ W¿ ¥¿!¿!¿!^¿!™¿!´¿!ﬂ¿!¸¿"¿"¿"+¿",¿"U¿"[¿"¨¿"«¿"ﬂ¿"Ô¿#¿##¿#-¿#B¿#F¿#G¿#ó¿#∫¿#¿¿$¿$W¿$§¿$Ò¿%?¿%]¿%p¿%Ä¿%ü¿%º¿%œ¿%Ÿ¿%È¿%Ì¿%Ó¿&9¿&^¿&™¿&∆¿&»¿&…¿'¿'¿'g¿'¿'†¿'Ÿ¿'ﬂ¿(/¿(Å¿(õ¿(°¿(Ô¿)B¿)É¿)¿¿)ﬂ¿)˝¿*¿*.¿*A¿*g¿*ä¿*ã¿*÷¿+¿+c¿+ï¿+Õ¿+Ì¿+Ò¿+Ú¿,¿,"¿,]¿,n¿,o¿,ö¿,†¿,€¿,Ì¿,Ó¿- ¿-&¿-]¿-v¿-w¿-«¿-Í¿-¿.;¿.`¿.r¿.s¿.¡¿.›¿.„¿/.¿/{¿/å¿/í¿/‡¿0¿0Q¿0S¿0T¿0¥¿0“¿0”¿1¿1¿1b¿1¥¿1Œ¿1‘¿2"¿2u¿2∂¿2Û¿3¿3/¿3G¿3`¿3s¿3ô¿3†¿3¥¿3 ¿4¿4'¿4u¿4y¿4z¿4‹¿5/¿50¿5ô¿6'¿6(¿67¿68¿6ë¿6≠¿6Æ¿6∫¿6Â¿6Ê¿6ˆ¿6˜¿7Q¿7n¿7o¿7{¿7©¿7™¿7¡¿7¬¿8#¿8G¿8H¿8T¿8ó¿8ò¿8§¿8¿9¿9¿9¿9h¿9õ¿9µ¿9ª¿9¿:¿:¿:¿:I¿:d¿:Å¿:ø¿:˛¿;!¿;_¿;Ä¿;∂¿;º¿;›¿;ˇ¿< ¿<*¿<e¿<w¿<{¿<|¿<Á¿==¿=?¿=@¿=u¿=•¿=¶¿=ﬁ¿=‚¿>,¿>9¿>|¿>}¿>Ã¿>·¿>‰¿?1¿?N¿?Q¿?ù¿?†¿?≤¿?µ¿?¿¿?Ù¿?˜¿@2¿@o¿@t¿@w¿@ñ¿@∆¿@À¿@“¿@’¿A*¿AÄ¿A¨¿AØ¿B¿B9¿Bo¿B∂¿B˙¿C7¿CK¿Cw¿Cå¿Cû¿CÀ¿C⁄¿D¿D"¿D/¿DL¿DR¿DX¿Dh¿D¿Dõ¿Dü¿D∫¿Dº¿DΩ¿E¿EZ¿E^¿EÆ¿E˛¿F3¿Fn¿F≥¿F¥¿FÈ¿G¿G¿GT¿Go¿Gp¿G|¿Gí¿GÏ¿H¿H¿Hd¿Hç¿Hì¿H±¿Hµ¿H∑       ,áﬁ™#å–ÑÎ/// An immutable 32 bit color value in ARGB format.
///
/// Consider the light teal of the Flutter logo. It is fully opaque, with a red
/// channel value of 0x42 (66), a green channel value of 0xA5 (165), and a blue
/// channel value of 0xF5 (245). In the common "hash syntax" for color values,
/// it would be described as `#42A5F5`.
///
/// Here are some ways it could be constructed:
///
/// ```dart
/// Color c1 = const Color(0xFF42A5F5);
/// Color c2 = const Color.fromARGB(0xFF, 0x42, 0xA5, 0xF5);
/// Color c3 = const Color.fromARGB(255, 66, 165, 245);
/// Color c4 = const Color.fromRGBO(66, 165, 245, 1.0);
/// ```
///
/// If you are having a problem with `Color` wherein it seems your color is just
/// not painting, check to make sure you are specifying the full 8 hexadecimal
/// digits. If you only specify six, then the leading two digits are assumed to
/// be zero, which means fully-transparent:
///
/// ```dart
/// Color c1 = const Color(0xFFFFFF); // fully transparent white (invisible)
/// Color c2 = const Color(0xFFFFFFFF); // fully opaque white (visible)
/// ```
///
/// See also:
///
///  * [Colors](https://api.flutter.dev/flutter/material/Colors-class.html), which
///    defines the colors found in the Material Design specification. å⁄ÇÌ èôèûÇ|/// Construct a color from the lower 32 bits of an [int].
///
/// The bits are interpreted as follows:
///
/// * Bits 24-31 are the alpha value.
/// * Bits 16-23 are the red value.
/// * Bits 8-15 are the green value.
/// * Bits 0-7 are the blue value.
///
/// In other words, if AA is the alpha value in hex, RR the red value in hex,
/// GG the green value in hex, and BB the blue value in hex, a color can be
/// expressed as `const Color(0xAARRGGBB)`.
///
/// For example, to get a fully opaque orange, you would use `const
/// Color(0xFFFF9000)` (`FF` for the alpha, `FF` for the red, `90` for the
/// green, and `00` for the blue).èü	è§  
èwèxè~èèèè≤è¨è∫è¥èºèÀÇÇëíëìëõÅ£/// Construct a color from the lower 8 bits of four integers.
///
/// * `a` is the alpha value, with 0 being transparent and 255 being fully
///   opaque.
/// * `r` is [red], from 0 to 255.
/// * `g` is [green], from 0 to 255.
/// * `b` is [blue], from 0 to 255.
///
/// Out of range values are brought into range using modulo 255.
///
/// See also [fromRGBO], which takes the alpha value as a floating point
/// value.ëúë°  ë£ë®  ë™ëØ  ë±ë∂  -ëƒëæí@ë∆í>íë¸ë⁄ë«ëÿë”ë»ë—ëÀë…ëÕë÷ëÈë˙ëıëÍëÛëÌëÎëÔë¯íííííííííí-í=í9í.í7í1í/í3í<íBíQÉ î=î>îFÅ /// Create a color from red, green, blue, and opacity, similar to `rgba()` in CSS.
///
/// * `r` is [red], from 0 to 255.
/// * `g` is [green], from 0 to 255.
/// * `b` is [blue], from 0 to 255.
/// * `opacity` is alpha channel of this color as a double, with 0.0 being
///   transparent and 1.0 being fully opaque.
///
/// Out of range values are brought into range using modulo 255.
///
/// See also [fromARGB], which takes the opacity as an integer value.îGîL  îNîS  îUîZ  î\îd  3îxîrïDîzïBïîÿî¢î{î†îõî|îôîìî}îëîçîÜî~îàîêîïîûî≤î÷î—î≥îœî…î¥îÀî‘îËïïîÈïîˇîÍïï
ïïAï=ïï;ï5ï ï7ï@ïFïUÅñ[ÄÎ/// A 32 bit value representing this color.
///
/// The bits are assigned as follows:
///
/// * Bits 24-31 are the alpha value.
/// * Bits 16-23 are the red value.
/// * Bits 8-15 are the green value.
/// * Bits 0-7 are the blue value. ñeÄ‹óÄß/// The alpha channel of this color in an 8 bit value.
///
/// A value of 0 means this color is fully transparent. A value of 255 means
/// this color is fully opaque.   óEÄœó¸Ä£/// The alpha channel of this color as a double.
///
/// A value of 0.0 means this color is fully transparent. A value of 1.0 means
/// this color is fully opaque.   òaòW4/// The red channel of this color in an 8 bit value.   ò}dòæ6/// The green channel of this color in an 8 bit value.   òÂbô%5/// The blue channel of this color in an 8 bit value.   ±u/±â   ±u±vôKÅ	öÄ¥/// Returns a new color that matches this color with the alpha channel
/// replaced with `a` (which ranges from 0 to 255).
///
/// Out of range values will have unexpected effects. öö   öXÅUõ-Ä∆/// Returns a new color that matches this color with the alpha channel
/// replaced with the given `opacity` (which ranges from 0.0 to 1.0).
///
/// Out of range values will have unexpected effects. õ9õA   õ±ÅúrÄ≤/// Returns a new color that matches this color with the red channel replaced
/// with `r` (which ranges from 0 to 255).
///
/// Out of range values will have unexpected effects. úzú   úºÅ	ùÄ¥/// Returns a new color that matches this color with the green channel
/// replaced with `g` (which ranges from 0 to 255).
///
/// Out of range values will have unexpected effects. ùâùé   ù…ÅûãÄ≥/// Returns a new color that matches this color with the blue channel replaced
/// with `b` (which ranges from 0 to 255).
///
/// Out of range values will have unexpected effects. ûîûô   üÄ≈ü!  ü:üB   ü‹ÇK†ÍÄ˙/// Returns a brightness value between 0 for darkest and 1 for lightest.
///
/// Represents the relative luminance of the color. This value is computationally
/// expensive to calculate.
///
/// See <https://en.wikipedia.org/wiki/Relative_luminance>.   ¢+áAß-Ñ«/// Linearly interpolate between two colors.
///
/// This is intended to be fast but as a result may be ugly. Consider
/// [HSVColor] or writing custom logic for interpolating colors.
///
/// If either color is null, this function linearly interpolates from a
/// transparent instance of the other color. This is usually preferable to
/// interpolating from [material.Colors.transparent] (`const
/// Color(0x00000000)`), which is specifically transparent _black_.
///
/// The `t` argument represents position on the timeline, with 0.0 meaning
/// that the interpolation has not started, returning `a` (or something
/// equivalent to `a`), 1.0 meaning that the interpolation has finished,
/// returning `b` (or something equivalent to `b`), and values in between
/// meaning that the interpolation is at the relevant point on the timeline
/// between `a` and `b`. The interpolation can be extrapolated beyond 0.0 and
/// 1.0, so negative values and values greater than 1.0 are valid (and can
/// easily be generated by curves such as [Curves.elasticInOut]). Each channel
/// will be clamped to the range 0 to 255.
///
/// Values for `t` are usually obtained from an [Animation<double>], such as
/// an [AnimationController]. ß2ß:  ß<ßD  ßFßN   ©pÜ ´ÑÅˆ/// Combine the foreground color as a transparent color over top
/// of a background color, and return the resulting combined color.
///
/// This uses standard alpha blending ("SRC over DST") rules to produce a
/// blended color from two colors. This can be used as a performance
/// enhancement when trying to avoid needless alpha blending compositing
/// operations for two things that are solid colors with the same shape, but
/// overlay each other: instead, just paint one with the combined color. ´è´ñ  ´°´®   ØîÄÌ∞w/// Returns an alpha value representative of the provided [opacity] value.
///
/// The [opacity] value may not be null. ∞1∞9   ∞ÖÄÏ∞ü  ∞¢∞™  ∞Ö∞Ü±®W±ª   ±®±© ¿ ´¿ Gl¿ ´√Ä™/// A description of the style to use when drawing on a [Canvas].
///
/// Most APIs on [Canvas] take a [Paint] object to describe the style
/// to use for that operation. ¿ ´ÕÄ¢ ¿ ¨+¿ ¨0Y/// Constructs an empty [Paint] object with all fields initialized to
/// their defaults.  '¿ ØOL¿ Øz 	¿ ØO¿ ØP¿ ØV¿ Øg¿ ØW¿ ØÇ¿ Øä¿ Øö¿ Øã¿ Ø†'¿ Ø± ¿ Ø∆¿ ØÀ!¿ Ø‹ ¿ ØÎ¿ Ø%¿ ∞ ¿ ∞¿ ∞!¿ ∞* ¿ ∞9¿ ∞>'¿ ∞O ¿ ∞d¿ ∞i%¿ ∞z ¿ ∞ç¿ ∞í&¿ ∞£ ¿ ∞∑¿ ∞º,¿ ∞Õ ¿ ∞Á¿ ∞Ï)¿ ∞˝ ¿ ±¿ ±&¿ ±* ¿ ±>¿ ±C0¿ ±T ¿ ±q¿ ±w,¿ ±à ¿ ±°¿ ±ß(¿ ±∏ ¿ ±Õ¿ ±”#¿ ±‰ ¿ ±Ù¿ ±˚>¿ ≤ ¿ ≤5¿ ≤"¿ ≤8¿ ≤=2¿ ≤N ¿ ≤k¿ ≤^¿ ≤n¿ ≤s:¿ ≤Ñ ¿ ≤©¿ ≤ò¿ ≤¨¿ ≤±2¿ ≤¬ ¿ ≤ﬂ¿ ≤“¿ ≤‚¿ ≤Á>¿ ≤¯ ¿ ≥!¿ ≥¿ ≥$¿ ≥):¿ ≥: ¿ ≥_¿ ≥N¿ ≥b¿ ≥g<¿ ≥x ¿ ≥ü¿ ≥ç¿ ≥¢¿ ≥ßH¿ ≥∏ ¿ ≥Î¿ ≥”¿ ≥Ó¿ ≥ÛB¿ ¥ ¿ ¥1¿ ¥¿ ¥4¿ ¥9<¿ ¥J ¿ ¥q¿ ¥_¿ ¥t¿ ¥yN¿ ¥ä ¿ ¥√¿ ¥®¿ ¥∆¿ ¥ÀF¿ ¥‹ ¿ µ¿ ¥ˆ¿ µ¿ µ>¿ µ& ¿ µO¿ µ<¿ µR¿ µW4¿ µh ¿ µá¿ µy¿ µä¿ µ–%¿ µ· ¿ µÛ¿ ∂_3¿ ∂ä ¿ ∂_¿ ∂`¿ ∂f¿ ∂w¿ ∂g¿ ∑"¿ ∑ ¿ ∑.¿ ∑3'¿ ∑D ¿ ∑Y¿ ∑^'¿ ∑o ¿ ∑Ñ¿ ∑â"¿ ∑ö ¿ ∑™¿ πˆ,¿ ∫ ¿ ∫¿ Ω=¿ Ω. ¿ ΩC¿ ΩL¿ ΩM¿ ΩT¿ ΩU¿ ÃT3¿ Ãh ¿ ÃÑ¿ Á≠Ç¿ ÍÜÇÆ/// Whether to dither the output when drawing images.
///
/// If false, the default value, dithering will be enabled when the input
/// color depth is higher than the output color depth. For example,
/// drawing an RGB8 image onto an RGB565 canvas.
///
/// This value also controls dithering of [shader]s, which can make
/// gradients appear smoother.
///
/// Whether or not dithering affects the output is implementation defined.
/// Some implementations may choose to ignore this completely, if they're
/// unable to control dithering.
///
/// To ensure that dithering is consistently enabled for your entire
/// application, set this to true before invoking any drawing related code.¿ Íò¿ ∑ﬁÄ”¿ ∏Yi/// Whether to apply anti-aliasing to lines and images drawn on the
/// canvas.
///
/// Defaults to true.   ¿ ∏¥Å¿ ∏∏  ¿ ∏ƒ
¿ ∏    ¿ ∫'Ç'¿ ªŒÅÑ/// The color to use when stroking or filling a shape.
///
/// Defaults to opaque black.
///
/// See also:
///
///  * [style], which controls whether to stroke or fill (or both).
///  * [colorFilter], which overrides [color].
///  * [shader], which overrides [color] with more elaborate effects.
///
/// This color is not used when compositing. To colorize a layer, use
/// [colorFilter].   ¿ ºQÄê¿ ºU  ¿ º[¿ ºb   ¿ Ω_Éú¿ ¿dÇ“/// A blend mode to apply when a shape is drawn or a layer is composited.
///
/// The source colors are from the shape being drawn (e.g. from
/// [Canvas.drawPath]) or layer being composited (the graphics that were drawn
/// between the [Canvas.saveLayer] and [Canvas.restore] calls), after applying
/// the [colorFilter], if any.
///
/// The destination colors are from the background onto which the shape or
/// layer is being composited.
///
/// Defaults to [BlendMode.srcOver].
///
/// See also:
///
///  * [Canvas.saveLayer], which uses its [Paint]'s [blendMode] to composite
///    the layer when [Canvas.restore] is called.
///  * [BlendMode], which discusses the user of [Canvas.saveLayer] with
///    [blendMode].   ¿ ¿˛Ä†¿ ¡  ¿ ¡¿ ¡   ¿ ¡¢Ä·¿ ¬&k/// Whether to paint inside shapes, the edges of shapes, or both.
///
/// Defaults to [PaintingStyle.fill].   ¿ ¬ÜÄá¿ ¬ä  ¿ ¬ê¿ ¬ü   ¿ √Åi¿ ƒ%Ä˛/// How wide to make edges drawn when [style] is set to
/// [PaintingStyle.stroke]. The width is given in logical pixels measured in
/// the direction orthogonal to the direction of the path.
///
/// Defaults to 0.0, which correspond to a hairline width.   ¿ ƒ}Äã¿ ƒÅ  ¿ ƒç¿ ƒï   ¿ ≈Å¿ ≈√Ä†/// The kind of finish to place on the end of lines drawn when
/// [style] is set to [PaintingStyle.stroke].
///
/// Defaults to [StrokeCap.butt], i.e. no caps.   ¿ ∆'Äã¿ ∆+  ¿ ∆5¿ ∆@   ¿ ∆∂Ñ—¿ À#Ñ+/// The kind of finish to place on the joins between segments.
///
/// This applies to paths drawn when [style] is set to [PaintingStyle.stroke],
/// It does not apply to points drawn as lines with [Canvas.drawPoints].
///
/// Defaults to [StrokeJoin.miter], i.e. sharp corners.
///
/// Some examples of joins:
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/miter_4_join.mp4}
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/round_join.mp4}
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/bevel_join.mp4}
///
/// The centers of the line segments are colored in the diagrams above to
/// highlight the joins, but in normal usage the join is the same color as the
/// line.
///
/// See also:
///
///  * [strokeMiterLimit] to control when miters are replaced by bevels when
///    this is set to [StrokeJoin.miter].
///  * [strokeCap] to control what is drawn at the ends of the stroke.
///  * [StrokeJoin] for the definitive list of stroke joins.   ¿ ÀäÄé¿ Àé  ¿ Àô¿ À•   ¿ ÃåÖr¿ —üÑ”/// The limit for miters to be drawn on segments when the join is set to
/// [StrokeJoin.miter] and the [style] is set to [PaintingStyle.stroke]. If
/// this limit is exceeded, then a [StrokeJoin.bevel] join will be drawn
/// instead. This may cause some 'popping' of the corners of a path if the
/// angle between line segments is animated, as seen in the diagrams below.
///
/// This limit is expressed as a limit on the length of the miter.
///
/// Defaults to 4.0.  Using zero as a limit will cause a [StrokeJoin.bevel]
/// join to be used all the time.
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/miter_0_join.mp4}
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/miter_4_join.mp4}
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/miter_6_join.mp4}
///
/// The centers of the line segments are colored in the diagrams above to
/// highlight the joins, but in normal usage the join is the same color as the
/// line.
///
/// See also:
///
///  * [strokeJoin] to control the kind of finish to place on the joins
///    between segments.
///  * [strokeCap] to control what is drawn at the ends of the stroke.   ¿ “Ä±¿ “  ¿ “¿ “   ¿ “∂ÇW¿ ”~ÄØ/// A mask filter (for example, a blur) to apply to a shape after it has been
/// drawn but before it has been composited into the image.
///
/// See [MaskFilter] for details.   ¿ ’Ç∞¿ ’  ¿ ’¿ ’,   ¿ ◊ƒÅÏ¿ ŸCÅ/// Controls the performance vs quality trade-off to use when sampling bitmaps,
/// as with an [ImageShader], or when drawing images, as with [Canvas.drawImage],
/// [Canvas.drawImageRect], [Canvas.drawImageNine] or [Canvas.drawAtlas].
///
/// Defaults to [FilterQuality.none].   ¿ Ÿ≥Äó¿ Ÿ∑  ¿ Ÿ≈¿ Ÿ‘   ¿ ⁄NÅ»¿ €⁄Åk/// The shader to use when stroking or filling a shape.
///
/// When this is null, the [color] is used instead.
///
/// See also:
///
///  * [Gradient], a shader that paints a color gradient.
///  * [ImageShader], a shader that tiles an [Image].
///  * [colorFilter], which overrides [shader].
///  * [color], which is used if [shader] and [colorFilter] are null.   ¿ ‹ÅÔ¿ ‹  ¿ ‹$¿ ‹-   ¿ ﬁÅv¿ ﬁ¯ÄŒ/// A color filter to apply when a shape is drawn or when a layer is
/// composited.
///
/// See [ColorFilter] for details.
///
/// When a shape is being drawn, [colorFilter] overrides [color] and [shader].   ¿ ﬂÖÅ<¿ ﬂâ  ¿ ﬂï¿ ﬂ£   ¿ ‡≈Çà¿ ‚√Å»/// The [ImageFilter] to use when drawing raster images.
///
/// For example, to blur an image using [Canvas.drawImage], apply an
/// [ImageFilter.blur]:
///
/// ```dart
/// void paint(Canvas canvas, Size size) {
///   canvas.drawImage(
///     _image,
///     ui.Offset.zero,
///     Paint()..imageFilter = ui.ImageFilter.blur(sigmaX: 0.5, sigmaY: 0.5),
///   );
/// }
/// ```
///
/// See also:
///
///  * [MaskFilter], which is used for drawing geometry.   ¿ „PÅ∑¿ „T  ¿ „`¿ „n   ¿ ÂÅn¿ Ê Å/// Whether the colors of the image are inverted when drawn.
///
/// Inverting the colors of an image applies a new color filter that will
/// be composed with any user provided color filters. This is primarily
/// used for implementing smart invert on iOS.   ¿ Ê|l¿ ÊÄ  ¿ Êç
¿ Êì   ¿ ÊÏX¿ Êı    ¿ ÁGb¿ ÁK  ¿ ÁS
¿ ÁY   ¿ ∂ór¿ ∂•    ¿ Í¢á⁄¿ Íµ   ¿ Í¢¿ Í£ ¿¶h¿µÑû/// Opaque handle to raw decoded image data (pixels).
///
/// To obtain an [Image] object, use the [ImageDescriptor] API.
///
/// To draw an [Image], use one of the methods on the [Canvas] class, such as
/// [Canvas.drawImage].
///
/// A class or method that receives an image object must call [dispose] on the
/// handle when it is no longer needed. To create a shareable reference to the
/// underlying image, call [clone]. The method or object that receives
/// the new instance will then be responsible for disposing it, and the
/// underlying image itself will be disposed when all outstanding handles are
/// disposed.
///
/// If `dart:ui` passes an `Image` object and the recipient wishes to share
/// that handle with other callers, [clone] must be called _before_ [dispose].
/// A handle that has been disposed cannot create new handles anymore.
///
/// See also:
///
///  * [Image](https://api.flutter.dev/flutter/widgets/Image-class.html), the class in the [widgets] library.
///  * [ImageDescriptor], which allows reading information about the image and
///    creating a codec to decode it.
///  * [instantiateImageCodec], a utility method that wraps [ImageDescriptor]. ¿øÄ¡¿ƒ¿≈¿∆ ¿«¿Õ  ¿‘
¿⁄  ¿‡¿Ê   ¿•/¿Œ ¿•¿¶¿¨¿Ω¿≠¿ŸÅ¿	ÊÄÁ/// A callback that is invoked to report an image creation.
///
/// It's preferred to use [MemoryAllocations] in flutter/foundation.dart
/// than to use [onCreate] directly because [MemoryAllocations]
/// allows multiple callbacks. ¿	ÛÅ¿ÄÈ/// A callback that is invoked to report the image disposal.
///
/// It's preferred to use [MemoryAllocations] in flutter/foundation.dart
/// than to use [onDispose] directly because [MemoryAllocations]
/// allows multiple callbacks. ¿¿  ¿,S¿zA/// The number of image pixels along the image's horizontal axis. ¿ÑR¿–?/// The number of image pixels along the image's vertical axis. ¿€¿‡ ¿Ï¿Åï¿÷Ä•/// Whether this reference to the underlying image is [dispose]d.
///
/// This only returns a valid value if asserts are enabled, and must not be
/// used otherwise.   ¿ÜÉê¿ÌÅÃ/// The color space that is used by the [Image]'s colors.
///
/// This value is a consequence of how the [Image] has been created.  For
/// example, loading a PNG that is in the Display P3 color space will result
/// in a [ColorSpace.extendedSRGB] image.
///
/// On rendering backends that don't support wide gamut colors (anything but
/// iOS impeller), wide gamut images will still report [ColorSpace.sRGB] if
/// rendering wide gamut colors isn't supported.   ¿ıÉ&¿ıÅÊ/// Release this handle's claim on the underlying Image. This handle is no
/// longer usable after this method is called.
///
/// Once all outstanding handles have been disposed, the underlying image will
/// be disposed as well.
///
/// In debug mode, [debugGetOpenHandleStackTraces] will return a list of
/// [StackTrace] objects from all open handles' creation points. This is
/// useful when trying to determine what parts of the program are keeping an
/// image resident in memory.   ¿∏É ¿„ÅÕ/// Converts the [Image] object into a byte array.
///
/// The [format] argument specifies the format in which the bytes will be
/// returned.
///
/// Using [ImageByteFormat.rawRgba] on an image in the color space
/// [ColorSpace.extendedSRGB] will result in the gamut being squished to fit
/// into the sRGB gamut, resulting in the loss of wide-gamut colors.
///
/// Returns a future that completes with the binary image data or an error
/// if encoding fails. ¿Ô0¿   ¿¿¿¿Å¢¿ÂÄ∞/// If asserts are enabled, returns the [StackTrace]s of each open handle from
/// [clone], in creation order.
///
/// If asserts are disabled, this method always returns null.   ¿¿å‡¿%ä¢/// Creates a disposable handle to this image.
///
/// Holders of an [Image] must dispose of the image when they no longer need
/// to access it or draw it. However, once the underlying image is disposed,
/// it is no longer possible to use it. If a holder of an image needs to share
/// access to that image with another object or method, [clone] creates a
/// duplicate handle. The underlying image will only be disposed once all
/// outstanding handles are disposed. This allows for safe sharing of image
/// references while still disposing of the underlying resources when all
/// consumers are finished.
///
/// It is safe to pass an [Image] handle to another object or method if the
/// current holder no longer needs it.
///
/// To check whether two [Image] references are referring to the same
/// underlying image memory, use [isCloneOf] rather than the equality operator
/// or [identical].
///
/// The following example demonstrates valid usage.
///
/// ```dart
/// import 'dart:async';
/// import 'dart:typed_data';
/// import 'dart:ui';
///
/// Future<Image> _loadImage(int width, int height) {
///   final Completer<Image> completer = Completer<Image>();
///   decodeImageFromPixels(
///     Uint8List.fromList(List<int>.filled(width * height * 4, 0xFF)),
///     width,
///     height,
///     PixelFormat.rgba8888,
///     // Don't worry about disposing or cloning this image - responsibility
///     // is transferred to the caller, and that is safe since this method
///     // will not touch it again.
///     (Image image) => completer.complete(image),
///   );
///   return completer.future;
/// }
///
/// Future<void> main() async {
///   final Image image = await _loadImage(5, 5);
///   // Make sure to clone the image, because MyHolder might dispose it
///   // and we need to access it again.
///   final MyImageHolder holder = MyImageHolder(image.clone());
///   final MyImageHolder holder2 = MyImageHolder(image.clone());
///   // Now we dispose it because we won't need it again.
///   image.dispose();
///
///   final PictureRecorder recorder = PictureRecorder();
///   final Canvas canvas = Canvas(recorder);
///
///   holder.draw(canvas);
///   holder.dispose();
///
///   canvas.translate(50, 50);
///   holder2.draw(canvas);
///   holder2.dispose();
/// }
///
/// class MyImageHolder {
///   MyImageHolder(this.image);
///
///   final Image image;
///
///   void draw(Canvas canvas) {
///     canvas.drawImage(image, Offset.zero, Paint());
///   }
///
///   void dispose() => image.dispose();
/// }
/// ```
///
/// The returned object behaves identically to this image. Calling
/// [dispose] on it will only dispose the underlying native resources if it
/// is the last remaining handle.   ¿&§Çõ¿)ÇR/// Returns true if `other` is a [clone] of this and thus shares the same
/// underlying image memory, even if this or `other` is [dispose]d.
///
/// This method may return false for two images that were decoded from the
/// same underlying asset, if they are not sharing the same memory. For
/// example, if the same file is decoded using [instantiateImageCodec] twice,
/// or the same bytes are decoded using [decodeImageFromPixels] twice, there
/// will be two distinct [Image]s that render the same but do not share
/// underlying memory, and so will not be treated as clones of each other. ¿)¿)   ¿)C3¿)V   ¿)C¿)D ¿)zá6¿)ü  ¿*§'¿*∆¿*«¿*»  ¿*§¿*•¿*´¿*º¿*¨¿-î¿-ô ¿-•¿/Â%¿/ˆ ¿0¿0	¿0¿0¿0¿*œf¿+/   ¿*œ¿*–¿*÷¿*Ù¿*›¿*◊¿*Â¿*Û¿*Ê¿*Ì¿*Ú¿*Ó¿*ı¿+¿*¸¿*ˆ¿*˛¿+¿+¿+¿+9h¿+ö   ¿+9¿+:¿+@¿+^¿+G¿+A¿+O¿+]¿+P¿+W¿+\¿+X¿+_¿+Ö¿+f¿+`¿+h¿+¿+y¿+Å¿0b¿0f   ¿0¿0¿0¿04¿0¿0¿0%¿03¿0&¿0-¿02¿0.¿05¿0Q¿0<¿06¿0>¿+•Å¿+∑  ¿+√0¿+‘  ¿+‹¿+Î¿+Ï¿,µÄ€¿-X9/// Returns an error message on failure, null on success. ¿-d
¿-i  ¿-p¿-á  ¿,Ò¿,Ú¿,¯¿-&¿- ¿,˘¿-¿-%¿-	¿-¿-¿-¿-¿-¿-'¿-C¿-.¿-(¿-0¿-ÆÅd¿-≥    ¿/ÄÀ¿/÷k/// This can't be a leaf call because the native function calls Dart API
/// (Dart_SetNativeInstanceField).  ¿/Ü¿/á¿/ç¿/™¿/ì¿/é¿/õ¿/©¿/ú¿/£¿/®¿/§¿/´¿/ƒ¿/≤¿/¨¿/¥¿0u9¿0à   ¿0u¿0v¿)z¿){¿)Å¿)í¿)Ç¿1!â_¿7ÚÜ /// Information for a single frame of an animation.
///
/// To obtain an instance of the [FrameInfo] interface, see
/// [Codec.getNextFrame].
///
/// The recipient of an instance of this class is responsible for calling
/// [Image.dispose] on [image]. To share the image with other interested
/// parties, use [Image.clone]. If the [FrameInfo] object itself is passed to
/// another method or object, that method or object must assume it is
/// responsible for disposing the image when done, and the passer must not
/// access the [image] after that point.
///
/// For example, the following code sample is incorrect:
///
/// ```dart
/// /// BAD
/// Future<void> nextFrameRoutine(ui.Codec codec) async {
///   final ui.FrameInfo frameInfo = await codec.getNextFrame();
///   _cacheImage(frameInfo);
///   // ERROR - _cacheImage is now responsible for disposing the image, and
///   // the image may not be available any more for this drawing routine.
///   _drawImage(frameInfo);
///   // ERROR again - the previous methods might or might not have created
///   // handles to the image.
///   frameInfo.image.dispose();
/// }
/// ```
///
/// Correct usage is:
///
/// ```dart
/// /// GOOD
/// Future<void> nextFrameRoutine(ui.Codec codec) async {
///   final ui.FrameInfo frameInfo = await codec.getNextFrame();
///   _cacheImage(frameInfo.image.clone(), frameInfo.duration);
///   _drawImage(frameInfo.image.clone(), frameInfo.duration);
///   // This method is done with its handle, and has passed handles to its
///   // clients already.
///   // The image will live until those clients dispose of their handles, and
///   // this one must not be disposed since it will not be used again.
///   frameInfo.image.dispose();
/// }
/// ``` ¿8 Å¿8œ¿8–¿8—Äª/// This class is created by the engine, and should not be instantiated
/// or extended directly.
///
/// To obtain an instance of the [FrameInfo] interface, see
/// [Codec.getNextFrame].¿8”¿8‚  ¿8Î¿8˙   ¿9Äô¿9ñ{/// The duration this frame should be shown.
///
/// A zero duration indicates that the frame should be shown indefinitely. ¿9£Ä⁄¿:xÄæ/// The [Image] object for this frame.
///
/// This object must be disposed by the recipient of this frame info.
///
/// To share this image with other interested parties, use [Image.clone].    ¿:ÇÑ>¿;pÄﬁ/// A handle to an image codec.
///
/// This class is created by the engine, and should not be instantiated
/// or extended directly.
///
/// To obtain an instance of the [Codec] interface, see
/// [instantiateImageCodec].   ¿;z9¿;®#/// Number of frames in this image.   ¿;∑Ä¶¿<MÄÖ/// Number of times to repeat the animation.
///
/// * 0 when the animation should be played once.
/// * -1 for infinity repetitions.   ¿<aÅa¿=≥Å//// Fetches the next animation frame.
///
/// Wraps back to the first frame after returning the last frame.
///
/// The returned future can complete with an error if the decoding has failed.
///
/// The caller of this method is responsible for disposing the
/// [FrameInfo.image] on the returned object.   ¿=∆Ä¯¿>¥Äﬁ/// Release the resources used by this object. The object is no longer usable
/// after this method is called.
///
/// This can't be a leaf call because the native function calls Dart API
/// (Dart_SetNativeInstanceField).    ¿>¬ák¿>Á  ¿?Ô-¿@¿@¿@  ¿?Ô¿?¿?ˆ¿@¿?˜¿@ ¿@%  ¿@¯¿@˝  ¿@;D¿@O   ¿@;¿@<¿@Éq¿@Ë   ¿@É¿@Ñ¿@ä¿@®¿@ë¿@ã¿@ô¿@ß¿@ö¿@°¿@¶¿@¢¿@©¿@”¿@∞¿@™¿@≤¿@Õ¿@«¿@œ¿AS¿A,   ¿A¿A¿Ao{¿AŸ   ¿Ao¿Ap¿Av¿Aî¿A}¿Aw¿AÖ¿Aì¿AÜ¿Aç¿Aí¿Aé¿Aï¿Aƒ¿Aú¿Añ¿Aû¿Aæ¿A∏¿A¿¿AÓÇı¿B   ¿AÓ¿AÔ¿DÁÄ⁄¿EÖ9/// Returns an error message on failure, null on success. ¿Eì,¿E∏  ¿E#¿E$¿E*¿EQ¿E2¿E+¿E:¿EP¿E;¿EB¿EG¿EC¿EJ¿ER¿Ep¿EY¿ES¿E[¿E≈f¿F!   ¿E≈¿E∆¿E—¿E“¿Eÿ¿Eı¿Eﬁ¿EŸ¿EÊ¿EÙ¿EÁ¿EÓ¿EÛ¿EÔ¿Eˆ¿F¿E˝¿E˜¿Eˇ¿>¬¿>√¿>…¿>⁄¿> ¿etÜj¿fáÅ/// A specification of the size to which an image should be decoded.
///
/// See also:
///
///  * [TargetImageSizeCallback], a callback that returns instances of this
///    class when consulted by image decoding methods such as
///    [instantiateImageCodecWithSize]. ¿fõÅ# ¿g:¿gIÄê/// Creates a new instance of this class.
///
/// The `width` and `height` may both be null, but if they're non-null, they
/// must be positive.¿gK
¿gQ  ¿gW¿g]  ¿gm¿gs¿gé¿gÇ¿gz¿gt¿g}¿gã¿gÖ¿gç¿gô¿gü¿gº¿gØ¿gß¿g†¿g™¿gπ¿g≤¿gª¿g¬ÅÂ¿i¢Å¬/// The width into which to load the image.
///
/// If this is non-null, the image will be decoded into the specified width.
/// If this is null and [height] is also null, the image will be decoded into
/// its intrinsic size. If this is null and [height] is non-null, the image
/// will be decoded into a width that maintains its intrinsic aspect ratio
/// while respecting the [height] value.
///
/// If this value is non-null, it must be positive. ¿i¨ÅÊ¿kåÅ¬/// The height into which to load the image.
///
/// If this is non-null, the image will be decoded into the specified height.
/// If this is null and [width] is also null, the image will be decoded into
/// its intrinsic size. If this is null and [width] is non-null, the image
/// will be decoded into a height that maintains its intrinsic aspect ratio
/// while respecting the [width] value.
///
/// If this value is non-null, it must be positive.  ¿kóE¿k™   ¿kó¿kò ¿ÖÅÉò¿Ö·P/// A handle for the framework to hold and retain an engine layer across frames.    ¿ÖÒÉ&¿âÇ¯/// Release the resources used by this object. The object is no longer usable
/// after this method is called.
///
/// EngineLayers indirectly retain platform specific graphics resources. Some
/// of these resources, such as images, may be memory intensive. It is
/// important to dispose of EngineLayer objects that will no longer be used as
/// soon as possible to avoid retaining these resources until the next
/// garbage collection.
///
/// Once this EngineLayer is disposed, it is no longer eligible for use as a
/// retained layer, and must not be passed as an `oldLayer` to any of the
/// [SceneBuilder] methods which accept that parameter.
///
/// This can't be a leaf call because the native function calls Dart API
/// (Dart_SetNativeInstanceField).    ¿âÅ¿â@  ¿âèÄô¿ä#¿ä$¿ä%a/// This class is created by the engine, and should not be instantiated
/// or extended directly. ¿âı¿âˆ¿â¸¿ä¿â˝  ¿ä,l¿äé   ¿ä,¿ä-¿ä8¿ä9¿ä?¿ä\¿äE¿ä@¿äM¿ä[¿äN¿äU¿äZ¿äV¿ä]¿ä|¿äd¿ä^¿äf¿â¿â¿â"¿â3¿â#¿äú∏X¿çdÇ∏/// A complex, one-dimensional subset of a plane.
///
/// A path consists of a number of sub-paths, and a _current point_.
///
/// Sub-paths consist of segments of various types, such as lines,
/// arcs, or beziers. Sub-paths can be open or closed, and can
/// self-intersect.
///
/// Closed sub-paths enclose a (possibly discontiguous) region of the
/// plane based on the current [fillType].
///
/// The _current point_ is initially at the origin. After each
/// operation adding a segment to a sub-path, the current point is
/// updated to the end of that segment.
///
/// Paths can be drawn on canvases using [Canvas.drawPath], and can
/// used to create clip regions using [Canvas.clipPath]. ¿çm ¿çu¿çy   ¿çéÅi¿éd¿ée¿éiÄ¡/// Creates a copy of another [Path].
///
/// This copy is fast and does not require additional memory unless either
/// the `source` path or the path returned by this constructor are modified.¿éj¿ép    ¿é˚Ä£¿èïÄÇ/// Determines how the interior of this path is calculated.
///
/// Defaults to the non-zero winding rule, [PathFillType.nonZero].   ¿è°!¿è•  ¿èÆ¿èº   ¿è∆U¿ê 2/// Starts a new sub-path at the given coordinate. ¿ê¿ê  ¿ê¿ê   ¿êr¿êlE/// Starts a new sub-path at the given offset from the current point. ¿ê{	¿êÉ  ¿êÜ	¿êé   ¿êït¿êÓO/// Adds a straight line segment from the current point to the given
/// point. ¿êı¿ê˝  ¿êˇ¿ë   ¿ëÄ£¿ëãt/// Adds a straight line segment from the current point to the point
/// at the given offset from the current point. ¿ëö	¿ë¢  ¿ë•	¿ë≠   ¿ë¥Å¡¿ì7Åq/// Adds a quadratic bezier segment that curves from the current
/// point to the given point (x2,y2), using the control point
/// (x1,y1).
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_quadratic_to.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_quadratic_to_dark.png#gh-dark-mode-only) ¿ìI	¿ìQ  ¿ìT	¿ì\  ¿ì_	¿ìg  ¿ìj	¿ìr   ¿ìyÅ'¿îZÄ”/// Adds a quadratic bezier segment that curves from the current
/// point to the point at the offset (x2,y2) from the current point,
/// using the control point at the offset (x1,y1) from the current
/// point. ¿ît	¿î|  ¿î	¿îá  ¿îä	¿îí  ¿îï	¿îù   ¿î§ÅŒ¿ñ(År/// Adds a cubic bezier segment that curves from the current point
/// to the given point (x3,y3), using the control points (x1,y1) and
/// (x2,y2).
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_cubic_to.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_cubic_to_dark.png#gh-dark-mode-only) ¿ñ0	¿ñ8  ¿ñ;	¿ñC  ¿ñF	¿ñN  ¿ñQ	¿ñY  ¿ñ\	¿ñd  ¿ñg	¿ño   ¿ñvÅ=¿óaÄ›/// Adds a cubic bezier segment that curves from the current point
/// to the point at the offset (x3,y3) from the current point, using
/// the control points at the offsets (x1,y1) and (x2,y2) from the
/// current point. ¿óq	¿óy  ¿ó|	¿óÑ  ¿óá	¿óè  ¿óí	¿óö  ¿óù	¿ó•  ¿ó®	¿ó∞   ¿ó∑Çb¿ô€Ç/// Adds a bezier segment that curves from the current point to the
/// given point (x2,y2), using the control points (x1,y1) and the
/// weight w. If the weight is greater than 1, then the curve is a
/// hyperbola; if the weight equals 1, it's a parabola; and if it is
/// less than 1, it is an ellipse.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_conic_to.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_conic_to_dark.png#gh-dark-mode-only) ¿ô„	¿ôÎ  ¿ôÓ	¿ôˆ  ¿ô˘	¿ö  ¿ö	¿ö  ¿ö¿ö   ¿öÅœ¿õ¶Åw/// Adds a bezier segment that curves from the current point to the
/// point at the offset (x2,y2) from the current point, using the
/// control point at the offset (x1,y1) from the current point and
/// the weight w. If the weight is greater than 1, then the curve is
/// a hyperbola; if the weight equals 1, it's a parabola; and if it
/// is less than 1, it is an ellipse. ¿õ∂	¿õæ  ¿õ¡	¿õ…  ¿õÃ	¿õ‘  ¿õ◊	¿õﬂ  ¿õ‚¿õÍ   ¿õÉr¿üÉ/// If the `forceMoveTo` argument is false, adds a straight line
/// segment and an arc segment.
///
/// If the `forceMoveTo` argument is true, starts a new sub-path
/// consisting of an arc segment.
///
/// In either case, the arc segment consists of the arc that follows
/// the edge of the oval bounded by the given rectangle, from
/// startAngle radians around the oval up to startAngle + sweepAngle
/// radians around the oval, with zero radians being the point on
/// the right hand side of the oval that crosses the horizontal line
/// that intersects the center of the rectangle and with positive
/// angles going clockwise around the oval.
///
/// The line segment added if `forceMoveTo` is false starts at the
/// current point and ends at the start of the arc. ¿ü	¿ü%  ¿ü*¿ü2  ¿ü=¿üE  ¿üP¿üV   ¿üfÉ!¿°ÙÇp/// Appends up to four conic curves weighted to describe an oval of `radius`
/// and rotated by `rotation` (measured in degrees and clockwise).
///
/// The first curve begins from the last point in the path and the last ends
/// at `arcEnd`. The curves follow a path in a direction determined by
/// `clockwise` and `largeArc` in such a way that the sweep angle
/// is always less than 360 degrees.
///
/// A simple line is appended if either radii are zero or the last
/// point in the path is `arcEnd`. The radii are scaled to fit the last path
/// point if both are greater than zero but too small to describe an arc.
/// ¿°ˇ¿¢  ¿¢¿¢  ¿¢5¿¢=  ¿¢P¿¢V  ¿¢k¿¢q  ¿¢$¿¢*¿¢+¿¢G¿¢`¿¢|¿¢ãÉ£¿•âÇ‹/// Appends up to four conic curves weighted to describe an oval of `radius`
/// and rotated by `rotation` (measured in degrees and clockwise).
///
/// The last path point is described by (px, py).
///
/// The first curve begins from the last point in the path and the last ends
/// at `arcEndDelta.dx + px` and `arcEndDelta.dy + py`. The curves follow a
/// path in a direction determined by `clockwise` and `largeArc`
/// in such a way that the sweep angle is always less than 360 degrees.
///
/// A simple line is appended if either radii are zero, or, both
/// `arcEndDelta.dx` and `arcEndDelta.dy` are zero. The radii are scaled to
/// fit the last path point if both are greater than zero but too small to
/// describe an arc. ¿•°¿•©  ¿•ª¿•√  ¿•‹¿•‰  ¿•˜¿•˝  ¿¶¿¶  ¿•À¿•—¿•“¿•Ó¿¶¿¶#¿¶2v¿¶ïY/// Adds a new sub-path that consists of four lines that outline the
/// given rectangle. ¿¶ù	¿¶£   ¿¶¨Å.¿ß«Å/// Adds a new sub-path that consists of a curve that forms the
/// ellipse that fills the given rectangle.
///
/// To add a circle, pass an appropriate rectangle as `oval`. [Rect.fromCircle]
/// can be used to easily describe the circle's center [Offset] and radius. ¿ßœ	¿ß’   ¿ßﬁÉË¿´éÉé/// Adds a new sub-path with one arc segment that consists of the arc
/// that follows the edge of the oval bounded by the given
/// rectangle, from startAngle radians around the oval up to
/// startAngle + sweepAngle radians around the oval, with zero
/// radians being the point on the right hand side of the oval that
/// crosses the horizontal line that intersects the center of the
/// rectangle and with positive angles going clockwise around the
/// oval.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_add_arc.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_add_arc_dark.png#gh-dark-mode-only)
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_add_arc_ccw.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_add_arc_ccw_dark.png#gh-dark-mode-only) ¿´ï	¿´õ  ¿´†¿´®  ¿´≥¿´ª   ¿´ ÅX¿¨ˆÅ/// Adds a new sub-path with a sequence of line segments that connect the given
/// points.
///
/// If `close` is true, a final line segment will be added that connects the
/// last point to the first point.
///
/// The `points` argument is interpreted as offsets from the origin. ¿≠¿≠  ¿≠
¿≠   ¿≠&Ä∞¿≠¿Äé/// Adds a new sub-path that consists of the straight lines and
/// curves needed to form the rounded rectangle described by the
/// argument. ¿≠…¿≠–   ¿≠⁄ÅQ¿ÆÒÅ/// Adds the sub-paths of `path`, offset by `offset`, to this path.
///
/// If `matrix4` is specified, the path will be transformed by this matrix
/// after the matrix is translated by the given offset. The matrix is a 4x4
/// matrix stored in column major order. ¿Æ˘	¿Æˇ  ¿Ø¿Ø  ¿Ø¿Ø"   ¿Ø/Å◊¿∞≈ÅÇ/// Adds the sub-paths of `path`, offset by `offset`, to this path.
/// The current sub-path is extended with the first sub-path
/// of `path`, connecting them with a lineTo if necessary.
///
/// If `matrix4` is specified, the path will be transformed by this matrix
/// after the matrix is translated by the given `offset`.  The matrix is a 4x4
/// matrix stored in column major order. ¿∞‘	¿∞⁄  ¿∞ﬂ¿∞Á  ¿∞Ô¿∞˝   ¿±
Äì¿±ïÄÅ/// Closes the last sub-path, as if a straight line had been drawn
/// from the current point to the first point of the sub-path.   ¿±°Ä±¿≤JÄù/// Clears the [Path] object of all sub-paths, returning it to the
/// same state it had when it was created. The _current point_ is
/// reset to the origin.   ¿≤VÅq¿≥∞ÅF/// Tests to see if the given point is within the path. (That is, whether the
/// point would be in the visible portion of the path if the path was used
/// with [Canvas.clipPath].)
///
/// The `point` argument is interpreted as an offset from the origin.
///
/// Returns true if the point is in the path, and false otherwise. ¿≥π¿≥¡   ¿≥ÀÄâ¿¥?j/// Returns a copy of the path with all the segments of every
/// sub-path translated by the given offset. ¿¥E¿¥M   ¿¥XÄî¿¥Õk/// Returns a copy of the path with all the segments of every
/// sub-path transformed by the given matrix. ¿¥◊¿¥‰   ¿¥É£¿∏áÉ0/// Computes the bounding rectangle for this path.
///
/// A path containing only axis-aligned points on the same straight line will
/// have no area, and therefore `Rect.isEmpty` will return true for such a
/// path. Consider checking `rect.width + rect.height > 0.0` instead, or
/// using the [computeMetrics] API to check the path length.
///
/// For many more elaborate paths, the bounds may be inaccurate.  For example,
/// when a path contains a circle, the points used to compute the bounds are
/// the circle's implied control points, which form a square around the circle;
/// if the circle has a transformation applied using [transform] then that
/// square is rotated, and the (axis-aligned, non-rotated) bounding box
/// therefore ends up grossly overestimating the actual area covered by the
/// circle.   ¿∏óÇî¿π‡Å0/// Combines the two paths according to the manner specified by the given
/// `operation`.
///
/// The resulting path will be constructed from non-overlapping contours. The
/// curve order is reduced where possible so that cubics may be turned into
/// quadratics, and quadratics maybe turned into lines. ¿πË¿π˜  ¿∫
¿∫  ¿∫
¿∫   ¿ª/á√¿¬«áM/// Creates a [PathMetrics] object for this path, which can describe various
/// properties about the contours of the path.
///
/// A [Path] is made up of zero or more contours. A contour is made up of
/// connected curves and segments, created via methods like [lineTo],
/// [cubicTo], [arcTo], [quadraticBezierTo], their relative counterparts, as
/// well as the add* methods such as [addRect]. Creating a new [Path] starts
/// a new contour once it has any drawing instructions, and another new
/// contour is started for each [moveTo] instruction.
///
/// A [PathMetric] object describes properties of an individual contour,
/// such as its length, whether it is closed, what the tangent vector of a
/// particular offset along the path is. It also provides a method for
/// creating sub-paths: [PathMetric.extractPath].
///
/// Calculating [PathMetric] objects is not trivial. The [PathMetrics] object
/// returned by this method is a lazy [Iterable], meaning it only performs
/// calculations when the iterator is moved to the next [PathMetric]. Callers
/// that wish to memoize this iterable can easily do so by using
/// [Iterable.toList] on the result of this method. In particular, callers
/// looking for information about how many contours are in the path should
/// either store the result of `path.computeMetrics().length`, or should use
/// `path.computeMetrics().toList()` so they can repeatedly check the length,
/// since calling `Iterable.length` causes traversal of the entire iterable.
///
/// In particular, callers should be aware that [PathMetrics.length] is the
/// number of contours, **not the length of the path**. To get the length of
/// a contour in a path, use [PathMetric.length].
///
/// If `forceClosed` is set to true, the contours of the path will be measured
/// as if they had been closed, even if they were not explicitly closed. ¿¬◊¿¬›  ¿¬Í ¿¬ˆ•{¿√  ¿√\e ¿√†¿√´%/// Create a new empty [Path] object. ¿√Ñ¿√Ö¿√ã¿√ú¿√å¿√≈Ä£¿ƒc¿ƒd¿ƒeÄé/// Avoids creating a new native backing for the path for methods that will
/// create it later, such as [Path.from], [shift] and [transform].   ¿≈4M¿≈Q   ¿≈4¿≈5¿≈ÑJ¿≈î  ¿≈ù¿≈´  ¿≈Ñ¿≈Ö0¿ƒlV¿ƒ≥   ¿ƒl¿ƒm¿ƒs¿ƒâ¿ƒy¿ƒt¿ƒÅ¿ƒà¿ƒÇ¿ƒä¿ƒ°¿ƒë¿ƒã¿ƒì¿ƒ∆j¿≈  ¿≈"¿≈(  ¿ƒ∆¿ƒ«¿ƒÕ¿ƒÚ¿ƒ”¿ƒŒ¿ƒ€¿ƒÒ¿ƒ‹¿ƒ„¿ƒË¿ƒ‰¿ƒÎ¿ƒÛ¿≈	¿ƒ˙¿ƒÙ¿ƒ¸¿≈“p¿∆3   ¿≈“¿≈”¿≈Ÿ¿≈˜¿≈‡¿≈⁄¿≈Ë¿≈ˆ¿≈È¿≈¿≈ı¿≈Ò¿≈¯¿∆"¿≈ˇ¿≈˘¿∆¿∆¿∆¿∆¿∆FÄÉ¿∆Æ  ¿∆ª¿∆¿  ¿∆F¿∆G¿∆M¿∆q¿∆S¿∆N¿∆[¿∆p¿∆\¿∆c¿∆h¿∆d¿∆k¿∆r¿∆ú¿∆y¿∆s¿∆{¿∆ñ¿∆ê¿∆ò¿∆ÕÄì¿«E  ¿«L¿«T  ¿«V¿«^  ¿∆Õ¿∆Œ¿∆Ÿ¿∆⁄¿∆‡¿«¿∆Ê¿∆·¿∆Ó¿«¿∆Ô¿∆ˆ¿∆˚¿∆˜¿∆˛¿«¿«¿«3¿«¿«¿«¿«-¿«'¿«/¿«dÄ•¿«‰  ¿«Û	¿«˚  ¿«˛	¿»  ¿«d¿«e¿«p¿«q¿«w¿«§¿«}¿«x¿«Ö¿«£¿«Ü¿«ç¿«í¿«é¿«ï¿«ù¿«•¿«“¿«¨¿«¶¿«Æ¿«Ã¿«∆¿«Œ¿»Äì¿»Ö  ¿»å¿»î  ¿»ñ¿»û  ¿»¿»¿»¿»¿» ¿»M¿»&¿»!¿».¿»L¿»/¿»6¿»;¿»7¿»>¿»F¿»N¿»s¿»U¿»O¿»W¿»m¿»g¿»o¿»§Ä•¿…$  ¿…3	¿…;  ¿…>	¿…F  ¿»§¿»•¿»∞¿»±¿»∑¿»‰¿»Ω¿»∏¿»≈¿»„¿»∆¿»Õ¿»“¿»Œ¿»’¿»›¿»Â¿…¿»Ï¿»Ê¿»Ó¿…¿…¿…¿…MÄ—¿…‡  ¿…Ú	¿…˙  ¿…˝	¿   ¿ 	¿   ¿ 	¿   ¿…M¿…N¿…Y¿…Z¿…`¿…ù¿…f¿…a¿…n¿…ú¿…o¿…v¿…{¿…w¿…~¿…Ü¿…é¿…ñ¿…û¿…Œ¿…•¿…ü¿…ß¿…»¿…¬¿… ¿ "ÄË¿ Ω  ¿ ﬁ	¿ Ê  ¿ È	¿ Ò  ¿ Ù	¿ ¸  ¿ ˇ	¿À  ¿ "¿ #¿ .¿ /¿ 5¿ r¿ ;¿ 6¿ C¿ q¿ D¿ K¿ P¿ L¿ S¿ [¿ c¿ k¿ s¿ ´¿ z¿ t¿ |¿ •¿ ü¿ ß¿ÀÄ„¿Àß  ¿ÀØ	¿À∑  ¿À∫	¿À¬  ¿À≈	¿ÀÕ  ¿À–	¿Àÿ  ¿À€	¿À„  ¿ÀÊ	¿ÀÓ  ¿À¿À¿À¿À¿À!¿Àn¿À'¿À"¿À/¿Àm¿À0¿À7¿À<¿À8¿À?¿ÀG¿ÀO¿ÀW¿À_¿Àg¿Ào¿Àï¿Àv¿Àp¿Àx¿Àè¿Àâ¿Àë¿ÀıÄÛ¿Ãñ  ¿Ã¶	¿ÃÆ  ¿Ã±	¿Ãπ  ¿Ãº	¿Ãƒ  ¿Ã«	¿Ãœ  ¿Ã“	¿Ã⁄  ¿Ã›	¿ÃÂ  ¿Àı¿Àˆ¿Ã¿Ã¿Ã¿ÃU¿Ã¿Ã	¿Ã¿ÃT¿Ã¿Ã¿Ã#¿Ã¿Ã&¿Ã.¿Ã6¿Ã>¿ÃF¿ÃN¿ÃV¿ÃÑ¿Ã]¿ÃW¿Ã_¿Ã~¿Ãx¿ÃÄ¿ÃÏÄœ¿Õ}  ¿ÕÖ	¿Õç  ¿Õê	¿Õò  ¿Õõ	¿Õ£  ¿Õ¶	¿ÕÆ  ¿Õ±¿Õπ  ¿ÃÏ¿ÃÌ¿Ã¯¿Ã˘¿Ãˇ¿ÕD¿Õ¿Õ ¿Õ¿ÕC¿Õ¿Õ¿Õ¿Õ¿Õ¿Õ%¿Õ-¿Õ5¿Õ=¿ÕE¿Õk¿ÕL¿ÕF¿ÕN¿Õe¿Õ_¿Õg¿ÕøÄﬂ¿ŒX  ¿Œh	¿Œp  ¿Œs	¿Œ{  ¿Œ~	¿ŒÜ  ¿Œâ	¿Œë  ¿Œî¿Œú  ¿Õø¿Õ¿¿ÕÀ¿ÕÃ¿Õ“¿Œ¿Õÿ¿Õ”¿Õ‡¿Œ¿Õ·¿ÕË¿ÕÌ¿ÕÈ¿Õ¿Õ¯¿Œ ¿Œ¿Œ¿Œ¿ŒF¿Œ¿Œ¿Œ!¿Œ@¿Œ:¿ŒB¿Œ¢Äﬁ¿Œ≥  ¿Œπ	¿Œø  ¿Œƒ¿ŒÃ  ¿Œ◊¿Œﬂ  ¿ŒÍ¿Œ  ¿Œ¢¿Œ£¿œÑÅ¿–  ¿–¿–$  ¿–)
¿–1  ¿–5¿–=  ¿–C¿–K  ¿–R¿–Z  ¿–e¿–m  ¿–x¿–~  ¿œÑ¿œÖ¿œã¿œﬁ¿œë¿œå¿œô¿œ›¿œö¿œ°¿œ¶¿œ¢¿œ©¿œ±¿œπ¿œ¡¿œ…¿œ—¿œŸ¿œﬂ¿–¿œÊ¿œ‡¿œË¿œ˝¿œ˜¿œˇ¿–éÅK¿–ü  ¿–™¿–≤  ¿–ø¿–«  ¿–‡¿–Ë  ¿–˚¿—  ¿—¿—  ¿–é¿–è¿–œ¿–’¿–÷¿–Ú¿—¿—'¿—›Å¿“q  ¿“}¿“Ö  ¿“ç¿“ï  ¿“ù¿“•  ¿“≠¿“µ  ¿“Ω¿“≈  ¿“Œ¿“‘  ¿“›¿“„  ¿—›¿—ﬁ¿—‰¿“5¿—Í¿—Â¿—Ú¿“4¿—Û¿—˙¿—ˇ¿—˚¿“¿“
¿“¿“¿“"¿“*¿“0¿“6¿“_¿“=¿“7¿“?¿“Y¿“S¿“[¿“ÒÅt¿”  ¿”¿”"  ¿”4¿”<  ¿”U¿”]  ¿”p¿”v  ¿”ã¿”ë  ¿“Ò¿“Ú¿”D¿”J¿”K¿”g¿”Ä¿”ú¿‘iÅK¿’  ¿’ ¿’(  ¿’6¿’>  ¿’L¿’T  ¿’b¿’j  ¿’x¿’Ä  ¿’è¿’ï  ¿’§¿’™  ¿‘i¿‘j¿‘p¿‘¡¿‘v¿‘q¿‘~¿‘¿¿‘¿‘Ü¿‘ã¿‘á¿‘é¿‘ñ¿‘û¿‘¶¿‘Æ¿‘∂¿‘º¿‘¬¿‘Û¿‘…¿‘√¿‘À¿‘Ì¿‘Á¿‘Ô¿’∏ÄÖ¿’…  ¿’—	¿’◊  ¿’∏¿’π¿÷AÄº¿÷æ  ¿÷«¿÷œ  ¿÷‘
¿÷‹  ¿÷‡¿÷Ë  ¿÷Ó¿÷ˆ  ¿÷A¿÷B¿÷H¿÷Ö¿÷N¿÷I¿÷V¿÷Ñ¿÷W¿÷^¿÷c¿÷_¿÷f¿÷n¿÷v¿÷~¿÷Ü¿÷¨¿÷ç¿÷á¿÷è¿÷¶¿÷†¿÷®¿◊ÄÖ¿◊  ¿◊	¿◊   ¿◊¿◊¿◊äÄº¿ÿ  ¿ÿ¿ÿ  ¿ÿ
¿ÿ%  ¿ÿ)¿ÿ1  ¿ÿ7¿ÿ?  ¿◊ä¿◊ã¿◊ë¿◊Œ¿◊ó¿◊í¿◊ü¿◊Õ¿◊†¿◊ß¿◊¨¿◊®¿◊Ø¿◊∑¿◊ø¿◊«¿◊œ¿◊ı¿◊÷¿◊–¿◊ÿ¿◊Ô¿◊È¿◊Ò¿ÿJÄ¡¿ÿ[  ¿ÿb	¿ÿh  ¿ÿm¿ÿu  ¿ÿÄ¿ÿà  ¿ÿJ¿ÿK¿ŸÄ¿Ÿõ  ¿Ÿ£¿Ÿ´  ¿Ÿ∞
¿Ÿ∏  ¿Ÿº¿Ÿƒ  ¿Ÿ ¿Ÿ“  ¿ŸŸ¿Ÿ·  ¿ŸÏ¿ŸÙ  ¿Ÿ¿Ÿ¿Ÿ¿Ÿc¿Ÿ¿Ÿ¿Ÿ$¿Ÿb¿Ÿ%¿Ÿ,¿Ÿ1¿Ÿ-¿Ÿ4¿Ÿ<¿ŸD¿ŸL¿ŸT¿Ÿ\¿Ÿd¿Ÿâ¿Ÿk¿Ÿe¿Ÿm¿ŸÉ¿Ÿ}¿ŸÖ¿⁄t¿⁄  ¿⁄¿⁄-  ¿⁄4
¿⁄:  ¿⁄¿⁄¿⁄{Äå¿⁄€  ¿⁄Á¿⁄Ù  ¿⁄˚
¿€  ¿⁄{¿⁄|¿⁄Ç¿⁄≠¿⁄à¿⁄É¿⁄ê¿⁄¨¿⁄ë¿⁄ò¿⁄ù¿⁄ô¿⁄†¿⁄®¿⁄Æ¿⁄…¿⁄µ¿⁄Ø¿⁄∑¿€r¿€  ¿€%¿€,  ¿€¿€¿€Åu¿€Ÿ  ¿€„¿€  ¿€Å¿€Ç¿€à¿€≠¿€é¿€â¿€ñ¿€¨¿€ó¿€û¿€£¿€ü¿€¶¿€Æ¿€«¿€µ¿€Ø¿€∑¿€˙ÅS¿‹  ¿‹	¿‹  ¿‹¿‹&  ¿‹.¿‹<  ¿€˙¿€˚¿›QÄü¿›ø  ¿›»¿›’  ¿›⁄	¿›‚  ¿›Â	¿›Ì  ¿›Q¿›R¿›X¿›î¿›^¿›Y¿›f¿›ì¿›g¿›n¿›s¿›o¿›v¿›}¿›Ç¿›~¿›Ö¿›ç¿›ï¿›≠¿›ú¿›ñ¿›û¿›ÙÄœ¿ﬁt  ¿ﬁá¿ﬁî  ¿ﬁô	¿ﬁ°  ¿ﬁ§	¿ﬁ¨  ¿ﬁØ¿ﬁº  ¿›Ù¿›ı¿›˚¿ﬁ?¿ﬁ¿›¸¿ﬁ	¿ﬁ>¿ﬁ
¿ﬁ¿ﬁ¿ﬁ¿ﬁ¿ﬁ ¿ﬁ%¿ﬁ!¿ﬁ(¿ﬁ0¿ﬁ8¿ﬁ@¿ﬁb¿ﬁG¿ﬁA¿ﬁI¿ﬁ«Åg¿ﬁÿ  ¿ﬁÁ	¿ﬁÌ  ¿ﬁÚ¿ﬁ˙  ¿ﬂ¿ﬂ  ¿ﬁ«¿ﬁ»¿‡2Ä≠¿‡ß  ¿‡∑¿‡ƒ  ¿‡…	¿‡—  ¿‡‘	¿‡‹  ¿‡2¿‡3¿‡9¿‡u¿‡?¿‡:¿‡G¿‡t¿‡H¿‡O¿‡T¿‡P¿‡W¿‡^¿‡c¿‡_¿‡f¿‡n¿‡v¿‡ï¿‡}¿‡w¿‡¿‡„Ä€¿·i  ¿·Ç¿·è  ¿·î	¿·ú  ¿·ü	¿·ß  ¿·™¿·∑  ¿‡„¿‡‰¿‡Í¿·.¿‡¿‡Î¿‡¯¿·-¿‡˘¿· ¿·¿·¿·¿·¿·¿·¿·¿·¿·'¿·/¿·W¿·6¿·0¿·8¿·¬o¿‚)   ¿·¬¿·√¿·Œ¿·œ¿·’¿·Ú¿·€¿·÷¿·„¿·Ò¿·‰¿·Î¿·¿·Ï¿·Û¿‚¿·˙¿·Ù¿·¸¿‚¿‚¿‚¿‚5o¿‚ú   ¿‚5¿‚6¿‚A¿‚B¿‚H¿‚e¿‚N¿‚I¿‚V¿‚d¿‚W¿‚^¿‚c¿‚_¿‚f¿‚ä¿‚m¿‚g¿‚o¿‚Ñ¿‚~¿‚Ü¿‚®z¿‚π  ¿‚¬¿‚   ¿‚®¿‚©¿„&Äå¿„î  ¿„û¿„¶  ¿„®¿„∞  ¿„&¿„'¿„-¿„Z¿„3¿„.¿„;¿„Y¿„<¿„C¿„H¿„D¿„K¿„S¿„[¿„Ç¿„b¿„\¿„d¿„|¿„v¿„~¿„∂Ä∂¿„«  ¿„Õ¿„’  ¿„∂¿„∑¿‰pÄê¿‰’  ¿‰‹¿‰‚  ¿‰Í	¿‰Ú  ¿‰ı	¿‰˝  ¿‰p¿‰q¿‰w¿‰¨¿‰}¿‰x¿‰Ö¿‰´¿‰Ü¿‰ç¿‰í¿‰é¿‰ï¿‰ù¿‰•¿‰≠¿‰√¿‰¥¿‰Æ¿‰∂¿ÂÄπ¿Â  ¿Â¿Â,  ¿Â¿Â¿Â¡Äè¿Ê"  ¿Ê-¿Ê3  ¿Ê;¿ÊH  ¿Â¡¿Â¬¿Â»¿Âı¿ÂŒ¿Â…¿Â÷¿ÂÙ¿Â◊¿Âﬁ¿Â„¿Âﬂ¿ÂÊ¿ÂÓ¿Âˆ¿Ê¿Â˝¿Â˜¿Âˇ¿ÊTÄã¿Êe   ¿ÊT¿ÊU¿Ê„g¿Á=   ¿Ê„¿Ê‰¿ÊÍ¿Á	¿ÊÚ¿ÊÎ¿Ê˙¿Á¿Ê˚¿Á¿Á¿Á¿Á
¿Á$¿Á¿Á¿Á¿ÁNÄ®¿ÁΩ  ¿Á¡¿ÁŒ  ¿Á‘¿Á·  ¿ÁÁ¿ÁÏ  ¿ÁN¿ÁO¿ÁU¿Áó¿Á[¿ÁV¿Ác¿Áñ¿Ád¿Ák¿Áp¿Ál¿Ás¿Áz¿Á¿Á{¿ÁÇ¿Áâ¿Áé¿Áä¿Áë¿Áò¿Á´¿Áü¿Áô¿Á°¿Á˙u¿Ë  ¿Ë"¿Ë(  ¿Á˙¿Á˚¿Ë5¿¬ˆ¿¬˜¿¬˝¿√¿¬˛¿ËsáD¿È+Ä±/// The geometric description of a tangent: the angle at a point.
///
/// See also:
///  * [PathMetric.getTangentForOffset], which returns the tangent of an offset along a path. ¿È7Äá ¿Èö¿È°V/// Creates a [Tangent] with the given values.
///
/// The arguments must not be null.¿È¢¿È®  ¿È±¿È∑   ¿È¬ÅR¿Íù¿Íû¿ÍßÄ√/// Creates a [Tangent] based on the angle rather than the vector.
///
/// The [vector] is computed to be the unit vector at the given angle, interpreted
/// as clockwise radians from the x axis.¿Í®¿Í∞  ¿Íπ¿Í¡   ¿ÎÄ—¿Î·Ä≥/// Position of the tangent.
///
/// When used with [PathMetric.getTangentForOffset], this represents the precise
/// position that the given offset along the path corresponds to. ¿ÎÓÅ¿ÏÌÄÁ/// The vector of the curve at [position].
///
/// When used with [PathMetric.getTangentForOffset], this is the vector of the
/// curve that is at the given offset along the path (i.e. the direction of the
/// curve at [position]). ¿Ï¯ÇΩ¿ÔäÇ+/// The direction of the curve at [position].
///
/// When used with [PathMetric.getTangentForOffset], this is the angle of the
/// curve that is the given offset along the path (i.e. the direction of the
/// curve at [position]).
///
/// This value is in radians, with 0.0 meaning pointing along the x axis in
/// the positive x-axis direction, positive numbers pointing downward toward
/// the negative y-axis, i.e. in a clockwise direction, and negative numbers
/// pointing upward toward the positive y-axis, i.e. in a counter-clockwise
/// direction.     ¿ÔπÑ#¿Ú¥ÇÙ/// An iterable collection of [PathMetric] objects describing a [Path].
///
/// A [PathMetrics] object is created by using the [Path.computeMetrics] method,
/// and represents the path as it stood at the time of the call. Subsequent
/// modifications of the path do not affect the [PathMetrics] object.
///
/// Each path metric corresponds to a segment, or contour, of a path.
///
/// For example, a path consisting of a [Path.lineTo], a [Path.moveTo], and
/// another [Path.lineTo] will contain two contours and thus be represented by
/// two [PathMetric] objects.
///
/// This iterable does not memoize. Callers who need to traverse the list
/// multiple times, or who need to randomly access elements of the list, should
/// use [toList] on this object. ¿ÚÄÇ¿Ú˚¿Ú¸¿Ú˝ ¿Ú˛	¿Û  ¿Û	¿Û  ¿Û+¿Û!¿Û-¿Û?¿Û@¿ÛA¿Ûp¿ÛB¿ÛN¿Ûo¿ÛT¿ÛO¿ÛW¿Ûd¿Ûv$¿Ûë  ¿Ûü;¿Ûƒ   ¿Ûü¿Û†  ¿ÛﬁÉ¬¿ÙMh/// Used by [PathMetrics] to track iteration from one segment of a path to the
/// next for measurement. ¿ÙÑ(¿Ùñ¿Ùó¿Ùò ¿Ùô¿Ùü   ¿Ù∞¿Ùº  ¿ÙÀ¿Ùﬁ  ¿ÙÔÅ¿ı
   ¿ÙÔ¿Ù¿ˆ„Äª¿ˆÙ   ¿ˆ„¿ˆ‰ ¿˜¢çk¿˙âÇ‡/// Utilities for measuring a [Path] and extracting sub-paths.
///
/// Iterate over the object returned by [Path.computeMetrics] to obtain
/// [PathMetric] objects. Callers that want to randomly access elements or
/// iterate multiple times should use `path.computeMetrics().toList()`, since
/// [PathMetrics] does not memoize.
///
/// Once created, the metrics are only valid for the path as it was specified
/// when [Path.computeMetrics] was called. If additional contours are added or
/// any contours are updated, the metrics need to be recomputed. Previously
/// created metrics will still refer to a snapshot of the path at the time they
/// were computed, rather than to the actual metrics for the new mutations to
/// the path. ¿˙òÄŒ¿˙¢¿˙£¿˙§ ¿˙•¿˙´  ¿˙¡¿˙∫¿˙√¿˙À¿˙Ã¿˙“¿˙Ô¿˙”¿˙€¿˙‹¿˚¿˙¯¿˚¿˚¿˚¿˚¿˚1¿˚¿˚¿˚¿˚G¿˚:¿˚I¿˚Q¿˚R¿˚jÅ+¿¸èÅ/// Return the total length of the current contour.
///
/// The length may be calculated from an approximation of the geometry
/// originally added. For this reason, it is not recommended to rely on
/// this property for mathematically correct lengths of common shapes. ¿¸öÅA¿˝”Å!/// Whether the contour is closed.
///
/// Returns true if the contour ends with a call to [Path.close] (which may
/// have been implied when using methods like [Path.addRect]) or if
/// `forceClosed` was specified as true in the call to [Path.computeMetrics].
/// Returns false otherwise. ¿˝‡Ç‡¿ ¥Ç±/// The zero-based index of the contour.
///
/// [Path] objects are made up of zero or more contours. The first contour is
/// created once a drawing command (e.g. [Path.lineTo]) is issued. A
/// [Path.moveTo] command after a drawing command may create a new contour,
/// although it may not if optimizations are applied that determine the move
/// command did not actually result in moving the pen.
///
/// This property is only valid with reference to its original iterator and
/// the contours of the path at the time the path's metrics were computed. If
/// additional contours were added or existing contours updated, this metric
/// will be invalid for the current state of the path. ¿ ≈¿ ÿ   ¿ ÂÇ,¿¶Å£/// Computes the position of the current contour at the given offset, and the
/// angle of the path at that point.
///
/// For example, calling this method with a distance of 1.41 for a line from
/// 0.0,0.0 to 2.0,2.0 would give a point 1.0,1.0 and the angle 45 degrees
/// (but in radians).
///
/// Returns null if the contour has zero [length].
///
/// The distance is clamped to the [length] of the current contour. ¿∫¿¬   ¿ÅÅ¿ÔÄÃ/// Given a start and end distance, return the intervening segment(s).
///
/// `start` and `end` are clamped to legal values (0..[length])
/// Begin the segment with a moveTo if `startWithMoveTo` is true. ¿˚¿  ¿	
¿  ¿¿  ¿-¿öq¿≠   ¿ö¿õ ¿ã¿  ¿L[ ¿L¿X ¿Y¿f  ¿k¿q   ¿tÄØ¿Äå/// The index of the current contour in the list of contours in the path.
///
/// [nextContour] will increment this to the zero based index.¿!¿" ¿´Äî¿  ¿¿(  ¿-¿3  ¿´¿¨¿≤¿›¿∏¿≥¿¿¿‹¿¡¿…¿–¿’¿—¿ÿ¿ﬁ¿¸¿Â¿ﬂ¿Á¿CÄΩ¿J  ¿Q¿V   ¿Äã¿u  ¿}¿Ç  ¿¿¿¿1¿¿¿¿0¿¿#¿(¿$¿+¿2¿a¿9¿3¿;¿[¿U¿]¿ìÅÌ¿ú  ¿∞¿µ  ¿¬¿    ¿	ÑÄû¿	Ù  ¿	ˇ¿
  ¿
¿
  ¿	Ñ¿	Ö¿	ã¿	π¿	ì¿	å¿	õ¿	∏¿	ú¿	£¿	®¿	§¿	´¿	≤¿	∫¿	€¿	¡¿	ª¿	√¿
&Å_¿
+  ¿
7¿
<  ¿
I¿
Q  ¿
W
¿
_  ¿
j¿
p  ¿
Å¿âÄ€¿  ¿¿  ¿"¿'  ¿4¿<  ¿B
¿J  ¿N¿T  ¿â¿ä¿ê¿“¿ñ¿ë¿û¿—¿ü¿¶¿´¿ß¿Æ¿∂¿Ω¿≈¿Õ¿”¿ı¿⁄¿‘¿‹¿hÄø¿m  ¿v¿{   ¿+Äà¿ó  ¿°¿¶  ¿+¿,¿2¿V¿8¿3¿@¿U¿A¿H¿M¿I¿P¿W¿Ö¿^¿X¿`¿¿y¿Å¿fÄâ¿k    ¿Û}¿[   ¿Û¿Ù¿˙¿¿ ¿˚¿¿¿	¿¿¿¿¿I¿¿¿!¿C¿=¿E ¿•Ü|¿ØÅ/// A mask filter to apply to shapes as they are painted. A mask filter is a
/// function that takes a bitmap of color pixels, and returns another bitmap of
/// color pixels.
///
/// Instances of this class are used with [Paint.maskFilter] on [Paint] objects. ¿æÉ¿ò¿ô¿ùÇ•/// Creates a mask filter that takes the shape being drawn and blurs it.
///
/// This is commonly used to approximate shadows.
///
/// The `style` argument controls the kind of effect to draw; see [BlurStyle].
///
/// The `sigma` argument controls the size of the effect. It is the standard
/// deviation of the Gaussian blur to apply. The value must be greater than
/// zero. The sigma corresponds to very roughly half the radius of the effect
/// in pixels.
///
/// A blur is an expensive operation and should therefore be used sparingly.
///
/// The arguments must not be null.
///
/// See also:
///
///  * [Canvas.drawShadow], which is a more efficient way to draw shadows.¿£¿©  ¿¥¿∫   ¿…¿Ÿ  ¿„¿  ¿å¿ù ¿©¿∂¿« ¿”¿Ö<¿ô   ¿Ö¿Ü¿ÌÄî¿  ¿
¿  ¿Ì¿Ó¿≈Z¿ÿ   ¿≈¿∆ ¿#ò˘¿ÓÅƒ/// A description of a color filter to apply when drawing a shape or compositing
/// a layer with a particular [Paint]. A color filter is a function that takes
/// two colors, and outputs one color. When applied during compositing, it is
/// independently applied to each pixel of the layer being drawn before the
/// entire layer is merged with the destination.
///
/// Instances of this class are used with [Paint.colorFilter] on [Paint]
/// objects. ¿ÇX¿⁄¿€¿ﬂÅ•/// Creates a color filter that applies the blend mode given as the second
/// argument. The source color is the one given as the first argument, and the
/// destination color is the one from the layer being composited.
///
/// The output of this filter is then composited into the background according
/// to the [Paint.blendMode], using the output of this filter as the source
/// and the background as the destination.¿‡¿Á  ¿Ì¿¯  ¿¿
¿¿-¿"¿/¿J¿B¿L¿`¿Z¿b¿qà3¿&¿&¿&%á'/// Construct a color filter that transforms a color by a 5x5 matrix, where
/// the fifth row is implicitly added in an identity configuration.
///
/// Every pixel's color value, represented as an `[R, G, B, A]`, is matrix
/// multiplied to create a new color:
///
///     | R' |   | a00 a01 a02 a03 a04 |   | R |
///     | G' |   | a10 a11 a12 a13 a14 |   | G |
///     | B' | = | a20 a21 a22 a23 a24 | * | B |
///     | A' |   | a30 a31 a32 a33 a34 |   | A |
///     | 1  |   |  0   0   0   0   1  |   | 1 |
///
/// The matrix is in row-major order and the translation column is specified
/// in unnormalized, 0...255, space. For example, the identity matrix is:
///
/// ```dart
/// const ColorFilter identity = ColorFilter.matrix(<double>[
///   1, 0, 0, 0, 0,
///   0, 1, 0, 0, 0,
///   0, 0, 1, 0, 0,
///   0, 0, 0, 1, 0,
/// ]);
/// ```
///
/// ## Examples
///
/// An inversion color matrix:
///
/// ```dart
/// const ColorFilter invert = ColorFilter.matrix(<double>[
///   -1,  0,  0, 0, 255,
///    0, -1,  0, 0, 255,
///    0,  0, -1, 0, 255,
///    0,  0,  0, 1,   0,
/// ]);
/// ```
///
/// A sepia-toned color matrix (values based on the [Filter Effects Spec](https://www.w3.org/TR/filter-effects-1/#sepiaEquivalent)):
///
/// ```dart
/// const ColorFilter sepia = ColorFilter.matrix(<double>[
///   0.393, 0.769, 0.189, 0, 0,
///   0.349, 0.686, 0.168, 0, 0,
///   0.272, 0.534, 0.131, 0, 0,
///   0,     0,     0,     1, 0,
/// ]);
/// ```
///
/// A greyscale color filter (values based on the [Filter Effects Spec](https://www.w3.org/TR/filter-effects-1/#grayscaleEquivalent)):
///
/// ```dart
/// const ColorFilter greyscale = ColorFilter.matrix(<double>[
///   0.2126, 0.7152, 0.0722, 0, 0,
///   0.2126, 0.7152, 0.0722, 0, 0,
///   0.2126, 0.7152, 0.0722, 0, 0,
///   0,      0,      0,      1, 0,
/// ]);
/// ```¿&&¿&4  ¿&J¿&C¿&L¿&e¿&Z¿&g¿&}¿&u¿&¿&ï¿&è¿&ó¿&®ÄÙ¿'¿'¿''W/// Construct a color filter that applies the sRGB gamma curve to the RGB
/// channels. ¿'9¿'2¿';¿'T¿'I¿'V¿'l¿'d¿'n¿'Ç¿'|¿'Ñ¿'†Å¿(¿(¿(,d/// Creates a color filter that applies the inverse of the sRGB gamma curve
/// to the RGB channels. ¿(>¿(7¿(@¿(Y¿(N¿([¿(q¿(i¿(s¿(á¿(Å¿(â¿(•¿(≤  ¿(º¿(Õ  ¿(€¿(Ô  ¿(˙¿)  ¿)>¿)O ¿)\¿)s!¿)Ñ ¿)ì¿)∑,¿)» ¿)‚¿* ,¿* ¿*+¿.™z¿.æ   ¿.™¿.´¿/(Å¡¿/?   ¿/(¿/)¿*bV¿*{   ¿*b¿*c¿*ºÇ¨¿*     ¿-lÅ:¿-Ü  ¿-â¿-ë  ¿-l¿-m¿0ÌÇ-¿1    ¿0Ì¿0Ó ¿3áj¿4nÅD/// A [ColorFilter] that is backed by a native DlColorFilter.
///
/// This is a private class, rather than being the implementation of the public
/// ColorFilter, because we want ColorFilter to be const constructible and
/// efficiently comparable, so that widgets can check for ColorFilter equality to
/// avoid repainting. ¿4†Ä∞¿4¨¿4≠¿4± ¿4≤¿4∏  
¿4∆¿4Ã¿4Ù¿4€¿4Õ¿4‘¿4’¿4ﬁ¿4È¿4Í¿5TÄ¨¿5`¿5a¿5g ¿5h¿5n  
¿5|¿5Ç¿5¨¿5ë¿5É¿5ä¿5ã¿5î¿5ü¿5†¿6Äß¿6¿6¿6! ¿6"¿6(  
¿66¿6<¿6q¿6K¿6=¿6D¿6E¿6N¿6Y¿6Z¿6ÆÄß¿6∫¿6ª¿6Ã ¿6Õ¿6”  
¿6·¿6Á¿7¿6ˆ¿6Ë¿6Ô¿6¿6˘¿7¿7¿7YÄç¿7ﬂo/// The original Dart object that created the native wrapper, which retains
/// the values used for the filter.  ¿7Î]¿89   ¿7Î¿7Ï¿7Ú¿8¿7¯¿7Û¿8 ¿8¿8¿8	¿8'¿8¿8
¿8¿8LÄó¿8ø  ¿8…	¿8Œ  ¿8‘¿8Ÿ  ¿8L¿8M¿8S¿8~¿8Y¿8T¿8a¿8}¿8b¿8i¿8n¿8j¿8q¿8x¿8¿8≠¿8Ü¿8Ä¿8à¿8ß¿8°¿8©¿8ÁÄÅ¿9H  ¿9T¿9a  ¿8Á¿8Ë¿8Ó¿9¿8Ù¿8Ô¿8¸¿9¿8˝¿9¿9	¿9¿9¿9¿96¿9¿9¿9¿9lÄã¿9ﬁ   ¿9l¿9m¿9s¿9ê¿9y¿9t¿9Å¿9è¿9Ç¿9â¿9é¿9ä¿9ë¿9Ã¿9ò¿9í¿9ö¿9∆¿9¿¿9»¿9˚Äã¿:m   ¿9˚¿9¸¿:¿:¿:¿:¿:¿:¿:¿:¿:¿:¿: ¿:[¿:'¿:!¿:)¿:U¿:O¿:W ¿:äã¿<lÅ“/// A filter operation to apply to a raster image.
///
/// See also:
///
///  * [BackdropFilter], a widget that applies [ImageFilter] to its rendering.
///  * [ImageFiltered], a widget that applies [ImageFilter] to its children.
///  * [SceneBuilder.pushBackdropFilter], which is the low-level API for using
///    this class as a backdrop filter.
///  * [SceneBuilder.pushImageFilter], which is the low-level API for using
///    this class as a child layer filter. ¿<Œ¿<Ÿ¿<⁄¿<€   ¿<¸Å¿=K¿=L¿=P9/// Creates an image filter that applies a Gaussian blur.¿=S¿=[  ¿=h¿=p  ¿=}"¿=á  ¿=c¿=x¿=ë¿=ô¿=ö¿>Å&¿>´¿>¨¿>≤Äé/// Creates an image filter that dilates each input pixel's channel values
/// to the max value within the given radii along the x and y axes.¿>µ¿>Ω  ¿>À¿>”  ¿>∆¿>‹¿?/Å'¿?ÿ¿?Ÿ¿?ﬁÄë/// Create a filter that erodes each input pixel's channel values
/// to the minimum channel value within the given radii along the x and y axes.¿?·¿?È  ¿?˜¿?ˇ  ¿?Ú¿@¿@ZÇ'¿AO¿AP¿AVÄŸ/// Creates an image filter that applies a matrix transformation.
///
/// For example, applying a positive scale matrix (see [Matrix4.diagonal3])
/// when used with [BackdropFilter] would magnify the background image.¿AW¿Ad  ¿AÉ/¿Aí  ¿A°¿AÆ¿AØ¿BÖÅ†¿Cì¿Cî¿CõÄ/// Composes the `inner` filter with `outer`, to combine their effects.
///
/// Creates a single [ImageFilter] that when applied, has the same effect as
/// subsequently applying `inner` and `outer`, i.e.,
/// result = outer(inner(source)).¿Cû¿C¥  ¿C∫¿C–    ¿Ep¿E{    ¿D«$¿D‘     ¿EëÉ`¿Eó  ¿E≈H ¿E≈¿E◊ ¿E⁄¿EÈ  ¿EÓ¿E˝   ¿F¿F#  ¿F+!¿F?  ¿Fr@¿Fä ¿Fô¿F•¿F¶¿F¨¿F±¿F≠¿F˙L¿G   ¿F˙¿F˚¿HûQ¿H≤   ¿Hû¿Hü¿F∂@¿Fœ   ¿F∂¿F∑¿GJM¿G]   ¿GJ¿GK¿GõÄˇ¿Gµ  ¿G∏¿G¿  ¿Gõ¿Gú ¿HÛÑt¿H˘  ¿I-a ¿I-¿IE ¿IH¿IW  ¿I^¿Im  ¿It¿IÉ   ¿Ií¿Iü  ¿I©¿I∂  ¿I¿¿Iœ  ¿I>¿J ¿J¿J#¿J$¿J(¿J-¿J)¿JvÄÓ¿JÅ    ¿KhS¿K   ¿Kh¿Ki¿M)<¿M=   ¿M)¿M*¿J2@¿JK   ¿J2¿J3¿KøT¿K“   ¿Kø¿K¿¿LÅ¿L1  ¿L4¿L<  ¿L¿L ¿MiÇ˚¿Mo  ¿MùE ¿Mù¿MØ ¿M≤¿M¡  ¿M…¿Mÿ   ¿MÊ¿MÛ  ¿M˛¿N  ¿N@¿N/ ¿N>¿NJ¿NK¿NQ¿NV¿NR¿NüI¿N∂   ¿Nü¿N†¿P$>¿P8   ¿P$¿P%¿N[@¿Nt   ¿N[¿N\¿NÏJ¿Nˇ   ¿NÏ¿NÌ¿O:ÄÊ¿OT  ¿OW¿O_  ¿O:¿O; ¿PfÇı¿Pl  ¿PôD ¿Pô¿P™ ¿P≠¿Pº  ¿Pƒ¿P”   ¿P·¿PÓ  ¿P˘¿Q  ¿Q?¿Q* ¿Q9¿QE¿QF¿QK¿QP¿QL¿QôH¿Q∞   ¿Qô¿Qö¿S>¿S/   ¿S¿S¿QU@¿Qn   ¿QU¿QV¿QÂI¿Q¯   ¿QÂ¿QÊ¿R2ÄÂ¿RL  ¿RO¿RW  ¿R2¿R3 ¿S]Éã¿Sc  ¿SíN ¿Sí¿S• ¿S®¿S∑  ¿S√¿S“   ¿S‰¿Sˆ  ¿T¿T  ¿TAB¿TY ¿Th¿Tt¿Tu¿T}¿TÇ¿T~¿TÀs¿T‚   ¿TÀ¿TÃ¿V†F¿V¥   ¿V†¿V°¿Tá@¿T†   ¿Tá¿Tà¿UB_¿UU   ¿UB¿UC¿U•Ä˜¿Uø  ¿U¬¿U   ¿U•¿U¶ ¿VÍçˆ¿XÅ)/// An [ImageFilter] that is backed by a native DlImageFilter.
///
/// This is a private class, rather than being the implementation of the public
/// ImageFilter, because we want ImageFilter to be efficiently comparable, so that
/// widgets can check for ImageFilter equality to avoid repainting. ¿XQÄ„¿Xô¿Xö¿Xû9/// Creates an image filter that applies a Gaussian blur.¿Xü¿Xπ  ¿XŒ¿X∆¿X–¿Y8Å#¿Y◊¿Yÿ¿YﬁÄé/// Creates an image filter that dilates each input pixel's channel values
/// to the max value within the given radii along the x and y axes.¿Yﬂ¿YÛ  ¿Z¿Z ¿Z
¿Z_Å#¿[¿[¿[Äë/// Create a filter that erodes each input pixel's channel values
/// to the minimum channel value within the given radii along the x and y axes.¿[¿[  ¿[0¿[(¿[2¿[ÜÅ„¿\t¿\u¿\{ÄŸ/// Creates an image filter that applies a matrix transformation.
///
/// For example, applying a positive scale matrix (see [Matrix4.diagonal3])
/// when used with [BackdropFilter] would magnify the background image.¿\|¿\ê  ¿\•¿\ù¿\ß¿]mÄ˝¿]´¿]¨¿]ª//// Converts a color filter to an image filter.¿]º¿]…  ¿]ﬁ¿]÷¿]‡¿^nÅz¿^≠¿^Æ¿^∂0/// Composes `_innerFilter` with `_outerFilter`.¿^∑¿^Ã  ¿^·¿^Ÿ¿^„¿dPÄç¿d÷o/// The original Dart object that created the native wrapper, which retains
/// the values used for the filter.  ¿_Ï]¿`:   ¿_Ï¿_Ì¿_Û¿`	¿_˘¿_Ù¿`¿`¿`¿`
¿`(¿`¿`¿`¿`MÄ≤¿`…  ¿`”¿`€  ¿`‚¿`Í  ¿`Ò¿`ˆ  ¿`M¿`N¿`T¿`à¿`Z¿`U¿`b¿`á¿`c¿`j¿`o¿`k¿`r¿`z¿`Ç¿`â¿`∑¿`ê¿`ä¿`í¿`±¿`´¿`≥¿aÄ£¿az  ¿aÜ¿aé  ¿añ¿aû  ¿a¿a¿a
¿a7¿a¿a¿a¿a6¿a¿a ¿a%¿a!¿a(¿a0¿a8¿ah¿a?¿a9¿aA¿ab¿a\¿ad¿a™Ä°¿b   ¿b+¿b3  ¿b;¿bC  ¿a™¿a´¿a±¿aﬁ¿a∑¿a≤¿aø¿a›¿a¿¿a«¿aÃ¿a»¿aœ¿a◊¿aﬂ¿b¿aÊ¿a‡¿aË¿b¿b¿b
¿bOÄú¿b∑  ¿b√¿b–  ¿bÿ¿b›  ¿bO¿bP¿bV¿bÇ¿b\¿bW¿bd¿bÅ¿be¿bl¿bq¿bm¿bt¿b|¿bÉ¿b•¿bä¿bÑ¿bå¿bÔÄô¿c\  ¿cm¿c|  ¿bÔ¿b¿bˆ¿c"¿b¸¿b˜¿c¿c!¿c¿c¿c¿c¿c¿c¿c ¿c¿c#¿cJ¿c*¿c$¿c,¿cåÄ¿¿d
  ¿d¿d&  ¿d2¿d@  ¿cå¿cç¿cì¿cŒ¿cô¿cî¿c°¿cÕ¿c¢¿c©¿cÆ¿c™¿c±¿c∏¿cΩ¿cπ¿c¿¿c«¿cÃ¿c»¿cœ¿c¯¿c÷¿c–¿cÿ ¿d‚ÑÎ¿ehz/// Base class for objects such as [Gradient] and [ImageShader] which
/// correspond to shaders as used by [Paint.shader]. ¿eîÄç¿f¿f¿fa/// This class is created by the engine, and should not be instantiated
/// or extended directly. ¿e˙¿e˚¿f¿f¿f¿f%¿f* ¿f;¿fEÅ¿fŒy/// Whether [dispose] has been called.
///
/// This must only be used when asserts are enabled. Otherwise, it will throw.   ¿g`Çk¿iSÅ€/// Release the resources used by this object. The object is no longer usable
/// after this method is called.
///
/// The underlying memory allocated by this object will be retained beyond
/// this call if it is still needed by another object that has not been
/// disposed. For example, a [Picture] that has not been disposed that
/// refers to an [ImageShader] may keep its underlying resources alive.
///
/// Classes that override this method must call `super.dispose()`.    ¿ÄÑ•}¿Å–Å@/// A shader (as used by [Paint.shader]) that renders a color gradient.
///
/// There are several types of gradients, represented by the various constructors
/// on this class.
///
/// See also:
///
///  * [Gradient](https://api.flutter.dev/flutter/painting/Gradient-class.html), the class in the [painting] library.
/// ¿ÅÏá›¿á¿á¿áÑÊ/// Creates a linear gradient from `from` to `to`.
///
/// If `colorStops` is provided, `colorStops[i]` is a number from 0.0 to 1.0
/// that specifies where `color[i]` begins in the gradient. If `colorStops` is
/// not provided, then only two stops, at 0.0 and 1.0, are implied (and
/// `color` must therefore only have two entries).
///
/// The behavior before `from` and after `to` is described by the `tileMode`
/// argument. For details, see the [TileMode] enum.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_linear.png)
///
/// If `from`, `to`, `colors`, or `tileMode` are null, or if `colors` or
/// `colorStops` contain null values, this constructor will throw a
/// [NoSuchMethodError].
///
/// If `matrix4` is provided, the gradient fill will be transformed by the
/// specified 4x4 matrix relative to the local coordinate system. `matrix4` must
/// be a column-major matrix packed into a list of 16 values.¿á¿á  ¿á%	¿á-  ¿á4¿áA  ¿áN¿á]  ¿ál"¿áv  ¿áî¿á¢  !¿áÄ¿áà¿áâ¿á±¿á∑¿áÃ¿á∏¿á∆¿áÀ¿á«¿á÷¿á‹¿áÔ¿á›¿áÎ¿áÓ¿áÏ¿á˘¿áˇ¿à+¿à¿à¿à ¿à¿à¿à"¿à*¿à#¿à5¿à:¿à;¿à<¿à=¿âÕã ¿êœ¿ê–¿ê÷ÜΩ/// Creates a radial gradient centered at `center` that ends at `radius`
/// distance from the center.
///
/// If `colorStops` is provided, `colorStops[i]` is a number from 0.0 to 1.0
/// that specifies where `color[i]` begins in the gradient. If `colorStops` is
/// not provided, then only two stops, at 0.0 and 1.0, are implied (and
/// `color` must therefore only have two entries).
///
/// The behavior before and after the radius is described by the `tileMode`
/// argument. For details, see the [TileMode] enum.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_radial.png)
///
/// If `center`, `radius`, `colors`, or `tileMode` are null, or if `colors` or
/// `colorStops` contain null values, this constructor will throw a
/// [NoSuchMethodError].
///
/// If `matrix4` is provided, the gradient fill will be transformed by the
/// specified 4x4 matrix relative to the local coordinate system. `matrix4` must
/// be a column-major matrix packed into a list of 16 values.
///
/// If `focal` is provided and not equal to `center` and `focalRadius` is
/// provided and not equal to 0.0, the generated shader will be a two point
/// conical radial gradient, with `focal` being the center of the focal
/// circle and `focalRadius` being the radius of that circle. If `focal` is
/// provided and not equal to `center`, at least one of the two offsets must
/// not be equal to [Offset.zero].¿ê‹¿ê‰  ¿êÔ¿ê˜  ¿ë¿ë  ¿ë¿ë+  ¿ë:"¿ëD  ¿ëb¿ëp  ¿ë|¿ëÖ  ¿ëè¿ëó  ¿ëN¿ëV¿ëW¿ë§¿ëØ¿ëµ¿ëÃ¿ë∂¿ëƒ¿ëÀ¿ë≈¿ë÷¿ë‹¿í¿ëÌ¿ëÂ¿ë›¿ëË¿ë¿ëˇ¿í¿í ¿í¿í¿í¿í¿í¿ïõâ¿õÁ¿õË¿õÌÜ/// Creates a sweep gradient centered at `center` that starts at `startAngle`
/// and ends at `endAngle`.
///
/// `startAngle` and `endAngle` should be provided in radians, with zero
/// radians being the horizontal line to the right of the `center` and with
/// positive angles going clockwise around the `center`.
///
/// If `colorStops` is provided, `colorStops[i]` is a number from 0.0 to 1.0
/// that specifies where `color[i]` begins in the gradient. If `colorStops` is
/// not provided, then only two stops, at 0.0 and 1.0, are implied (and
/// `color` must therefore only have two entries).
///
/// The behavior before `startAngle` and after `endAngle` is described by the
/// `tileMode` argument. For details, see the [TileMode] enum.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_sweep.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_sweep.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_sweep.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_sweep.png)
///
/// If `center`, `colors`, `tileMode`, `startAngle`, or `endAngle` are null,
/// or if `colors` or `colorStops` contain null values, this constructor will
/// throw a [NoSuchMethodError].
///
/// If `matrix4` is provided, the gradient fill will be transformed by the
/// specified 4x4 matrix relative to the local coordinate system. `matrix4` must
/// be a column-major matrix packed into a list of 16 values.¿õÛ¿õ˚  ¿ú¿ú  ¿ú ¿ú/  ¿ú>"¿úH  ¿úf¿ún  ¿úÉ¿úã  ¿ú¶¿ú¥  &¿úR¿úZ¿ú[¿úz¿úù¿úï¿úô¿úö¿úü¿ú√¿ú…¿ú‡¿ú ¿úÿ¿úﬂ¿úŸ¿úÍ¿ú¿ù¿ú¸¿úÒ¿ú˛¿ù¿ù¿ùB¿ù'¿ù¿ù¿ù"¿ù*¿ù9¿ùA¿ù:¿ùL¿ùQ¿ùR¿ùS¿ùT  ¿û∫Z¿ü   ¿û∫¿ûª¿û¡¿û◊¿û«¿û¬¿ûœ¿û÷¿û–¿ûÿ¿ûÛ¿ûﬂ¿ûŸ¿û·¿üÄÔ¿üï  ¿ü°¿üÆ  ¿ü∏¿ü√  ¿ü ¿üÿ  ¿ü„¿üË  ¿üÒ¿üˇ  ¿ü¿ü¿ü¿üc¿ü%¿ü ¿ü-¿üb¿ü.¿ü5¿ü:¿ü6¿ü=¿üE¿üM¿üU¿ü\¿üd¿üÉ¿ük¿üe¿üm¿†ÅB¿†ò  ¿†´¿†≥  ¿†¡¿†…  ¿†◊¿†ﬂ  ¿†Ï¿†˜  ¿°¿°  ¿°#¿°(  ¿°7¿°E  ¿†¿†¿†¿†f¿†¿†¿† ¿†e¿†!¿†(¿†-¿†)¿†0¿†8¿†@¿†H¿†P¿†X¿†_¿†g¿†Ü¿†n¿†h¿†p¿°QÅ•¿°ˇ  
¿¢¿¢  ¿¢(¿¢0  ¿¢=¿¢E  ¿¢W¿¢_  ¿¢j¿¢r  ¿¢}¿¢Ö  ¿¢ï¿¢†  ¿¢≠¿¢ª  ¿¢Ã¿¢—  ¿¢‡¿¢Ó  ¿°Q¿°R¿°X¿°ƒ¿°^¿°Y¿°f¿°√¿°g¿°n¿°s¿°o¿°v¿°~¿°Ü¿°é¿°ñ¿°û¿°¶¿°Æ¿°∂¿°Ω¿°≈¿°Ì¿°Ã¿°∆¿°Œ¿¢˙Åb¿£é  ¿£†¿£®  ¿£∂¿£æ  ¿£Ã¿£◊  ¿£‰¿£Ú  ¿§¿§  ¿§¿§  ¿§0¿§8  ¿§G¿§U  ¿¢˙¿¢˚¿£¿£]¿£¿£¿£¿£\¿£¿£¿£¿£¿£¿£'¿£/¿£7¿£?¿£F¿£N¿£V¿£^¿£|¿£e¿£_¿£g¿§`Åü¿§l  ¿§á¿§î  ¿§õ¿§™    ¿¶àl¿¶L=/// A shader (as used by [Paint.shader]) that tiles an image. ¿¶kÖñ ¿™/¿™:ÉÅ/// Creates an image-tiling shader.
///
/// The first argument specifies the image to render. The
/// [decodeImageFromList] function can be used to decode an image from bytes
/// into the form expected here. (In production code, starting from
/// [instantiateImageCodec] may be preferable.)
///
/// The second and third arguments specify the [TileMode] for the x direction
/// and y direction respectively. [TileMode.repeated] can be used for tiling
/// images.
///
/// The fourth argument gives the matrix to apply to the effect. The
/// expression `Matrix4.identity().storage` creates a [Float64List]
/// prepopulated with the identity matrix.
///
/// All the arguments are required and must not be null, except for
/// [filterQuality]. If [filterQuality] is not specified at construction time
/// it will be deduced from the environment where it is used, such as from
/// [Paint.filterQuality].¿™;¿™B  ¿™H¿™R  ¿™V¿™`  ¿™d¿™q  ¿™¿™è  ¿™¿™¿™¿™+¿™¿™®¿™Æ¿™√¿™Ø¿™∞¿™µ¿™∂¿™ ¿™œ¿™–¿™—¿™“  ¿¨E¿¨   ¿¨¿¨¿¨N]¿¨ú   ¿¨N¿¨O¿¨U¿¨k¿¨[¿¨V¿¨c¿¨j¿¨d¿¨l¿¨ä¿¨s¿¨m¿¨u¿¨ØÄÈ¿≠<  ¿≠K¿≠S  ¿≠Y¿≠^  ¿≠b¿≠g  ¿≠k¿≠p  ¿≠É¿≠ê  ¿¨Ø¿¨∞¿¨∂¿≠¿¨æ¿¨∑¿¨∆¿≠ ¿¨«¿¨Œ¿¨”¿¨œ¿¨÷¿¨›¿¨‚¿¨ﬁ¿¨Â¿¨Ï¿¨Û¿¨˙¿≠¿≠'¿≠	¿≠¿≠¿≠úÄ—¿Æbk/// This can't be a leaf call because the native function calls Dart API
/// (Dart_SetNativeInstanceField).  ¿Æ¿Æ¿Æ¿Æ0¿Æ¿Æ¿Æ!¿Æ/¿Æ"¿Æ)¿Æ.¿Æ*¿Æ1¿ÆP¿Æ8¿Æ2¿Æ: ¿Æqåœ¿ØYÄ‹/// An instance of [FragmentProgram] creates [Shader] objects (as used by
/// [Paint.shader]).
///
/// For more information, see the website
/// [documentation]( https://docs.flutter.dev/development/ui/advanced/shaders). ¿ØéÅ!¿Øπ¿Ø∫¿Øƒ ¿Ø≈¿ØÕ  ¿Øé¿Øè¿Øï¿Ø¶¿Øñ¿∞≥¿∞ª  ¿∂U{¿∂é 	¿∂Œ¿∂œ¿∂¶¿∂Õ¿∂ß¿∂Ø¿∂º¿∂Ã¿∂Ω¿πQ7¿πv ¿πQ¿πR¿πX¿πi¿πY¿πç2¿π≤ ¿πç¿πé¿πî¿π•¿πï ¿∞ ÑS¿≤%Å//// Creates a fragment program from the asset with key [assetKey].
///
/// The asset must be a file produced as the output of the `impellerc`
/// compiler. The constructed object should then be reused via the
/// [fragmentShader] method to create [Shader] objects that can be used by
/// [Paint.shader]. ¿≤/¿≤7   ¿∂’Çx¿∂·  ¿∂ı¿∂˝   ¿πƒa¿∫   ¿πƒ¿π≈¿πÀ¿π·¿π—¿πÃ¿πŸ¿π‡¿π⁄¿π‚¿∫¿πÈ¿π„¿πÎ¿∫)Äå¿∫ï  ¿∫§¿∫¨  ¿∫)¿∫*¿∫0¿∫W¿∫8¿∫1¿∫@¿∫V¿∫A¿∫H¿∫M¿∫I¿∫P¿∫X¿∫Å¿∫_¿∫Y¿∫a¿∫πÄÖ¿∫¸1/// Returns a fresh instance of [FragmentShader].    ¿ªBë˛¿æ3ÇÂ/// A [Shader] generated from a [FragmentProgram].
///
/// Instances of this class can be obtained from the
/// [FragmentProgram.fragmentShader] method. The float uniforms list is
/// initialized to the size expected by the shader and is zero-filled. Uniforms
/// of float type can then be set by calling [setFloat]. Sampler uniforms are
/// set by calling [setImageSampler].
///
/// A [FragmentShader] can be re-used, and this is an efficient way to avoid
/// allocating and re-initializing the uniform buffer and samplers. However,
/// if two [FragmentShader] objects with different float uniforms or samplers
/// are required to exist simultaneously, they must be obtained from two
/// different calls to [FragmentProgram.fragmentShader]. ¿æUÄ€¿æc¿æd¿æe ¿æf¿æw  ¿æÅ¿æä  ¿æ£¿æò¿æ•¿æ∞¿æµ¿æ∂¿æ∑¿æ∏¿ø4¿øB  ¿øQ<¿øj ¿ø¿øä¿øå¿øã¿øë(¿øù ¿øß ¿øæáê¿∆∂Üú/// Sets the float uniform at [index] to [value].
///
/// All uniforms defined in a fragment shader that are not samplers must be
/// set through this method. This includes floats and vec2, vec3, and vec4.
/// The correct index for each uniform is determined by the order of the
/// uniforms as defined in the fragment program, ignoring any samplers. For
/// data types that are composed of multiple floats such as a vec4, more than
/// one call to [setFloat] is required.
///
/// For example, given the following uniforms in a fragment program:
///
/// ```glsl
/// uniform float uScale;
/// uniform sampler2D uTexture;
/// uniform vec2 uMagnitude;
/// uniform vec4 uColor;
/// ```
///
/// Then the corresponding Dart code to correctly initialize these uniforms
/// is:
///
/// ```dart
/// void updateShader(ui.FragmentShader shader, Color color, ui.Image image) {
///   shader.setFloat(0, 23);  // uScale
///   shader.setFloat(1, 114); // uMagnitude x
///   shader.setFloat(2, 83);  // uMagnitude y
///
///   // Convert color to premultiplied opacity.
///   shader.setFloat(3, color.red / 255 * color.opacity);   // uColor r
///   shader.setFloat(4, color.green / 255 * color.opacity); // uColor g
///   shader.setFloat(5, color.blue / 255 * color.opacity);  // uColor b
///   shader.setFloat(6, color.opacity);                     // uColor a
///
///   // initialize sampler uniform.
///   shader.setImageSampler(0, image);
/// }
/// ```
///
/// Note how the indexes used does not count the `sampler2D` uniform. This
/// uniform will be set separately with [setImageSampler], with the index starting
/// over at 0.
///
/// Any float uniforms that are left uninitialized will default to `0`. ¿∆ø	¿∆ƒ  ¿∆ ¿∆“   ¿«RÅ¸¿»¢Å</// Sets the sampler uniform at [index] to [image].
///
/// The index provided to setImageSampler is the index of the sampler uniform defined
/// in the fragment program, excluding all non-sampler uniforms.
///
/// All the sampler uniforms that a shader expects must be provided or the
/// results will be undefined. ¿»≤	¿»∑  ¿»Ω¿»ƒ   ¿…RÅÖ¿ ÅÅ/// Releases the native resources held by the [FragmentShader].
///
/// After this method is called, calling methods on the shader, or attaching
/// it to a [Paint] object will fail with an exception. Calling [dispose]
/// twice will also result in an exception being thrown.  ¿ p¿ q¿ €Ä»¿ÀU  ¿Àb¿Às  ¿À{¿ÀÄ  ¿Àé¿Àì  ¿ €¿ ‹¿ ‚¿À¿ Í¿ „¿ Ú¿À¿ Û¿ ˚¿À¿À¿À¿À<¿À¿À¿À¿ÀßÄ•¿Ã   ¿Ã1	¿Ã6  ¿Ã<¿ÃD  ¿Àß¿À®¿ÀÆ¿À€¿À¥¿ÀØ¿Àº¿À⁄¿ÀΩ¿Àƒ¿À…¿À≈¿ÀÃ¿À‘¿À‹¿Ã¿À„¿À›¿ÀÂ¿ÃP~¿Ã∫   ¿ÃP¿ÃQ¿ÃW¿Ãt¿Ã]¿ÃX¿Ãe¿Ãs¿Ãf¿Ãm¿Ãr¿Ãn¿Ãu¿Ã®¿Ã|¿Ãv¿Ã~¿Ã“l¿Õ3   ¿Ã“¿Ã”¿ÃŸ¿Ãˆ¿Ãﬂ¿Ã⁄¿ÃÁ¿Ãı¿ÃË¿ÃÔ¿ÃÙ¿Ã¿Ã˜¿Õ!¿Ã˛¿Ã¯¿Õ  ¿–¨¿ÿÅàn/// A set of vertex data used by [Canvas.drawVertices].
///
/// Vertex data consists of a series of points in the canvas coordinate space.
/// Based on the [VertexMode], these points are interpreted either as
/// independent triangles ([VertexMode.triangles]), as a sliding window of
/// points forming a chain of triangles each sharing one side with the next
/// ([VertexMode.triangleStrip]), or as a fan of triangles with a single shared
/// point ([VertexMode.triangleFan]).
///
/// Each point can be associated with a color. Each triangle is painted as a
/// gradient that blends between the three colors at the three points of that
/// triangle. If no colors are specified, transparent black is assumed for all
/// the points.
///
/// These colors are then blended with the [Paint] specified in the call to
/// [Canvas.drawVertices]. This paint is either a solid color ([Paint.color]),
/// or a bitmap, specified using a shader ([Paint.shader]), typically either a
/// gradient ([Gradient]) or image ([ImageFilter]). The bitmap uses the same
/// coordinate space as the canvas (in the case of an [ImageFilter], this is
/// notably different than the coordinate space of the source image; the source
/// image is tiled according to the filter's configuration, and the image that
/// is sampled when painting the triangles is the infinite one after all the
/// repeating is applied.)
///
/// Each point in the [Vertices] is associated with a specific point on this
/// image. Each triangle is painted by sampling points from this image by
/// interpolating between the three points of the image corresponding to the
/// three points of the triangle.
///
/// The [Vertices.new] constructor configures all this using lists of [Offset]
/// and [Color] objects. The [Vertices.raw] constructor instead uses
/// [Float32List], [Int32List], and [Uint16List] objects, which more closely
/// corresponds to the data format used internally and therefore reduces some of
/// the conversion overhead. The raw constructor is useful if the data is coming
/// from another source (e.g. a file) and can therefore be parsed directly into
/// the underlying representation. ¿ÿØéÈ ¿·∞¿·∏à¨/// Creates a set of vertex data for use with [Canvas.drawVertices].
///
/// The `mode` parameter describes how the points should be interpreted: as
/// independent triangles ([VertexMode.triangles]), as a sliding window of
/// points forming a chain of triangles each sharing one side with the next
/// ([VertexMode.triangleStrip]), or as a fan of triangles with a single
/// shared point ([VertexMode.triangleFan]).
///
/// The `positions` parameter provides the points in the canvas space that
/// will be use to draw the triangles.
///
/// The `colors` parameter, if specified, provides the color for each point in
/// `positions`. Each triangle is painted as a gradient that blends between
/// the three colors at the three points of that triangle. (These colors are
/// then blended with the [Paint] specified in the call to
/// [Canvas.drawVertices].)
///
/// The `textureCoordinates` parameter, if specified, provides the points in
/// the [Paint] image to sample for the corresponding points in `positions`.
///
/// If the `colors` or `textureCoordinates` parameters are specified, they must
/// be the same length as `positions`.
///
/// The `indices` parameter specifies the order in which the points should be
/// painted. If it is omitted (or present but empty), the points are processed
/// in the order they are given in `positions`, as if the `indices` was a list
/// from 0 to n-1, where _n_ is the number of entries in `positions`. The
/// `indices` parameter, if present and non-empty, must have at least three
/// entries, but may be of any length beyond this. Indicies may refer to
/// offsets in the positions array multiple times, or may skip positions
/// entirely.
///
/// If the `indices` parameter is specified, all values in the list must be
/// valid index values for `positions`.
///
/// The `mode` and `positions` parameters must not be null.
///
/// This constructor converts its parameters into [dart:typed_data] lists
/// (e.g. using [Float32List]s for the coordinates) before sending them to the
/// Flutter engine. If the data provided to this constructor is not already in
/// [List] form, consider using the [Vertices.raw] constructor instead to
/// avoid converting the data twice.¿·æ¿·   ¿·”¿··  ¿·Ò¿·ˇ  ¿‚
 ¿‚  ¿‚0¿‚<   ¿ÁúèW¿Ú%¿Ú&¿Ú)ä(/// Creates a set of vertex data for use with [Canvas.drawVertices], using the
/// encoding expected by the Flutter engine.
///
/// The `mode` parameter describes how the points should be interpreted: as
/// independent triangles ([VertexMode.triangles]), as a sliding window of
/// points forming a chain of triangles each sharing one side with the next
/// ([VertexMode.triangleStrip]), or as a fan of triangles with a single
/// shared point ([VertexMode.triangleFan]).
///
/// The `positions` parameter provides the points in the canvas space that
/// will be use to draw the triangles. Each point is represented as two
/// numbers in the list, the first giving the x coordinate and the second
/// giving the y coordinate. (As a result, the list must have an even number
/// of entries.)
///
/// The `colors` parameter, if specified, provides the color for each point in
/// `positions`. Each color is represented as ARGB with 8 bit color channels
/// (like [Color.value]'s internal representation), and the list, if
/// specified, must therefore be half the length of `positions`. Each triangle
/// is painted as a gradient that blends between the three colors at the three
/// points of that triangle. (These colors are then blended with the [Paint]
/// specified in the call to [Canvas.drawVertices].)
///
/// The `textureCoordinates` parameter, if specified, provides the points in
/// the [Paint] image to sample for the corresponding points in `positions`.
/// Each point is represented as two numbers in the list, the first giving the
/// x coordinate and the second giving the y coordinate. This list, if
/// specified, must be the same length as `positions`.
///
/// The `indices` parameter specifies the order in which the points should be
/// painted. If it is omitted (or present but empty), the points are processed
/// in the order they are given in `positions`, as if the `indices` was a list
/// from 0 to n-2, where _n_ is the number of pairs in `positions` (i.e. half
/// the length of `positions`). The `indices` parameter, if present and
/// non-empty, must have at least three entries, but may be of any length
/// beyond this. Indicies may refer to offsets in the positions array multiple
/// times, or may skip positions entirely.
///
/// If the `indices` parameter is specified, all values in the list must be
/// valid index values for pairs in `positions`. For example, if there are 12
/// numbers in `positions` (representing 6 coordinates), the `indicies` must
/// be numbers in the range 0..5 inclusive.
///
/// The `mode` and `positions` parameters must not be null.¿Ú/¿Ú;  ¿ÚD¿ÚQ  ¿Úa¿Úm  ¿Úx¿ÚÜ  ¿Úù¿Ú™   ¿˙S¿˙X ¿˙d¿˙mÅû¿˚*Ä´/// Whether this reference to the underlying vertex data is [dispose]d.
///
/// This only returns a valid value if asserts are enabled, and must not be
/// used otherwise.   ¿ˆ˜Åé¿˜n  ¿˜t¿˜~  ¿˜ß¿˜¨  ¿˜Œ¿˜€  ¿¯¿¯  ¿¯@¿¯L  ¿¯p¿¯}  ¿ˆ˜¿ˆ¯¿ˆ˛¿˜;¿˜¿ˆˇ¿˜¿˜:¿˜¿˜¿˜¿˜$¿˜,¿˜4¿˜<¿˜U¿˜C¿˜=¿˜E¿¯âÄÙ¿˘n/// Release the resources used by this object. The object is no longer usable
/// after this method is called.   ¿˘ÅÄŒ¿˙Dk/// This can't be a leaf call because the native function calls Dart API
/// (Dart_SetNativeInstanceField).  ¿˘Ò¿˘Ú¿˘¯¿˙¿˘˛¿˘˘¿˙¿˙¿˙¿˙¿˙¿˙¿˙¿˙2¿˙¿˙¿˙ ¿U¿ ñ:¿ŒÉi/// An interface for recording graphical operations.
///
/// [Canvas] objects are used in creating [Picture] objects, which can
/// themselves be used with a [SceneBuilder] to build a [Scene]. In
/// normal usage, however, this is all handled by the framework.
///
/// A canvas has a current transformation matrix which is applied to all
/// operations. Initially, the transformation matrix is the identity transform.
/// It can be modified using the [translate], [scale], [rotate], [skew],
/// and [transform] methods.
///
/// A canvas also has a current clip region which is applied to all operations.
/// Initially, the clip region is infinite. It can be modified using the
/// [clipRect], [clipRRect], and [clipPath] methods.
///
/// The current transform and clip can be saved and restored using the stack
/// managed by the [save], [saveLayer], and [restore] methods. ¿ŸÇ◊ ¿k¿qÇq/// Creates a canvas for recording graphical operations into the
/// given picture recorder.
///
/// Graphical operations that affect pixels entirely outside the given
/// `cullRect` might be discarded by the implementation. However, the
/// implementation might draw outside these bounds if, for example, a command
/// draws partially inside and outside the `cullRect`. To ensure that pixels
/// outside a given region are discarded, consider using a [clipRect]. The
/// `cullRect` is optional; by default, all operations are kept.
///
/// To end the recording, call [PictureRecorder.endRecording] on the
/// given recorder.¿r¿É  ¿é¿ï     %¿¥Å(¿’Å/// Saves a copy of the current transform and clip on the save stack.
///
/// Call [restore] to pop the save stack.
///
/// See also:
///
///  * [saveLayer], which does the same thing but additionally also groups the
///    commands done until the matching [restore].   ¿‡îö¿Uìï/// Saves a copy of the current transform and clip on the save stack, and then
/// creates a new group which subsequent calls will become a part of. When the
/// save stack is later popped, the group will be flattened into a layer and
/// have the given `paint`'s [Paint.colorFilter] and [Paint.blendMode]
/// applied.
///
/// This lets you create composite effects, for example making a group of
/// drawing commands semi-transparent. Without using [saveLayer], each part of
/// the group would be painted individually, so where they overlap would be
/// darker than where they do not. By using [saveLayer] to group them
/// together, they can be drawn with an opaque color at first, and then the
/// entire group can be made transparent using the [saveLayer]'s paint.
///
/// Call [restore] to pop the save stack and apply the paint to the group.
///
/// ## Using saveLayer with clips
///
/// When a rectangular clip operation (from [clipRect]) is not axis-aligned
/// with the raster buffer, or when the clip operation is not rectilinear
/// (e.g. because it is a rounded rectangle clip created by [clipRRect] or an
/// arbitrarily complicated path clip created by [clipPath]), the edge of the
/// clip needs to be anti-aliased.
///
/// If two draw calls overlap at the edge of such a clipped region, without
/// using [saveLayer], the first drawing will be anti-aliased with the
/// background first, and then the second will be anti-aliased with the result
/// of blending the first drawing and the background. On the other hand, if
/// [saveLayer] is used immediately after establishing the clip, the second
/// drawing will cover the first in the layer, and thus the second alone will
/// be anti-aliased with the background when the layer is clipped and
/// composited (when [restore] is called).
///
/// For example, this [CustomPainter.paint] method paints a clean white
/// rounded rectangle:
///
/// ```dart
/// void paint(Canvas canvas, Size size) {
///   Rect rect = Offset.zero & size;
///   canvas.save();
///   canvas.clipRRect(RRect.fromRectXY(rect, 100.0, 100.0));
///   canvas.saveLayer(rect, Paint());
///   canvas.drawPaint(Paint()..color = Colors.red);
///   canvas.drawPaint(Paint()..color = Colors.white);
///   canvas.restore();
///   canvas.restore();
/// }
/// ```
///
/// On the other hand, this one renders a red outline, the result of the red
/// paint being anti-aliased with the background at the clip edge, then the
/// white paint being similarly anti-aliased with the background _including
/// the clipped red paint_:
///
/// ```dart
/// void paint(Canvas canvas, Size size) {
///   // (this example renders poorly, prefer the example above)
///   Rect rect = Offset.zero & size;
///   canvas.save();
///   canvas.clipRRect(RRect.fromRectXY(rect, 100.0, 100.0));
///   canvas.drawPaint(Paint()..color = Colors.red);
///   canvas.drawPaint(Paint()..color = Colors.white);
///   canvas.restore();
/// }
/// ```
///
/// This point is moot if the clip only clips one draw operation. For example,
/// the following paint method paints a pair of clean white rounded
/// rectangles, even though the clips are not done on a separate layer:
///
/// ```dart
/// void paint(Canvas canvas, Size size) {
///   canvas.save();
///   canvas.clipRRect(RRect.fromRectXY(Offset.zero & (size / 2.0), 50.0, 50.0));
///   canvas.drawPaint(Paint()..color = Colors.white);
///   canvas.restore();
///   canvas.save();
///   canvas.clipRRect(RRect.fromRectXY(size.center(Offset.zero) & (size / 2.0), 50.0, 50.0));
///   canvas.drawPaint(Paint()..color = Colors.white);
///   canvas.restore();
/// }
/// ```
///
/// (Incidentally, rather than using [clipRRect] and [drawPaint] to draw
/// rounded rectangles like this, prefer the [drawRRect] method. These
/// examples are using [drawPaint] as a proxy for "complicated draw operations
/// that will get clipped", to illustrate the point.)
///
/// ## Performance considerations
///
/// Generally speaking, [saveLayer] is relatively expensive.
///
/// There are a several different hardware architectures for GPUs (graphics
/// processing units, the hardware that handles graphics), but most of them
/// involve batching commands and reordering them for performance. When layers
/// are used, they cause the rendering pipeline to have to switch render
/// target (from one layer to another). Render target switches can flush the
/// GPU's command buffer, which typically means that optimizations that one
/// could get with larger batching are lost. Render target switches also
/// generate a lot of memory churn because the GPU needs to copy out the
/// current frame buffer contents from the part of memory that's optimized for
/// writing, and then needs to copy it back in once the previous render target
/// (layer) is restored.
///
/// See also:
///
///  * [save], which saves the current state, but does not create a new layer
///    for subsequent commands.
///  * [BlendMode], which discusses the use of [Paint.blendMode] with
///    [saveLayer]. ¿_¿f  ¿m¿t   ¿~ÅF¿∫Å(/// Pops the current save stack, if there is anything to pop.
/// Otherwise, does nothing.
///
/// Use [save] and [saveLayer] to push state onto the stack.
///
/// If the state was pushed with [saveLayer], then this call will also
/// cause the new layer to be composited into the previous layer.   ¿»Ç%¿ ”ÅÛ/// Restores the save stack to a previous level as might be obtained from [getSaveCount].
/// If [count] is less than 1, the stack is restored to its initial state.
/// If [count] is greater than the current [getSaveCount] then nothing happens.
///
/// Use [save] and [saveLayer] to push state onto the stack.
///
/// If any of the state stack levels restored by this call were pushed with
/// [saveLayer], then this call will also cause those layers to be composited
/// into their previous layers. ¿ ‚	¿ Á   ¿ ÒÅB¿"$Å"/// Returns the number of items on the save stack, including the
/// initial state. This means it returns 1 for a clean canvas, and
/// that each call to [save] and [saveLayer] increments it, and that
/// each matching call to [restore] decrements it.
///
/// This number cannot go below 1.   ¿"7Ä≈¿"‹Äõ/// Add a translation to the current transform, shifting the coordinate space
/// horizontally by the first argument and vertically by the second argument. ¿"Ê	¿"Ó  ¿"Ò	¿"˘   ¿# Å,¿$Ä˚/// Add an axis-aligned scale to the current transform, scaling by the first
/// argument in the horizontal direction and the second in the vertical
/// direction.
///
/// If [sy] is unspecified, [sx] will be used for the scale in both
/// directions. ¿$	¿$  ¿$
¿$(   ¿$0q¿$äR/// Add a rotation to the current transform. The argument is in radians clockwise. ¿$ë¿$ô   ¿$•Å5¿%øÅ/// Add an axis-aligned skew to the current transform, with the first argument
/// being the horizontal skew in rise over run units clockwise around the
/// origin, and the second argument being the vertical skew in rise over run
/// units clockwise around the origin. ¿%ƒ	¿%Ã  ¿%œ	¿%◊   ¿%ﬁÄØ¿&nÄà/// Multiply the current transform by the specified 4‚®â4 transformation matrix
/// specified as a list of values in column-major order. ¿&x¿&Ö   ¿&ëÇ¿(ÖÅ◊/// Returns the current transform including the combined result of all transform
/// methods executed since the creation of this [Canvas] object, and respecting the
/// save/restore history.
///
/// Methods that can change the current transform include [translate], [scale],
/// [rotate], [skew], and [transform]. The [restore] method can also modify
/// the current transform by restoring it to the same value it had before its
/// associated [save] or [saveLayer] call.   ¿(òÇê¿*’Ç/// Reduces the clip region to the intersection of the current clip and the
/// given rectangle.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/clip_rect.png)
///
/// If [doAntiAlias] is true, then the clip will be anti-aliased.
///
/// If multiple draw commands intersect with the clip boundary, this can result
/// in incorrect blending at the clip boundary. See [saveLayer] for a
/// discussion of how to address that.
///
/// Use [ClipOp.difference] to subtract the provided rectangle from the
/// current clip. ¿*ﬁ	¿*‰  ¿*Î ¿*Û  ¿+¿+  ¿*˚¿+¿+¿+ ¿+,Ç;¿-5ÅÔ/// Reduces the clip region to the intersection of the current clip and the
/// given rounded rectangle.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/clip_rrect.png)
///
/// If [doAntiAlias] is true, then the clip will be anti-aliased.
///
/// If multiple draw commands intersect with the clip boundary, this can result
/// in incorrect blending at the clip boundary. See [saveLayer] for a
/// discussion of how to address that and some examples of using [clipRRect]. ¿-?¿-F  ¿-M¿-S  ¿-`¿-kÇ¿/AÅº/// Reduces the clip region to the intersection of the current clip and the
/// given [Path].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/clip_path.png)
///
/// If [doAntiAlias] is true, then the clip will be anti-aliased.
///
/// If multiple draw commands intersect with the clip boundary, this can result
/// in incorrect blending at the clip boundary. See [saveLayer] for a
/// discussion of how to address that. ¿/J	¿/P  ¿/V¿/\  ¿/i¿/tä›¿:<äZ/// Returns the conservative bounds of the combined result of all clip methods
/// executed within the current save stack of this [Canvas] object, as measured
/// in the local coordinate space under which rendering operations are curretnly
/// performed.
///
/// The combined clip results are rounded out to an integer pixel boundary before
/// they are transformed back into the local coordinate space which accounts for
/// the pixel roundoff in rendering operations, particularly when antialiasing.
/// Because the [Picture] may eventually be rendered into a scene within the
/// context of transforming widgets or layers, the result may thus be overly
/// conservative due to premature rounding. Using the [getDestinationClipBounds]
/// method combined with the external transforms and rounding in the true device
/// coordinate system will produce more accurate results, but this value may
/// provide a more convenient approximation to compare rendering operations to
/// the established clip.
///
/// {@template dart.ui.canvas.conservativeClipBounds}
/// The conservative estimate of the bounds is based on intersecting the bounds
/// of each clip method that was executed with [ClipOp.intersect] and potentially
/// ignoring any clip method that was executed with [ClipOp.difference]. The
/// [ClipOp] argument is only present on the [clipRect] method.
///
/// To understand how the bounds estimate can be conservative, consider the
/// following two clip method calls:
///
/// ```dart
/// void draw(Canvas canvas) {
///   canvas.clipPath(Path()
///     ..addRect(const Rect.fromLTRB(10, 10, 20, 20))
///     ..addRect(const Rect.fromLTRB(80, 80, 100, 100)));
///   canvas.clipPath(Path()
///     ..addRect(const Rect.fromLTRB(80, 10, 100, 20))
///     ..addRect(const Rect.fromLTRB(10, 80, 20, 100)));
///   // ...
/// }
/// ```
///
/// After executing both of those calls there is no area left in which to draw
/// because the two paths have no overlapping regions. But, in this case,
/// [getLocalClipBounds] would return a rectangle from `10, 10` to `100, 100` because it
/// only intersects the bounds of the two path objects to obtain its conservative
/// estimate.
///
/// The clip bounds are not affected by the bounds of any enclosing
/// [saveLayer] call as the engine does not currently guarantee the strict
/// enforcement of those bounds during rendering.
///
/// Methods that can change the current clip include [clipRect], [clipRRect],
/// and [clipPath]. The [restore] method can also modify the current clip by
/// restoring it to the same value it had before its associated [save] or
/// [saveLayer] call.
/// {@endtemplate}   ¿:UÉü¿=ŸÉb/// Returns the conservative bounds of the combined result of all clip methods
/// executed within the current save stack of this [Canvas] object, as measured
/// in the destination coordinate space in which the [Picture] will be rendered.
///
/// Unlike [getLocalClipBounds], the bounds are not rounded out to an integer
/// pixel boundary as the Destination coordinate space may not represent pixels
/// if the [Picture] being constructed will be further transformed when it is
/// rendered or added to a scene. In order to determine the true pixels being
/// affected, those external transforms should be applied first before rounding
/// out the result to integer pixel boundaries. Most typically, [Picture] objects
/// are rendered in a scene with a scale transform representing the Device Pixel
/// Ratio.
///
/// {@macro dart.ui.canvas.conservativeClipBounds}   ¿=¯Ä›¿>©Ä•/// Paints the given [Color] onto the canvas, applying the given
/// [BlendMode], with the given color being the source and the background
/// being the destination. ¿>≥¿>∫  ¿>¿¿>À   ¿>ŸÅ¸¿@©Åº/// Draws a line between the given points using the given paint. The line is
/// stroked, the value of the [Paint.style] is ignored for this call.
///
/// The `p1` and `p2` arguments are interpreted as offsets from the origin.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_line.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_line_dark.png#gh-dark-mode-only) ¿@≤	¿@∫  ¿@Ω	¿@≈  ¿@»¿@œ   ¿@ŸÄ±¿AsÄå/// Fills the canvas with the given [Paint].
///
/// To fill the canvas with a solid color and blend mode, consider
/// [drawColor] instead. ¿A}¿AÑ   ¿AéÅë¿B˛Å`/// Draws a rectangle with the given [Paint]. Whether the rectangle is filled
/// or stroked (or both) is controlled by [Paint.style].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_rect.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_rect_dark.png#gh-dark-mode-only) ¿C	¿C  ¿C¿C   ¿C#Åû¿DùÅj/// Draws a rounded rectangle with the given [Paint]. Whether the rectangle is
/// filled or stroked (or both) is controlled by [Paint.style].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_rrect.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_rrect_dark.png#gh-dark-mode-only) ¿Dß¿DÆ  ¿D¥¿Dª   ¿D≈ÅH¿E€Å/// Draws a shape consisting of the difference between two rounded rectangles
/// with the given [Paint]. Whether this shape is filled or stroked (or both)
/// is controlled by [Paint.style].
///
/// This shape is almost but not quite entirely unlike an annulus. ¿EÊ¿EÌ  ¿EÛ¿E˙  ¿F ¿F   ¿FÅ«¿G∑Åî/// Draws an axis-aligned oval that fills the given axis-aligned rectangle
/// with the given [Paint]. Whether the oval is filled or stroked (or both) is
/// controlled by [Paint.style].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_oval.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_oval_dark.png#gh-dark-mode-only) ¿G¿	¿G∆  ¿GÀ¿G“   ¿G‹Ç)¿I‘Å‰/// Draws a circle centered at the point given by the first argument and
/// that has the radius given by the second argument, with the [Paint] given in
/// the third argument. Whether the circle is filled or stroked (or both) is
/// controlled by [Paint.style].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_circle.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_circle_dark.png#gh-dark-mode-only) ¿Iﬂ¿IÁ  ¿IÈ¿IÒ  ¿I¯¿Iˇ   ¿J	É€¿MéÉc/// Draw an arc scaled to fit inside the given rectangle.
///
/// It starts from `startAngle` radians around the oval up to
/// `startAngle` + `sweepAngle` radians around the oval, with zero radians
/// being the point on the right hand side of the oval that crosses the
/// horizontal line that intersects the center of the rectangle and with positive
/// angles going clockwise around the oval. If `useCenter` is true, the arc is
/// closed back to the center, forming a circle sector. Otherwise, the arc is
/// not closed, forming a circle segment.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_draw_arc.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_draw_arc_dark.png#gh-dark-mode-only)
///
/// This method is optimized for drawing arcs and should be faster than [Path.arcTo]. ¿Mñ	¿Mú  ¿M°¿M©  ¿M¥¿Mº  ¿M«¿MÕ  ¿M◊¿Mﬁ   ¿MËÅ¿NÊÄÓ/// Draws the given [Path] with the given [Paint].
///
/// Whether this shape is filled or stroked (or both) is controlled by
/// [Paint.style]. If the path is filled, then sub-paths within it are
/// implicitly closed (see [Path.close]). ¿NÔ	¿Nı  ¿N˙¿O   ¿OÄ›¿OµÄ†/// Draws the given [Image] into the canvas with its top-left corner at the
/// given [Offset]. The image is composited into the canvas using the given [Paint]. ¿Oø¿O∆  ¿OÃ¿O‘  ¿O€¿O‚   ¿OÏÅ¯¿Q®Å§/// Draws the subset of the given image described by the `src` argument into
/// the canvas in the axis-aligned rectangle given by the `dst` argument.
///
/// This might sample from outside the `src` rect by up to half the width of
/// an applied filter.
///
/// Multiple calls to this method with different arguments (from the same
/// image) can be batched into a single call to [drawAtlas] to improve
/// performance. ¿Q∂¿QΩ  ¿Q√¿Q…  ¿QÕ¿Q”  ¿Q◊¿Qﬁ   ¿QËÉQ¿T˙ÇÚ/// Draws the given [Image] into the canvas using the given [Paint].
///
/// The image is drawn in nine portions described by splitting the image by
/// drawing two horizontal lines and two vertical lines, where the `center`
/// argument describes the rectangle formed by the four points where these
/// four lines intersect each other. (This forms a 3-by-3 grid of regions,
/// the center region being described by the `center` argument.)
///
/// The four regions in the corners are drawn, without scaling, in the four
/// corners of the destination rectangle described by `dst`. The remaining
/// five regions are drawn by stretching them to fit such that they exactly
/// cover the destination rectangle while maintaining their relative
/// positions. ¿U¿U  ¿U¿U  ¿U"¿U(  ¿U,¿U3   ¿U=ÄÇ¿U¢[/// Draw the given picture onto the canvas. To create a picture, see
/// [PictureRecorder]. ¿UÆ¿U∑   ¿U√ÑI¿Y⁄ÉÈ/// Draws the text in the given [Paragraph] into this canvas at the given
/// [Offset].
///
/// The [Paragraph] object must have had [Paragraph.layout] called on it
/// first.
///
/// To align the text, set the `textAlign` on the [ParagraphStyle] object
/// passed to the [ParagraphBuilder.new] constructor. For more details see
/// [TextAlign] and the discussion at [ParagraphStyle.new].
///
/// If the text is left aligned or justified, the left margin will be at the
/// position specified by the `offset` argument's [Offset.dx] coordinate.
///
/// If the text is right aligned or justified, the right margin will be at the
/// position described by adding the [ParagraphConstraints.width] given to
/// [Paragraph.layout], to the `offset` argument's [Offset.dx] coordinate.
///
/// If the text is centered, the centering axis will be at the position
/// described by adding half of the [ParagraphConstraints.width] given to
/// [Paragraph.layout], to the `offset` argument's [Offset.dx] coordinate. ¿YË¿YÛ  ¿Y˝¿Z   ¿ZÅÙ¿[¬Åñ/// Draws a sequence of points according to the given [PointMode].
///
/// The `points` argument is interpreted as offsets from the origin.
///
/// The `paint` is used for each point ([PointMode.points]) or line
/// ([PointMode.lines] or [PointMode.polygon]), ignoring [Paint.style].
///
/// See also:
///
///  * [drawRawPoints], which takes `points` as a [Float32List] rather than a
///    [List<Offset>]. ¿[Õ¿[ÿ  ¿[‚¿[  ¿[˜¿[˛   ¿\ÇO¿^ÅÌ/// Draws a sequence of points according to the given [PointMode].
///
/// The `points` argument is interpreted as a list of pairs of floating point
/// numbers, where each pair represents an x and y offset from the origin.
///
/// The `paint` is used for each point ([PointMode.points]) or line
/// ([PointMode.lines] or [PointMode.polygon]), ignoring [Paint.style].
///
/// See also:
///
///  * [drawPoints], which takes `points` as a [List<Offset>] rather than a
///    [List<Float32List>]. ¿^!¿^,  ¿^6¿^C  ¿^J¿^Q   ¿^[ÜC¿d\Ö√/// Draws a set of [Vertices] onto the canvas as one or more triangles.
///
/// The [Paint.color] property specifies the default color to use for the
/// triangles.
///
/// The [Paint.shader] property, if set, overrides the color entirely,
/// replacing it with the colors from the specified [ImageShader], [Gradient],
/// or other shader.
///
/// The `blendMode` parameter is used to control how the colors in the
/// `vertices` are combined with the colors in the `paint`. If there are no
/// colors specified in `vertices` then the `blendMode` has no effect. If
/// there are colors in the `vertices`, then the color taken from the
/// [Paint.shader] or [Paint.color] in the `paint` is blended with the colors
/// specified in the `vertices` using the `blendMode` parameter. For the
/// purposes of this blending, the colors from the `paint` parameter are
/// considered the source, and the colors from the `vertices` are considered
/// the destination. [BlendMode.dstOver] ignores the `paint` and uses only the
/// colors of the `vertices`; [BlendMode.srcOver] ignores the colors of the
/// `vertices` and uses only the colors in the `paint`.
///
/// All parameters must not be null.
///
/// See also:
///   * [Vertices.new], which creates a set of vertices to draw on the canvas.
///   * [Vertices.raw], which creates the vertices using typed data lists
///     rather than unencoded lists.
///   * [paint], Image shaders can be used to draw images on a triangular mesh. ¿di¿ds  ¿d|¿dá  ¿dë¿dò   ¿d¢ñï¿zBîî/// Draws many parts of an image - the [atlas] - onto the canvas.
///
/// This method allows for optimization when you want to draw many parts of an
/// image onto the canvas, such as when using sprites or zooming. It is more efficient
/// than using multiple calls to [drawImageRect] and provides more functionality
/// to individually transform each image part by a separate rotation or scale and
/// blend or modulate those parts with a solid color.
///
/// The method takes a list of [Rect] objects that each define a piece of the
/// [atlas] image to be drawn independently. Each [Rect] is associated with an
/// [RSTransform] entry in the [transforms] list which defines the location,
/// rotation, and (uniform) scale with which to draw that portion of the image.
/// Each [Rect] can also be associated with an optional [Color] which will be
/// composed with the associated image part using the [blendMode] before blending
/// the result onto the canvas. The full operation can be broken down as:
///
/// - Blend each rectangular portion of the image specified by an entry in the
/// [rects] argument with its associated entry in the [colors] list using the
/// [blendMode] argument (if a color is specified). In this part of the operation,
/// the image part will be considered the source of the operation and the associated
/// color will be considered the destination.
/// - Blend the result from the first step onto the canvas using the translation,
/// rotation, and scale properties expressed in the associated entry in the
/// [transforms] list using the properties of the [Paint] object.
///
/// If the first stage of the operation which blends each part of the image with
/// a color is needed, then both the [colors] and [blendMode] arguments must
/// not be null and there must be an entry in the [colors] list for each
/// image part. If that stage is not needed, then the [colors] argument can
/// be either null or an empty list and the [blendMode] argument may also be null.
///
/// The optional [cullRect] argument can provide an estimate of the bounds of the
/// coordinates rendered by all components of the atlas to be compared against
/// the clip to quickly reject the operation if it does not intersect.
///
/// An example usage to render many sprites from a single sprite atlas with no
/// rotations or scales:
///
/// ```dart
/// class Sprite {
///   Sprite(this.index, this.center);
///   int index;
///   Offset center;
/// }
///
/// class MyPainter extends CustomPainter {
///   MyPainter(this.spriteAtlas, this.allSprites);
///
///   // assume spriteAtlas contains N 10x10 sprites side by side in a (N*10)x10 image
///   ui.Image spriteAtlas;
///   List<Sprite> allSprites;
///
///   @override
///   void paint(Canvas canvas, Size size) {
///     Paint paint = Paint();
///     canvas.drawAtlas(spriteAtlas, <RSTransform>[
///       for (final Sprite sprite in allSprites)
///         RSTransform.fromComponents(
///           rotation: 0.0,
///           scale: 1.0,
///           // Center of the sprite relative to its rect
///           anchorX: 5.0,
///           anchorY: 5.0,
///           // Location at which to draw the center of the sprite
///           translateX: sprite.center.dx,
///           translateY: sprite.center.dy,
///         ),
///     ], <Rect>[
///       for (final Sprite sprite in allSprites)
///         Rect.fromLTWH(sprite.index * 10.0, 0.0, 10.0, 10.0),
///     ], null, null, null, paint);
///   }
///
///   // ...
/// }
/// ```
///
/// Another example usage which renders sprites with an optional opacity and rotation:
///
/// ```dart
/// class Sprite {
///   Sprite(this.index, this.center, this.alpha, this.rotation);
///   int index;
///   Offset center;
///   int alpha;
///   double rotation;
/// }
///
/// class MyPainter extends CustomPainter {
///   MyPainter(this.spriteAtlas, this.allSprites);
///
///   // assume spriteAtlas contains N 10x10 sprites side by side in a (N*10)x10 image
///   ui.Image spriteAtlas;
///   List<Sprite> allSprites;
///
///   @override
///   void paint(Canvas canvas, Size size) {
///     Paint paint = Paint();
///     canvas.drawAtlas(spriteAtlas, <RSTransform>[
///       for (final Sprite sprite in allSprites)
///         RSTransform.fromComponents(
///           rotation: sprite.rotation,
///           scale: 1.0,
///           // Center of the sprite relative to its rect
///           anchorX: 5.0,
///           anchorY: 5.0,
///           // Location at which to draw the center of the sprite
///           translateX: sprite.center.dx,
///           translateY: sprite.center.dy,
///         ),
///     ], <Rect>[
///       for (final Sprite sprite in allSprites)
///         Rect.fromLTWH(sprite.index * 10.0, 0.0, 10.0, 10.0),
///     ], <Color>[
///       for (final Sprite sprite in allSprites)
///         Colors.white.withAlpha(sprite.alpha),
///     ], BlendMode.srcIn, null, paint);
///   }
///
///   // ...
/// }
/// ```
///
/// The length of the [transforms] and [rects] lists must be equal and
/// if the [colors] argument is not null then it must either be empty or
/// have the same length as the other two lists.
///
/// See also:
///
///  * [drawRawAtlas], which takes its arguments as typed data lists rather
///    than objects. ¿zL¿zS  ¿zj¿z}  ¿zô¿z•  ¿zº¿z   ¿z‚¿zÓ  ¿{	¿{  ¿{*¿{1   ¿{;õ¿ïKò‰/// Draws many parts of an image - the [atlas] - onto the canvas.
///
/// This method allows for optimization when you want to draw many parts of an
/// image onto the canvas, such as when using sprites or zooming. It is more efficient
/// than using multiple calls to [drawImageRect] and provides more functionality
/// to individually transform each image part by a separate rotation or scale and
/// blend or modulate those parts with a solid color. It is also more efficient
/// than [drawAtlas] as the data in the arguments is already packed in a format
/// that can be directly used by the rendering code.
///
/// A full description of how this method uses its arguments to draw onto the
/// canvas can be found in the description of the [drawAtlas] method.
///
/// The [rstTransforms] argument is interpreted as a list of four-tuples, with
/// each tuple being ([RSTransform.scos], [RSTransform.ssin],
/// [RSTransform.tx], [RSTransform.ty]).
///
/// The [rects] argument is interpreted as a list of four-tuples, with each
/// tuple being ([Rect.left], [Rect.top], [Rect.right], [Rect.bottom]).
///
/// The [colors] argument, which can be null, is interpreted as a list of
/// 32-bit colors, with the same packing as [Color.value]. If the [colors]
/// argument is not null then the [blendMode] argument must also not be null.
///
/// An example usage to render many sprites from a single sprite atlas with no rotations
/// or scales:
///
/// ```dart
/// class Sprite {
///   Sprite(this.index, this.center);
///   int index;
///   Offset center;
/// }
///
/// class MyPainter extends CustomPainter {
///   MyPainter(this.spriteAtlas, this.allSprites);
///
///   // assume spriteAtlas contains N 10x10 sprites side by side in a (N*10)x10 image
///   ui.Image spriteAtlas;
///   List<Sprite> allSprites;
///
///   @override
///   void paint(Canvas canvas, Size size) {
///     // For best advantage, these lists should be cached and only specific
///     // entries updated when the sprite information changes. This code is
///     // illustrative of how to set up the data and not a recommendation for
///     // optimal usage.
///     Float32List rectList = Float32List(allSprites.length * 4);
///     Float32List transformList = Float32List(allSprites.length * 4);
///     for (int i = 0; i < allSprites.length; i++) {
///       Sprite sprite = allSprites[i];
///       final double rectX = sprite.index * 10.0;
///       rectList[i * 4 + 0] = rectX;
///       rectList[i * 4 + 1] = 0.0;
///       rectList[i * 4 + 2] = rectX + 10.0;
///       rectList[i * 4 + 3] = 10.0;
///
///       // This example sets the RSTransform values directly for a common case of no
///       // rotations or scales and just a translation to position the atlas entry. For
///       // more complicated transforms one could use the RSTransform class to compute
///       // the necessary values or do the same math directly.
///       transformList[i * 4 + 0] = 1.0;
///       transformList[i * 4 + 1] = 0.0;
///       transformList[i * 4 + 2] = sprite.center.dx - 5.0;
///       transformList[i * 4 + 3] = sprite.center.dy - 5.0;
///     }
///     Paint paint = Paint();
///     canvas.drawRawAtlas(spriteAtlas, transformList, rectList, null, null, null, paint);
///   }
///
///   // ...
/// }
/// ```
///
/// Another example usage which renders sprites with an optional opacity and rotation:
///
/// ```dart
/// class Sprite {
///   Sprite(this.index, this.center, this.alpha, this.rotation);
///   int index;
///   Offset center;
///   int alpha;
///   double rotation;
/// }
///
/// class MyPainter extends CustomPainter {
///   MyPainter(this.spriteAtlas, this.allSprites);
///
///   // assume spriteAtlas contains N 10x10 sprites side by side in a (N*10)x10 image
///   ui.Image spriteAtlas;
///   List<Sprite> allSprites;
///
///   @override
///   void paint(Canvas canvas, Size size) {
///     // For best advantage, these lists should be cached and only specific
///     // entries updated when the sprite information changes. This code is
///     // illustrative of how to set up the data and not a recommendation for
///     // optimal usage.
///     Float32List rectList = Float32List(allSprites.length * 4);
///     Float32List transformList = Float32List(allSprites.length * 4);
///     Int32List colorList = Int32List(allSprites.length);
///     for (int i = 0; i < allSprites.length; i++) {
///       Sprite sprite = allSprites[i];
///       final double rectX = sprite.index * 10.0;
///       rectList[i * 4 + 0] = rectX;
///       rectList[i * 4 + 1] = 0.0;
///       rectList[i * 4 + 2] = rectX + 10.0;
///       rectList[i * 4 + 3] = 10.0;
///
///       // This example uses an RSTransform object to compute the necessary values for
///       // the transform using a factory helper method because the sprites contain
///       // rotation values which are not trivial to work with. But if the math for the
///       // values falls out from other calculations on the sprites then the values could
///       // possibly be generated directly from the sprite update code.
///       final RSTransform transform = RSTransform.fromComponents(
///         rotation: sprite.rotation,
///         scale: 1.0,
///         // Center of the sprite relative to its rect
///         anchorX: 5.0,
///         anchorY: 5.0,
///         // Location at which to draw the center of the sprite
///         translateX: sprite.center.dx,
///         translateY: sprite.center.dy,
///       );
///       transformList[i * 4 + 0] = transform.scos;
///       transformList[i * 4 + 1] = transform.ssin;
///       transformList[i * 4 + 2] = transform.tx;
///       transformList[i * 4 + 3] = transform.ty;
///
///       // This example computes the color value directly, but one could also compute
///       // an actual Color object and use its Color.value getter for the same result.
///       // Since we are using BlendMode.srcIn, only the alpha component matters for
///       // these colors which makes this a simple shift operation.
///       colorList[i] = sprite.alpha << 24;
///     }
///     Paint paint = Paint();
///     canvas.drawRawAtlas(spriteAtlas, transformList, rectList, colorList, BlendMode.srcIn, null, paint);
///   }
///
///   // ...
/// }
/// ```
///
/// See also:
///
///  * [drawAtlas], which takes its arguments as objects rather than typed
///    data lists. ¿ïX¿ï_  ¿ïy¿ïÜ  ¿ï®¿ïµ  ¿ïœ¿ï€  ¿ïˆ¿ñ  ¿ñ ¿ñ'  ¿ñD¿ñK   ¿ñUÅ8¿ó>Ä◊/// Draws a shadow for a [Path] representing the given material elevation.
///
/// The `transparentOccluder` argument should be true if the occluding object
/// is not opaque.
///
/// The arguments must not be null. ¿óI	¿óO  ¿óT¿ó[  ¿óa¿ói  ¿ós¿óy    ¿óë¿ HÚ¿óú  ¿ó·ÅØ ¿ó˝¿ò
 ¿ò¿ò  ¿ò'¿ò.  ¿ó·¿ó‚¿óË¿ó˘¿óÈ¿õq!¿õâ   B¿ôîÄ‹¿ö  ¿ö¿ö1  ¿ö:¿öB  ¿öG
¿öO  ¿öS¿ö[  ¿öa¿öi  ¿ôî¿ôï¿ôõ¿ô‡¿ô°¿ôú¿ô©¿ôﬂ¿ô™¿ô≤¿ôπ¿ôæ¿ô∫¿ô¡¿ô…¿ô—¿ôŸ¿ô·¿ô˙¿ôË¿ô‚¿ôÍ¿õóo¿õˇ   ¿õó¿õò¿õ£¿õ§¿õ™¿õ«¿õ∞¿õ´¿õ∏¿õ∆¿õπ¿õ¿¿õ≈¿õ¡¿õ»¿õÌ¿õœ¿õ…¿õ—¿õÁ¿õ·¿õÈ¿ú
Å-¿ú  ¿ú%¿ú,  ¿ú3¿ú:  ¿ú
¿ú¿ù;Äπ¿ù´  ¿ù√¿ù”  ¿ù‡¿ùÍ  ¿ù;¿ù<¿ùB¿ùo¿ùH¿ùC¿ùP¿ùn¿ùQ¿ùX¿ù]¿ùY¿ù`¿ùh¿ùp¿ùô¿ùw¿ùq¿ùy¿ù¯Äı¿û{  ¿ûÜ¿ûé  ¿ûì
¿ûõ  ¿ûü¿ûß  ¿û≠¿ûµ  ¿ûº¿ûÃ  ¿ûŸ¿û„  ¿ù¯¿ù˘¿ùˇ¿ûL¿û¿û ¿û¿ûK¿û¿û¿û¿û¿û¿û%¿û-¿û5¿û=¿ûE¿ûM¿ûi¿ûT¿ûN¿ûV¿ûÒu¿ü\   ¿ûÒ¿ûÚ¿û˝¿û˛¿ü¿ü!¿ü
¿ü¿ü¿ü ¿ü¿ü¿ü¿ü¿ü"¿üJ¿ü)¿ü#¿ü+¿üD¿ü>¿üF¿üjÄì¿ü„  ¿üÚ	¿ü˜  ¿üj¿ük¿üv¿üw¿ü}¿ü°¿üÉ¿ü~¿üã¿ü†¿üå¿üì¿üò¿üî¿üõ¿ü¢¿ü—¿ü©¿ü£¿ü´¿üÀ¿ü≈¿üÕ¿†¿†q   ¿†¿†¿†¿†¿†¿†2¿†¿†¿†#¿†1¿†$¿†+¿†0¿†,¿†3¿†`¿†:¿†4¿†<¿†Z¿†T¿†\¿†ÑÄù¿°  ¿°	¿°  ¿°	¿°  ¿†Ñ¿†Ö¿†ê¿†ë¿†ó¿†ƒ¿†ù¿†ò¿†•¿†√¿†¶¿†≠¿†≤¿†Æ¿†µ¿†Ω¿†≈¿†Ô¿†Ã¿†∆¿†Œ¿†È¿†„¿†Î¿°%H¿°6  ¿°<	¿°D  ¿°H
¿°Q  ¿°%¿°&¿°qÄä¿°ﬁ  ¿°Â	¿°Ì  ¿°	¿°¯  ¿°q¿°r¿°x¿°•¿°~¿°y¿°Ü¿°§¿°á¿°é¿°ì¿°è¿°ñ¿°û¿°¶¿°Ã¿°≠¿°ß¿°Ø¿°∆¿°¿¿°»¿°ˇÄâ¿¢q  ¿¢x¿¢Ä  ¿°ˇ¿¢ ¿¢¿¢¿¢¿¢7¿¢¿¢¿¢ ¿¢6¿¢!¿¢(¿¢-¿¢)¿¢0¿¢8¿¢_¿¢?¿¢9¿¢A¿¢Y¿¢S¿¢[¿¢åÄì¿£  ¿£		¿£  ¿£	¿£  ¿¢å¿¢ç¿¢ò¿¢ô¿¢ü¿¢Ã¿¢•¿¢†¿¢≠¿¢À¿¢Æ¿¢µ¿¢∫¿¢∂¿¢Ω¿¢≈¿¢Õ¿¢Ú¿¢‘¿¢Œ¿¢÷¿¢Ï¿¢Ê¿¢Ó¿£#Ä≤¿£4  ¿£>¿£K  ¿£#¿£$¿£Ÿ{¿§4  ¿§?¿§L  ¿£Ÿ¿£⁄¿£‡¿§¿£Ê¿£·¿£Ó¿§¿£Ô¿£ˆ¿£˚¿£˜¿£˛¿§¿§"¿§¿§¿§¿§XÄç¿§p   ¿§X¿§Y¿§ÈÄÅ¿•G  ¿•U¿•b  ¿§È¿§Í¿§¿•¿§ˆ¿§Ò¿§˛¿•¿§ˇ¿•¿•¿•¿•¿•¿•5¿•¿•¿•¿•nÄ·¿•  ¿•à	¿•é  ¿•ï ¿•ù  ¿•∑¿•Ω  ¿•n¿•o¿••¿•´¿•¨¿• ¿¶SÄÎ¿¶‡  ¿¶Í¿¶Ú  ¿¶˜
¿¶ˇ  ¿ß¿ß  ¿ß¿ß  ¿ß 
¿ß%  ¿ß,¿ß2  ¿¶S¿¶T¿¶Z¿¶§¿¶`¿¶[¿¶h¿¶£¿¶i¿¶p¿¶u¿¶q¿¶x¿¶Ä¿¶à¿¶ê¿¶ò¿¶ü¿¶•¿¶Œ¿¶¨¿¶¶¿¶Æ¿¶»¿¶¬¿¶ ¿ßBÄú¿ßS  ¿ß]¿ßd  ¿ßk¿ßq  ¿ßB¿ßC¿ß~¿ß‚Äë¿®C  ¿®N¿®[  ¿®a¿®g  ¿ß‚¿ß„¿ßÈ¿®¿ßÔ¿ßÍ¿ß˜¿®¿ß¯¿ßˇ¿®¿® ¿®¿®¿®¿®1¿®¿®¿®¿®wv¿®à  ¿®ë	¿®ó  ¿®ù¿®£  ¿®w¿®x¿®∞¿®ÒÄï¿©X  ¿©b¿©o  ¿©t¿©z  ¿®Ò¿®Ú¿®¯¿©*¿®˛¿®˘¿©¿©)¿©¿©¿©¿©¿©¿©¿©"¿©¿©%¿©+¿©F¿©2¿©,¿©4¿©äÄ¡¿©õ   ¿©ä¿©ã¿™OÄå¿™≥  ¿™«¿™‘  ¿™O¿™P¿™V¿™{¿™\¿™W¿™d¿™z¿™e¿™l¿™q¿™m¿™t¿™|¿™°¿™É¿™}¿™Ö¿™ﬂÄÕ¿™   ¿™ﬂ¿™‡¿´∞Äò¿¨  ¿¨4¿¨A  ¿´∞¿´±¿´∑¿´‹¿´Ω¿´∏¿´≈¿´€¿´∆¿´Õ¿´“¿´Œ¿´’¿´›¿¨¿´‰¿´ﬁ¿´Ê¿¨Lp¿¨]  ¿¨g¿¨n  ¿¨t¿¨  ¿¨L¿¨M¿¨¿Äï¿≠0  ¿≠;	¿≠@  ¿≠F¿≠K  ¿¨¿¿¨¡¿¨«¿¨Û¿¨Õ¿¨»¿¨’¿¨Ú¿¨÷¿¨›¿¨‚¿¨ﬁ¿¨Â¿¨Ì¿¨Ù¿≠¿¨˚¿¨ı¿¨˝¿≠¿≠¿≠¿≠YÄ ¿≠j  ¿≠s	¿≠{  ¿≠~	¿≠Ü  ¿≠â¿≠ê  ¿≠Y¿≠Z¿Æ'ÄÈ¿Æ©  ¿Æ≥	¿Æª  ¿Ææ	¿Æ∆  ¿Æ…	¿Æ—  ¿Æ‘	¿Æ‹  ¿Æﬂ¿ÆÔ  ¿Æ¸¿Ø  ¿Æ'¿Æ(¿Æ.¿Æ{¿Æ4¿Æ/¿Æ<¿Æz¿Æ=¿ÆD¿ÆI¿ÆE¿ÆL¿ÆT¿Æ\¿Æd¿Æl¿Æt¿Æ|¿Æó¿ÆÉ¿Æ}¿ÆÖ¿ØZ¿Ø%  ¿Ø/¿Ø6  ¿Ø¿Ø¿ØrÄü¿Ø’  ¿Ø‡¿Ø  ¿Ø˝¿∞  ¿Ør¿Øs¿Øy¿Ø¶¿Ø¿Øz¿Øá¿Ø•¿Øà¿Øè¿Øî¿Øê¿Øó¿Øü¿Øß¿Ø√¿ØÆ¿Ø®¿Ø∞¿∞Ä±¿∞&  ¿∞/	¿∞5  ¿∞:¿∞A  ¿∞¿∞¿∞ ÄÛ¿±L  ¿±V¿±^  ¿±c
¿±k  ¿±o¿±w  ¿±}¿±Ö  ¿±å¿±ú  ¿±©¿±≥  ¿∞ ¿∞À¿∞—¿±¿∞◊¿∞“¿∞ﬂ¿±¿∞‡¿∞Á¿∞Ï¿∞Ë¿∞Ô¿∞˜¿∞ˇ¿±¿±¿±¿±¿±:¿±&¿± ¿±(¿±¡Äû¿±“  ¿±‹¿±„  ¿±È¿±  ¿±¡¿±¬¿≤cÄ∫¿≤Œ  ¿≤Ÿ¿≤Ê  ¿≤Ï¿≤¸  ¿≥	¿≥  ¿≤c¿≤d¿≤j¿≤ü¿≤p¿≤k¿≤x¿≤û¿≤y¿≤Ä¿≤Ö¿≤Å¿≤à¿≤ê¿≤ò¿≤†¿≤º¿≤ß¿≤°¿≤©¿≥!Ä‰¿≥2  ¿≥=¿≥D  ¿≥J¿≥Q  ¿≥W¿≥^  ¿≥!¿≥"¿¥	Ä◊¿¥}  ¿¥â¿¥ñ  ¿¥ú¿¥©  ¿¥Ø¿¥ø  ¿¥Ã¿¥÷  ¿¥	¿¥
¿¥¿¥M¿¥¿¥¿¥¿¥L¿¥¿¥&¿¥+¿¥'¿¥.¿¥6¿¥>¿¥F¿¥N¿¥k¿¥U¿¥O¿¥W¿¥‰Ä±¿¥ı  ¿¥˛	¿µ  ¿µ	¿µ  ¿¥‰¿¥Â¿µôÄÛ¿∂  ¿∂%¿∂-  ¿∂2
¿∂:  ¿∂>¿∂F  ¿∂L¿∂T  ¿∂[¿∂k  ¿∂x¿∂Ç  ¿µô¿µö¿µ†¿µÌ¿µ¶¿µ°¿µÆ¿µÏ¿µØ¿µ∂¿µª¿µ∑¿µæ¿µ∆¿µŒ¿µ÷¿µﬁ¿µÊ¿µÓ¿∂	¿µı¿µÔ¿µ˜¿∂êÄ®¿∂°  ¿∂¨¿∂¥  ¿∂∂¿∂æ  ¿∂≈¿∂Ã  ¿∂ê¿∂ë¿∑<Ä‹¿∑∏  ¿∑ƒ¿∑Ã  ¿∑Œ¿∑÷  ¿∑ÿ¿∑‡  ¿∑Á¿∑˜  ¿∏¿∏  ¿∑<¿∑=¿∑C¿∑à¿∑I¿∑D¿∑Q¿∑á¿∑R¿∑Y¿∑^¿∑Z¿∑a¿∑i¿∑q¿∑y¿∑Å¿∑â¿∑¶¿∑ê¿∑ä¿∑í¿∏Å¿∏-  ¿∏5	¿∏;  ¿∏@¿∏H  ¿∏S¿∏[  ¿∏f¿∏l  ¿∏v¿∏}  ¿∏¿∏¿π(Åt¿πø  	¿πœ¿π◊  ¿π‚
¿πÍ  ¿πÙ¿π¸  ¿∫¿∫  ¿∫¿∫%  ¿∫6¿∫>  ¿∫O¿∫U  ¿∫e¿∫u  ¿∫à¿∫í  ¿π(¿π)¿π/¿πí¿π5¿π0¿π=¿πë¿π>¿πE¿πJ¿πF¿πM¿πU¿π]¿πe¿πm¿πu¿π}¿πÉ¿πã¿πì¿π≠¿πö¿πî¿πú¿∫†x¿∫±  ¿∫∫	¿∫¿  ¿∫≈¿∫Ã  ¿∫†¿∫°¿ªÄæ¿ªç  ¿ªó¿ª§  ¿ª©¿ªπ  ¿ª∆¿ª–  ¿ª¿ª¿ª#¿ª_¿ª)¿ª$¿ª1¿ª^¿ª2¿ª9¿ª>¿ª:¿ªA¿ªH¿ªM¿ªI¿ªP¿ªX¿ª`¿ª{¿ªg¿ªa¿ªi¿ªﬁÅ~¿ªÔ  ¿ª˘¿º   ¿º¿º  ¿º¿º  ¿ªﬁ¿ªﬂ¿Ω`Å¿ΩÓ  ¿Ω˘¿æ  ¿æ¿æ  ¿æ¿æ  ¿æ¿æ+  ¿æ8¿æB  ¿æL¿æQ  ¿Ω`¿Ωa¿Ωg¿Ωº¿Ωo¿Ωh¿Ωw¿Ωª¿Ωx¿Ω¿ΩÑ¿ΩÄ¿Ωá¿Ωé¿Ωì¿Ωè¿Ωñ¿Ωû¿Ω¶¿ΩÆ¿Ω∂¿ΩΩ¿ΩŸ¿Ωƒ¿Ωæ¿Ω∆¿æhÉ¶¿æy  ¿æá¿æé  ¿æî¿æö  ¿æû¿æ§  ¿æ®¿æØ  ¿æh¿æi¿¬Åı¿¬‘  ¿¬Í¿¬Ú  ¿¬˛¿√  ¿√¿√  ¿√)¿√1  ¿√@¿√H  ¿√X¿√`  ¿√n¿√v  ¿√É¿√ã  ¿√ö¿√¢  ¿√≤¿√¬  ¿√’¿√ﬂ  ¿√Ô¿√Ù   ¿¬¿¬¿¬¿¬û¿¬!¿¬¿¬)¿¬ù¿¬*¿¬1¿¬6¿¬2¿¬9¿¬@¿¬E¿¬A¿¬H¿¬P¿¬X¿¬`¿¬h¿¬p¿¬x¿¬Ä¿¬à¿¬ê¿¬ò¿¬ü¿¬ø¿¬¶¿¬†¿¬®¿ƒÉ∏¿ƒ  ¿ƒ*¿ƒ1  ¿ƒ7¿ƒ=  ¿ƒD¿ƒJ  ¿ƒN¿ƒU  ¿ƒ¿ƒ¿««Ç¿»â  ¿»ü¿»ß  ¿»≥¿»ª  ¿»Ã¿»‘  ¿»‰¿»Ï  ¿»˛¿…  ¿…¿…!  ¿…/¿…7  ¿…D¿…L  ¿…[¿…c  ¿…s¿…É  ¿…ñ¿…†  ¿…∞¿…µ   ¿««¿«»¿«Œ¿»S¿«÷¿«œ¿«ﬁ¿»R¿«ﬂ¿«Ê¿«Î¿«Á¿«Ó¿«ı¿«˙¿«ˆ¿«˝¿»¿»¿»¿»¿»%¿»-¿»5¿»=¿»E¿»M¿»T¿»t¿»[¿»U¿»]¿…ÃÄÑ¿…›  ¿…È¿…Ú  ¿…Ã¿…Õ¿ TÄâ¿ ∏  ¿ ≈¿ ’  ¿ T¿ U¿ [¿ á¿ a¿ \¿ i¿ Ü¿ j¿ q¿ v¿ r¿ y¿ Ä¿ Ö¿ Å¿ à¿ ¶¿ è¿ â¿ ë¿ ·ÅG¿ Ú  ¿À ¿À  ¿À¿À  ¿ ·¿ ‚¿Ã,Ä±¿Ã=  ¿ÃH¿ÃS  ¿Ã]¿Ãk  ¿Ãr¿Ãy  ¿Ã,¿Ã-¿Ã·Å¿ÃÚ  ¿Õ ¿Õ  ¿Õ¿Õ"  ¿Õ)¿Õ0  ¿Ã·¿Ã‚¿Õ˘Ä”¿Œl  ¿Œx¿Œà  ¿Œï¿Œü  ¿Œ©¿ŒÆ  ¿Œ∏¿Œ≈  ¿Õ˘¿Õ˙¿Œ ¿Œ<¿Œ¿Œ¿Œ¿Œ;¿Œ¿Œ¿Œ¿Œ¿Œ¿Œ&¿Œ.¿Œ5¿Œ=¿ŒZ¿ŒD¿Œ>¿ŒF¿Œ–Ä»¿Œ·  ¿ŒÓ¿Œ¯  ¿œ¿œ  ¿œ¿œ  ¿Œ–¿Œ—¿œúÄ›¿–  ¿–&¿–0  ¿–9¿–>  ¿–H¿–X  ¿–e¿–o  ¿œú¿œù¿œ£¿œÊ¿œ©¿œ§¿œ±¿œÂ¿œ≤¿œπ¿œæ¿œ∫¿œ¡¿œ»¿œÕ¿œ…¿œ–¿œ◊¿œﬂ¿œÁ¿–¿œÓ¿œË¿œ¿–}à"¿–é  ¿–ò¿–ü  ¿–∂¿–…  ¿–Â¿–Ò  ¿—¿—  ¿—.¿—:  ¿—U¿—\  ¿—v¿—}  ¿–}¿–~¿ÿ£Ñß¿ÿ¥  ¿ÿ¡¿ÿ»  ¿ÿ‚¿ÿÔ  ¿Ÿ¿Ÿ  ¿Ÿ8¿ŸD  ¿Ÿ_¿Ÿk  ¿Ÿâ¿Ÿê  ¿Ÿ≠¿Ÿ¥  ¿ÿ£¿ÿ§¿›NÅ•¿›Û  	¿ﬁ¿ﬁ  ¿ﬁ(¿ﬁ2  ¿ﬁB¿ﬁG  ¿ﬁ`¿ﬁh  ¿ﬁt¿ﬁÅ  ¿ﬁï¿ﬁ¢  ¿ﬁÆ¿ﬁ∫  ¿ﬁ«¿ﬁÃ  ¿ﬁ‹¿ﬁÍ  ¿›N¿›O¿›U¿›¡¿›]¿›V¿›e¿›¿¿›f¿›m¿›r¿›n¿›u¿›}¿›Ö¿›å¿›ì¿›ò¿›î¿›õ¿›£¿›´¿›≥¿›∫¿›¬¿›ﬁ¿›…¿›√¿›À¿ﬁ˜Ä∏¿ﬂ  ¿ﬂ	¿ﬂ  ¿ﬂ¿ﬂ%  ¿ﬂ+¿ﬂ3  ¿ﬂ=¿ﬂC  ¿ﬁ˜¿ﬁ¯¿ﬂ≥ÄŒ¿‡,  ¿‡8¿‡E  ¿‡J	¿‡O  ¿‡U¿‡]  ¿‡g¿‡m  ¿ﬂ≥¿ﬂ¥¿ﬂ∫¿ﬂ¸¿ﬂ¿¿ﬂª¿ﬂ»¿ﬂ˚¿ﬂ…¿ﬂ–¿ﬂ’¿ﬂ—¿ﬂÿ¿ﬂﬂ¿ﬂ‰¿ﬂ‡¿ﬂÁ¿ﬂÔ¿ﬂ˜¿ﬂ˝¿‡¿‡¿ﬂ˛¿‡ ¿‡Ûä∏¿‚QÅN/// An object representing a sequence of recorded graphical operations.
///
/// To create a [Picture], use a [PictureRecorder].
///
/// A [Picture] can be placed in a [Scene] using a [SceneBuilder], via
/// the [SceneBuilder.addPicture] method. A [Picture] can also be
/// drawn into a [Canvas], using the [Canvas.drawPicture] method.  ¿‚]Å¿„mÄË/// A callback that is invoked to report a picture creation.
///
/// It's preferred to use [MemoryAllocations] in flutter/foundation.dart
/// than to use [onCreate] directly because [MemoryAllocations]
/// allows multiple callbacks. ¿„zÅ¿‰çÄÎ/// A callback that is invoked to report the picture disposal.
///
/// It's preferred to use [MemoryAllocations] in flutter/foundation.dart
/// than to use [onDispose] directly because [MemoryAllocations]
/// allows multiple callbacks. ¿ÈÔÄ«¿Í®Äß/// Whether this reference to the underlying picture is [dispose]d.
///
/// This only returns a valid value if asserts are enabled, and must not be
/// used otherwise.   ¿Í∫ÄÔ¿ÎîÄ…/// Returns the approximate number of bytes allocated for this object.
///
/// The actual size of this picture may be larger, particularly if it contains
/// references to image or other large objects.   ¿‰õÅD¿Â¿Å/// Creates an image from this picture.
///
/// The returned image will be `width` pixels wide and `height` pixels high.
/// The picture is rasterized within the 0 (left), 0 (top), `width` (right),
/// `height` (bottom) bounds. Content outside these bounds is clipped. ¿Â»	¿ÂÕ  ¿Â”
¿Âÿ   ¿Â„ÉÇ¿ÈBÉ6/// Synchronously creates a handle to an image of this picture.
///
/// {@template dart.ui.painting.Picture.toImageSync}
/// The returned image will be `width` pixels wide and `height` pixels high.
/// The picture is rasterized within the 0 (left), 0 (top), `width` (right),
/// `height` (bottom) bounds. Content outside these bounds is clipped.
///
/// The image object is created and returned synchronously, but is rasterized
/// asynchronously. If the rasterization fails, an exception will be thrown
/// when the image is drawn to a [Canvas].
///
/// If a GPU context is available, this image will be created as GPU resident
/// and not copied back to the host. This means the image will be more
/// efficient to draw.
///
/// If no GPU context is available, the image will be rasterized on the CPU.
/// {@endtemplate} ¿ÈN	¿ÈS  ¿ÈY
¿È^   ¿ÈiÄÇ¿È·n/// Release the resources used by this object. The object is no longer usable
/// after this method is called.    ¿Î≠à¡¿Î“  ¿ÏÄ—¿ÏÂ¿ÏÊ¿ÏÁÄô/// This class is created by the engine, and should not be instantiated
/// or extended directly.
///
/// To create a [Picture], use a [PictureRecorder]. ¿Ïª¿Ïº¿Ï¬¿Ï”¿Ï√¿Ú»¿ÚÕ ¿ÚŸ¿Ú„Äı¿Ú¯   ¿Ú„¿Ú‰¿Û‹Äê¿ÙW   ¿Û‹¿Û›¿ÛË¿ÛÈ¿ÛÔ¿Ù¿Û˜¿Û¿Ûˇ¿Ù¿Ù ¿Ù¿Ù¿Ù¿Ù¿ÙB¿Ù¿Ù¿Ù¿Ù<¿Ù6¿Ù>¿ÏÓÅΩ¿Ì  ¿Ì	¿Ì  ¿Ì
¿Ì   ¿ÏÓ¿ÏÔ¿ÓØÄ∞¿Ô  ¿Ô'	¿Ô,  ¿Ô2
¿Ô7  ¿Ô>¿ÔV  ¿ÓØ¿Ó∞¿Ó∂¿ÓÌ¿Óæ¿Ó∑¿Ó∆¿ÓÏ¿Ó«¿ÓŒ¿Ó”¿Óœ¿Ó÷¿Óﬁ¿ÓÊ¿ÓÓ¿Ô	¿Óı¿ÓÔ¿Ó˜¿ÔcÅ5¿Ôu  ¿ÔÅ	¿ÔÜ  ¿Ôå
¿Ôë  ¿Ôc¿Ôd¿úÄ£¿Ò
  ¿Ò	¿Ò  ¿Ò"
¿Ò'  ¿Ò.¿Ò6  ¿ú¿ù¿£¿ÿ¿©¿§¿±¿◊¿≤¿π¿æ¿∫¿¡¿…¿—¿Ÿ¿¯¿‡¿⁄¿‚¿ÒCÄ∞¿ÒT   ¿ÒC¿ÒD¿Ò˜ÄÕ¿Úπk/// This can't be a leaf call because the native function calls Dart API
/// (Dart_SetNativeInstanceField).  ¿Úg¿Úh¿Ún¿Úã¿Út¿Úo¿Ú|¿Úä¿Ú}¿ÚÑ¿Úâ¿ÚÖ¿Úå¿Úß¿Úì¿Úç¿Úï¿Î≠¿ÎÆ¿Î¥¿Î≈¿Îµ¿ÙpÑû¿ıTÄ‘/// Records a [Picture] containing a sequence of graphical operations.
///
/// To begin recording, construct a [Canvas] to record the commands.
/// To end recording, use the [PictureRecorder.endRecording] method. ¿ıhÄ◊ ¿ˆ¿ˆ#Äù/// Creates a new idle PictureRecorder. To associate it with a
/// [Canvas] and begin recording, pass this [PictureRecorder] to the
/// [Canvas] constructor.   ¿ˆCÅô¿˜–Åu/// Whether this object is currently recording commands.
///
/// Specifically, this returns true if a [Canvas] object has been
/// created to record commands and recording has not yet ended via a
/// call to [endRecording], and false if either this
/// [PictureRecorder] has not yet been associated with a [Canvas],
/// or the [endRecording] method has already been called.   ¿˜‡Å,¿¯˝Å
/// Finishes recording graphical operations.
///
/// Returns a picture containing the graphical operations that have been
/// recorded thus far. After calling this function, both the picture recorder
/// and the canvas objects are invalid and cannot be used further.    ¿˘É‚¿˘  ¿˘rH ¿˘é¿˘§  ¿˘r¿˘s¿˘y¿˘ä¿˘z¿¸Ÿ¿¸Ë  ¿˙#4¿˙8   ¿˙#¿˙$¿˘æa¿˙   ¿˘æ¿˘ø¿˘≈¿˘€¿˘À¿˘∆¿˘”¿˘⁄¿˘‘¿˘‹¿˘˛¿˘„¿˘›¿˘Â¿˙[ÅÊ¿˙o   ¿˙[¿˙\¿¸EÄê¿¸¨  ¿¸∫¿¸   ¿¸E¿¸F¿¸L¿¸q¿¸R¿¸M¿¸Z¿¸p¿¸[¿¸b¿¸g¿¸c¿¸j¿¸r¿¸ö¿¸y¿¸s¿¸{ ¿¸Ùõ¿˝OT/// A single shadow.
///
/// Multiple shadows are stacked together in a [TextStyle]. ¿˝ZÇP ¿˛Â¿˛ÎÅp/// Construct a shadow.
///
/// The default shadow is a black shadow with zero offset and zero blur.
/// Default shadows should be completely covered by the casting element,
/// and not be visible.
///
/// Transparency should be adjusted through the [color] alpha.
///
/// Shadow order matters due to compositing multiple translucent objects not
/// being commutative.¿˛Ú(¿˛¯  ¿ˇ ¿ˇ&  ¿ˇ?¿ˇE  ¿˛ˇ¿ˇ¿ˇ
¿ˇ¿ˇ¿ˇ.¿ˇ4¿ˇ5¿ˇQ¿ˇ]¿ˇc¿ˇu¿ˇ®¿ˇo¿ˇd¿ˇr¿ˇw	¿ˇÆ,¿ˇø ¿ˇ–¿ &¿  ¿ &¿ ,'¿ = ¿ O¿ M¿ R¿ W#¿ h ¿ v¿ t¿ y¿ ~#¿ è ¿ ù¿ õ¿ †¿ •&¿ ∂ ¿ «¿ ≈¿  ¿ –Äº¿áÄ¢/// Color that the shadow will be drawn with.
///
/// The shadows are shapes composited directly over the base canvas, and do not
/// represent optical occlusion. ¿ëÅ4¿øÅ/// The displacement of the shadow from the casting element.
///
/// Positive x/y offsets will shift the shadow to the right and down, while
/// negative offsets shift the shadow to the left and up. The offsets are
/// relative to the position of the element that is casting it. ¿ i¿)O/// The standard deviation of the Gaussian to convolve with the shadow's shape. ¿∏ÄÆ¿8n/// The [blurRadius] in sigmas instead of logical pixels.
///
/// See the sigma argument to [MaskFilter.blur].   ¿œG¿„   ¿œ¿–¿8Å|¿Wh/// Converts a blur radius in pixels to sigmas.
///
/// See the sigma argument to [MaskFilter.blur].
/// ¿l¿t   ¿jÇã¿zÅı/// Create the [Paint] object that corresponds to this shadow description.
///
/// The [offset] is not represented in the [Paint] object.
/// To honor this as well, the shape should be translated by [offset] before
/// being filled using this [Paint].
///
/// This class does not provide a way to disable shadows to avoid
/// inconsistencies in shadow blur rendering, primarily as a method of
/// reducing test flakiness. [toPaint] should be overridden in subclasses to
/// provide this functionality.   ¿˘Äı¿`[/// Returns a new shadow with its [offset] and [blurRadius] scaled by the given
/// factor. ¿f¿n   ¿ÚÖ◊¿¸É‘/// Linearly interpolate between two shadows.
///
/// If either shadow is null, this function linearly interpolates from
/// a shadow that matches the other shadow in color but has a zero
/// offset and a zero blurRadius.
///
/// {@template dart.ui.shadow.lerp}
/// The `t` argument represents position on the timeline, with 0.0 meaning
/// that the interpolation has not started, returning `a` (or something
/// equivalent to `a`), 1.0 meaning that the interpolation has finished,
/// returning `b` (or something equivalent to `b`), and values in between
/// meaning that the interpolation is at the relevant point on the timeline
/// between `a` and `b`. The interpolation can be extrapolated beyond 0.0 and
/// 1.0, so negative values and values greater than 1.0 are valid (and can
/// easily be generated by curves such as [Curves.elasticInOut]).
///
/// Values for `t` are usually obtained from an [Animation<double>], such as
/// an [AnimationController].
/// {@endtemplate} ¿	¿
  ¿	¿  ¿¿   ¿ÕÉ¿íÄ•/// Linearly interpolate between two lists of shadows.
///
/// If the lists differ in length, excess items are lerped with null.
///
/// {@macro dart.ui.shadow.lerp} ¿õ¿™  ¿¨¿ª  ¿Ω¿≈   ¿ÿÄÛ¿Ú  ¿ı¿˝  ¿ÿ¿Ÿ¿‘É”¿‰  ¿Û¿   ¿´L¿æ   ¿´¿¨ ¿˚éÃ¿∂ÄØ/// A handle to a read-only byte buffer that is managed by the engine.
///
/// The creator of this object is responsible for calling [dispose] when it is
/// no longer needed. ¿Î ¿˙¿˚¿¸ ¿˝¿   ¿!˛¿"  ¿"¿" ¿"$¿!≠N¿!È1/// The length, in bytes, of the underlying data.   ¿".Å¿"∑y/// Whether [dispose] has been called.
///
/// This must only be used when asserts are enabled. Otherwise, it will throw.   ¿Åg¿ë^/// Creates a copy of the data from a [Uint8List] suitable for internal use
/// in the engine. ¿ü¿™   ¿zÉG¿r/// Create a buffer from the asset with key [assetKey].
///
/// Throws an [Exception] if the asset does not exist. ¿¿$   ¿≈Å˜¿Ti/// Create a buffer from the file with [path].
///
/// Throws an [Exception] if the asset does not exist. ¿a¿i   ¿¿Äï¿ %  ¿ +¿ 6  ¿ ;¿ L  ¿¿¿¡¿«¿Ô¿œ¿»¿◊¿Ó¿ÿ¿‡¿Ë¿¿ ¿˜¿Ò¿˘¿ YÄß¿ «  ¿ ÷¿ ﬁ  ¿ Á¿ ˜  ¿ Y¿ Z¿ `¿ à¿ h¿ a¿ p¿ á¿ q¿ y¿ Å¿ â¿ ≤¿ ê¿ ä¿ í¿!Ä•¿!q  ¿!¿!á  ¿!ê¿!†  ¿!¿!¿!¿!3¿!¿!¿!¿!2¿!¿!$¿!,¿!4¿!\¿!;¿!5¿!=¿#IÇ£¿%dÇ/// Release the resources used by this object. The object is no longer usable
/// after this method is called.
///
/// The underlying memory allocated by this object will be retained beyond
/// this call if it is still needed by another object that has not been
/// disposed. For example, an [ImageDescriptor] that has not been disposed
/// may still retain a reference to the memory from this buffer even if it
/// has been disposed. Freeing that memory requires disposing all resources
/// that may still hold it.   ¿%Ä’¿&∫k/// This can't be a leaf call because the native function calls Dart API
/// (Dart_SetNativeInstanceField).  ¿&`¿&a¿&g¿&Ñ¿&m¿&h¿&u¿&É¿&v¿&}¿&Ç¿&~¿&Ö¿&®¿&å¿&Ü¿&é ¿&…ââ¿'éÄµ/// A descriptor of data that can be turned into an [Image] via a [Codec].
///
/// Use this class to determine the height, width, and byte size of image data
/// before decoding it. ¿'¢ÇÁ¿)Ÿ¿)⁄¿)›Å–/// Creates an image descriptor from raw image pixels.
///
/// The `pixels` parameter is the pixel data. They are packed in bytes in the
/// order described by `pixelFormat`, then grouped in rows, from left to right,
/// then top to bottom.
///
/// The `rowBytes` parameter is the number of bytes consumed by each row of
/// pixels in the data buffer. If unspecified, it defaults to `width` multiplied
/// by the number of bytes per pixel in the provided `format`.¿)„¿)Ù  ¿*¿*  ¿*¿*'  ¿*2¿*8  ¿*E ¿*[    ¿+Ùy¿,gd/// The width, in pixels, of the image.
///
/// On the Web, this is only supported for [raw] images.   ¿,q{¿,Âe/// The height, in pixels, of the image.
///
/// On the Web, this is only supported for [raw] images.   ¿,ÄÖ¿-gh/// The number of bytes per pixel in the image.
///
/// On web, this is only supported for [raw] images.   ¿*çÅc¿*˜H/// Creates an image descriptor from encoded data in a supported format. ¿*ˇ¿+   ¿-yÄ¯¿.gÄﬁ/// Release the resources used by this object. The object is no longer usable
/// after this method is called.
///
/// This can't be a leaf call because the native function calls Dart API
/// (Dart_SetNativeInstanceField).   ¿.uÅ€¿0ÅÇ/// Creates a [Codec] object which is suitable for decoding the data in the
/// buffer to an [Image].
///
/// If only one of targetWidth or  targetHeight are specified, the other
/// dimension will be scaled according to the aspect ratio of the supplied
/// dimension.
///
/// If either targetWidth or targetHeight is less than or equal to zero, it
/// will be treated as if it is null. ¿0*¿00  ¿0<¿0B    ¿0TåÍ¿0_  ¿0∂¿0Ã¿0Õ¿0Œ   ¿0’É£¿3¿3¿3Å–/// Creates an image descriptor from raw image pixels.
///
/// The `pixels` parameter is the pixel data. They are packed in bytes in the
/// order described by `pixelFormat`, then grouped in rows, from left to right,
/// then top to bottom.
///
/// The `rowBytes` parameter is the number of bytes consumed by each row of
/// pixels in the data buffer. If unspecified, it defaults to `width` multiplied
/// by the number of bytes per pixel in the provided `format`.¿3¿3&  ¿33¿3A  ¿3K¿3Y  ¿3d¿3j  ¿3w ¿3ç   ¿6*¿6/  ¿6Ë¿6Ì  ¿7¨¿7±  ¿6∞4¿6ƒ   ¿6∞¿6±¿7q7¿7Ö   ¿7q¿7r¿8JL¿8^   ¿8J¿8K¿4|Ä≤¿4Ô  ¿4¸¿5  ¿5¿5%  ¿4|¿4}¿4É¿4≤¿4ã¿4Ñ¿4ì¿4±¿4î¿4ú¿4£¿4®¿4§¿4´¿4≥¿4⁄¿4∫¿4¥¿4º¿52ÄÙ¿5∞  ¿5π¿5   ¿5ÿ¿5È  ¿5	¿5ı  ¿5˚
¿6   ¿6¿6  ¿6¿6  ¿52¿53¿59¿5s¿5?¿5:¿5G¿5r¿5H¿5P¿5X¿5_¿5f¿5m¿5t¿5ó¿5{¿5u¿5}¿6:r¿6†   ¿6:¿6;¿6A¿6_¿6H¿6B¿6P¿6^¿6Q¿6X¿6]¿6Y¿6`¿6è¿6g¿6a¿6i¿6â¿6É¿6ã¿6˘t¿7`   ¿6˘¿6˙¿7 ¿7¿7¿7¿7¿7¿7¿7¿7¿7¿7¿7O¿7&¿7 ¿7(¿7I¿7C¿7K¿7ƒÄÇ¿82   ¿7ƒ¿7≈¿7À¿7È¿7“¿7Ã¿7⁄¿7Ë¿7€¿7‚¿7Á¿7„¿7Í¿8!¿7Ò¿7Î¿7Û¿8¿8¿8¿8öp¿9    ¿8ö¿8õ¿8¶¿8ß¿8≠¿8 ¿8≥¿8Æ¿8ª¿8…¿8º¿8√¿8»¿8ƒ¿8À¿8Ó¿8“¿8Ã¿8‘¿9Él¿9(  ¿9:¿9@  ¿9L¿9R  ¿9¿9¿<~Äæ¿<˜  ¿=	¿=  ¿=¿=  ¿=*¿=/  ¿<~¿<¿<Ö¿<∏¿<ã¿<Ü¿<ì¿<∑¿<î¿<õ¿<†¿<ú¿<£¿<´¿<≤¿<π¿<Â¿<¿¿<∫¿<¬ ¿DΩÉ˘¿F9Åu/// An exception thrown by [Canvas.drawImage] and related methods when drawing
/// an [Image] created via [Picture.toImageSync] that is in an invalid state.
///
/// This exception may be thrown if the requested image dimensions exceeded the
/// maximum 2D texture size allowed by the GPU, or if no GPU surface or context
/// was available for rasterization at request time. ¿FpB¿Fì¿Fî¿Fï ¿Fñ¿Fú  ¿F•
¿F´   ¿F∂I¿F¯2/// A string containing details about the failure. ¿Gi¿GhO/// If available, the stack trace at the time [Picture.toImageSync] was called.  ¿GrÅB¿GÖ   ¿Gr¿Gs  ≤¿ NcΩã/// Algorithms to use when painting on the canvas.
///
/// When drawing a shape or image onto a canvas, different algorithms can be
/// used to blend the pixels. The different values of [BlendMode] specify
/// different such algorithms.
///
/// Each algorithm has two inputs, the _source_, which is the image being drawn,
/// and the _destination_, which is the image into which the source image is
/// being composited. The destination is often thought of as the _background_.
/// The source and destination both have four color channels, the red, green,
/// blue, and alpha channels. These are typically represented as numbers in the
/// range 0.0 to 1.0. The output of the algorithm also has these same four
/// channels, with values computed from the source and destination.
///
/// The documentation of each value below describes how the algorithm works. In
/// each case, an image shows the output of blending a source image with a
/// destination image. In the images below, the destination is represented by an
/// image with horizontal lines and an opaque landscape photograph, and the
/// source is represented by an image with vertical lines (the same lines but
/// rotated) and a bird clip-art image. The [src] mode shows only the source
/// image, and the [dst] mode shows only the destination image. In the
/// documentation below, the transparency is illustrated by a checkerboard
/// pattern. The [clear] mode drops both the source and destination, resulting
/// in an output that is entirely transparent (illustrated by a solid
/// checkerboard pattern).
///
/// The horizontal and vertical bars in these images show the red, green, and
/// blue channels with varying opacity levels, then all three color channels
/// together with those same varying opacity levels, then all three color
/// channels set to zero with those varying opacity levels, then two bars showing
/// a red/green/blue repeating gradient, the first with full opacity and the
/// second with partial opacity, and finally a bar with the three color channels
/// set to zero but the opacity varying in a repeating gradient.
///
/// ## Application to the [Canvas] API
///
/// When using [Canvas.saveLayer] and [Canvas.restore], the blend mode of the
/// [Paint] given to the [Canvas.saveLayer] will be applied when
/// [Canvas.restore] is called. Each call to [Canvas.saveLayer] introduces a new
/// layer onto which shapes and images are painted; when [Canvas.restore] is
/// called, that layer is then composited onto the parent layer, with the source
/// being the most-recently-drawn shapes and images, and the destination being
/// the parent layer. (For the first [Canvas.saveLayer] call, the parent layer
/// is the canvas itself.)
///
/// See also:
///
///  * [Paint.blendMode], which uses [BlendMode] to define the compositing
///    strategy.  Ω’ÄÓææÄﬁ/// Drop both the source and destination images, leaving nothing.
///
/// This corresponds to the "clear" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_clear.png) æ»ÅH¿ @Å4/// Drop the destination image, only paint the source image.
///
/// Conceptually, the destination is first cleared, then the source image is
/// painted.
///
/// This corresponds to the "Copy" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_src.png) ¿ @ÅM¿ A_Å9/// Drop the source image, only paint the destination image.
///
/// Conceptually, the source image is discarded, leaving the destination
/// untouched.
///
/// This corresponds to the "Destination" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_dst.png) ¿ AgÅÏ¿ CLÅ–/// Composite the source image over the destination image.
///
/// This is the default value. It represents the most intuitive case, where
/// shapes are painted on top of what is below, with transparent areas showing
/// the destination layer.
///
/// This corresponds to the "Source over Destination" Porter-Duff operator,
/// also known as the Painter's Algorithm.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_srcOver.png) ¿ CXÅ≠¿ D˛Åë/// Composite the source image under the destination image.
///
/// This is the opposite of [srcOver].
///
/// This corresponds to the "Destination over Source" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_dstOver.png)
///
/// This is useful when the source image should have been painted before the
/// destination image, but could not be. ¿ E
Çö¿ GüÇx/// Show the source image, but only where the two images overlap. The
/// destination image is not rendered, it is treated merely as a mask. The
/// color channels of the destination are ignored, only the opacity has an
/// effect.
///
/// To show the destination image instead, consider [dstIn].
///
/// To reverse the semantic of the mask (only showing the source where the
/// destination is absent, rather than where it is present), consider
/// [srcOut].
///
/// This corresponds to the "Source in Destination" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_srcIn.png) ¿ G©ÇÑ¿ J(Çf/// Show the destination image, but only where the two images overlap. The
/// source image is not rendered, it is treated merely as a mask. The color
/// channels of the source are ignored, only the opacity has an effect.
///
/// To show the source image instead, consider [srcIn].
///
/// To reverse the semantic of the mask (only showing the source where the
/// destination is present, rather than where it is absent), consider [dstOut].
///
/// This corresponds to the "Destination in Source" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_dstIn.png) ¿ J2Çò¿ LƒÇy/// Show the source image, but only where the two images do not overlap. The
/// destination image is not rendered, it is treated merely as a mask. The color
/// channels of the destination are ignored, only the opacity has an effect.
///
/// To show the destination image instead, consider [dstOut].
///
/// To reverse the semantic of the mask (only showing the source where the
/// destination is present, rather than where it is absent), consider [srcIn].
///
/// This corresponds to the "Source out Destination" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_srcOut.png) ¿ LœÇé¿ OWÇo/// Show the destination image, but only where the two images do not overlap. The
/// source image is not rendered, it is treated merely as a mask. The color
/// channels of the source are ignored, only the opacity has an effect.
///
/// To show the source image instead, consider [srcOut].
///
/// To reverse the semantic of the mask (only showing the destination where the
/// source is present, rather than where it is absent), consider [dstIn].
///
/// This corresponds to the "Destination out Source" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_dstOut.png) ¿ ObÇg¿ Q¬ÇE/// Composite the source image over the destination image, but only where it
/// overlaps the destination.
///
/// This corresponds to the "Source atop Destination" Porter-Duff operator.
///
/// This is essentially the [srcOver] operator, but with the output's opacity
/// channel being set to that of the destination image instead of being a
/// combination of both image's opacity channels.
///
/// For a variant with the destination on top instead of the source, see
/// [dstATop].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_srcATop.png) ¿ QŒÇ]¿ T$Ç;/// Composite the destination image over the source image, but only where it
/// overlaps the source.
///
/// This corresponds to the "Destination atop Source" Porter-Duff operator.
///
/// This is essentially the [dstOver] operator, but with the output's opacity
/// channel being set to that of the source image instead of being a
/// combination of both image's opacity channels.
///
/// For a variant with the source on top instead of the destination, see
/// [srcATop].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_dstATop.png) ¿ T0Å;¿ UhÅ+/// Apply a bitwise `xor` operator to the source and destination images. This
/// leaves transparency where they would overlap.
///
/// This corresponds to the "Source xor Destination" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_xor.png) ¿ UpÅ¿¿ W,Å©/// Sum the components of the source and destination images.
///
/// Transparency in a pixel of one of the images reduces the contribution of
/// that image to the corresponding output pixel, as if the color of that
/// pixel in that image was darker.
///
/// This corresponds to the "Source plus Destination" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_plus.png) ¿ W5ÉV¿ ZÉÉ'/// Multiply the color components of the source and destination images.
///
/// This can only result in the same or darker colors (multiplying by white,
/// 1.0, results in no change; multiplying by black, 0.0, results in black).
///
/// When compositing two opaque images, this has similar effect to overlapping
/// two transparencies on a projector.
///
/// For a variant that also multiplies the alpha channel, consider [multiply].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_modulate.png)
///
/// See also:
///
///  * [screen], which does a similar computation but inverted.
///  * [overlay], which combines [modulate] and [screen] to favor the
///    destination image.
///  * [hardLight], which combines [modulate] and [screen] to favor the
///    source image. ¿ ZŸÖ!¿ _ÙÑ‚/// Multiply the inverse of the components of the source and destination
/// images, and inverse the result.
///
/// Inverting the components means that a fully saturated channel (opaque
/// white) is treated as the value 0.0, and values normally treated as 0.0
/// (black, transparent) are treated as 1.0.
///
/// This is essentially the same as [modulate] blend mode, but with the values
/// of the colors inverted before the multiplication and the result being
/// inverted back before rendering.
///
/// This can only result in the same or lighter colors (multiplying by black,
/// 1.0, results in no change; multiplying by white, 0.0, results in white).
/// Similarly, in the alpha channel, it can only result in more opaque colors.
///
/// This has similar effect to two projectors displaying their images on the
/// same screen simultaneously.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_screen.png)
///
/// See also:
///
///  * [modulate], which does a similar computation but without inverting the
///    values.
///  * [overlay], which combines [modulate] and [screen] to favor the
///    destination image.
///  * [hardLight], which combines [modulate] and [screen] to favor the
///    source image. ¿ `Éﬁ¿ cÔÉÆ/// Multiply the components of the source and destination images after
/// adjusting them to favor the destination.
///
/// Specifically, if the destination value is smaller, this multiplies it with
/// the source value, whereas is the source value is smaller, it multiplies
/// the inverse of the source value with the inverse of the destination value,
/// then inverts the result.
///
/// Inverting the components means that a fully saturated channel (opaque
/// white) is treated as the value 0.0, and values normally treated as 0.0
/// (black, transparent) are treated as 1.0.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_overlay.png)
///
/// See also:
///
///  * [modulate], which always multiplies the values.
///  * [screen], which always multiplies the inverses of the values.
///  * [hardLight], which is similar to [overlay] but favors the source image
///    instead of the destination image. ¿ c˚Å7¿ e,Å"/// Composite the source and destination image by choosing the lowest value
/// from each color channel.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_darken.png) ¿ e7Å:¿ fjÅ$/// Composite the source and destination image by choosing the highest value
/// from each color channel.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_lighten.png) ¿ fvÅ{¿ gÁÅb/// Divide the destination by the inverse of the source.
///
/// Inverting the components means that a fully saturated channel (opaque
/// white) is treated as the value 0.0, and values normally treated as 0.0
/// (black, transparent) are treated as 1.0.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_colorDodge.png) ¿ gˆÅë¿ i~Åy/// Divide the inverse of the destination by the source, and inverse the result.
///
/// Inverting the components means that a fully saturated channel (opaque
/// white) is treated as the value 0.0, and values normally treated as 0.0
/// (black, transparent) are treated as 1.0.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_colorBurn.png) ¿ iåÉ‚¿ meÉ∞/// Multiply the components of the source and destination images after
/// adjusting them to favor the source.
///
/// Specifically, if the source value is smaller, this multiplies it with the
/// destination value, whereas is the destination value is smaller, it
/// multiplies the inverse of the destination value with the inverse of the
/// source value, then inverts the result.
///
/// Inverting the components means that a fully saturated channel (opaque
/// white) is treated as the value 0.0, and values normally treated as 0.0
/// (black, transparent) are treated as 1.0.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_hardLight.png)
///
/// See also:
///
///  * [modulate], which always multiplies the values.
///  * [screen], which always multiplies the inverses of the values.
///  * [overlay], which is similar to [hardLight] but favors the destination
///    image instead of the source image. ¿ msÅs¿ n›ÅU/// Use [colorDodge] for source values below 0.5 and [colorBurn] for source
/// values above 0.5.
///
/// This results in a similar but softer effect than [overlay].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_softLight.png)
///
/// See also:
///
///  * [color], which is a more subtle tinting effect. ¿ nÎÅ≈¿ p¶Å§/// Subtract the smaller value from the bigger value for each channel.
///
/// Compositing black has no effect; compositing white inverts the colors of
/// the other image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver].
///
/// The effect is similar to [exclusion] but harsher.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_difference.png) ¿ pµÅ‘¿ rÄÅ≤/// Subtract double the product of the two images from the sum of the two
/// images.
///
/// Compositing black has no effect; compositing white inverts the colors of
/// the other image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver].
///
/// The effect is similar to [difference] but softer.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_exclusion.png) ¿ réÇŸ¿ u_Ç¥/// Multiply the components of the source and destination images, including
/// the alpha channel.
///
/// This can only result in the same or darker colors (multiplying by white,
/// 1.0, results in no change; multiplying by black, 0.0, results in black).
///
/// Since the alpha channel is also multiplied, a fully-transparent pixel
/// (opacity 0.0) in one image results in a fully transparent pixel in the
/// output. This is similar to [dstIn], but with the colors combined.
///
/// For a variant that multiplies the colors but does not multiply the alpha
/// channel, consider [modulate].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_multiply.png) ¿ uâÇ˜¿ x}Ç—/// Take the hue of the source image, and the saturation and luminosity of the
/// destination image.
///
/// The effect is to tint the destination image with the source image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver]. Regions that are entirely transparent in the source image take
/// their hue from the destination.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_hue.png)
///
/// See also:
///
///  * [color], which is a similar but stronger effect as it also applies the
///    saturation of the source image.
///  * [HSVColor], which allows colors to be expressed using Hue rather than
///    the red/green/blue channels of [Color]. ¿ xÖÇd¿ zﬂÇ=/// Take the saturation of the source image, and the hue and luminosity of the
/// destination image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver]. Regions that are entirely transparent in the source image take
/// their saturation from the destination.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_hue.png)
///
/// See also:
///
///  * [color], which also applies the hue of the source image.
///  * [luminosity], which applies the luminosity of the source image to the
///    destination. ¿ zÓÇ„¿ }ÃÇΩ/// Take the hue and saturation of the source image, and the luminosity of the
/// destination image.
///
/// The effect is to tint the destination image with the source image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver]. Regions that are entirely transparent in the source image take
/// their hue and saturation from the destination.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_color.png)
///
/// See also:
///
///  * [hue], which is a similar but weaker effect.
///  * [softLight], which is a similar tinting effect but also tints white.
///  * [saturation], which only applies the saturation of the source image. ¿ }÷Çç¿ ÄYÇd/// Take the luminosity of the source image, and the hue and saturation of the
/// destination image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver]. Regions that are entirely transparent in the source image take
/// their luminosity from the destination.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_luminosity.png)
///
/// See also:
///
///  * [saturation], which applies the saturation of the source image to the
///    destination.
///  * [ImageFilter.blur], which can be used with [BackdropFilter] for a
///    related effect.    ¿ Ähå{¿ Ö‚Öt/// Quality levels for image sampling in [ImageFilter] and [Shader] objects that sample
/// images and for [Canvas] operations that render images.
///
/// When scaling up typically the quality is lowest at [none], higher at [low] and [medium],
/// and for very large scale factors (over 10x) the highest at [high].
///
/// When scaling down, [medium] provides the best quality especially when scaling an
/// image to less than half its size or for animating the scale factor between such
/// reductions. Otherwise, [low] and [high] provide similar effects for reductions of
/// between 50% and 100% but the image may lose detail and have dropouts below 50%.
///
/// To get high quality when scaling images up and down, or when the scale is
/// unknown, [medium] is typically a good balanced choice.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/filter_quality.png)
///
/// When building for the web using the `--web-renderer=html` option, filter
/// quality has no effect. All images are rendered using the respective
/// browser's default setting.
///
/// See also:
///
///  * [Paint.filterQuality], which is used to pass [FilterQuality] to the
///    engine while using drawImage calls on a [Canvas].
///  * [ImageShader].
///  * [ImageFilter.matrix].
///  * [Canvas.drawImage].
///  * [Canvas.drawImageRect].
///  * [Canvas.drawImageNine].
///  * [Canvas.drawAtlas].  ¿ ÜsÄŸ¿ áHÄÃ/// The fastest filtering method, albeit also the lowest quality.
///
/// This value results in a "Nearest Neighbor" algorithm which just
/// repeats or eliminates pixels as an image is scaled up or down. ¿ áQÄ≤¿ à Ä¶/// Better quality than [none], faster than [medium].
///
/// This value results in a "Bilinear" algorithm which smoothly
/// interpolates between pixels in an image. ¿ àÇé¿ äêÇk/// The best all around filtering method that is only worse than [high]
/// at extremely large scale factors.
///
/// This value improves upon the "Bilinear" algorithm specified by [low]
/// by utilizing a Mipmap that pre-computes high quality lower resolutions
/// of the image at half (and quarter and eighth, etc.) sizes and then
/// blends between those to prevent loss of detail at small scale sizes.
///
/// {@template dart.ui.filterQuality.seeAlso}
/// See also:
///
///  * [FilterQuality] class-level documentation that goes into detail about
///    relative qualities of the constant values.
/// {@endtemplate} ¿ äõÇE¿ å‹Ç&/// Best possible quality when scaling up images by scale factors larger than
/// 5-10x.
///
/// When images are scaled down, this can be worse than [medium] for scales
/// smaller than 0.5x, or when animating the scale factor.
///
/// This option is also the slowest.
///
/// This value results in a standard "Bicubic" algorithm which uses a 3rd order
/// equation to smooth the abrupt transitions between pixels while preserving
/// some of the sense of an edge and avoiding sharp peaks in the result.
///
/// {@macro dart.ui.filterQuality.seeAlso}    ¿ åÂÜ∆¿ çÿÄ±/// Styles to use for line endings.
///
/// See also:
///
///  * [Paint.strokeCap] for how this value is used.
///  * [StrokeJoin] for the different kinds of line segment joins.  ¿ çÊÅÖ¿ ègÅr/// Begin and end contours with a flat edge and no extension.
///
/// ![A butt cap ends line segments with a square end that stops at the end of
/// the line segment.](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/butt_cap.png)
///
/// Compare to the [square] cap, which has the same shape, but extends past
/// the end of the line by half a stroke width. ¿ èpÅÀ¿ ë6Åµ/// Begin and end contours with a semi-circle extension.
///
/// ![A round cap adds a rounded end to the line segment that protrudes
/// by one half of the thickness of the line (which is the radius of the cap)
/// past the end of the segment.](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/round_cap.png)
///
/// The cap is colored in the diagram above to highlight it: in normal use it
/// is the same color as the line. ¿ ë@Çh¿ ì¢ÇI/// Begin and end contours with a half square extension. This is
/// similar to extending each contour by half the stroke width (as
/// given by [Paint.strokeWidth]).
///
/// ![A square cap has a square end that effectively extends the line length
/// by half of the stroke width.](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/square_cap.png)
///
/// The cap is colored in the diagram above to highlight it: in normal use it
/// is the same color as the line.
///
/// Compare to the [butt] cap, which has the same shape, but doesn't extend
/// past the end of the line.    ¿ ì≠à¿ ïWÅg/// Styles to use for line segment joins.
///
/// This only affects line joins for polygons drawn by [Canvas.drawPath] and
/// rectangles, not points drawn as lines with [Canvas.drawPoints].
///
/// See also:
///
/// * [Paint.strokeJoin] and [Paint.strokeMiterLimit] for how this value is
///   used.
/// * [StrokeCap] for the different kinds of line endings.  ¿ ïfÇY¿ ó∫Ç7/// Joins between line segments form sharp corners.
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/miter_4_join.mp4}
///
/// The center of the line segment is colored in the diagram above to
/// highlight the join, but in normal usage the join is the same color as the
/// line.
///
/// See also:
///
///   * [Paint.strokeJoin], used to set the line segment join style to this
///     value.
///   * [Paint.strokeMiterLimit], used to define when a miter is drawn instead
///     of a bevel when the join is set to this value. ¿ óƒÅÃ¿ ôãÅÆ/// Joins between line segments are semi-circular.
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/round_join.mp4}
///
/// The center of the line segment is colored in the diagram above to
/// highlight the join, but in normal usage the join is the same color as the
/// line.
///
/// See also:
///
///   * [Paint.strokeJoin], used to set the line segment join style to this
///     value. ¿ ôïÇ¿ õßÅ˜/// Joins between line segments connect the corners of the butt ends of the
/// line segments to give a beveled appearance.
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/bevel_join.mp4}
///
/// The center of the line segment is colored in the diagram above to
/// highlight the join, but in normal usage the join is the same color as the
/// line.
///
/// See also:
///
///   * [Paint.strokeJoin], used to set the line segment join style to this
///     value.    ¿ õ±Ç÷¿ úGT/// Strategies for painting shapes and paths on a canvas.
///
/// See [Paint.style].  ¿ ú≥Ä∑¿ ùfÄ¨/// Apply the [Paint] to the inside of the shape. For example, when
/// applied to the [Canvas.drawCircle] call, this results in a disc
/// of the given size being painted. ¿ ùoÅ¿ û~Å/// Apply the [Paint] to the edge of the shape. For example, when
/// applied to the [Canvas.drawCircle] call, this results is a hoop
/// of the given size being painted. The line drawn on the edge will
/// be the width given by the [Paint.strokeWidth] property.    ¿ ûâåá¿ ûΩ./// Different ways to clip a widget's content.  ¿ û∆Ç8¿ †˙Ç/// No clip at all.
///
/// This is the default option for most widgets: if the content does not
/// overflow the widget boundary, don't pay any performance cost for clipping.
///
/// If the content does overflow, please explicitly specify the following
/// [Clip] options:
///  * [hardEdge], which is the fastest clipping, but with lower fidelity.
///  * [antiAlias], which is a little slower than [hardEdge], but with smoothed edges.
///  * [antiAliasWithSaveLayer], which is much slower than [antiAlias], and should
///    rarely be used. ¿ °Ç_¿ £ZÇ:/// Clip, but do not apply anti-aliasing.
///
/// This mode enables clipping, but curves and non-axis-aligned straight lines will be
/// jagged as no effort is made to anti-alias.
///
/// Faster than other clipping modes, but slower than [none].
///
/// This is a reasonable choice when clipping is needed, if the container is an axis-
/// aligned rectangle or an axis-aligned rounded rectangle with very small corner radii.
///
/// See also:
///
///  * [antiAlias], which is more reasonable when clipping is needed and the shape is not
///    an axis-aligned rectangle. ¿ £gÉ.¿ ¶åÉ /// Clip with anti-aliasing.
///
/// This mode has anti-aliased clipping edges to achieve a smoother look.
///
/// It' s much faster than [antiAliasWithSaveLayer], but slower than [hardEdge].
///
/// This will be the common case when dealing with circles and arcs.
///
/// Different from [hardEdge] and [antiAliasWithSaveLayer], this clipping may have
/// bleeding edge artifacts.
/// (See https://fiddle.skia.org/c/21cb4c2b2515996b537f36e7819288ae for an example.)
///
/// See also:
///
///  * [hardEdge], which is a little faster, but with lower fidelity.
///  * [antiAliasWithSaveLayer], which is much slower, but can avoid the
///    bleeding edges if there's no other way.
///  * [Paint.isAntiAlias], which is the anti-aliasing switch for general draw operations. ¿ ¶öÑs¿ ™˜Ñ4/// Clip with anti-aliasing and saveLayer immediately following the clip.
///
/// This mode not only clips with anti-aliasing, but also allocates an offscreen
/// buffer. All subsequent paints are carried out on that buffer before finally
/// being clipped and composited back.
///
/// This is very slow. It has no bleeding edge artifacts (that [antiAlias] has)
/// but it changes the semantics as an offscreen buffer is now introduced.
/// (See https://github.com/flutter/flutter/issues/18057#issuecomment-394197336
/// for a difference between paint without saveLayer and paint with saveLayer.)
///
/// This will be only rarely needed. One case where you might need this is if
/// you have an image overlaid on a very different background color. In these
/// cases, consider whether you can avoid overlaying multiple colors in one
/// spot (e.g. by having the background color only present where the image is
/// absent). If you can, [antiAlias] would be fine and much faster.
///
/// See also:
///
///  * [antiAlias], which is much faster, and has similar clipping results.    ¿ ÚÄÉ◊¿ ÙQÅÀ/// The color space describes the colors that are available to an [Image].
///
/// This value can help decide which [ImageByteFormat] to use with
/// [Image.toByteData]. Images that are in the [extendedSRGB] color space
/// should use something like [ImageByteFormat.rawExtendedRgba128] so that
/// colors outside of the sRGB gamut aren't lost.
///
/// This is also the result of [Image.colorSpace].
///
/// See also: https://en.wikipedia.org/wiki/Color_space  ¿ Ù`Äÿ¿ ı4Ä«/// The sRGB color space.
///
/// You may know this as the standard color space for the web or the color
/// space of non-wide-gamut Flutter apps.
///
/// See also: https://en.wikipedia.org/wiki/SRGB ¿ ı<Å¿ ˆHÅ/// A color space that is backwards compatible with sRGB but can represent
/// colors outside of that gamut with values outside of [0..1]. In order to
/// see the extended values an [ImageByteFormat] like
/// [ImageByteFormat.rawExtendedRgba128] must be used.    ¿ ˆYâ¿ ˜ÂY/// The format in which image bytes should be returned when using
/// [Image.toByteData].  ¿ ˜˘ÄÇ¿ ¯tt/// Raw RGBA format.
///
/// Unencoded bytes, in RGBA row-primary form with premultiplied alpha, 8 bits per channel. ¿ ¯ÄÄé¿ ¯ˇx/// Raw straight RGBA format.
///
/// Unencoded bytes, in RGBA row-primary form with straight alpha, 8 bits per channel. ¿ ˘Äª¿ ˘¡Ä•/// Raw unmodified format.
///
/// Unencoded bytes, in the image's existing format. For example, a grayscale
/// image may use a single 8-bit channel for each pixel. ¿ ˘”ÇŒ¿ ¸èÇç/// Raw extended range RGBA format.
///
/// Unencoded bytes, in RGBA row-primary form with straight alpha, 32 bit
/// float (IEEE 754 binary32) per channel.
///
/// Example usage:
///
/// ```dart
/// import 'dart:ui' as ui;
/// import 'dart:typed_data';
///
/// Future<Map<String, double>> getFirstPixel(ui.Image image) async {
///   final ByteData data =
///       (await image.toByteData(format: ui.ImageByteFormat.rawExtendedRgba128))!;
///   final Float32List floats = Float32List.view(data.buffer);
///   return <String, double>{
///     'r': floats[0],
///     'g': floats[1],
///     'b': floats[2],
///     'a': floats[3],
///   };
/// }
/// ``` ¿ ¸¶Çæ¿ ˇaÇú/// PNG format.
///
/// A loss-less compression format for images. This format is well suited for
/// images with hard edges, such as screenshots or sprites, and images with
/// text. Transparency is supported. The PNG format supports images up to
/// 2,147,483,647 pixels in either dimension, though in practice available
/// memory provides a more immediate limitation on maximum image size.
///
/// PNG images normally use the `.png` file extension and the `image/png` MIME
/// type.
///
/// See also:
///
///  * <https://en.wikipedia.org/wiki/Portable_Network_Graphics>, the Wikipedia page on PNG.
///  * <https://tools.ietf.org/rfc/rfc2083.txt>, the PNG standard.    ¿ ˇiÉ?¿ ˇ≠>/// The format of pixel data given to [decodeImageFromPixels].  ¿ ˇΩÄŸ¿ éÄ /// Each pixel is 32 bits, with the highest 8 bits encoding red, the next 8
/// bits encoding green, the next 8 bits encoding blue, and the lowest 8 bits
/// encoding alpha. Premultiplied alpha is used. ¿ õÄŸ¿lÄ /// Each pixel is 32 bits, with the highest 8 bits encoding blue, the next 8
/// bits encoding green, the next 8 bits encoding red, and the lowest 8 bits
/// encoding alpha. Premultiplied alpha is used. ¿yÅ,¿öÅ/// Each pixel is 128 bits, where each color component is a 32 bit float that
/// is normalized across the sRGB gamut.  The first float is the red
/// component, followed by: green, blue and alpha. Premultiplied alpha isn't
/// used, matching [ImageByteFormat.rawExtendedRgba128].    ¿yúÉï¿z9Äó/// Determines the winding rule that decides how the interior of a [Path] is
/// calculated.
///
/// This enum is used by the [Path.fillType] property.  ¿zJÅØ¿{ÚÅó/// The interior is defined by a non-zero sum of signed edge crossings.
///
/// For a given point, the point is considered to be on the inside of the path
/// if a line drawn from the point to infinity crosses lines going clockwise
/// around the point a different number of times than it crosses lines going
/// counter-clockwise around that point.
///
/// See: <https://en.wikipedia.org/wiki/Nonzero-rule> ¿{˛Å0¿}'Å/// The interior is defined by an odd number of edge crossings.
///
/// For a given point, the point is considered to be on the inside of the path
/// if a line drawn from the point to infinity crosses an odd number of lines.
///
/// See: <https://en.wikipedia.org/wiki/Even-odd_rule>    ¿}3àL¿}ÁÄà/// Strategies for combining paths.
///
/// See also:
///
/// * [Path.combine], which uses this enum to decide how to combine two paths.  ¿}˘Å£¿íÅÑ/// Subtract the second path from the first path.
///
/// For example, if the two paths are overlapping circles of equal diameter
/// but differing centers, the result would be a crescent portion of the
/// first circle that was not overlapped by the second circle.
///
/// See also:
///
///  * [reverseDifference], which is the same but subtracting the first path
///    from the second. ¿†Åá¿ÅÅk/// Create a new path that is the intersection of the two paths, leaving the
/// overlapping pieces of the path.
///
/// For example, if the two paths are overlapping circles of equal diameter
/// but differing centers, the result would be only the overlapping portion
/// of the two circles.
///
/// See also:
///  * [xor], which is the inverse of this operation ¿Å+Å$¿ÇJÅ/// Create a new path that is the union (inclusive-or) of the two paths.
///
/// For example, if the two paths are overlapping circles of equal diameter
/// but differing centers, the result would be a figure-eight like shape
/// matching the outer boundaries of both circles. ¿ÇSÅÇ¿É“Ån/// Create a new path that is the exclusive-or of the two paths, leaving
/// everything but the overlapping pieces of the path.
///
/// For example, if the two paths are overlapping circles of equal diameter
/// but differing centers, the figure-eight like shape less the overlapping parts
///
/// See also:
///  * [intersect], which is the inverse of this operation ¿ÉŸÅ£¿ÖkÅ}/// Subtract the first path from the second path.
///
/// For example, if the two paths are overlapping circles of equal diameter
/// but differing centers, the result would be a crescent portion of the
/// second circle that was not overlapped by the first circle.
///
/// See also:
///
///  * [difference], which is the same but subtracting the second path
///    from the first.    ¿(É{¿û4/// Styles to use for blurs in [MaskFilter] objects.  ¿ÂÄñ¿uÄã/// Fuzzy inside and outside. This is useful for painting shadows that are
/// offset from the shape that ostensibly is casting the shadow. ¿ÄÄÕ¿HÄ¡/// Solid inside, fuzzy outside. This corresponds to drawing the shape, and
/// additionally drawing the blur. This can make objects appear brighter,
/// maybe even as if they were fluorescent. ¿RÄÊ¿3Ä⁄/// Nothing inside, fuzzy outside. This is useful for painting shadows for
/// partially transparent shapes, when they are painted separately but without
/// an offset, so that the shadow doesn't paint below the shape. ¿=c¿õY/// Fuzzy inside, nothing outside. This can make shapes appear to be lit from
/// within.    ¿iœì¿p¢Üí/// Defines what happens at the edge of a gradient or the sampling of a source image
/// in an [ImageFilter].
///
/// A gradient is defined along a finite inner area. In the case of a linear
/// gradient, it's between the parallel lines that are orthogonal to the line
/// drawn between two points. In the case of radial gradients, it's the disc
/// that covers the circle centered on a particular point up to a given radius.
///
/// An image filter reads source samples from a source image and performs operations
/// on those samples to produce a result image. An image defines color samples only
/// for pixels within the bounds of the image but some filter operations, such as a blur
/// filter, read samples over a wide area to compute the output for a given pixel. Such
/// a filter would need to combine samples from inside the image with hypothetical
/// color values from outside the image.
///
/// This enum is used to define how the gradient or image filter should treat the regions
/// outside that defined inner area.
///
/// See also:
///
///  * [painting.Gradient], the superclass for [LinearGradient] and
///    [RadialGradient], as used by [BoxDecoration] et al, which works in
///    relative coordinates and can create a [Shader] representing the gradient
///    for a particular [Rect] on demand.
///  * [dart:ui.Gradient], the low-level class used when dealing with the
///    [Paint.shader] property directly, with its [Gradient.linear] and
///    [Gradient.radial] constructors.
///  * [dart:ui.ImageFilter.blur], an ImageFilter that may sometimes need to
///    read samples from outside an image to combine with the pixels near the
///    edge of the image.  ¿pØÇ£¿sMÇá/// Samples beyond the edge are clamped to the nearest color in the defined inner area.
///
/// A gradient will paint all the regions outside the inner area with the
/// color at the end of the color stop list closest to that region.
///
/// An image filter will substitute the nearest edge pixel for any samples taken from
/// outside its source image.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_sweep.png) ¿sWÉ5¿vÑÉ/// Samples beyond the edge are repeated from the far end of the defined area.
///
/// For a gradient, this technique is as if the stop points from 0.0 to 1.0 were then
/// repeated from 1.0 to 2.0, 2.0 to 3.0, and so forth (and for linear gradients, similarly
/// from -1.0 to 0.0, -2.0 to -1.0, etc).
///
/// An image filter will treat its source image as if it were tiled across the enlarged
/// sample space from which it reads, each tile in the same orientation as the base image.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_sweep.png) ¿vëÉ|¿zÉY/// Samples beyond the edge are mirrored back and forth across the defined area.
///
/// For a gradient, this technique is as if the stop points from 0.0 to 1.0 were then
/// repeated backwards from 2.0 to 1.0, then forwards from 2.0 to 3.0, then backwards
/// again from 4.0 to 3.0, and so forth (and for linear gradients, similarly in the
/// negative direction).
///
/// An image filter will treat its source image as tiled in an alternating forwards and
/// backwards or upwards and downwards direction across the sample space from which
/// it is reading.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_sweep.png) ¿zÇΩ¿| Çü/// Samples beyond the edge are treated as transparent black.
///
/// A gradient will render transparency over any region that is outside the circle of a
/// radial gradient or outside the parallel lines that define the inner area of a linear
/// gradient.
///
/// An image filter will substitute transparent black for any sample it must read from
/// outside its source image.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_sweep.png)    ¿ÕBÇ√¿Õ¸w/// Defines how a list of points is interpreted when drawing a set of triangles.
///
/// Used by [Canvas.drawVertices].  ¿ŒQ¿ŒSE/// Draw each sequence of three points as the vertices of a triangle. ¿Œa[¿ŒØK/// Draw each sliding window of three points as the vertices of a triangle. ¿Œ¡ÅA¿œ˜Å)/// Draw the first point and each sliding window of two points as the vertices
/// of a triangle.
///
/// This mode is not natively supported by most backends, and is instead
/// implemented by unrolling the points into the equivalent
/// [VertexMode.triangles], which is generally more efficient.    ¿¸Ñ-¿¸ÊÄç/// Defines how a list of points is interpreted when drawing a set of points.
///
/// Used by [Canvas.drawPoints] and [Canvas.drawRawPoints].  ¿¸ÙÅ∑¿˛•Åû/// Draw each point separately.
///
/// If the [Paint.strokeCap] is [StrokeCap.round], then each point is drawn
/// as a circle with the diameter of the [Paint.strokeWidth], filled as
/// described by the [Paint] (ignoring [Paint.style]).
///
/// Otherwise, each point is drawn as an axis-aligned square with sides of
/// length [Paint.strokeWidth], filled as described by the [Paint] (ignoring
/// [Paint.style]). ¿˛∞ÄÈ¿ˇîÄ◊/// Draw each sequence of two points as a line segment.
///
/// If the number of points is odd, then the last point is ignored.
///
/// The lines are stroked as described by the [Paint] (ignoring
/// [Paint.style]). ¿ˇûÄõ¿ 2Äã/// Draw the entire sequence of points as one line.
///
/// The lines are stroked as described by the [Paint] (ignoring
/// [Paint.style]).    ¿ >Å¿ ºx/// Defines how a new clip region should be merged with the existing clip
/// region.
///
/// Used by [Canvas.clipRect].  ¿ «B¿ ˇ5/// Subtract the new region from the existing region. ¿B¿G6/// Intersect the new region from the existing region.      ÑãoÑê  Ñù	Ñ£   Ñ¸tÖ  ÖÖ   ÖrÄèÖw  ÖÜÖé   ÜÄ€Ü  ÜÜ%   Ü‡ÄçÜÂ  ÜÙÜ¸   áomáu  áÅáà  áäáí   ¿F/â?¿Náâ/// Instantiates an image [Codec].
///
/// This method is a convenience wrapper around the [ImageDescriptor] API, and
/// using [ImageDescriptor] directly is preferred since it allows the caller to
/// make better determinations about how and whether to use the `targetWidth`
/// and `targetHeight` parameters.
///
/// The `list` parameter is the binary image data (e.g a PNG or GIF binary data).
/// The data can be for either static or animated images. The following image
/// formats are supported:
/// {@template dart.ui.imageFormats}
/// JPEG, PNG, GIF, Animated GIF, WebP, Animated WebP, BMP, and WBMP. Additional
/// formats may be supported by the underlying platform. Flutter will
/// attempt to call platform API to decode unrecognized formats, and if the
/// platform API supports decoding the image Flutter will be able to render it.
/// {@endtemplate}
///
/// The `targetWidth` and `targetHeight` arguments specify the size of the
/// output image, in image pixels. If they are not equal to the intrinsic
/// dimensions of the image, then the image will be scaled after being decoded.
/// If the `allowUpscaling` parameter is not set to true, both dimensions will
/// be capped at the intrinsic dimensions of the image, even if only one of
/// them would have exceeded those intrinsic dimensions. If exactly one of these
/// two arguments is specified, then the aspect ratio will be maintained while
/// forcing the image to match the other given dimension. If neither is
/// specified, then the image maintains its intrinsic size.
///
/// Scaling the image to larger than its intrinsic size should usually be
/// avoided, since it causes the image to use more memory than necessary.
/// Instead, prefer scaling the [Canvas] transform. If the image must be scaled
/// up, the `allowUpscaling` parameter must be set to true.
///
/// The returned future can complete with an error if the image decoding has
/// failed. ¿N ¿N+  ¿N4¿N:  ¿NH¿NN  ¿N]¿Nc  ¿Ns¿Opä°¿W™à+/// Instantiates an image [Codec].
///
/// This method is a convenience wrapper around the [ImageDescriptor] API, and
/// using [ImageDescriptor] directly is preferred since it allows the caller to
/// make better determinations about how and whether to use the `targetWidth`
/// and `targetHeight` parameters.
///
/// The [buffer] parameter is the binary image data (e.g a PNG or GIF binary data).
/// The data can be for either static or animated images. The following image
/// formats are supported: {@macro dart.ui.imageFormats}
///
/// The [buffer] will be disposed by this method once the codec has been created,
/// so the caller must relinquish ownership of the [buffer] when they call this
/// method.
///
/// The [targetWidth] and [targetHeight] arguments specify the size of the
/// output image, in image pixels. If they are not equal to the intrinsic
/// dimensions of the image, then the image will be scaled after being decoded.
/// If the `allowUpscaling` parameter is not set to true, both dimensions will
/// be capped at the intrinsic dimensions of the image, even if only one of
/// them would have exceeded those intrinsic dimensions. If exactly one of these
/// two arguments is specified, then the aspect ratio will be maintained while
/// forcing the image to match the other given dimension. If neither is
/// specified, then the image maintains its intrinsic size.
///
/// Scaling the image to larger than its intrinsic size should usually be
/// avoided, since it causes the image to use more memory than necessary.
/// Instead, prefer scaling the [Canvas] transform. If the image must be scaled
/// up, the `allowUpscaling` parameter must be set to true.
///
/// The returned future can complete with an error if the image decoding has
/// failed.
///
/// ## Compatibility note on the web
///
/// When running Flutter on the web, only the CanvasKit renderer supports image
/// resizing capabilities (not the HTML renderer). So if image resizing is
/// critical to your use case, and you're deploying to the web, you should
/// build using the CanvasKit renderer. ¿WÕ¿Wﬁ  ¿WÈ¿WÔ  ¿W˝¿X  ¿X¿X  ¿X(¿ZâÑ¿a*á/// Instantiates an image [Codec].
///
/// This method is a convenience wrapper around the [ImageDescriptor] API.
///
/// The [buffer] parameter is the binary image data (e.g a PNG or GIF binary
/// data). The data can be for either static or animated images. The following
/// image formats are supported: {@macro dart.ui.imageFormats}
///
/// The [buffer] will be disposed by this method once the codec has been
/// created, so the caller must relinquish ownership of the [buffer] when they
/// call this method.
///
/// The [getTargetSize] parameter, when specified, will be invoked and passed
/// the image's intrinsic size to determine the size to decode the image to.
/// The width and the height of the size it returns must be positive values
/// greater than or equal to 1, or null. It is valid to return a
/// [TargetImageSize] that specifies only one of `width` and `height` with the
/// other remaining null, in which case the omitted dimension will be scaled to
/// maintain the aspect ratio of the original dimensions. When both are null or
/// omitted, the image will be decoded at its native resolution (as will be the
/// case if the [getTargetSize] parameter is omitted).
///
/// Scaling the image to larger than its intrinsic size should usually be
/// avoided, since it causes the image to use more memory than necessary.
/// Instead, prefer scaling the [Canvas] transform.
///
/// The returned future can complete with an error if the image decoding has
/// failed.
///
/// ## Compatibility note on the web
///
/// When running Flutter on the web, only the CanvasKit renderer supports image
/// resizing capabilities (not the HTML renderer). So if image resizing is
/// critical to your use case, and you're deploying to the web, you should
/// build using the CanvasKit renderer. ¿aK¿a\  ¿ag&¿aÅ   ¿côs¿c©  ¿cæ¿c√  ¿c“¿c◊   ¿k‡Å©¿mÅ0/// Loads a single image frame from a byte array into an [Image] object.
///
/// This is a convenience wrapper around [instantiateImageCodec]. Prefer using
/// [instantiateImageCodec] which also supports multi frame images and offers
/// better error handling. This function swallows asynchronous errors. ¿m*¿m5  ¿m:¿mP   ¿mãÄÔ¿mò  ¿m≤¿mΩ  ¿m¬¿mÿ   ¿n|ã¿tÖù/// Convert an array of pixel values into an [Image] object.
///
/// The `pixels` parameter is the pixel data. They are packed in bytes in the
/// order described by `format`, then grouped in rows, from left to right,
/// then top to bottom.
///
/// The `rowBytes` parameter is the number of bytes consumed by each row of
/// pixels in the data buffer. If unspecified, it defaults to `width` multiplied
/// by the number of bytes per pixel in the provided `format`.
///
/// The `targetWidth` and `targetHeight` arguments specify the size of the
/// output image, in image pixels. If they are not equal to the intrinsic
/// dimensions of the image, then the image will be scaled after being decoded.
/// If the `allowUpscaling` parameter is not set to true, both dimensions will
/// be capped at the intrinsic dimensions of the image, even if only one of
/// them would have exceeded those intrinsic dimensions. If exactly one of these
/// two arguments is specified, then the aspect ratio will be maintained while
/// forcing the image to match the other given dimension. If neither is
/// specified, then the image maintains its intrinsic size.
///
/// Scaling the image to larger than its intrinsic size should usually be
/// avoided, since it causes the image to use more memory than necessary.
/// Instead, prefer scaling the [Canvas] transform. If the image must be scaled
/// up, the `allowUpscaling` parameter must be set to true. 	¿t8¿tC  ¿tL	¿tQ  ¿tY
¿t^  ¿tg¿tt  ¿t}¿tì  ¿t†¿t¶  ¿t±¿t∑  ¿t≈¿tÀ  ¿t⁄¿t‡  ¿t¿|‘ÄÎ¿|ﬁ  ¿|Ô¿|¸   ¿}¡Åõ¿}Õ  ¿}ﬁ¿}Ï   ¿^Å$¿j  ¿{¿É  ¿ä¿í   ¿BÇ∂¿B ¿B¿B¿B¿B,    ¿™d¿ﬁ+/// Signature for [Image] lifecycle events.  ¿¿   ¿0≤m¿0Ï1/// Callback signature for [decodeImageFromList].  ¿1¿1   ¿dÅd¿eÄ¯/// Signature for a callback that determines the size to which an image should
/// be decoded given its intrinsic size.
///
/// See also:
///
///  * [instantiateImageCodecWithSize], which used this signature for its
///    `getTargetSize` argument.  ¿eE¿eJ  ¿e[¿e`   ¿‡Öl¿‡ª-/// Signature for [Picture] lifecycle events.  ¿‡‡¿‡È   ¿=@d¿=}4/// Generic callback signature, used by [_futurize].¿=á¿=á ¿=ö¿=ù   ¿=¶Ä’¿>AÄí/// Signature for a method that receives a [_Callback].
///
/// Return value should be null on success, and a string error message on
/// failure.¿>M¿>M ¿>c¿>r       õE <ÄÜÄ§ÄµÄ∂ÄŒÄÔÅ-ÅFÅzÅ≠ÅÆÅ˚ÇEÇïÇÊÉ6ÉÑÉ’ÑÑÑdÑäÑãÑ™ÑÍÑ˘Ñ˚Ñ¸ÖÖ`ÖoÖqÖrÖóÖÒÜ ÜÜÜ/ÜpÜŒÜ›ÜﬂÜ‡áá]álánáoáõá€á›áﬁàààfà∂ââ-â1âaâeâqâôâ÷ääFäNäRä£äÚãBãnãrã~ãÀåååå-å1åÑå åÿçççEçKçsçôç¿çÂçÎé;éâé∑éΩèèPèuèëè»è…ê	êê\êlêëê∏êﬁê‰ë'ë-ëxëÖë∫ë‹ë˛í íNíOí§í™íœíˆììiìôìüì‚ìËî0înî§î⁄ïïRïSïÅïáïØïµï›ññ*ñOñbñcñúñ¢ñÒóóBóCóvó|óÕóÔòòòMòzò{ò¥ò‚ò„ôôHôIôíô»ôŒöö!öQöUöVöüöÁöÌõ%õKõyõ™õÆõØõˇú,ú2újúÉúµúπú∫ùù9ù?ùwùíù¬ù∆ù«ûûEûKûÉûùûŒû“û”üüNünüéüîü’üŸü⁄†%†+††ù†£†·†ˇ°?°z°∑°Û¢$¢(¢)¢X¢^¢¶¢È¢Ô£9£Ü£≈§§§^§®§Û•?•ç•›¶*¶{¶®¶Æ¶˝ßßRßgß~ßìß¢ß ß“ßﬂßˆ®®'®F®ä® ©©P©[©c©i©m©n©±©˜©˝™I™ê™€´*´u´µ´›¨¨5¨;¨b¨à¨ø¨‹¨Í≠0≠z≠¬≠À≠ËÆÆHÆhÆÖÆóÆ‚Ø1Ø~ØáØçØëØíØﬂØÂ∞∞C∞~∞Ç∞É∞è∞≤∞‘∞Á∞Ì±±-±3±M±n±r±s±±•±¶±≤≤ ≤≤≤6≤:≤á≤—≤≤Ù≥E≥í≥·¥/¥¥ µµµbµ≠µ˛∂J∂ò∂Â∑,∑w∑∆∏∏'∏+∏y∏∆ππbπØ∫ ∫A∫E∫l∫p∫æ∫ˇªPªùªÓº=ºåºßº´ºπºΩΩΩΩ*ΩyΩåΩ“Ω”æææYæ_æºæ≈æ∆øøøZøiøoø™ø∞¿ @¿ @¿ @¿ @R¿ @X¿ @£¿ @¥¿ @∫¿ @¸¿ A¿ A]¿ Ad¿ Ae¿ A¢¿ A®¿ Aˆ¿ BG¿ Bd¿ Bj¿ B∏¿ BÂ¿ BÎ¿ CJ¿ CU¿ CV¿ Cî¿ Cö¿ C√¿ C…¿ D¿ D¿ D|¿ DÇ¿ D—¿ D¸¿ E¿ E¿ EP¿ Eù¿ EÍ¿ E¯¿ E˛¿ F=¿ FC¿ Fê¿ Fÿ¿ FË¿ FÓ¿ G:¿ G@¿ Gù¿ G¶¿ Gß¿ GÙ¿ HB¿ Hå¿ Hí¿ HÃ¿ H“¿ I¿ Iq¿ Iw¿ I√¿ I…¿ J&¿ J/¿ J0¿ J¿ J“¿ K!¿ K'¿ Kg¿ Km¿ K∫¿ L¿ L¿ L^¿ Ld¿ L¬¿ LÃ¿ LÕ¿ M!¿ Mo¿ Mπ¿ Mø¿ M˙¿ N ¿ NR¿ Nû¿ N§¿ NÒ¿ N˜¿ OU¿ O_¿ O`¿ OØ¿ Oœ¿ O’¿ P#¿ P)¿ Py¿ P≈¿ P˘¿ Pˇ¿ QJ¿ Q[¿ Qa¿ Q¿¿ QÀ¿ QÃ¿ R¿ R6¿ R<¿ Rä¿ Rê¿ R‡¿ S'¿ S[¿ Sa¿ S¨¿ SΩ¿ S√¿ T"¿ T-¿ T.¿ T~¿ T≤¿ T∏¿ U¿ U¿ Uf¿ Um¿ Un¿ U≠¿ U≥¿ V¿ VN¿ Vt¿ Vz¿ V»¿ VŒ¿ W*¿ W2¿ W3¿ W}¿ WÉ¿ W“¿ X!¿ X'¿ Xx¿ X°¿ Xß¿ X¯¿ X˛¿ Y^¿ Yd¿ Yt¿ Yz¿ Yº¿ Z¿ Z ¿ Zj¿ ZÅ¿ Zç¿ Zé¿ Z÷¿ Z◊¿ ["¿ [H¿ [N¿ [ö¿ [Á¿ \¿ \¿ \m¿ \π¿ \ﬂ¿ \Â¿ ]5¿ ]Ñ¿ ]’¿ ]€¿ ^*¿ ^L¿ ^R¿ ^∞¿ ^∂¿ ^∆¿ ^Ã¿ _¿ _-¿ _u¿ _ë¿ _€¿ _Ú¿ `¿ `¿ `_¿ `é¿ `î¿ `Â¿ a3¿ aÑ¿ a£¿ a©¿ aı¿ bB¿ bq¿ bw¿ b÷¿ b‹¿ bÏ¿ bÚ¿ c+¿ cr¿ c¬¿ cÌ¿ c¯¿ c˘¿ dG¿ df¿ dl¿ dµ¿ d∆¿ dÃ¿ e*¿ e4¿ e5¿ eÑ¿ e£¿ e©¿ eÚ¿ f¿ f	¿ fh¿ fs¿ ft¿ fØ¿ fµ¿ g¿ gN¿ g}¿ gÉ¿ gÂ¿ gÛ¿ gÙ¿ hG¿ hM¿ hô¿ hÊ¿ i¿ i¿ i|¿ iâ¿ iä¿ i”¿ i˝¿ j¿ jS¿ jú¿ jÍ¿ k¿ k¿ ki¿ k∂¿ kÂ¿ kÎ¿ lL¿ lR¿ lb¿ lh¿ l°¿ lË¿ m7¿ mc¿ mp¿ mq¿ mø¿ m◊¿ m›¿ n¿ n%¿ nÜ¿ nå¿ nú¿ n¢¿ n€¿ nË¿ nÈ¿ o2¿ o8¿ oá¿ oû¿ o§¿ oÌ¿ o˛¿ p¿ p<¿ pB¿ p§¿ p≤¿ p≥¿ pˇ¿ q¿ q¿ qb¿ qy¿ q¿ q»¿ qŸ¿ qﬂ¿ r¿ r¿ r~¿ rã¿ rå¿ r⁄¿ rÛ¿ r˘¿ sH¿ só¿ sù¿ sÈ¿ t6¿ t~¿ tÑ¿ t”¿ t˜¿ t˝¿ u]¿ uÜ¿ uá¿ uÿ¿ uÒ¿ u˜¿ v@¿ vF¿ vè¿ vﬂ¿ w¿ w¿ wf¿ wl¿ w|¿ wÇ¿ w“¿ w˚¿ xJ¿ x{¿ xÇ¿ xÉ¿ x‘¿ xÌ¿ xÛ¿ y<¿ yå¿ yπ¿ yø¿ z¿ z ¿ z0¿ z6¿ zx¿ z«¿ z›¿ zÎ¿ zÏ¿ {=¿ {V¿ {\¿ {•¿ {´¿ {Ù¿ |D¿ |y¿ |¿ |‹¿ |‚¿ |Ú¿ |¯¿ }.¿ }|¿ } ¿ }”¿ }‘¿ ~%¿ ~>¿ ~D¿ ~ç¿ ~›¿ 
¿ ¿ r¿ x¿ à¿ é¿ ›¿ Û¿ Ä>¿ ÄW¿ Äe¿ Äg¿ Äh¿ Ä¿¿ Ä˚¿ Äˇ¿ Å\¿ Å£¿ Åß¿ Å¸¿ ÇP¿ Ç¶¿ Ç˙¿ Ç˛¿ ÉL¿ Éá¿ Éã¿ É‰¿ ÉË¿ Ñ5¿ Ñ}¿ Ñú¿ Ñ†¿ ÑÆ¿ Ñ≤¿ Ñ˝¿ Ö6¿ ÖL¿ Öi¿ ÖÑ¿ Ö£¿ Ö¬¿ Ö›¿ ÖÚ¿ ÜH¿ Üp¿ Üq¿ Üµ¿ Üª¿ á¿ áF¿ áN¿ áO¿ áá¿ áç¿ áœ¿ á˛¿ à¿ à¿ àP¿ àx¿ à~¿ à…¿ â¿ â_¿ â™¿ â∞¿ â‡¿ â¿ âˆ¿ äE¿ äy¿ äé¿ äò¿ äô¿ äÈ¿ äˆ¿ ä¸¿ ãJ¿ ãá¿ ãç¿ ã¥¿ ã∫¿ å¿ å\¿ åß¿ å≠¿ å⁄¿ å‚¿ å‰¿ åÂ¿ ç	¿ ç¿ ç¿ ç¿ çT¿ çó¿ ç”¿ ç‰¿ é$¿ é*¿ é{¿ éﬂ¿ éÂ¿ è3¿ èe¿ èm¿ èn¿ è©¿ èØ¿ è˘¿ êI¿ êπ¿ êø¿ ë¿ ë4¿ ë=¿ ë>¿ ëÅ¿ ë∆¿ ëÎ¿ ëÒ¿ í@¿ í±¿ í∑¿ ì¿ ì,¿ ì2¿ ìÄ¿ ì†¿ ì™¿ ì¨¿ ì≠¿ ì◊¿ ì€¿ î(¿ îl¿ îp¿ î~¿ îÇ¿ îŒ¿ î⁄¿ ï¿ ïR¿ ïd¿ ïö¿ ï†¿ ñ	¿ ñ¿ ñW¿ ñß¿ ñ≥¿ ñπ¿ ñ…¿ ñœ¿ ó¿ ó.¿ ó¿ ó∏¿ ó¡¿ ó¬¿ ó˜¿ ó˝¿ òd¿ òj¿ ò≤¿ ô¿ ô¿ ô¿ ô$¿ ô*¿ ôx¿ ôâ¿ ôí¿ ôì¿ ô·¿ ö¿ ö¿ öÄ¿ öÜ¿ öŒ¿ õ¿ õ*¿ õ0¿ õ@¿ õF¿ õî¿ õ•¿ õÆ¿ õ∞¿ õ±¿ õÎ¿ õÔ¿ ú¿ úB¿ úW¿ ú¢¿ ú∞¿ ú±¿ ú˜¿ ù=¿ ùd¿ ùl¿ ùm¿ ù±¿ ù˜¿ û>¿ û|¿ ûÜ¿ ûà¿ ûâ¿ û∏¿ ûƒ¿ û⁄¿ û‡¿ ü+¿ ü|¿ üÇ¿ üŒ¿ ü‰¿ †1¿ †ä¿ †ﬂ¿ †¯¿ ° ¿ °¿ °-¿ °3¿ °å¿ °Ω¿ °√¿ ¢¿ ¢	¿ ¢a¿ ¢º¿ ¢¬¿ ¢“¿ ¢ÿ¿ £4¿ £X¿ £d¿ £e¿ £Ñ¿ £ä¿ £÷¿ £‹¿ §/¿ §5¿ §|¿ §Ç¿ §◊¿ §ˆ¿ •M¿ •S¿ •c¿ •i¿ •±¿ •¸¿ ¶-¿ ¶ä¿ ¶ó¿ ¶ò¿ ¶‰¿ ¶Í¿ ß=¿ ßè¿ ß∏¿ ßæ¿ ®¿ ®]¿ ®Ø¿ ©¿ ©¿ ©W¿ ©ß¿ ©ı¿ ™E¿ ™ã¿ ™ë¿ ™°¿ ™ß¿ ™ı¿ ´¿ ´¿ ´¿ ´T¿ ´X¿ ´û¿ ´Ω¿ ´À¿ ¨¿ ¨)¿ ¨5¿ ¨P¿ ¨f¿ ¨l¿ ¨p¿ ¨q¿ ¨†¿ ¨•¿ ¨¿ ≠;¿ ≠ä¿ ≠ÿ¿ Æ'¿ Æ,¿ Æ|¿ ÆÕ¿ Æﬁ¿ Æ„¿ Ø+¿ Ø,¿ ØM¿ Øi¿ Øù¿ Øû¿ Ø…¿ ØÓ¿ ∞¿ ∞<¿ ∞g¿ ∞ê¿ ∞∫¿ ∞Í¿ ±¿ ±A¿ ±u¿ ±•¿ ±—¿ ±¯¿ ±˘¿ ≤;¿ ≤q¿ ≤Ø¿ ≤Â¿ ≥'¿ ≥e¿ ≥•¿ ≥Ò¿ ¥7¿ ¥w¿ ¥…¿ µ¿ µU¿ µç¿ µŒ¿ µ˜¿ µ¯¿ ∂<¿ ∂]¿ ∂y¿ ∂î¿ ∂ï¿ ∂√¿ ∑¿ ∑
¿ ∑¿ ∑1¿ ∑\¿ ∑á¿ ∑€¿ ∑‹¿ ∏"¿ ∏0¿ ∏6¿ ∏N¿ ∏g¿ ∏Æ¿ ∏≤¿ ∏“¿ π"¿ πL¿ πs¿ π∑¿ πª¿ πº¿ πÙ¿ ∫$¿ ∫%¿ ∫^¿ ∫d¿ ∫Ñ¿ ∫ä¿ ∫ö¿ ∫†¿ ∫Ê¿ ª¿ ª_¿ ªe¿ ª≠¿ ª¬¿ ª÷¿ º¿ ºK¿ ºO¿ ºj¿ º†¿ ºﬁ¿ º‚¿ º„¿ Ω¿ Ω\¿ Ω]¿ Ω©¿ ΩØ¿ ΩÒ¿ æB¿ æì¿ æ¥¿ æ∫¿ ø¿ ø(¿ ø.¿ øU¿ ø[¿ øk¿ øq¿ ø¿¿ øÙ¿ ¿>¿ ¿T¿ ¿p¿ ¿Ω¿ ¿¯¿ ¿¸¿ ¡¿ ¡Y¿ ¡õ¿ ¡ü¿ ¡†¿ ¡‰¿ ¡Í¿ ¬¿ ¬.¿ ¬Ä¿ ¬Ñ¿ ¬ß¿ ¬Ã¿ √
¿ √¿ √¿ √I¿ √ò¿ √’¿ √€¿ ƒ¿ ƒ3¿ ƒw¿ ƒ{¿ ƒù¿ ƒø¿ ≈¿ ≈	¿ ≈
¿ ≈K¿ ≈{¿ ≈Å¿ ≈≥¿ ≈œ¿ ∆!¿ ∆%¿ ∆H¿ ∆m¿ ∆Ø¿ ∆≥¿ ∆¥¿ ∆ı¿ ∆˚¿ «L¿ «ó¿ «ù¿ «◊¿ «›¿ «˚¿ »¿ »j¿ »p¿ »◊¿ »›¿ …D¿ …J¿ …ñ¿ …Á¿ …Û¿ …˘¿  	¿  ¿  ^¿  ä¿  ”¿ À¿ À0¿ ÀÑ¿ Àà¿ À≠¿ À“¿ Ã¿ Ã¿ Ã¿ ÃR¿ Ãâ¿ Ãä¿ Ã’¿ Õ#¿ Õn¿ Õª¿ Œ	¿ Œ¿ ŒT¿ ŒZ¿ Œ®¿ ŒÃ¿ Œ“¿ œ;¿ œA¿ œ™¿ œ∞¿ –¿ –¿ –k¿ –º¿ –»¿ –Œ¿ –ﬁ¿ –‰¿ —.¿ —I¿ —í¿ —≤¿ —˚¿ —ˇ¿ “&¿ “d¿ “Ø¿ “≥¿ “¥¿ ”¿ ”B¿ ”H¿ ”l¿ ”ã¿ ”œ¿ ”¿ ‘¿ ‘&¿ ‘F¿ ‘°¿ ‘Ë¿ ‘Û¿ ‘˘¿ ’
¿ ’¿ ’4¿ ’M¿ ’ü¿ ’Á¿ ÷/¿ ÷<¿ ÷â¿ ÷ª¿ ◊¿ ◊f¿ ◊∑¿ ◊Ω¿ ◊¡¿ ◊¬¿ ÿ¿ ÿh¿ ÿ¥¿ ÿ∫¿ ÿ‚¿ Ÿ/¿ ŸS¿ Ÿ≠¿ Ÿ±¿ Ÿ‹¿ ⁄¿ ⁄G¿ ⁄K¿ ⁄L¿ ⁄Ü¿ ⁄å¿ ⁄¬¿ ⁄»¿ ⁄ÿ¿ ⁄ﬁ¿ €¿ €R¿ €Ñ¿ €Ã¿ €„¿ ‹¿ ‹¿ ‹5¿ ‹E¿ ‹S¿ ‹Ç¿ ‹π¿ ‹¬¿ ‹’¿ ‹ﬂ¿ ‹Ô¿ ›¿ ›>¿ ›û¿ ›®¿ ›∞¿ ›√¿ ›Õ¿ ﬁ¿ ﬁ	¿ ﬁ
¿ ﬁQ¿ ﬁc¿ ﬁi¿ ﬁé¿ ﬁî¿ ﬁÂ¿ ﬂ¿ ﬂ]¿ ﬂ¿ ﬂÉ¿ ﬂ´¿ ﬂÒ¿ ‡¿ ‡/¿ ‡]¿ ‡e¿ ‡r¿ ‡∏¿ ‡æ¿ ‡¬¿ ‡√¿ ‡˛¿ ·¿ ·K¿ ·e¿ ·k¿ ·y¿ ·¶¿ ·¿¿ ·“¿ ·Ï¿ ‚<¿ ‚G¿ ‚O¿ ‚Y¿ ‚_¿ ‚o¿ ‚u¿ ‚∞¿ ‚—¿ „(¿ „J¿ „N¿ „v¿ „è¿ „≠¿ „€¿ „„¿ „¿ ‰1¿ ‰á¿ ‰≤¿ ‰ˆ¿ ‰˛¿ Â¿ Â¿ Â	¿ ÂH¿ ÂN¿ Âö¿ Â‰¿ Ê¿ Ê/¿ Êv¿ Êz¿ Êõ¿ ÊÂ¿ ÊÈ¿ ÊÍ¿ Êˇ¿ ÁA¿ ÁE¿ Áa¿ Á¶¿ Á™¿ Á´¿ Á„¿ ÁÈ¿ Ë5¿ Ë{¿ ËÆ¿ Ë¥¿ Ë˙¿ È¿ È!¿ Èn¿ È∫¿ È›¿ È„¿ Í*¿ Íx¿ Íü¿ Í†¿ Í¨¿ Í¬¿ Í˚¿ Î¿ Î ¿ ÎP¿ Îk¿ Îá¿ Î∞¿ ÎŒ¿ ÎÓ¿ Ï*¿ Ï9¿ Ï\¿ Ïd¿ Ïç¿ Ï≤¿ Ï∫¿ ÏÊ¿ Ì#¿ Ìx¿ ÌÇ¿ Ìë¿ Ì∑¿ Ìø¿ Ì◊¿ Ì›¿ Ì¸¿ Ó-¿ ÓE¿ ÓK¿ Ó{¿ Ó£¿ Óª¿ Ó¡¿ ÓÚ¿ Ô¿ Ô6¿ Ô<¿ Ô[¿ Ôò¿ Ô∞¿ Ô∂¿ Ô‘¿ ¿ '¿ -¿ \¿ ù¿ µ¿ ª¿ ’¿ Ò¿ Ò ¿ Ò&¿ ÒE¿ ÒÇ¿ Òö¿ Ò†¿ Ò∏¿ ÒÒ¿ Ò˜¿ Ú
¿ Ú>¿ ÚD¿ Ú[¿ Úy¿ Ú}¿ Ú¿ ÚÄ¿ ÚÀ¿ Úœ¿ Û¿ Û\¿ Ûß¿ ÛŸ¿ Û›¿ Ù¿ Ù¿ ÙL¿ Ù^¿ Ùz¿ ÙÄ¿ ÙÕ¿ Ù˘¿ Ùˇ¿ ı2¿ ı:¿ ıá¿ ı’¿ ˆ¿ ˆF¿ ˆV¿ ˆX¿ ˆY¿ ˆõ¿ ˆ≥¿ ˜¿ ˜N¿ ˜ñ¿ ˜‡¿ ˜˜¿ ¯¿ ¯¿ ¯r¿ ¯}¿ ¯~¿ ¯û¿ ¯§¿ ¯˝¿ ˘¿ ˘¿ ˘.¿ ˘4¿ ˘Ñ¿ ˘ø¿ ˘–¿ ˘—¿ ˘˜¿ ˘˝¿ ˙I¿ ˙v¿ ˙|¿ ˙ë¿ ˙ó¿ ˙•¿ ˙√¿ ˙„¿ ˙È¿ ˚1¿ ˚O¿ ˚•¿ ˚Á¿ ¸¿ ¸"¿ ¸<¿ ¸V¿ ¸p¿ ¸{¿ ¸É¿ ¸ç¿ ¸£¿ ¸§¿ ¸∂¿ ¸º¿ ˝¿ ˝Z¿ ˝¶¿ ˝Û¿ ˛<¿ ˛B¿ ˛ì¿ ˛ü¿ ˛•¿ ˛µ¿ ˛ª¿ ˇ¿ ˇ_¿ ˇf¿ ˇh¿ ˇi¿ ˇ®¿ ˇª¿ 	¿ Y¿ å¿ ò¿ ô¿ Ë¿7¿j¿v¿w¿«¿¿]¿ò¿ß¿©¿™¿÷¿¿¿F¿J¿ä¿é¿‹¿Ù¿¯¿G¿ñ¿›¿%¿s¿Å¿Ö¿—¿ ¿g¿k¿y¿}¿Î¿:¿`¿Ø¿Ω¿Ô¿ˇ¿'¿:¿D¿c¿}¿Å¿Ç¿£¿ø¿÷¿◊¿	¿	¿	f¿	®¿	…¿	¿	Ò¿
0¿
6¿
Å¿
ƒ¿
Â¿¿¿)¿*¿n¿Å¿Ç¿ƒ¿ÿ¿Ÿ¿Û¿@¿q¿w¿»¿„¿È¿4¿¿Œ¿Ó¿¿¿I¿u¿ã¿¬¿◊¿˙¿¿¿¿¿a¿g¿µ¿À¿Ê¿˙¿
¿&¿9¿C¿±¿µ¿∂¿Î¿Ò¿=¿M¿S¿ò¿Á¿.¿4¿Å¿ö¿Í¿9¿É¿œ¿$¿Q¿¿É¿Ñ¿¿¿∆¿¿a¿ç¿ì¿‚¿0¿c¿Ø¿‹¿˙¿-¿L¿Z¿z¿à¿∞¿ø¿¿¿¿¿i¿ã¿ë¿—¿¿%¿5¿â¿ú¿¶¿π¿Ω¿æ¿Ô¿ı¿D¿ì¿‰¿0¿|¿ ¿¿4¿:¿à¿±¿∑¿ˇ¿P¿f¿l¿¢¿®¿∂¿—¿Ò¿	¿¿G¿Ü¿•¿Ô¿ ¿¿2¿Ç¿–¿ˆ¿ ,¿ 7¿ X¿ `¿ f¿ à¿ º¿!¿!2¿!u¿!π¿!ˆ¿"¿"¿"Q¿"Å¿"á¿"§¿"æ¿"ƒ¿"Ê¿#¿#¿#'¿#-¿#I¿#l¿#r¿#ç¿#ì¿#∂¿#Ô¿#˘¿#ˇ¿$*¿$2¿$<¿$B¿$á¿$’¿$˘¿%¿% ¿%8¿%c¿%¥¿&¿&D¿&M¿&S¿&r¿&ù¿&°¿&¢¿&Ó¿'4¿':¿'á¿'—¿(!¿(p¿(∫¿)¿)@¿)A¿)M¿)w¿)y¿)z¿)î¿)…¿*¿*-¿*2¿*Ä¿*¢¿*æ¿*Ã¿*Õ¿+¿+6¿+7¿+á¿+¢¿+£¿+¯¿,.¿,l¿,ú¿,¶¿,Æ¿,≤¿,≥¿,Ô¿-E¿-ë¿-í¿-¨¿-ø¿-◊¿-„¿-˚¿.H¿.`¿.™¿.‚¿.È¿.ˇ¿/¿/¿/¿/_¿/Ñ¿/∆¿/‚¿/„¿0¿0¿0S¿0r¿0s¿0¿0Ø¿0±¿0≤¿0‰¿1 ¿1!¿1U¿1Y¿1ï¿1Ø¿1≥¿1˝¿2F¿2î¿2⁄¿3%¿3N¿3R¿3ã¿3è¿3õ¿3ß¿3·¿4"¿4@¿4ç¿4ÿ¿4ı¿5A¿5`¿5Å¿5á¿5è¿5ì¿5©¿5≠¿5π¿5∆¿6 ¿6A¿6Å¿6¿¿7¿7&¿7u¿7Ω¿7ﬁ¿7‰¿7Ï¿7˛¿8H¿8d¿8j¿8®¿8ƒ¿9¿9¿92¿98¿9Ö¿9†¿9°¿9 ¿9–¿:¿:¿:j¿:¿:Å¿:Ç¿:¢¿:¶¿:Ó¿;¿;¿;D¿;a¿;x¿;û¿;¥¿;µ¿;‰¿;Í¿<¿<C¿<^¿<_¿<á¿<ç¿<—¿<◊¿=(¿=.¿=o¿=ü¿=√¿=ƒ¿>¿>7¿>=¿>à¿>≠¿>ø¿>¡¿>¬¿>‹¿?(¿?-¿?v¿?ë¿?ñ¿?œ¿?Ì¿@	¿@¿@¿@8¿@9¿@E¿@Ä¿@Å¿@’¿@ı¿@ˆ¿A¿A¿A"¿Al¿Am¿A∆¿AÎ¿AÏ¿A¯¿B#¿Bk¿B”¿BÓ¿C¿Cr¿C|¿Cµ¿Cƒ¿CÏ¿D(¿Dj¿Dv¿D~¿DÜ¿Dü¿DΩ¿D√¿D‡¿D‰¿DÂ¿E!¿Er¿E¬¿E√¿Eœ¿F¿F,¿F.¿F/¿FR¿FV¿F•¿Fı¿GC¿Gf¿Gj¿Gº¿H
¿H%¿He¿Hä¿H€¿I!¿Im¿IΩ¿I–¿I‘¿J¿Ji¿Jπ¿K¿KT¿K•¿KÙ¿L<¿Lx¿L|¿L∆¿M¿M`¿Mú¿M†¿MÌ¿M˘¿N¿N2¿NF¿N[¿Ny¿NÑ¿N–¿N˙¿O¿O$¿OD¿Oh¿Om¿Oo¿Op¿Oì¿Oó¿OÊ¿P6¿PÑ¿Pß¿P´¿Pˇ¿QM¿QÜ¿Qä¿Q‹¿R,¿R8¿R<¿Rá¿R—¿S!¿Sp¿Sº¿T¿T\¿T§¿T‡¿T‰¿U.¿Ux¿U»¿V¿V¿VU¿Va¿Ve¿Vä¿Vé¿Vﬁ¿W)¿Wt¿Wú¿WÀ¿WÁ¿W˚¿X¿X.¿X3¿X[¿Xg¿X¶¿X√¿Y¿Y/¿Y9¿YÄ¿Y™¿Y¥¿Yº¿Z¿Z¿Z¿Z¿Z¿Z6¿Z:¿ZÖ¿Zâ¿Z÷¿[%¿[d¿[h¿[±¿\ ¿\¿\¿\h¿\µ¿]¿]B¿]ë¿]·¿^1¿^Å¿^∏¿^º¿_¿_P¿_Ñ¿_à¿_’¿_·¿_Â¿`
¿`¿`^¿`©¿`Ù¿a¿aI¿ae¿aè¿aö¿aƒ¿b¿b¿bs¿b≤¿bÛ¿c¿c@¿cg¿cn¿c|¿cí¿cñ¿cò¿cô¿cÈ¿d¿d¿d¿d]¿dÜ¿dä¿dò¿dú¿dÊ¿e¿eC¿eY¿ep¿es¿et¿eπ¿eΩ¿eÀ¿eœ¿f¿fY¿fÅ¿fô¿f≈¿fÀ¿g¿g2¿ge¿gë¿gø¿g¿¿gÓ¿gÙ¿hC¿hì¿h·¿i.¿iY¿i_¿iï¿i©¿i™¿iŸ¿iﬂ¿j/¿j~¿jÀ¿k¿kC¿kI¿k¿kî¿kï¿k°¿k›¿kﬂ¿k‡¿l)¿l-¿l|¿l ¿m¿m[¿mà¿mä¿mã¿mÈ¿n"¿n\¿ny¿n{¿n|¿nπ¿nΩ¿o¿oV¿on¿or¿oæ¿p¿pN¿pR¿pù¿pÁ¿q7¿qÜ¿q“¿r#¿rr¿r∫¿rˆ¿r˙¿sD¿sé¿sﬁ¿t¿t6¿tJ¿tW¿te¿t{¿tû¿tØ¿t√¿tÿ¿tˆ¿t˚¿u¿uL¿uP¿un¿u§¿u®¿u©¿u—¿uˆ¿v4¿vD¿vZ¿vr¿vé¿v´¿v¥¿vµ¿v“¿w¿wB¿wL¿wï¿w¡¿wÀ¿w”¿w‘¿wÂ¿x ¿x$¿xJ¿xT¿xr¿x∂¿x—¿xÌ¿x¯¿y¿y:¿yZ¿y[¿yá¿yì¿yô¿yõ¿yú¿yÈ¿y˘¿y˝¿z4¿zH¿zí¿zò¿zÈ¿{8¿{á¿{≤¿{∏¿{¿{˚¿{¸¿|>¿|D¿|ï¿|Ê¿|Ï¿}%¿}0¿}2¿}3¿}W¿}[¿}i¿}m¿}º¿}‚¿}˜¿~+¿~1¿~¿~ ¿¿¿!¿'¿v¿ê¿û¿Ì¿Ä¿Ä¿Äg¿Äµ¿Äœ¿Ä’¿ÄÂ¿Å¿Å)¿Åt¿Åz¿Å»¿Ç¿ÇH¿ÇQ¿Çú¿Ç’¿Ç€¿É)¿É}¿ÉÉ¿Éì¿É–¿É◊¿Ñ¿Ñ¿Ñ_¿Ñ™¿ÑÎ¿ÑÒ¿Ö¿Ö¿ÖP¿Öi¿Ö~¿ÖÄ¿ÖÅ¿Ö“¿ÖÔ¿Ü?¿Üb¿Üh¿Ü∏¿á¿áR¿áõ¿áµ¿áª¿à
¿àV¿àê¿àñ¿à·¿â¿â¿â¿â¿â5¿âç¿â◊¿âÛ¿ä¿ä)¿ä*¿ä6¿ä~¿äô¿äõ¿äú¿äŒ¿ä“¿ã¿ã¿ã^¿ãù¿ã±¿ãµ¿ã˚¿å&¿å*¿åi¿å¨¿å‘¿åÿ¿ç¿çU¿çk¿çã¿çå¿ç¥¿ç∫¿é¿éV¿éy¿é≠¿é›¿éÙ¿é¯¿é˘¿è7¿è=¿èÇ¿èü¿è√¿èƒ¿è˘¿ê¿ê¿êe¿êí¿êì¿ê⁄¿êÁ¿ë
¿ë¿ëR¿ëÑ¿ë±¿ë≤¿ëı¿í5¿íD¿íJ¿íª¿ì0¿ìv¿ìw¿ì∫¿î¿îF¿îS¿î°¿î¢¿îÁ¿ï.¿ï=¿ïC¿ï∞¿ñ!¿ñs¿ñt¿ñπ¿ó ¿óE¿óZ¿ó¥¿óµ¿ó˚¿ò?¿òÑ¿òÀ¿ò¿òˆ¿ôc¿ô‘¿ö¿ö¿öa¿ö•¿öÍ¿õ1¿õw¿õü¿õÌ¿õÓ¿ú1¿úS¿úY¿úú¿ú¿¿ú∆¿ù¿ùM¿ùî¿ùÿ¿û¿ûc¿ûë¿ûó¿û‹¿ü¿üc¿üd¿ü≥¿ü¯¿ü˛¿†M¿†ñ¿†⁄¿°¿°¿°L¿°õ¿°Á¿°Ì¿¢¿¢1¿¢L¿¢g¿¢Ç¿¢à¿¢â¿¢ÿ¿£¿£#¿£W¿£]¿£¨¿£˙¿§=¿§á¿§ç¿§–¿•¿•k¿•Ç¿•ù¿•∑¿•ÿ¿•Û¿¶¿¶)¿¶/¿¶0¿¶w¿¶é¿¶©¿¶™¿¶Ï¿ß¿ß ¿ßr¿ß¿¿ß€¿ß‹¿®$¿®a¿®†¿®·¿©'¿©k¿©Ø¿©ª¿©¡¿™-¿™ù¿™£¿´¿´á¿´«¿´»¿¨¿¨(¿¨.¿¨}¿¨¢¿¨®¿¨Ô¿≠#¿≠$¿≠f¿≠©¿≠π¿≠◊¿≠ÿ¿Æ¿Æ$¿Æq¿Æø¿ÆÍ¿Ø,¿Ø-¿Øs¿Ø≤¿ØÔ¿Øı¿∞B¿∞ì¿∞æ¿±¿±¿±M¿±é¿±û¿±ü¿±‰¿≤(¿≤C¿≤S¿≤T¿≤§¿≤Ò¿≥¿≥¿≥^¿≥d¿≥©¿≥»¿≥…¿¥	¿¥8¿¥U¿¥V¿¥ñ¿¥∆¿¥Ì¿¥Ó¿µ#¿µ)¿µy¿µ∆¿∂¿∂P¿∂V¿∂ß¿∂ˆ¿∑H¿∑ï¿∑ﬂ¿∏-¿∏;¿∏Ä¿∏î¿∏ï¿∏·¿∏Ù¿∏˙¿πJ¿πò¿π“¿∫¿∫G¿∫ò¿∫´¿∫±¿ª(¿ª,¿ª-¿ª|¿ª≠¿ª≥¿ªˇ¿ºG¿ºñ¿ºÂ¿Ω/¿Ωg¿Ωm¿Ω∏¿æ¿æN¿æÇ¿æà¿æÿ¿ø%¿øu¿ø∏¿¿¿¿R¿¿°¿¿Ò¿¡@¿¡F¿¡î¿¡„¿¬¿¬¿¬n¿¬π¿¬Û¿¬ı¿¬ˆ¿√¿√Z¿√Ç¿√û¿√¬¿√√¿ƒ¿ƒV¿ƒi¿ƒj¿ƒ£¿ƒ√¿ƒƒ¿≈¿≈1¿≈2¿≈>¿≈Ç¿≈é¿≈œ¿≈–¿∆$¿∆C¿∆D¿∆û¿∆ ¿∆À¿∆◊¿«5¿«a¿«b¿«n¿«‘¿»
¿»¿»¿»u¿»°¿»¢¿»Æ¿…¿…J¿…K¿…W¿…–¿ ¿  ¿ ,¿ ≠¿ ÿ¿À¿À¿À¿Àó¿ÀÚ¿ÀÛ¿Àˇ¿ÃÜ¿ÃÈ¿ÃÍ¿Ãˆ¿Õm¿Õº¿ÕΩ¿Õ…¿ŒH¿Œü¿Œ†¿Œ¨¿Œ˛¿œ¿œ}¿œÅ¿œÇ¿–¿–ã¿–å¿–ò¿–ª¿–‹¿–˜¿—¿—-¿—4¿—X¿—|¿—÷¿—⁄¿—€¿“a¿“Ó¿“Ô¿“˚¿”¿”0¿”Q¿”l¿”á¿”¢¿”©¿”“¿”ˆ¿‘b¿‘f¿‘g¿‘ı¿’¿’0¿’F¿’\¿’r¿’â¿’û¿’µ¿’∂¿’¬¿’ﬁ¿’˛¿÷:¿÷>¿÷?¿÷Æ¿÷˛¿÷ˇ¿◊¿◊'¿◊G¿◊É¿◊á¿◊à¿◊˜¿ÿG¿ÿH¿ÿT¿ÿï¿ÿµ¿Ÿ¿Ÿ¿Ÿ¿Ÿã¿⁄ ¿⁄¿⁄¿⁄B¿⁄t¿⁄x¿⁄y¿⁄À¿€¿€	¿€¿€4¿€V¿€z¿€~¿€¿€…¿€˜¿€¯¿‹¿‹G¿‹k¿‹Ü¿‹Æ¿‹¸¿›	¿›D¿›J¿›N¿›O¿›Ø¿›Ò¿›Ú¿ﬁd¿ﬁƒ¿ﬁ≈¿ﬁ—¿ﬂ¿ﬂ?¿ﬂZ¿ﬂÇ¿ﬂ÷¿ﬂ„¿‡%¿‡+¿‡/¿‡0¿‡ó¿‡‡¿‡·¿·Y¿·ø¿·¿¿·Ã¿‚¿‚2¿‚3¿‚?¿‚å¿‚•¿‚¶¿‚≤¿‚“¿‚ı¿„¿„#¿„$¿„Ñ¿„≥¿„¥¿„¿¿„ﬁ¿‰¿‰0¿‰X¿‰i¿‰m¿‰n¿‰≈¿Â¿Â¿Â¿Â6¿Â\¿Âä¿Â©¿Â∫¿Âæ¿Âø¿Ê¿ÊQ¿ÊR¿Ê^¿Ês¿Êû¿Ê‹¿Ê‡¿Ê·¿Á&¿ÁK¿ÁL¿Á≠¿Á˜¿Á¯¿Ë¿Ë?¿Ël¿Ëp¿Ër¿Ës¿Ëµ¿Ëπ¿Ë«¿È%¿È5¿Èf¿Èl¿Èí¿Èø¿È¿¿Í¿Í¿Í`¿Íå¿Í…¿Î¿Î¿Î¿Î5¿Î;¿Îé¿Î“¿ÎÎ¿ÎÏ¿Ï¿Ï¿Ïp¿Ï¬¿Ïﬁ¿Ïı¿Ïˆ¿Ì&¿Ì,¿Ì|¿ÌÀ¿ÌÁ¿ÌÌ¿Ó;¿Óä¿ÓŸ¿Ô'¿Ô8¿Ô}¿Ô∂¿Ô∏¿Ôπ¿¿¿V¿¢¿Ë¿Ï¿Ò2¿Ò6¿ÒÇ¿Ò—¿ÒÔ¿ÒÛ¿Ú=¿Úç¿ÚÆ¿ÚÓ¿Û¿Ûs¿Ût¿Ûú¿Ûù¿Û©¿Û€¿Û›¿Ûﬁ¿Ù-¿ÙG¿ÙÇ¿Ù≠¿ÙÆ¿Ù…¿ÙÏ¿ÙÌ¿Ù˘¿ı¿ıG¿ıh¿ıÄ¿ı„¿ˆ?¿ˆ≥¿ˆº¿ˆ¬¿ˆ‹¿ˆ‡¿ˆ·¿ˆÌ¿˜¿˜(¿˜X¿˜k¿˜q¿˜â¿˜õ¿˜ü¿˜°¿˜¢¿˜·¿˜Â¿¯-¿¯x¿¯∆¿¯Í¿¯Ó¿˘<¿˘ã¿˘◊¿˙'¿˙u¿˙É¿˙ñ¿˙¥¿˙Ú¿˚4¿˚g¿˚h¿˚û¿˚§¿˚Ì¿¸7¿¸Ä¿¸ó¿¸ò¿¸Ω¿¸√¿˝¿˝W¿˝ß¿˝∆¿˝›¿˝ﬁ¿˛	¿˛¿˛_¿˛¶¿˛Ù¿ˇC¿ˇ|¿ˇÇ¿ˇ–¿  ¿ o¿ ®¿ ¬¿ √¿ ‚¿ „¿3¿Z¿`¿Ø¿¸¿¿¿O¿U¿õ¿Õ¿¿¿¿\¿b¿§¿Ë¿6¿ì¿ó¿ò¿§¿¿¿¿J¿¿§¿®¿©¿˛¿@¿A¿e¿€¿˝¿¿¿c¿ê¿ë¿’¿¿S¿ñ¿—¿Ì¿	 ¿	¿	#¿	I¿	n¿	w¿	}¿	Å¿	Ç¿	›¿
#¿
$¿
c¿
ä¿ ¿.¿q¿Ç¿Ü¿á¿˜¿e¿f¿ä¿ ¿$¿(¿)¿á¿¥¿µ¿‡¿Â¿:¿d¿|¿®¿∏¿’¿€¿Ï¿¿Ò¿K¿q¿r¿æ¿ƒ¿¿%¿'¿(¿]¿ô¿™¿‚¿„¿0¿s¿}¿~¿Ã¿¿F¿O¿P¿ù¿Ó¿1¿:¿;¿ã¿ô¿¢¿§¿•¿Ú¿B¿T¿X¿©¿º¿¿¿A¿G¿ò¿û¿Ì¿;¿ã¿ú¿¢¿Ò¿˜¿¿#¿3¿9¿Ü¿ü¿∞¿¡¿∆¿«¿·¿¯¿˘¿?¿ä¿¥¿Í¿Î¿˜¿¿9¿[¿~¿Ç¿É¿è¿¬¿√¿œ¿ ¿"¿#¿t¿√¿¿]¿é¿í¿€¿Ë¿¿`¿±¿ı¿˚¿L¿ö¿«¿¿¿:¿R¿n¿o¿Ω¿¿	¿V¿~¿Ñ¿∑¿Í¿ ¿ P¿ É¿ â¿ ÿ¿!$¿!*¿!8¿!x¿!è¿!¶¿!Ω¿!‘¿!ﬁ¿!Ë¿!Ó¿" ¿"¿"'¿"-¿";¿"y¿"ï¿"±¿"Õ¿"È¿"Û¿"˝¿#¿#ä¿#ê¿#û¿#€¿#˛¿$!¿$D¿$g¿$q¿${¿$Å¿%
¿%¿%¿%_¿%Ö¿%´¿%—¿%˜¿&¿&¿&;¿&R¿&m¿&á¿&•¿&¶¿&Ú¿'¿'*¿'A¿'\¿'t¿'ù¿'û¿'Ï¿(¿(/¿(F¿(a¿(y¿(¢¿(£¿(∫¿(Ÿ¿(¯¿)¿)¿)<¿)q¿)µ¿)˛¿*G¿*H¿*`¿*l¿*π¿*∫¿*„¿*¯¿+¿+C¿+Z¿+d¿+å¿+•¿+ƒ¿+€¿+Â¿,2¿,\¿,Ä¿,µ¿,Ÿ¿-¿-¿-_¿-e¿-i¿-j¿-v¿-ô¿-≈¿-Ÿ¿-ﬂ¿-ˇ¿.¿.V¿.x¿.£¿.ß¿.®¿.¥¿/%¿/&¿/2¿/S¿/h¿/¿/∏¿/—¿0 ¿0$¿0V¿0z¿0¨¿0ª¿0‡¿0Ê¿0Í¿0Î¿0˜¿1¿1"¿19¿1r¿1ã¿1∫¿1ﬁ¿2¿24¿2f¿2u¿3¿3¿3¿3¿3¿3\¿3`¿3∞¿3˚¿4M¿4c¿4û¿4¿¿4¯¿5¿5M¿5Q¿5R¿5v¿5∞¿5ƒ¿5˝¿6¿60¿6u¿6â¿6ß¿6´¿6¨¿6€¿7 ¿74¿7R¿7V¿7W¿7•¿7À¿7Ë¿7È¿8)¿8I¿8J¿8Ø¿8‰¿8Â¿98¿9i¿9j¿9Œ¿9¯¿9˘¿:]¿:á¿:â¿:ä¿:Ω¿:¡¿:œ¿:”¿;"¿;o¿;æ¿;Ê¿<2¿<]¿<z¿<Ã¿<˘¿<˙¿=6¿=•¿=˛¿>¿>¿>P¿>ñ¿>Â¿?(¿?,¿?-¿?q¿?√¿@¿@S¿@W¿@X¿@ú¿@¢¿@¿A:¿Al¿A∏¿Aÿ¿B¿B¿B~¿BÇ¿BÉ¿BÕ¿B”¿C"¿CY¿C~¿C⁄¿D"¿D&¿D'¿Dx¿D≈¿DÏ¿DÌ¿E6¿En¿Eé¿Eê¿Eë¿E√¿F¿F¿F)¿FN¿FO¿Fp¿F¥¿F¿¿F˜¿F¯¿G¿GG¿GH¿GT¿Gò¿Gô¿G•¿G»¿GÙ¿H¿H¿H5¿He¿Hó¿Hõ¿Hú¿H®¿H¿HÚ¿HÛ¿I+¿Iè¿Iê¿Iß¿Iæ¿IŸ¿I⁄¿IÓ¿J0¿J<¿Js¿Jt¿Jè¿Jß¿J“¿Jˇ¿K0¿K[¿Ka¿Ke¿Kf¿Kr¿Kº¿KΩ¿K…¿L¿L¿L!¿LD¿Lp¿LÑ¿Lä¿L∑¿LŸ¿L˚¿M"¿M&¿M'¿M3¿Mf¿Mh¿Mi¿Mõ¿M„¿M‰¿M¸¿N¿N¿NY¿Ne¿Nú¿Nù¿N©¿NÈ¿NÍ¿Nˆ¿O7¿O8¿OD¿Og¿Oì¿Oß¿O≠¿O‘¿O¯¿P¿P!¿P"¿P.¿Pc¿Pe¿Pf¿Pó¿Pﬁ¿Pﬂ¿P˜¿Q¿Q¿QS¿Q_¿Qñ¿Qó¿Q£¿Q‚¿Q„¿QÔ¿R/¿R0¿R<¿R_¿Rã¿Rü¿R•¿RÀ¿RÔ¿S¿S¿S¿S%¿SZ¿S\¿S]¿Sê¿S·¿S‚¿T¿T$¿T%¿T?¿TÖ¿Të¿T»¿T…¿T’¿U?¿U@¿UL¿U¢¿U£¿UØ¿U“¿U˛¿V¿V¿V@¿Vl¿Vô¿Vù¿Vû¿V™¿VÁ¿VÈ¿VÍ¿W)¿W-¿W}¿W–¿X¿XO¿Xã¿X¿¿XŸ¿XÌ¿Y1¿Y5¿Y6¿YÉ¿Y…¿Y˙¿Z¿Z'¿ZX¿Z\¿Z]¿Z°¿ZÛ¿["¿[;¿[O¿[¿[É¿[Ñ¿[»¿[Œ¿\¿\f¿\ó¿\∞¿\‘¿]¿]¿],¿]f¿]j¿]k¿]ù¿]–¿]È¿]˝¿^C¿^g¿^k¿^l¿^ü¿^”¿^Ï¿_ ¿_V¿_¨¿_Â¿_È¿_Í¿`*¿`J¿`K¿`π¿a ¿a¿aj¿aß¿a®¿b¿bL¿bM¿bß¿bÏ¿bÌ¿cL¿câ¿cä¿c˙¿dM¿dN¿dú¿d¬¿dﬂ¿d·¿d‚¿e(¿e]¿eí¿e‹¿e¯¿f¿f"¿f#¿fB¿fC¿fl¿fr¿f√¿fﬁ¿fˆ¿g¿g'¿g:¿gD¿gY¿g]¿g^¿gÆ¿g—¿g◊¿h$¿hn¿h∑¿i¿i¿iL¿i_¿io¿ié¿i´¿iæ¿i»¿iÃ¿iŒ¿iœ¿j$¿j=¿jA¿jé¿j‹¿k)¿ky¿k}¿k“¿l&¿l¿l◊¿m*¿mS¿mW¿m±¿m÷¿m⁄¿mË¿mÏ¿n0¿nz¿n ¿nÙ¿o>¿oÜ¿o≠¿o˙¿pH¿pb¿pù¿p≠¿q¿q¿qY¿qü¿q•¿q˝¿r¿r#¿rÜ¿rÈ¿sK¿sT¿sU¿s¶¿s¨¿t¿tb¿té¿tî¿tÓ¿uK¿uQ¿u∑¿v¿vÇ¿vé¿vè¿v‚¿vË¿w@¿wò¿wÓ¿x	¿x¿xi¿xø¿x‘¿x⁄¿y>¿y¢¿z¿z¿z¿zP¿zV¿z∞¿{¿{¿{!¿{z¿{ö¿{†¿|¿|f¿|»¿|—¿|”¿|‘¿}¿}-¿}_¿}à¿}©¿}≠¿}æ¿}¿¿}¡¿}ı¿~¿~W¿~Ä¿~û¿~¡¿~Â¿¿'¿F¿J¿[¿]¿^¿õ¿Ω¿ﬂ¿Ä¿Ä%¿Ä>¿ÄW¿Äp¿ÄÅ¿ÄÉ¿ÄÑ¿ÄÃ¿Ä–¿Å"¿Å5¿Å9¿ÅG¿ÅK¿Å¡¿Å≈¿ÅÍ¿Ç¿Ç%¿Çt¿Ç≈¿É¿ÉD¿ÉJ¿Éô¿Éœ¿É’¿Ñ8¿Ñõ¿Ñˇ¿Öe¿Ök¿Ö∂¿Ö¸¿Ü¿Ü¿Üj¿ÜΩ¿Ü˝¿á¿á!¿á0¿áJ¿áh¿áê¿á™¿áœ¿áÚ¿à.¿àA¿àn¿à≤¿àÔ¿âW¿âk¿â∆¿â ¿âÀ¿ä¿ä6¿ä<¿äã¿ä‹¿ã&¿ã[¿ãa¿ãØ¿ãÂ¿ãÎ¿åN¿å±¿ç¿ç{¿çÅ¿ç“¿é¿é3¿é9¿éÜ¿éŸ¿è¿è¿èk¿èπ¿ê¿êQ¿ê†¿ê≈¿êÿ¿êÎ¿ê˛¿ë¿ë6¿ë^¿ëx¿ëã¿ë®¿ëœ¿í¿í¿íK¿íà¿í¿íÒ¿ìV¿ì≤¿ìˆ¿î¿îv¿îÉ¿îÏ¿ï¿ïé¿ïî¿ïò¿ïô¿ïÈ¿ñ¿ñ¿ñX¿ñ¶¿ñ·¿ñÁ¿ó6¿óá¿ó—¿ò¿ò¿ò\¿òù¿ò£¿ô¿ôg¿ô ¿ö/¿ö5¿öÑ¿ö‘¿ö˜¿ö˝¿õJ¿õù¿õ›¿õÔ¿ú¿ú¿ú:¿úb¿ú¿ú¢¿úº¿ú„¿ù	¿ùE¿ùX¿ùÖ¿ù¬¿û*¿û>¿û≥¿û∑¿û∏¿ûı¿ü¿ü¿üÖ¿†¿†	¿†à¿†•¿†ª¿†—¿†Ê¿†˛¿°¿°1¿°N¿°O¿°Ô¿¢¿¢"¿¢7¿¢Q¿¢d¿¢w¿¢è¿¢ß¿¢∆¿¢⁄¿¢˜¿¢¯¿£~¿£ö¿£∞¿£∆¿£ﬁ¿£˝¿§¿§*¿§A¿§]¿§^¿§Å¿§∑¿§’¿§ı¿•M¿•U¿•b¿•í¿•Ó¿•ˆ¿•¸¿¶ ¿¶¿¶¿¶A¿¶i¿¶è¿¶ï¿¶—¿ß ¿ßf¿ßò¿ßû¿ßÓ¿®=¿®K¿®Q¿®ò¿®ﬁ¿©¿©¿©W¿©ß¿©Ù¿™¿™-¿™{¿™ù¿™§¿™∆¿™÷¿™ˆ¿´4¿´:¿´N¿´¡¿´⁄¿´¯¿´˛¿¨¿¨¿¨¿¨"¿¨7¿¨G¿¨K¿¨L¿¨å¿¨¨¿¨≠¿≠)¿≠ô¿≠ö¿≠Â¿Æ
¿ÆR¿Æn¿Æp¿Æq¿Æª¿Æ–¿Æ‘¿Æ˛¿ØN¿Øå¿Ø®¿Øÿ¿ØÏ¿∞ ¿∞=¿∞\¿∞b¿∞r¿∞è¿∞¢¿∞¨¿∞∞¿∞±¿∞«¿∞»¿±¿±¿±\¿±°¿±Ó¿≤¿≤B¿≤á¿≤–¿≥¿≥G¿≥è¿≥Ÿ¿≥Ù¿¥)¿¥/¿¥a¿¥Ø¿¥¸¿µ¿µ¿µ¿µ¿µX¿µ©¿µ˜¿∂G¿∂S¿∂†¿∂“¿∂”¿∑¿∑S¿∑°¿∑Õ¿∏¿∏=¿∏K¿∏Q¿∏R¿∏ä¿∏•¿∏≥¿∏π¿∏∫¿∏ˆ¿π¿πD¿πJ¿πN¿πO¿πk¿πä¿πã¿πß¿π¡¿π¬¿∫¿∫&¿∫'¿∫É¿∫∂¿∫∑¿∫Î¿ª?¿ªA¿ªB¿ªu¿ªy¿ªÆ¿ªˆ¿ºF¿ºî¿º∫¿ºæ¿Ω¿ΩX¿Ω¶¿ΩÔ¿æ(¿æS¿æº¿æÿ¿æÁ¿ø	¿ø&¿ø-¿ø1¿ø2¿øN¿øO¿øè¿øª¿øº¿ø¿øˆ¿¿D¿¿í¿¿›¿¡+¿¡{¿¡•¿¡´¿¡Ú¿¡¯¿¬¿¬"¿¬D¿¬c¿¬~¿¬à¿¬é¿¬‹¿¬Ê¿¬Ï¿¬˙¿√K¿√v¿√ß¿√ÿ¿√ﬁ¿ƒ¿ƒ\¿ƒß¿ƒÚ¿≈=¿≈C¿≈j¿≈î¿≈ú¿≈¶¿≈¨¿≈˘¿∆N¿∆_¿∆e¿∆Ø¿∆⁄¿«/¿«K¿«O¿«P¿«Ü¿«å¿«‰¿»'¿»-¿»z¿»õ¿»Ã¿… ¿…K¿…O¿…P¿…í¿…ò¿…Á¿ 3¿ n¿ z¿ ç¿ ¢¿ ƒ¿ ‘¿ ÿ¿ Ÿ¿À>¿À§¿À•¿Ã¿ÃM¿ÃN¿Ã™¿Ãœ¿Ã–¿Õ#¿Õ?¿ÕA¿ÕB¿Õì¿Õó¿Õ∫¿Õ˜¿Œ	¿ŒQ¿Œ^¿Œ_¿Œ≠¿Œæ¿Œø¿œ¿œ%¿œ+¿œv¿œ¥¿œı¿–¿–¿–¿–?¿–C¿–í¿–ÿ¿—#¿—o¿—ø¿—Â¿—È¿“6¿“Ñ¿“”¿“„¿“Á¿”3¿”Ç¿”—¿‘¿‘k¿‘ª¿’
¿’W¿’r¿’v¿’√¿÷¿÷Z¿÷|¿÷Ä¿÷œ¿◊¿◊a¿◊≤¿ÿ¿ÿS¿ÿv¿ÿ≠¿ÿÙ¿ÿ˙¿ŸH¿Ÿï¿Ÿ„¿⁄.¿⁄]¿⁄c¿⁄∞¿⁄Ÿ¿⁄ﬂ¿€0¿€~¿€Õ¿‹
¿‹(¿‹.¿‹}¿‹Ã¿‹“¿›$¿›M¿›S¿›£¿›Ù¿ﬁE¿ﬁë¿ﬁﬂ¿ﬂ*¿ﬂu¿ﬂÖ¿ﬂã¿ﬂŸ¿‡¿‡	¿‡G¿‡M¿‡ô¿‡Í¿·;¿·á¿·Æ¿·∫¿·œ¿·Ì¿‚¿‚,¿‚D¿‚K¿‚ä¿‚’¿‚€¿„2¿„â¿„è¿„™¿„Í¿‰¿‰;¿‰á¿‰Œ¿Â¿Â&¿Â0¿Â8¿Â>¿ÂÑ¿Â‘¿Ê¿Ê¿ÊC¿Êd¿Êr¿Ê©¿ÊŒ¿Ê‹¿Ê›¿ÁM¿Áè¿Áï¿Áô¿Áö¿ÁÎ¿Ë¿Ë ¿Ën¿Ëª¿È	¿ÈT¿ÈÉ¿Èâ¿È÷¿Í ¿Íl¿Íª¿ÍŒ¿Í‘¿Î%¿Ît¿Îª¿Ï¿Ï]¿Ï¨¿Ï„¿ÏÈ¿Ì8¿Ìá¿Ìÿ¿Ó!¿ÓZ¿Ó`¿Ó∞¿Ô¿ÔR¿Ô¢¿ÔÏ¿8¿â¿∂¿º¿Ò
¿ÒZ¿Ò©¿Ò◊¿Ò›¿Ú¿Ú+¿Ú@¿Ú]¿Út¿Úô¿Ú≤¿Úπ¿Úﬁ¿ÛN¿ÛT¿Ûó¿Û‚¿ÛË¿Ù?¿Ùñ¿Ùú¿Ù∑¿Ù˜¿ı-¿ıL¿ıò¿ı‰¿ˆ/¿ˆ<¿ˆF¿ˆN¿ˆT¿ˆ®¿ˆÍ¿ˆ¿ˆÙ¿ˆı¿˜W¿˜ä¿˜±¿˜Â¿¯#¿¯S¿¯Ü¿¯á¿¯◊¿¯˙¿˘¿˘%¿˘5¿˘M¿˘`¿˘j¿˘z¿˘~¿˘¿˘ ¿˘Ô¿˙4¿˙P¿˙Q¿˙k¿˙µ¿˙ª¿˚	¿˚¿˚:¿˚N¿˚^¿˚z¿˚ç¿˚ó¿¸¿¸¿¸¿¸¿¸]¿¸a¿¸ù¿¸·¿¸Ú¿˝¿˝¿˝h¿˝≤¿˝Î¿˝Ò¿˛>¿˛ç¿˛£¿˛≠¿˛Æ¿˛Ë¿˛Ó¿ˇ4¿ˇ:¿ˇ|¿ˇí¿ˇõ¿ˇú¿ˇ“¿ˇÿ¿ ¿ 0¿ ;¿ =¿ >¿ à¿ î¿ ò¿ ∑¿ ≈¿ ˝¿¿¿E¿R¿T¿U¿ä¿é¿’¿¿Z¿^¿ß¿˜¿@¿]¿a¿±¿˙¿/¿3¿Ä¿ø¿◊¿¿8¿>¿á¿œ¿¿n¿ª¿˛¿¿K¿a¿±¿≤¿˙¿ ¿,¿2¿B¿H¿ô¿Œ¿›¿ﬁ¿	/¿	Ä¿	œ¿
¿
'¿
-¿
y¿
 ¿¿`¿Æ¿¯¿˛¿K¿Q¿u¿{¿…¿¿e¿µ¿⁄¿‡¿.¿w¿»¿¿d¿¥¿¸¿)¿/¿y¿í¿ò¿¶¿”¿˚¿¿R¿{¿≤¿Î¿¿¿'¿1¿7¿Ü¿‘¿"¿@¿F¿T¿Å¿ƒ¿Ï¿¿C¿z¿≥¿Õ¿’¿ﬂ¿Â¿6¿|¿∆¿Ã¿⁄¿¿¿r¿´¿≈¿‹¿=¿v¿ê¿ò¿¢¿®¿Û¿<¿ç¿≈¿À¿Ô¿ı¿4¿:¿à¿÷¿'¿r¿¡¿¿Z¿•¿ˆ¿G¿b¿h¿x¿~¿Œ¿¿8¿N¿{¿|¿º¿€¿·¿ ¿&¿o¿≥¿≈¿∆¿"¿o¿¡¿«¿ ¿ ¿ Z¿ ™¿ Ã¿ Ó¿ Ô¿!2¿!w¿!æ¿!Û¿!˘¿"¿"4¿"5¿"Ö¿"’¿"˝¿"˛¿#M¿#ó¿#®¿#Æ¿#Ù¿$¿$-¿$.¿$É¿$¢¿$£¿$Ù¿%@¿%è¿%∏¿%€¿%‹¿&,¿&g¿&é¿&è¿&‚¿'8¿'T¿'Z¿'¨¿'˙¿(J¿(w¿(ï¿(ñ¿(‰¿(˚¿)¿)W¿)]¿)°¿)ß¿)˘¿*A¿*j¿*p¿*∫¿*Œ¿+)¿+*¿+x¿+ó¿+ù¿+Ù¿+˙¿,>¿,D¿,ñ¿,ﬁ¿-.¿-h¿-i¿-∑¿-À¿-—¿.'¿.-¿.q¿.w¿.…¿/¿/:¿/q¿/r¿/√¿0¿0h¿0y¿0¿0”¿1&¿1x¿1«¿2¿2i¿2º¿3¿3\¿3x¿3~¿3∂¿4¿4\¿4´¿4Ì¿4Û¿5A¿5h¿5n¿5|¿5ù¿5º¿5ı¿62¿6Q¿6ã¿6«¿6÷¿6ﬁ¿6Ë¿6Ó¿7?¿7ã¿7Ê¿8:¿8J¿8P¿8ñ¿8„¿9¿9¿9m¿9º¿:¿: ¿:5¿:R¿:S¿:§¿:ˆ¿;I¿;O¿;ü¿;Ò¿<A¿<ë¿<„¿=7¿=ä¿=ó¿=ù¿=“¿=ı¿=ˆ¿>9¿>Ö¿>¢¿>÷¿>◊¿?&¿?n¿?t¿?¬¿?»¿@3¿@¢¿@÷¿@◊¿A¿A¿AQ¿Al¿Aã¿Aå¿A‹¿B¿B¿Bà¿B˜¿C ¿C!¿Cr¿C¥¿C∫¿D&¿Dñ¿D¬¿D√¿E¿Ec¿Eâ¿Eè¿E‘¿F¿F¿F\¿F≠¿F–¿F÷¿GA¿G∞¿GŸ¿G⁄¿H%¿Hw¿H∆¿HÈ¿HÔ¿I\¿IÕ¿J¿J¿JC¿JI¿Jâ¿J÷¿K ¿Kt¿K≈¿L¿LA¿LG¿L∂¿M)¿M/¿Má¿MÂ¿MÊ¿N¿N!¿Nj¿N≥¿Nﬂ¿O¿O	¿OW¿OÆ¿OÈ¿OÍ¿P9¿PÖ¿Pã¿P⁄¿PÛ¿P˘¿QE¿Qé¿Q°¿QÂ¿QÊ¿R-¿R3¿RÅ¿Rœ¿S¿Si¿S¨¿S≤¿T ¿TM¿Tõ¿T‚¿TÛ¿U:¿U;¿UÇ¿Uõ¿U¿¿U¡¿V¿V¿V#¿Vn¿V{¿VÅ¿VÕ¿W¿WX¿W^¿W≠¿W˘¿Wˇ¿XP¿Xù¿XÍ¿X¿Y:¿YÜ¿Y”¿Z¿Z¿ZS¿ZY¿Z†¿Z¶¿ZÏ¿[6¿[<¿[L¿[R¿[¢¿[ª¿\¿\¿\K¿\Q¿\°¿\Ó¿\Ù¿]:¿]Ñ¿]ä¿]ö¿]†¿]Ó¿^¿^X¿^Y¿^£¿^©¿^ı¿_¿_¿_U¿_¶¿_Ω¿_√¿`¿`Z¿`¶¿`Ó¿a>¿aâ¿a‘¿b#¿bt¿b¬¿b¸¿c¿c)¿c/¿c?¿cê¿c‹¿d¿dU¿dü¿d†¿d‰¿dÍ¿e;¿eî¿eÁ¿f;¿fs¿fy¿f…¿g¿gi¿gª¿h¿h_¿h´¿h±¿i¿iR¿iß¿i˛¿j.¿jÇ¿j–¿k¿k¿km¿kº¿l¿lU¿l™¿l∞¿m¿mU¿mû¿m§¿mı¿n¿n¿n$¿n9¿nb¿nu¿nå¿nî¿nö¿n»¿n˛¿o¿o]¿o{¿oú¿o¢¿o¥¿o„¿p¿p;¿po¿pô¿p∏¿p‘¿q¿q/¿qM¿qì¿q¡¿qÔ¿r ¿r¿rI¿rå¿r≥¿rΩ¿r√¿r“¿r⁄¿r‰¿rÍ¿sC¿sI¿sW¿sl¿s∞¿s√¿s⁄¿sÌ¿t¿t¿t¿tB¿tx¿t~¿t◊¿tı¿u¿u¿u.¿u]¿u~¿uµ¿uÈ¿v¿v>¿vZ¿vó¿vµ¿v”¿w¿wG¿wu¿wÜ¿wõ¿wœ¿x¿x(¿x\¿xê¿xº¿x∆¿xÃ¿x€¿x„¿xÌ¿xÛ¿y<¿yá¿y∫¿y¿¿y–¿y÷¿z$¿z;¿zY¿zà¿z´¿z—¿z¯¿{¿{8¿{9¿{}¿{É¿{‘¿|-¿|Ä¿|‘¿}&¿}x¿}Ø¿}µ¿~¿~M¿~S¿~§¿~‰¿¿¿c¿≠¿≥¿ˇ¿ÄL¿Äú¿Ä¢¿Ä˝¿Å¿Å¿Å"¿Å7¿Å`¿Ås¿Åä¿Åí¿Åò¿Å∆¿Å¸¿Ç¿Ç[¿Çy¿Çö¿Ç†¿Ç≤¿Ç·¿É1¿ÉÄ¿É—¿ÉÌ¿Ñ2¿Ñ|¿Ñ¥¿Ñﬂ¿Ö¿Ö>¿Öe¿Öï¿ÖΩ¿Ö√¿Ü¿Üw¿Ü—¿á¿á?¿ák¿á™¿áÈ¿áı¿à¿àt¿à~¿àÑ¿àì¿àõ¿à•¿à´¿â¿â
¿â¿â-¿âq¿âÑ¿âõ¿âÆ¿â«¿âœ¿â’¿ä¿ä9¿ä?¿äò¿ä∂¿ä◊¿ä›¿äÔ¿ã¿ãn¿ãΩ¿å¿å*¿åo¿åπ¿å˜¿ç/¿çZ¿çê¿çπ¿ç‡¿é¿é8¿é>¿éô¿é¿èK¿è®¿èÛ¿ê9¿êb¿ê|¿ê∑¿ê”¿êÔ¿ë3¿ë_¿ëã¿ëö¿ë—¿í¿í=¿ír¿íx¿í“¿ì,¿ìÑ¿ìÀ¿ì˙¿î¿î'¿îï¿îü¿î•¿î¥¿îº¿î∆¿îÃ¿î‹¿î‚¿ï/¿ïD¿ïe¿ïî¿ïª¿ï‚¿ñ¿ñ0¿ñR¿ñS¿ñ†¿ñ¶¿ñˆ¿ó¿ó¿ó7¿óé¿óê¿óë¿óﬂ¿ó˚¿ò<¿ò\¿òπ¿òø¿òÛ¿ô¿ô1¿ôç¿ôë¿ôí¿ô¸¿öq¿ör¿öŒ¿õ*¿õo¿õî¿õï¿õ°¿õÔ¿ú¿ú¿ú¿úB¿ú\¿úò¿ú•¿ú…¿ù.¿ù4¿ù8¿ù9¿ùõ¿ùı¿ùˆ¿ûk¿ûÓ¿ûÔ¿û˚¿üL¿üg¿üh¿üt¿ü”¿ü˛¿üˇ¿†¿†b¿†Å¿†Ç¿†é¿†Ò¿°"¿°#¿°/¿°n¿°o¿°Œ¿°¸¿°˝¿¢	¿¢a¿¢â¿¢ä¿¢ñ¿¢Ù¿£ ¿£!¿£-¿£U¿£u¿£≥¿£π¿£“¿£÷¿£◊¿§$¿§U¿§V¿§b¿§Å¿§≤¿§Œ¿§‚¿§Ê¿§Á¿•7¿•k¿•l¿•x¿•‘¿•Ù¿¶L¿¶P¿¶Q¿¶–¿ß?¿ß@¿ßL¿ßá¿ß©¿ß€¿ßﬂ¿ß‡¿®3¿®t¿®u¿®Å¿®π¿®Í¿®Ó¿®Ô¿©H¿©á¿©à¿©î¿©≤¿©·¿™¿™H¿™L¿™M¿™£¿™‹¿™›¿™È¿´¿´<¿´c¿´©¿´≠¿´Æ¿¨
¿¨I¿¨J¿¨V¿¨ã¿¨π¿¨Ω¿¨æ¿≠ ¿≠V¿≠W¿≠c¿≠ò¿≠∏¿≠ÿ¿Æ ¿Æ$¿Æ%¿Æô¿Ø¿Ø¿Ø¿Ø>¿Øk¿Øo¿Øp¿Ø≈¿∞¿∞¿∞¿∞I¿∞i¿∞√¿∞«¿∞»¿±<¿±æ¿±ø¿±À¿±¯¿≤¿≤\¿≤`¿≤a¿≤æ¿≥¿≥¿≥+¿≥f¿≥à¿≥™¿¥¿¥¿¥¿¥m¿¥·¿¥‚¿¥Ó¿µ¿µ8¿µí¿µñ¿µó¿∂¿∂ç¿∂é¿∂ö¿∂‘¿∂Û¿∑5¿∑9¿∑:¿∑®¿∏¿∏¿∏&¿∏Ö¿∏•¿π!¿π%¿π&¿πØ¿π…¿π‹¿πÓ¿∫¿∫¿∫0¿∫I¿∫_¿∫Ç¿∫ù¿∫û¿∫™¿∫‘¿ª¿ª¿ª¿ª}¿ª€¿ª‹¿ªË¿º$¿ºF¿ºj¿ºÏ¿Ω¿ΩS¿ΩY¿Ω]¿Ω^¿Ω€¿æe¿æf¿ær¿æ∑¿æŸ¿æ¯¿ø¿øN¿øÅ¿ø≥¿øÁ¿¿¿¿O¿¿Å¿¿µ¿¿Í¿¡#¿¡Y¿¡û¿¡∑¿¬¿¬¿¬¿¬¿¬¡¿¬‰¿¬¯¿√¿√#¿√:¿√R¿√h¿√}¿√î¿√¨¿√œ¿√È¿ƒ¿ƒ	¿ƒ¿ƒ]¿ƒ¿ƒ°¿ƒ¿¿ƒ˜¿≈-¿≈b¿≈ô¿≈—¿∆¿∆6¿∆j¿∆ü¿∆ÿ¿«¿«S¿«l¿«∫¿«¿¿«ƒ¿«≈¿»v¿»ô¿»≠¿»∆¿»ﬁ¿»¯¿…¿…)¿…>¿…U¿…m¿…ê¿…™¿……¿… ¿…÷¿…¸¿  ¿ M¿ Q¿ R¿ ®¿ ﬁ¿ ﬂ¿ Î¿À&¿Àr¿Àû¿À¬¿ÀÌ¿Ã%¿Ã)¿Ã*¿Ã6¿ÃÅ¿Ã⁄¿Ãﬁ¿Ãﬂ¿ÃÎ¿Õ8¿ÕZ¿Õ•¿Õ´¿ÕÚ¿Õˆ¿Õ˜¿Œ\¿ŒÕ¿ŒŒ¿Œ⁄¿œ%¿œJ¿œï¿œô¿œö¿–¿–z¿–{¿–á¿–•¿–‘¿–˜¿—¿—D¿—e¿—Ö¿—ß¿—Í¿—Î¿“¿“=¿“à¿“é¿“€¿”C¿”I¿”J¿”ë¿”–¿”—¿”˚¿‘¿‘@¿‘e¿‘ä¿‘¿¿‘‚¿’¿’:¿’p¿’§¿’ÿ¿’˛¿÷#¿÷J¿÷r¿÷x¿÷y¿÷‚¿◊#¿◊[¿◊\¿◊Ç¿◊·¿ÿ'¿ÿ.¿ÿ/¿ÿH¿ÿñ¿ÿú¿ÿ†¿ÿ°¿ÿ≠¿ÿŒ¿ÿ˝¿Ÿ$¿ŸK¿Ÿu¿Ÿô¿Ÿº¿ŸÌ¿ŸÓ¿⁄¿⁄C¿⁄ë¿⁄ó¿⁄µ¿€¿€¿€U¿€Œ¿€‘¿‹¿‹¿‹3¿‹à¿‹“¿‹Ÿ¿‹⁄¿‹Û¿›A¿›G¿›K¿›L¿›‡¿›ˇ¿ﬁ"¿ﬁ<¿ﬁZ¿ﬁn¿ﬁè¿ﬁ®¿ﬁ¡¿ﬁ÷¿ﬁÙ¿ﬁı¿ﬂ¿ﬂY¿ﬂ¨¿ﬂ∞¿ﬂ±¿‡¿‡Ç¿‡Ñ¿‡Ö¿‡≥¿‡Ú¿‡Û¿·;¿·?¿·s¿·w¿·æ¿‚ ¿‚B¿‚[¿‚ö¿‚†¿‚Î¿„-¿„N¿„w¿„x¿„π¿„ø¿‰
¿‰M¿‰n¿‰ò¿‰ô¿‰√¿‰…¿Â¿Âg¿Â∞¿Â‡¿Â·¿Ê#¿Ê)¿Ê`¿ÊØ¿Ê˛¿ÁG¿ÁM¿Áù¿ÁÎ¿Ë¿Ë¿Ën¿Ë∑¿Ë–¿Ë÷¿È%¿È:¿Èf¿Èg¿È∑¿È⁄¿ÈÏ¿ÈÌ¿Í3¿Í9¿Íá¿Íù¿Í∑¿Í∏¿Î¿Î¿ÎX¿Îä¿Î™¿Î¨¿Î≠¿Î«¿Ï¿Ïa¿Ï}¿ÏÉ¿Ïπ¿Ï’¿ÏÎ¿ÏÏ¿Ï¯¿Ì)¿ÌA¿Ìf¿Ìö¿Ì†¿Ì∂¿Ó¿Ó#¿Ó=¿ÓN¿Óç¿Óó¿Ó°¿Ó®¿Ó¨¿Ó≠¿Ô¿Ô`¿Ôa¿Ôm¿Ôö¿Ô≤¿Ô◊¿¿¿¿7¿_¿ï¿ô¿ö¿˙¿Ò@¿ÒA¿ÒM¿Ò`¿Òx¿Òà¿Ò†¿Ò≥¿ÒΩ¿Ò‡¿Ò¿ÒÙ¿Òı¿Ú@¿Úe¿Ú©¿Ú≈¿Ú∆¿Ú‡¿Ú·¿ÚÌ¿Û¿Û¿Û,¿ÛH¿Û[¿Ûe¿Û’¿ÛŸ¿Û⁄¿ÛÊ¿ÙD¿Ùm¿Ùo¿Ùp¿Ù∑¿Ùª¿ı ¿ıE¿ıf¿ıß¿ıÓ¿ˆ
¿ˆ@¿ˆA¿ˆ|¿ˆÇ¿ˆ∆¿˜¿˜D¿˜â¿˜≈¿˜›¿˜ﬁ¿¯¿¯¿¯^¿¯Æ¿¯Û¿˘¿˘¿˘¿˘p¿˘å¿˘ª¿˘º¿˙ ¿˙ ¿˙!¿˙-¿˙X¿˙Y¿˙e¿˙Ä¿˙õ¿˙ﬂ¿˙Â¿˚¿˚8¿˚W¿˚k¿˚æ¿¸¿¸*¿¸>¿¸B¿¸C¿¸ú¿¸÷¿¸◊¿¸Ò¿¸Û¿¸Ù¿˝	¿˝¿˝I¿˝X¿˝r¿˝x¿˝√¿˛¿˛(¿˛.¿˛o¿˛u¿˛ƒ¿˛›¿˛Ó¿ˇ¿ˇ;¿ˇV¿ˇ´¿ˇ¨¿ˇ‹¿  ¿ *¿ U¿ |¿ £¿ Õ¿ Œ¿ ˛¿¿V¿y¿é¿è¿Œ¿‘¿"¿n¿∞¿«¿»¿¿5¿6¿h¿n¿°¿ß¿‘¿G¿}¿±¿µ¿∂¿Ú¿¯¿+¿g¿h¿µ¿ª¿¯¿G¿n¿t¿∏¿¿P¿r¿Ü¿ô¿Ø¿Ú¿ˆ¿˜¿I¿W¿w¿ä¿û¿Ω¿‰¿Î¿Ô¿¿	 ¿	&¿	o¿	¥¿	ÿ¿	ﬁ¿
¿
Q¿
õ¿
Ê¿2¿Ä¿–¿¿a¿g¿∂¿÷¿Î¿#¿8¿O¿d¿s¿î¿ú¿©¿¿¿€¿Í¿¿4¿k¿≠¿∏¿¿¿∆¿ ¿À¿¿
¿R¿X¿{¿…¿Î¿˛¿¿¿0¿\¿ó¿«¿ˆ¿¸¿3¿Z¿`¿ó¿∏¿æ¿—¿’¿÷¿‚¿¿'¿:¿@¿[¿{¿ù¿»¿Ã¿Õ¿Ÿ¿¿¿d¿∂¿“¿¿'¿A¿G¿H¿Ö¿ª¿º¿÷¿#¿U¿ä¿ã¿ƒ¿¿¿C¿p¿q¿®¿’¿÷¿%¿_¿Ö¿ã¿å¿§¿®¿©¿µ¿¯¿˙¿˚¿B¿F¿ï¿´¿È¿¿¿[¿p¿±¿ˆ¿(¿U¿s¿w¿x¿≤¿∏¿Ò¿/¿t¿Ω¿¿4¿|¿∑¿Ë¿$¿?¿Y¿Ö¿ç¿∂¿æ¿¬¿√¿Ù¿˙¿3¿p¿´¿‹¿¿,¿F¿Ä¿à¿±¿π¿Ω¿æ¿ ¿ V¿ W¿ ¥¿!¿!¿!^¿!™¿!´¿!ﬂ¿!¸¿"¿"¿"+¿",¿"U¿"[¿"¨¿"«¿"ﬂ¿"Ô¿#¿##¿#-¿#B¿#F¿#G¿#ó¿#∫¿#¿¿$¿$W¿$§¿$Ò¿%?¿%]¿%p¿%Ä¿%ü¿%º¿%œ¿%Ÿ¿%È¿%Ì¿%Ó¿&9¿&^¿&™¿&∆¿&»¿&…¿'¿'¿'g¿'¿'†¿'Ÿ¿'ﬂ¿(/¿(Å¿(õ¿(°¿(Ô¿)B¿)É¿)¿¿)ﬂ¿)˝¿*¿*.¿*A¿*g¿*ä¿*ã¿*÷¿+¿+c¿+ï¿+Õ¿+Ì¿+Ò¿+Ú¿,¿,"¿,]¿,n¿,o¿,ö¿,†¿,€¿,Ì¿,Ó¿- ¿-&¿-]¿-v¿-w¿-«¿-Í¿-¿.;¿.`¿.r¿.s¿.¡¿.›¿.„¿/.¿/{¿/å¿/í¿/‡¿0¿0Q¿0S¿0T¿0¥¿0“¿0”¿1¿1¿1b¿1¥¿1Œ¿1‘¿2"¿2u¿2∂¿2Û¿3¿3/¿3G¿3`¿3s¿3ô¿3†¿3¥¿3 ¿4¿4'¿4u¿4y¿4z¿4‹¿5/¿50¿5ô¿6'¿6(¿67¿68¿6ë¿6≠¿6Æ¿6∫¿6Â¿6Ê¿6ˆ¿6˜¿7Q¿7n¿7o¿7{¿7©¿7™¿7¡¿7¬¿8#¿8G¿8H¿8T¿8ó¿8ò¿8§¿8¿9¿9¿9¿9h¿9õ¿9µ¿9ª¿9¿:¿:¿:¿:I¿:d¿:Å¿:ø¿:˛¿;!¿;_¿;Ä¿;∂¿;º¿;›¿;ˇ¿< ¿<*¿<e¿<w¿<{¿<|¿<Á¿==¿=?¿=@¿=u¿=•¿=¶¿=ﬁ¿=‚¿>,¿>9¿>|¿>}¿>Ã¿>·¿>‰¿?1¿?N¿?Q¿?ù¿?†¿?≤¿?µ¿?¿¿?Ù¿?˜¿@2¿@o¿@t¿@w¿@ñ¿@∆¿@À¿@“¿@’¿A*¿AÄ¿A¨¿AØ¿B¿B9¿Bo¿B∂¿B˙¿C7¿CK¿Cw¿Cå¿Cû¿CÀ¿C⁄¿D¿D"¿D/¿DL¿DR¿DX¿Dh¿D¿Dõ¿Dü¿D∫¿Dº¿DΩ¿E¿EZ¿E^¿EÆ¿E˛¿F3¿Fn¿F≥¿F¥¿FÈ¿G¿G¿GT¿Go¿Gp¿G|¿Gí¿GÏ¿H¿H¿Hd¿Hç¿Hì¿H±¿Hµ¿H∑  dart.uiÄ¨ M_rectIsValid_rrectIsValid_offsetIsValid_matrix4IsValid_radiusIsValid_scaleAlphaColor	BlendModeFilterQuality	StrokeCap
StrokeJoinPaintingStyleClipPaint
ColorSpaceImageByteFormatPixelFormatImage_Image	FrameInfoCodec_NativeCodecinstantiateImageCodecinstantiateImageCodecFromBufferinstantiateImageCodecWithSize_getDefaultImageSizeTargetImageSizedecodeImageFromList_decodeImageFromListAsyncdecodeImageFromPixelsPathFillTypePathOperationEngineLayer_NativeEngineLayerPath_NativePathTangentPathMetricsPathMetricIterator
PathMetric_PathMeasure	BlurStyle
MaskFilterColorFilter_ColorFilterImageFilter_MatrixImageFilter_GaussianBlurImageFilter_DilateImageFilter_ErodeImageFilter_ComposeImageFilter_ImageFilterShaderTileMode_encodeColorList_encodePointList_encodeTwoPointsGradientImageShaderFragmentProgramFragmentShader
VertexModeVertices	PointModeClipOpCanvas_NativeCanvasPicture_NativePicturePictureRecorder_NativePictureRecorderShadowImmutableBufferImageDescriptor_NativeImageDescriptor	_futurizePictureRasterizationException Îû