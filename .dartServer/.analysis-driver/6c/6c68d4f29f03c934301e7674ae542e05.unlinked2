ÄÂpopdoNotPopbubble	navigator
_navigatorsettings	_settingsrestorationScopeId_restorationScopeId_updateSettings_updateRestorationIdoverlayEntriesinstalldidPushdidAdd
didReplacewillPopwillHandlePopInternallycurrentResultpopped_popCompleterdidPopdidComplete
didPopNextdidChangeNextdidChangePreviouschangedInternalStatechangedExternalStatedispose	isCurrentisFirsthasActiveRouteBelowisActivename	argumentstoStringkeyrestorationId	canUpdatecreateRoute_navigators	didRemovedidStartUserGesturedidStopUserGesture
controllermaybeOfofupdateShouldNotifyrouteisWaitingForEnteringDecisionisWaitingForExitingDecisionmarkForPush
markForAdd
markForPopmarkForCompletemarkForRemove_transitionresolvepages	onPopPagetransitionDelegateinitialRouteonGenerateRouteonUnknownRoute	observersrouteTraversalEdgeBehaviordefaultRouteNameonGenerateInitialRoutesreportsRouteUpdateToEngineclipBehaviorrequestFocus	pushNamedrestorablePushNamedpushReplacementNamedrestorablePushReplacementNamedpopAndPushNamedrestorablePopAndPushNamedpushNamedAndRemoveUntil!restorablePushNamedAndRemoveUntilpushrestorablePushpushReplacementrestorablePushReplacementpushAndRemoveUntilrestorablePushAndRemoveUntilreplacerestorableReplacereplaceRouteBelowrestorableReplaceRouteBelowcanPopmaybePoppopUntilremoveRouteremoveRouteBelowdefaultGenerateInitialRoutescreateStatestagingaddaddingpushReplacepushingidlecompleteremovepoppingremoving	disposingdisposedrestorationInformation	pageBasednotAnnouncedcurrentStatelastAnnouncedPreviousRoutelastAnnouncedPoppedNextRoutelastAnnouncedNextRoutecanUpdateFrom	handleAdd
handlePushhandleDidPopNext	handlePophandleCompletehandleRemovalpendingResult_reportRemovalToObserverfinalizeforcedDisposewillBePresent	isPresentisPresentForRestorationsuitableForAnnouncementsuitableForTransitionAnimationshouldAnnounceChangeToNextisPresentPredicate'suitableForTransitionAnimationPredicatewillBePresentPredicateisRoutePredicate_isWaitingForExitingDecisionmarkNeedsExitingDecisionrestorationEnabledprimaryRoutesecondaryRoutenotify_overlayKey_history_entryWaitingForSubTreeDisposal_serializableHistory_observedRouteAdditions_observedRouteDeletionsfocusScopeNode	focusNode_debugLocked_heroControllerFromScope_effectiveObservers	initState"_rawNextPagelessRestorationScopeId_nextPagelessRestorationScopeIdrestoreStatedidToggleBucketdidChangeDependencies_forcedDisposeAllRouteEntries_disposeRouteEntry_updateHeroController_updateEffectiveObserversdidUpdateWidget_debugCheckDuplicatedPageKeys
deactivateactivateoverlay_allRouteOverlayEntries_lastAnnouncedRouteName_debugUpdatingPage_updatePages_flushingHistory_flushHistoryUpdates_flushObserverNotifications_flushRouteAnnouncement_getRouteBefore_getIndexBefore_getRouteAfter_routeNamed_debugIsStaticCallback
_pushEntry_afterNavigation_pushReplacementEntry_pushEntryAndRemoveUntil_replaceEntry_replaceEntryBelowfinalizeRoute_getRouteById_userGesturesInProgress_userGesturesInProgressCountuserGestureInProgressuserGestureInProgressNotifier_activePointers_handlePointerDown_handlePointerUpOrCancel_cancelActivePointers_firstRouteEntryWhereOrNull_lastRouteEntryWhereOrNullbuildnamed	anonymoustype_serializableDataisRestorablegetSerializableDatacomputeSerializableDatatoRouteEntryrouteBuilder_pageToPagelessRoutesupdate_finalizeEntry_debugMapsEqualclearhasDatarestoreEntriesForPagecreateDefaultValuefromPrimitivesinitWithValuetoPrimitivesenablednavigatorFinder	onPresent
onCompletepresent_route	_disposed_hookOntoRouteFuture_defaultNavigatorFinder$RouteFactoryRouteListFactoryRestorableRouteBuilderRoutePredicateWillPopCallbackPopPageCallbackRoutePopDispositionRouteRouteSettingsPageNavigatorObserverHeroControllerScopeRouteTransitionRecordTransitionDelegateDefaultTransitionDelegate"kDefaultRouteTraversalEdgeBehavior	Navigator_RouteLifecycle_RouteEntryPredicate_NotAnnounced_RouteEntry_NavigatorObservation_NavigatorPushObservation_NavigatorPopObservation_NavigatorRemoveObservation_NavigatorReplaceObservationNavigatorState_RouteRestorationType_RestorationInformation_NamedRestorationInformation _AnonymousRestorationInformation_HistoryPropertyNavigatorFinderCallbackRoutePresentationCallbackRouteCompletionCallbackRestorableRouteFutureÅ£onGenerateRoutedynamiconGenerateInitialRoutesListStringrestorablePushTBuildContextObjectpopUntilboolpopForm	onWillPop
ModalRouteaddScopedWillPopCallbackremoveScopedWillPopCallbackWillPopScopeFuture	onPopPagedidPoppageswillPopdoNotPopbubbleSystemNavigatorOverlayOverlayEntryMaterialPageRoutecreateRouteRestorationScopeValueListenableValueNotifiervoidvalueremove	protectedmustCallSuperTickerFuturecompletethenwidgetrequestFocus	focusNodeenclosingScopemaybePopfuture	CompleterfinalizeRoutepushReplacementdidStartUserGesturepushoffstageStatedidUpdateWidgetMaterialAppdidChangeDependenciescontextbarrierColordispose_lastRouteEntryWhereOrNullisPresentPredicateroute_firstRouteEntryWhereOrNull_historyentrymaintainStateisRoutePredicate	isPresent	immutableoverrideobjectRuntimeTypecurrentResultpopped	argumentsLocalKeyRestorationManagerruntimeTypekeysettingsfactorynameExpandochildInheritedWidgetHeroControllerof"dependOnInheritedWidgetOfExactType
controllermaybeOfFlutterErrorresolveisWaitingForEnteringDecisiontransitionDelegateIterableMapnewPageRouteHistorylocationToExitingPageRoutepageRouteToPagelessRoutestoListgrowableSetvaluestoSetexitingPageRouteisWaitingForExitingDecisioncontainsKeypagelessRouteintcast
routeEntrylengthcontainsisEmptymarkForPush
markForAdd
markForPopmarkForCompletemarkForRemovelastadd	pageRouterouteTraversalEdgeBehaviorTraversalEdgeBehaviorkIsWebleaveFlutterView
closedLoopRouterAppBarScaffoldappBar
WidgetsApp
PopupRoute
showDialogshowMenushowModalBottomSheetPopupMenuButtonDropdownButton	PageRoutePageRouteBuilderCupertinoTabViewBuilder	isCurrentrestorationIdrestorationScopeIdStatefulWidgetdefaultGenerateInitialRoutesCliphardEdgeWidgetElementRenderObjectcreateElementcreateStateRenderObjectWidgetcreateRenderObjectdefaultRouteNameRestorationBucketRestorationMixinselectSingleEntryHistory PlatformRouteInformationProviderrouternonedidPushdidChangeNext	observersonUnknownRouteoptionalTypeArgs	pushNamedStandardMessageCodecrestorablePushNamed
didReplacedidCompletepushReplacementNamedresultrestorablePushReplacementNamed
didPopNextTransitionRouteopaquepopAndPushNamedrestorablePopAndPushNamedwillHandlePopInternallywithName	didRemovepushNamedAndRemoveUntil!restorablePushNamedAndRemoveUntilrestorablePushReplacementpushAndRemoveUntilrestorablePushAndRemoveUntildidChangePreviousreplaceoldRoutenewRouterestorableReplacenewRouteBuilderreplaceRouteBelowanchorRouterestorableReplaceRouteBelowisFirstcanPopLocalHistoryRouteremoveRouteremoveRouteBelowStatefulElementstaterootNavigatorfindRootAncestorStateOfTypefindAncestorStateOfType
startsWith	substring_routeNamed	allowNullsplit
isNotEmptypartreportErrorFlutterErrorDetails	exceptionclearremoveWhereinitialStatestagingpushReplace	canUpdate	navigator_debugLocked
_navigatorinstalloverlayEntriesadding_observedRouteAdditionspreviousPresentpushingwhenCompleteOrCancelidle_flushHistoryUpdatesprevious
isNewFirstpopping_popCompleterisCompletedremoving_observedRouteDeletionsdidAddindex
isReplaceddisposed	disposingwhereemounted_entryWaitingForSubTreeDisposalVoidCallbackremoveListenereveryscheduleMicrotaskaddListenersuitableForTransitionAnimationwillBePresent_updateRestorationIdprimaryRoutesecondaryRouteTickerProviderStateMixin	GlobalKeyOverlayStateQueueFocusScopeNode
FocusScope
Deprecated	FocusNodeFocus
debugLabel	initStatelibrarystack
StackTracecurrentobserver_navigators'getElementForInheritedWidgetOfExactTypereportsRouteUpdateToEngineRestorableNumregisterForRestorationaddAllrestoreEntriesForPagepage	pageBasedhasDatainitialRoutemaprestorationInformationnameddidToggleBucketbucketupdatechangedExternalStateforcedDispose
removeLastgracefuloverlayEntryServicesBindinginstanceaddPostFrameCallbackDuration_heroControllerFromScoperestorePendingKey
deactivateactivatecurrentStateputIfAbsentcanUpdateFrom_updateSettingsfrommarkNeedsExitingDecision_transitionrearrangeOverlay	handleAdd
handlePushhandleDidPopNext	handlePopwillBePresentPredicatehandleCompletehandleRemovalremoveAtrouteInformationUpdateduriUriparse	rearrangeforEachnotifyremoveFirstsuitableForAnnouncement'suitableForTransitionAnimationPredicatelastAnnouncedNextRouteshouldAnnounceChangeToNextlastAnnouncedPreviousRoute	fromPartsDiagnosticsNodeErrorSummaryErrorDescriptionDiagnosticsPropertystyleDiagnosticsTreeStyleerrorProperty!debugIsSerializableForRestorationtoRouteEntryFunctionPluginUtilitiesgetCallbackHandle	anonymousrouteBuilderkReleaseMode
jsonEncodetoEncodableobject	postEventany	lastWhere
indexWhereinsertIteratoriteratormoveNext
firstWherefinalizedidStopUserGesturePointerDownEventpointerPointerEventSchedulerBindingschedulerPhaseSchedulerPhaseRenderAbsorbPointercurrentContextfindAncestorRenderObjectOfTypesetState	absorbingWidgetsBindingcancelPointerelementListeneronPointerDownonPointerUponPointerCancelAbsorbPointerFocusTraversalGrouppolicy	autofocusskipTraversalincludeSemanticsUnmanagedRestorationScopeclipBehaviorinitialEntriesfromSerializableDatasublistcomputeSerializableDatagetCallbackFromHandleCallbackHandlefromRawHandletoRawHandleRestorablePropertyisRegisteredkeysisPresentForRestorationrestorationEnabledisRestorablegetSerializableDatanotifyListeners	setEquals
listEqualsdataMapEntrynavigatorFinder	onPresent
onComplete_getRouteByIdcallRouteSettingsInheritedWidgetTransitionDelegateStatefulWidgetRouteRouteTransitionRecord_NavigatorObservationStateTickerProviderStateMixinRestorationMixin_RestorationInformationRestorableProperty[⁄◊zﬁLüYÁ¬J◊C(ƒ    Ä¶  
dart:async  Äª  dart:collection  Ä’  dart:convert  ÄÏ  Å	developerÅdart:developer  Å  Å"uiÅ%dart:ui  Å+  package:flutter/foundation.dart  ÅU  package:flutter/rendering.dart  Å~  package:flutter/scheduler.dart  Åß  package:flutter/services.dart  Å–  
basic.dart  ÅÂ  binding.dart  Å¸  focus_manager.dart  Ç  focus_scope.dart  Ç4  focus_traversal.dart  ÇS  framework.dart  Çl  heroes.dart  ÇÇ  overlay.dart  Çô  restoration.dart  Ç¥  restoration_properties.dart  Ç⁄  routes.dart  Ç  ticker_provider.dart    	dart:core¿h ¿k¬ñ´ <ÄÜÄ§Ä•Ä∫Ä‘ÄÎÅÅ)Å*ÅTÅ}Å¶ÅŒÅœÅ‰Å˚ÇÇ3ÇRÇkÇÅÇòÇ≥ÇŸÇÔÉÉÉ'ÉKÉpÉ÷É¯ÑÑÑIÑMÑvÑzÑàÑåÑ»ÖÖÖ>ÖBÖsÖ‹Ö›ÜÜÜiÜ∂Ü¡Ü≈ááXáúáÁààuàvàµàÛàÙâEâIâéâ–äää:ä>äâäÃããfãìã‚ã„åå!åSåWåeåiåµå«å‚å˜å˝çKçdçkçlçàçéç‡çÏçÌé"é(éwé¡éÀéÕéŒèèèWè¶èıêêêcêåêêêﬂëëëTëöëÁí/íí∑íªí¸ìLìoìâìßì≠ì˙îîdîeîóî∆î‰îÂïïï5ï;ïÜï√ï‚ïËñ8ñÉñÕóó;ófóÅóÇó”óÂóÎò7òMòSò¢òÚô@ôêôﬂöö\öØö∞ö‰õõ'õEõKõOõPõöõœõ˛úúú,ú2úÅúøú≈ùù!ù'ùsùòù€ù‹ûûûpûƒü	ü&ü3üDüYüZü§ü™üÚü¯†E†Ü†å†€°
°°(°C°}°≤°Ô°˜°ˇ¢¢¢K¢Q¢ù¢“¢ÿ£'£V£c£t£Ü£π§
§X§ß§ˆ•• •t•«¶¶H¶|¶Œß!ßsß√®®e®ñ®°®Ò©?©r©Ø©π©ø©√©ƒ™™™h™ó™§™µ™Â™Ê´6´^´d´¥´“´ÿ¨#¨\¨ß¨Û≠B≠≠Ö≠≈≠Ë≠ÓÆ=ÆkÆqÆÅÆáÆ“ÆÊØ3ØIØyØƒØ»Ø…Ø¸∞)∞*∞t∞∂∞º±±2±R±S±û±§±Û≤B≤W≤à≤ø≤¿≥≥S≥†≥Ï¥¥¥[¥©¥˘µDµîµ≠µ≥∂∂S∂è∂ï∂‰∂˝∑∑)∑B∑S∑W∑X∑¶∑¨∑‡∏-∏Å∏õ∏°∏Óπ?πtπzπ≈∫∫d∫¨∫π∫ ∫Íªª#ª$ªmª~ªÑª”ªÎª¯º	º9º:º|ºÇº“Ω"ΩhΩåΩíΩ·æ æææRæSæôæüæÎø;øåø¶ø¨ø˘¿ @¿ @)¿ @:¿ @v¿ @w¿ @∫¿ @¿¿ A
¿ A[¿ A¨¿ AÂ¿ AÎ¿ A˚¿ B¿ BK¿ Bâ¿ Bñ¿ Bß¿ B…¿ B ¿ C¿ Cc¿ Ci¿ Cû¿ CÔ¿ D2¿ Dt¿ Dπ¿ E ¿ E=¿ EC¿ Eä¿ E’¿ F¿ FU¿ F[¿ Fü¿ Fπ¿ Fø¿ Fœ¿ F’¿ G%¿ GB¿ GO¿ G`¿ GÇ¿ GÉ¿ G¥¿ G∫¿ H¿ H<¿ HB¿ Hê¿ H°¿ Hß¿ HÙ¿ IB¿ Ië¿ I¢¿ IØ¿ I¬¿ IŸ¿ I¸¿ J ¿ J¿ JB¿ JH¿ J}¿ Jî¿ J≤¿ J∆¿ JÃ¿ K?¿ Kd¿ Kx¿ K~¿ K™¿ KÆ¿ KØ¿ K˙¿ L ¿ LP¿ Là¿ Lù¿ Lª¿ Lœ¿ L’¿ MI¿ Mn¿ MÇ¿ Mà¿ M¥¿ M∏¿ Mπ¿ N¿ N¿ N/¿ NM¿ Na¿ Ng¿ N£¿ Nƒ¿ N⁄¿ N‚¿ O¿ O*¿ O2¿ O8¿ OJ¿ ON¿ OO¿ O}¿ OÉ¿ O”¿ P#¿ P_¿ Pe¿ P∑¿ Q¿ Qb¿ Qx¿ Qñ¿ Q™¿ Q∞¿ R¿ R ¿ R"¿ R#¿ R\¿ Rg¿ R}¿ R™¿ R¬¿ R—¿ RÂ¿ RÎ¿ RÏ¿ S¿ S#¿ SJ¿ S`¿ Sa¿ Sã¿ Së¿ S·¿ S¸¿ S˝¿ T	¿ TÅ¿ TÉ¿ TÑ¿ T≤¿ T∂¿ Tˇ¿ UF¿ UJ¿ UX¿ U\¿ U≠¿ UΩ¿ UÏ¿ V'¿ V-¿ V^¿ Vm¿ V{¿ Vã¿ V†¿ V∏¿ Væ¿ Vø¿ VË¿ VÓ¿ W.¿ WE¿ WF¿ Wñ¿ Wß¿ W≠¿ W˝¿ X¿ X¿ X¿ Xf¿ Xx¿ Xó¿ Xò¿ X÷¿ X‹¿ Y+¿ Y8¿ Y`¿ Yè¿ Y¨¿ Y∞¿ Y±¿ YÍ¿ Y¿ ZF¿ ZQ¿ Z¿ ZÄ¿ Zå¿ Z‰¿ ZÊ¿ ZÁ¿ [%¿ [?¿ [{¿ [±¿ [≤¿ [˙¿ \I¿ \É¿ \Ω¿ ]¿ ]S¿ ]û¿ ]Ë¿ ^¿ ^X¿ ^Y¿ ^¿ ^Ö¿ ^–¿ ^Ò¿ _9¿ _:¿ _`¿ _f¿ _¨¿ _Õ¿ `¿ `¿ `<¿ `B¿ `ç¿ `π¿ `ø¿ a¿ aO¿ aü¿ aæ¿ b¿ b	¿ bD¿ bí¿ bì¿ b’¿ b€¿ c*¿ cf¿ c∫¿ cª¿ c¯¿ c˛¿ d:¿ dZ¿ d\¿ d]¿ dê¿ dî¿ d›¿ e+¿ ex¿ e|¿ eÀ¿ f¿ ff¿ f∞¿ f‰¿ g¿ g9¿ gH¿ gu¿ gè¿ gï¿ gñ¿ gÁ¿ gÙ¿ h¿ h&¿ h@¿ hZ¿ h[¿ hò¿ hº¿ hΩ¿ i	¿ i1¿ i7¿ iy¿ i∏¿ iæ¿ iŒ¿ i‘¿ j#¿ jZ¿ jì¿ j¸¿ k¿ k¿ k¿ kj¿ kz¿ kÄ¿ k–¿ kÙ¿ k˙¿ l<¿ lj¿ lp¿ lÄ¿ lÜ¿ l“¿ m¿ mI¿ mÇ¿ mí¿ m≤¿ mŒ¿ n&¿ nP¿ n•¿ n˜¿ oH¿ o}¿ o°¿ oπ¿ oƒ¿ oÃ¿ oﬂ¿ oÈ¿ p¿ p¿ p¿ p¿ pM¿ p|¿ pÄ¿ pÇ¿ pÉ¿ p“¿ q¿ qC¿ qh¿ qÑ¿ qÖ¿ q÷¿ q‹¿ r,¿ rw¿ rõ¿ rƒ¿ r≈¿ s¿ s¿ sk¿ sµ¿ sŸ¿ t¿ t¿ t8¿ t>¿ tã¿ tÒ¿ u@¿ uV¿ uW¿ uè¿ uï¿ u‚¿ vH¿ vô¿ vÆ¿ vØ¿ vÂ¿ vÎ¿ w7¿ wà¿ w¶¿ wÀ¿ wÃ¿ x¿ x¿ xZ¿ xß¿ xı¿ y¿ y ¿ yZ¿ y`¿ y¨¿ y˙¿ z7¿ zO¿ zQ¿ zR¿ z£¿ zÀ¿ zœ¿ {¿ {q¿ {u¿ {¿¿ {ƒ¿ {ÿ¿ |'¿ |t¿ |ó¿ |õ¿ |ß¿ |Ú¿ }¿ }2¿ }t¿ }‘¿ ~9¿ ~D¿ ~ì¿ ~ó¿ ~‰¿ ¿ @¿ L¿ n¿ r¿ |¿ ﬁ¿ Ä¿ ÄI¿ Äµ¿ Äﬁ¿ Å/¿ Å^¿ Ån¿ Å{¿ Åá¿ Å∞¿ Å¥¿ Åæ¿ Å÷¿ Åﬁ¿ Å‰¿ ÅË¿ Å¿ Ç ¿ Ç¿ Ç¿ Ç¿ Ça¿ Ç~¿ ÇÕ¿ É¿ É*¿ Ét¿ Éí¿ Éì¿ É√¿ Ñ¿ Ñ]¿ Ñæ¿ Ñ≈¿ Ö¿ Ö2¿ Öp¿ Ö¨¿ Ö≥¿ Öı¿ Ö¸¿ Ü¿ Üh¿ Üx¿ Ü≈¿ ÜÏ¿ á:¿ áa¿ á∞¿ à¿ à¿ à-¿ à4¿ à_¿ àf¿ àü¿ à¶¿ à‘¿ â$¿ âE¿ âL¿ âó¿ â‰¿ âÙ¿ äO¿ äµ¿ äı¿ ãE¿ ãÑ¿ ãÀ¿ å7¿ åw¿ åÉ¿ åç¿ åï¿ åÊ¿ ç¿ ç@¿ çA¿ çì¿ ç¯¿ é¿ éM¿ éó¿ é£¿ é›¿ è¿ è¿ èK¿ èU¿ è]¿ è^¿ èl¿ è≤¿ è’¿ ê%¿ ên¿ êw¿ êä¿ êî¿ êï¿ ê©¿ ê≠¿ êÆ¿ ê˘¿ ëE¿ ëK¿ ëú¿ ë‰¿ í!¿ ín¿ í∫¿ ì¿ ì5¿ ì;¿ ìá¿ ì’¿ î!¿ îl¿ îª¿ ï¿ ïS¿ ïâ¿ ï’¿ ñ ¿ ñ^¿ ñà¿ ñπ¿ ó¿ óT¿ ó§¿ óÚ¿ òA¿ òè¿ ò≠¿ ò≥¿ ô¿ ôP¿ ôü¿ ô ¿ ô–¿ ö ¿ ö]¿ ö®¿ öÛ¿ õ<¿ õã¿ õÕ¿ õ”¿ ú¿ ú	¿ ú1¿ ú7¿ úm¿ ús¿ úö¿ ú†¿ úÀ¿ ù¿ ù4¿ ù:¿ ùc¿ ùi¿ ù∞¿ ù˘¿ ùˇ¿ û¿ û¿ ûf¿ ûå¿ û‹¿ ü¿ üT¿ üz¿ ü∆¿ †¿ †b¿ †§¿ †Û¿ °5¿ °a¿ °ü¿ °˚¿ ¢\¿ ¢b¿ ¢d¿ ¢e¿ ¢∂¿ ¢ˆ¿ ¢˙¿ £K¿ £ô¿ £Ó¿ §+¿ §n¿ §±¿ §ﬁ¿ •¿ •¿ •¿ •F¿ •Ñ¿ •‡¿ ¶A¿ ¶H¿ ¶ì¿ ¶„¿ ß1¿ ßs¿ ßø¿ ®¿ ®A¿ ®Q¿ ®Y¿ ®ì¿ ®Ú¿ ©c¿ ©û¿ ©Î¿ ©¸¿ ™N¿ ™X¿ ™x¿ ™„¿ ´1¿ ´Ä¿ ´Ã¿ ¨¿ ¨X¿ ¨¨¿ ¨˘¿ ≠¿ ≠b¿ ≠r¿ ≠Ä¿ ≠å¿ ≠ñ¿ ≠û¿ ≠√¿ ≠ƒ¿ Æ¿ ÆL¿ ÆR¿ ÆS¿ Æä¿ Æ≈¿ Æ∆¿ Ø¿ ØY¿ Øç¿ Ø‚¿ ∞¿ ∞¿ ∞8¿ ∞B¿ ∞J¿ ∞h¿ ∞û¿ ∞§¿ ∞∏¿ ∞º¿ ∞æ¿ ∞ø¿ ± ¿ ±¿ ±F¿ ±é¿ ±π¿ ±ﬂ¿ ±‡¿ ≤*¿ ≤.¿ ≤}¿ ≤Ã¿ ≥¿ ≥o¿ ≥¿¿ ≥˝¿ ¥¿ ¥¿ ¥ ¿ ¥p¿ ¥ø¿ µ¿ µ^¿ µ´¿ µ¯¿ ∂¿ ∂¿ ∂m¿ ∂∫¿ ∂Ú¿ ∑¿ ∑¿ ∑d¿ ∑h¿ ∑á¿ ∑ã¿ ∑‘¿ ∏¿ ∏`¿ ∏™¿ ∏Ò¿ π¿ π¿ πj¿ π¥¿ ∫¿ ∫M¿ ∫ó¿ ∫‚¿ ª1¿ ªz¿ ªö¿ ªû¿ ª≈¿ ª…¿ º¿ ºg¿ ºµ¿ ºŒ¿ º“¿ Ω ¿ Ωp¿ Ωñ¿ Ωö¿ Ω¶¿ Ω∏¿ ΩÏ¿ ΩÚ¿ Ω˙¿ Ω˛¿ æA¿ æã¿ æ∫¿ ææ¿ æ ¿ æˇ¿ ø'¿ ø@¿ øx¿ øê¿ øØ¿ ø◊¿ øı¿ ¿¿ ¿.¿ ¿=¿ ¿J¿ ¿U¿ ¿^¿ ¿f¿ ¿n¿ ¿r¿ ¿∏¿ ¿˚¿ ¡2¿ ¡6¿ ¡Ä¿ ¡´¿ ¡Ø¿ ¡ª¿ ¡◊¿ ¡ﬂ¿ ¡„¿ ¬.¿ ¬y¿ ¬∫¿ √¿ √!¿ √%¿ √J¿ √N¿ √ì¿ √’¿ ƒ¿ ƒC¿ ƒG¿ ƒl¿ ƒ∂¿ ƒ˛¿ ≈H¿ ≈L¿ ≈X¿ ≈j¿ ≈Ñ¿ ≈ƒ¿ ≈Ó¿ ∆=¿ ∆å¿ ∆€¿ ∆Ê¿ ∆¿ ∆ˆ¿ ∆˛¿ «¿ «¿ «#¿ «/¿ «W¿ «_¿ «c¿ «Ö¿ «â¿ «“¿ »¿ »¿ »Z¿ »¶¿ »µ¿ »π¿ …¿ …A¿ …E¿ …Q¿ …ö¿ …¬¿ …Ÿ¿ …˚¿   ¿  X¿  e¿  p¿  x¿  Ä¿  à¿  å¿  ‘¿ À¿ À:¿ À>¿ Àä¿ À∆¿ Ã¿ Ãb¿ Ãq¿ Ãu¿ Ãä¿ Ãé¿ Ã⁄¿ Õ+¿ Õz¿ Õ•¿ Õ©¿ ÕÈ¿ Œ2¿ Œw¿ Œª¿ ŒÚ¿ Œˆ¿ œG¿ œî¿ œﬂ¿ œ„¿ œ˘¿ œ˝¿ –M¿ –ö¿ –Î¿ —¿ —"¿ —n¿ —º¿ “¿ “Z¿ “^¿ “j¿ “û¿ “≥¿ “Ê¿ ” ¿ ”)¿ ”|¿ ”õ¿ ”π¿ ”ﬁ¿ ‘)¿ ‘C¿ ‘P¿ ‘[¿ ‘c¿ ‘k¿ ‘s¿ ‘w¿ ‘¥¿ ‘¸¿ ’J¿ ’ï¿ ’€¿ ’Ò¿ ’ı¿ ÷D¿ ÷e¿ ÷i¿ ÷Ñ¿ ÷à¿ ÷‘¿ ◊$¿ ◊u¿ ◊≤¿ ◊∂¿ ◊«¿ ◊À¿ ÿ¿ ÿf¿ ÿ°¿ ÿ•¿ ÿı¿ ŸB¿ Ÿë¿ Ÿﬁ¿ ⁄-¿ ⁄C¿ ⁄G¿ ⁄ë¿ ⁄‚¿ ⁄˙¿ ⁄˛¿ €¿ €`¿ €î¿ €ò¿ €·¿ ‹1¿ ‹5¿ ‹~¿ ‹Ø¿ ‹≥¿ ‹˝¿ ›¿ ›¿ ›`¿ ›´¿ ›˙¿ ﬁJ¿ ﬁx¿ ﬁ|¿ ﬁ†¿ ﬁ§¿ ﬁÒ¿ ﬂ;¿ ﬂà¿ ﬂŸ¿ ﬂÙ¿ ﬂ¯¿ ‡¿ ‡¿ ‡`¿ ‡¨¿ ‡ˆ¿ ·D¿ ·f¿ ·j¿ ·¥¿ ·≈¿ ‚¿ ‚D¿ ‚ë¿ ‚‚¿ „,¿ „z¿ „∆¿ „Ì¿ „Ò¿ ‰5¿ ‰É¿ ‰œ¿ Â¿ Â@¿ Âé¿ Âî¿ Â’¿ Ê¿ Ê¿ Êd¿ Êx¿ Êá¿ Ê±¿ Ê≈¿ Ê‹¿ Á'¿ ÁA¿ ÁZ¿ Á§¿ Á—¿ Á¯¿ Ë*¿ ËH¿ Ëe¿ ËØ¿ Ëµ¿ Ë∂¿ ËÚ¿ Ë¯¿ È@¿ Èç¿ È∆¿ Í¿ Í¿ Íf¿ Íü¿ Í•¿ Íı¿ ÎB¿ Îë¿ Î‚¿ Ï	¿ Ï¿ ÏZ¿ Ï™¿ Ï¯¿ Ì:¿ ÌV¿ Ì\¿ Ì≠¿ Ì·¿ ÌÁ¿ Ó2¿ ÓÇ¿ Óπ¿ Ó‹¿ Ó›¿ Ô)¿ ÔQ¿ ÔW¿ Ô§¿ Ô”¿ ÔŸ¿ %¿ K¿ Q¿ ¢¿ Ò¿ ÒA¿ Òy¿ Òù¿ Òû¿ ÒÓ¿ Ú¿ Ú¿ Úf¿ Úû¿ Úü¿ Ú ¿ Ú–¿ Û ¿ Û¿ ÛS¿ ÛÖ¿ Û£¿ Û§¿ Û‚¿ Ù	¿ Ù
¿ ÙI¿ ÙO¿ Ùõ¿ ÙÏ¿ ı¿ ı¿ ıY¿ ıñ¿ ıº¿ ıΩ¿ ıÎ¿ ˆ¿ ˆ¿ ˆf¿ ˆy¿ ˆ¿ ˆæ¿ ˜¿ ˜]¿ ˜î¿ ˜ö¿ ˜Ê¿ ¯4¿ ¯@¿ ¯F¿ ¯â¿ ¯’¿ ˘%¿ ˘L¿ ˘R¿ ˘b¿ ˘h¿ ˘µ¿ ˘«¿ ˙¿ ˙<¿ ˙á¿ ˙–¿ ˚¿ ˚V¿ ˚k¿ ˚è¿ ˚ê¿ ˚ﬁ¿ ¸(¿ ¸.¿ ¸u¿ ¸ø¿ ˝
¿ ˝Z¿ ˝©¿ ˝˜¿ ˛D¿ ˛î¿ ˛≥¿ ˛»¿ ˇ¿ ˇ¿ ˇ<¿ ˇB¿ ˇR¿ ˇX¿ ˇ≤¿ ˇŸ¿ ¿ ¿ X¿ Ö¿ ã¿ Ω¿ √¿¿a¿w¿}¿»¿ˇ¿M¿ù¿Í¿/¿|¿À¿‘¿¿¿S¿Å¿á¿‘¿%¿r¿x¿ƒ¿˜¿B¿í¿‡¿Ù¿˙¿I¿ó¿Â¿0¿;¿A¿Z¿É¿Ñ¿∫¿¿¿	¿	#¿	)¿	b¿	}¿	~¿	—¿
¿
¿
&¿
A¿
B¿
ì¿
¢¿
®¿
ﬁ¿%¿k¿q¿∑¿¿D¿h¿n¿ø¿Õ¿”¿¿#¿m¿}¿í¿ò¿⁄¿(¿a¿v¿|¿≤¿Ù¿E¿í¿»¿Œ¿¿K¿`¿f¿|¿Ç¿•¿´¿π¿◊¿
¿¿¿.¿4¿J¿P¿ú¿©¿Ø¿Ω¿ﬂ¿¸¿¿%¿L¿j¿å¿ô¿§¿¨¿∂¿»¿Œ¿‰¿Í¿6¿<¿J¿n¿º¿◊¿ı¿˚¿¿Y¿c¿k¿q¿ç¿™¿Ω¿”¿#¿.¿6¿@¿R¿X¿h¿n¿∏¿€¿Ô¿!¿;¿S¿j¿q¿¡¿≈¿∆¿¿&¿,¿l¿ª¿¿@¿U¿[¿é¿î¿ﬁ¿ ¿i¿π¿ÿ¿ﬁ¿ ¿Y¿n¿t¿¿¿¿]¿™¿˜¿¿(¿.¿D¿J¿m¿s¿Å¿¢¿…¿‹¿Ú¿¿6¿W¿d¿o¿w¿Å¿ì¿ß¿ﬂ¿˘¿¿(¿/¿â¿ç¿é¿ﬁ¿,¿s¿y¿∫¿ ¿ S¿ ú¿ Î¿!9¿!Ç¿!à¿!œ¿"¿"¿"g¿"¥¿"Ù¿#B¿#ê¿#›¿$
¿$¿$a¿$o¿$u¿$√¿%¿%
¿%[¿%n¿%É¿%â¿%»¿%Œ¿&¿&¿&¿&#¿&F¿&L¿&Z¿&}¿&∆¿&Œ¿&ÿ¿&Í¿&¿' ¿'¿'W¿'ä¿'û¿'Ô¿(	¿(!¿(1¿(H¿(O¿(æ¿(¬¿(√¿)¿)a¿)®¿)Æ¿)˘¿*G¿*ñ¿*ÿ¿*Ì¿*Û¿+1¿+7¿+~¿+Ñ¿+Õ¿+”¿+È¿+Ô¿,¿,¿,&¿,J¿,ô¿,°¿,´¿,Ω¿,—¿-(¿-B¿-Z¿-j¿-Å¿-à¿.¿.¿.¿.S¿.å¿.í¿.Œ¿/¿/¿/b¿/®¿/Æ¿/˝¿0>¿0å¿0€¿1'¿1v¿1∆¿1˝¿2¿2T¿2b¿2h¿2∂¿2¿2ˆ¿3O¿3d¿3j¿3©¿3Ø¿3‚¿3Ë¿3˛¿4¿4'¿4-¿4;¿4_¿4¶¿4Æ¿4∏¿4 ¿4–¿4‡¿4Ê¿51¿5]¿5q¿5Ω¿5◊¿5Ô¿5ˇ¿6¿6¿6á¿6ã¿6å¿6Ÿ¿7¿7¿7^¿7ß¿7ˆ¿88¿8M¿8S¿8å¿8í¿8Ÿ¿8ﬂ¿9(¿9.¿9D¿9J¿9m¿9s¿9Å¿9ü¿9Í¿9Ú¿9¸¿:¿:"¿:t¿:é¿:¶¿:∂¿:Õ¿:‘¿;H¿;L¿;M¿;õ¿;Î¿<¿<¿<Y¿<†¿<œ¿<’¿=¿=S¿=Y¿=ß¿=Ò¿=˜¿>D¿>q¿>w¿>∂¿?¿?¿?$¿?p¿?ø¿?¸¿@<¿@Ü¿@‘¿A"¿AH¿AN¿Aü¿A≠¿A≥¿B¿B¿BW¿Bo¿BÑ¿Bä¿B…¿Bœ¿C¿C¿C¿C$¿CG¿CM¿C[¿C{¿C÷¿Cﬁ¿CË¿C˙¿D ¿D¿D¿Df¿Dï¿D©¿DÈ¿E¿E¿E<¿ES¿EZ¿E∆¿E ¿EÀ¿F¿Fi¿Fç¿Fì¿F·¿G2¿GÅ¿G√¿Gÿ¿Gﬁ¿H¿H%¿Hl¿Hr¿Hª¿H¡¿H◊¿H›¿I ¿I¿I¿I4¿Iô¿I°¿I´¿IΩ¿I—¿J¿J1¿JJ¿Jj¿JÅ¿Jà¿J˛¿K¿K¿KP¿Ke¿Kk¿Kú¿K‚¿L/¿Lo¿Lì¿Lô¿LÍ¿L¯¿L˛¿MH¿M]¿Mc¿M¢¿M®¿Mæ¿Mƒ¿MÁ¿MÌ¿M˚¿N¿N4¿NG¿Nj¿N©¿N∂¿N¡¿N…¿N”¿NÂ¿NÎ¿N˚¿O¿OM¿Oi¿O}¿O—¿Oˇ¿P¿P¿PM¿Pb¿Ph¿P£¿PÒ¿Q@¿Qr¿Qá¿Qç¿Qª¿Q¡¿Q¸¿RK¿Ró¿R„¿S%¿Sr¿S∂¿Sº¿T¿TS¿Th¿Tn¿T∑¿TΩ¿T”¿Tˆ¿T¸¿UX¿Uj¿U~¿V¿VZ¿V^¿V_¿VØ¿V˛¿W8¿W>¿Wz¿W∆¿X¿Xf¿X∂¿Y¿YB¿YH¿Yî¿Y·¿Z!¿Zo¿Z±¿Z∑¿[¿[¿[¿[j¿[´¿[¿¿[∆¿\¿\¿\!¿\'¿\J¿\P¿\^¿\|¿\´¿\æ¿\·¿]$¿]1¿]<¿]D¿]N¿]`¿]f¿]v¿]|¿]Ã¿]˚¿^¿^ï¿^Ë¿^Ï¿^Ì¿_=¿_à¿_¬¿_»¿`¿`\¿`¶¿`Ë¿`˝¿a¿a<¿aB¿az¿aÄ¿a…¿aœ¿aÂ¿b¿b¿bv¿bà¿bú¿cP¿c«¿cÀ¿cÃ¿d¿d`¿dÄ¿dÜ¿d≈¿e¿e;¿eA¿eÉ¿eø¿e≈¿f¿f]¿fc¿f∞¿f›¿f„¿g)¿gz¿gƒ¿h¿h]¿h™¿h˙¿i;¿iA¿ií¿i†¿i¶¿iÙ¿j	¿j¿jN¿jT¿jj¿jp¿jì¿jô¿jß¿jÕ¿j˘¿k¿kf¿kä¿kï¿kù¿kß¿kπ¿kø¿kœ¿k’¿l¿lK¿l_¿lﬁ¿m+¿m/¿m0¿my¿m¿¿m‡¿mÊ¿n/¿nÄ¿n ¿o¿o!¿o'¿oc¿oi¿o°¿oß¿o¿oˆ¿p¿p/¿p5¿p¢¿p¥¿p»¿qz¿qÓ¿qÚ¿qÛ¿r@¿r`¿rf¿rö¿rÊ¿s5¿sÑ¿s‘¿s¸¿t¿tR¿tz¿tÄ¿t—¿u¿u`¿u®¿uı¿vF¿v_¿ve¿vµ¿v◊¿v›¿w+¿w@¿wF¿wV¿w\¿w´¿wˆ¿x?¿xk¿x¿y¿yW¿y[¿y\¿y©¿y…¿yœ¿z¿z\¿z´¿z›¿zÚ¿z¯¿{)¿{/¿{g¿{m¿{∂¿{ ¿|Ñ¿}¿}¿}¿}Y¿}ß¿}¬¿}»¿~¿~P¿~ü¿~Ó¿>¿f¿l¿º¿‰¿Í¿Ä;¿Äz¿Ä ¿Å¿Å_¿Å∞¿Å…¿Åœ¿Ç¿Ç2¿Ç8¿ÇH¿ÇN¿Çõ¿ÇÆ¿Ç˛¿É-¿ÉA¿É—¿Ñ6¿Ñ:¿Ñ;¿Ñà¿Ñ÷¿ÑÒ¿Ñ˜¿Ö?¿Öç¿Ö€¿Ü#¿Ü8¿Ü>¿Üy¿Ü¿Ü∑¿ÜΩ¿á¿á¿á·¿àt¿àx¿ày¿à…¿à◊¿à›¿â¿â_¿âØ¿â»¿âŒ¿ä¿ä¿ä#¿ä3¿ä9¿äÑ¿äú¿ä…¿ã¿ã?¿ãC¿ãD¿ãï¿ãÊ¿å
¿å¿åE¿åê¿å·¿å¯¿å˛¿çI¿çä¿çê¿ç‡¿é.¿él¿ér¿é√¿è
¿è¿è[¿è¶¿èµ¿è ¿è–¿è‡¿èÊ¿ê4¿êq¿ê¬¿êÛ¿ë¿ë`¿ëñ¿ëö¿ëõ¿ëÈ¿ë˛¿í¿í4¿íÑ¿í“¿ì¿ìd¿ìj¿ì∂¿î¿îM¿îú¿îÍ¿ï5¿ï;¿ïã¿ï⁄¿ñ¿ñ=¿ñC¿ñî¿ñö¿ñÁ¿ó¿ó#¿ó)¿ó?¿óE¿ó|¿óÇ¿óê¿ó¶¿ó∆¿óŒ¿óÿ¿óÍ¿ó¿ò"¿ò(¿ò6¿òM¿òä¿òí¿òú¿ò∞¿ò¸¿ô&¿ô*¿ô+¿ôx¿ôÆ¿ô¥¿ôÈ¿ö0¿ö_¿öe¿öÆ¿öŸ¿öﬂ¿õ¿õ$¿õj¿õ¿õÖ¿õõ¿õ°¿õƒ¿õ ¿õÿ¿õÔ¿ú3¿ú;¿úE¿úW¿ú†¿úœ¿ú”¿ú‘¿ù#¿ùT¿ùZ¿ùí¿ù‚¿û/¿ûG¿ûM¿ûí¿û·¿ü)¿üu¿ü∆¿üﬂ¿üÂ¿†/¿†M¿†S¿†ë¿†¶¿†¨¿†˝¿°1¿°y¿°Æ¿°≤¿°≥¿¢¿¢R¿¢{¿¢Å¿¢æ¿£¿£[¿£s¿£y¿£æ¿§¿§U¿§°¿§Ú¿•¿•¿•b¿•™¿•∞¿•Ó¿¶¿¶V¿¶ñ¿¶ö¿¶õ¿¶Î¿¶˙¿ß ¿ß#¿ß)¿ß7¿ßS¿ßc¿ßs¿ßï¿ßü¿ß•¿ßˆ¿®?¿®j¿®p¿®¡¿©	¿©¿©O¿©k¿©á¿©ß¿©Æ¿©ˆ¿™¿™^¿™ë¿™ó¿™∞¿´¿´¿´e¿´k¿´l¿´|¿´õ¿´∑¿¨¿¨n¿¨Æ¿¨π¿¨¡¿¨‘¿¨ﬁ¿¨ı¿¨˘¿¨˙¿≠J¿≠a¿≠g¿≠ä¿≠ê¿≠û¿≠·¿Æ¿Æ¿Æ.¿Æ@¿Æd¿Æl¿Æv¿Æ|¿ÆÕ¿Ø¿ØA¿ØG¿Øî¿Øö¿Ø⁄¿Ø¸¿∞¿∞8¿∞?¿∞á¿∞¶¿∞Ô¿±"¿±(¿±A¿±ó¿±§¿±ˆ¿±¸¿≤¿≤¿≤¿≤N¿≤T¿≤£¿≤≈¿≤À¿≥¿≥j¿≥∏¿≥Œ¿≥‘¿¥$¿¥p¿¥ø¿¥˙¿µj¿µ®¿µÛ¿∂@¿∂q¿∂ñ¿∂®¿∂Í¿∂ˇ¿∑¿∑{¿∑æ¿∑Á¿∏¿∏6¿∏W¿∏m¿∏ö¿∏≥¿∏√¿π&¿π0¿π8¿πY¿πm¿πë¿π≤¿πÀ¿∫¿∫K¿∫Ω¿ª¿ª!¿ª.¿ªE¿ªS¿ªk¿ªs¿ª¥¿º¿ºa¿º«¿ºÕ¿Ω¿Ω¿Ω_¿ΩÆ¿Ω˜¿æ¿æY¿æs¿æ“¿æÿ¿ø¿ø¿ø¿ø¿øG¿øI¿øJ¿øÅ¿øÑ¿ø∂¿ø€¿¿ ¿¿&¿¿M¿¿z¿¿°¿¿«¿¿˜¿¡'¿¡W¿¡á¿¡∑¿¡Á¿¬¿¬K¿¬z¿¬®¿¬’¿√¿√,¿√N¿√x¿√¢¿√–¿√¯¿ƒ¿ƒD¿ƒo¿ƒó¿ƒø¿ƒÁ¿≈¿≈8¿≈]¿≈á¿≈¨¿≈’¿≈˙¿∆¿∆S¿∆Ä¿∆É¿∆œ¿∆ˆ¿«F¿«]¿«∂¿«ª¿«Ÿ¿«ﬁ¿»Z¿»Ø¿»⁄¿…3¿…ö¿…ﬁ¿ @¿ c¿ h¿ ä¿ è¿ ¯¿À¿ÀK¿ÀÉ¿ÀÎ¿Ã@¿Ã¶¿ÃÓ¿Õ"¿Õm¿Õ∫¿ÕŸ¿Œ¿Œ¿Œ¿ŒG¿ŒH¿Œr¿Œ≠¿Œ˙¿œ¿œ¿œ¿œO¿œ^¿œp¿œù¿œº¿œﬂ¿–¿–'¿–]¿–è¿–¬¿–¸¿—0¿—<¿—b¿—c¿—o¿—ç¿—∆¿—ﬁ¿—ﬂ¿“¿“¿“8¿“°¿”¿”e¿”f¿”∂¿”¸¿‘¿‘j¿‘≤¿‘«¿’	¿’U¿’[¿’Ö¿’≈¿’À¿’‹¿’‡¿’·¿÷¿÷&¿÷:¿÷@¿÷V¿÷j¿÷p¿÷µ¿÷€¿÷ﬂ¿÷‡¿◊D¿◊u¿◊ô¿◊ø¿◊·¿◊ˆ¿ÿ#¿ÿN¿ÿy¿ÿ≤¿ÿπ¿ÿΩ¿ÿæ¿Ÿ`¿ŸÏ¿⁄¿⁄¿⁄<¿⁄â¿⁄±¿⁄∏¿⁄¿€¿€'¿€T¿€≥¿€Î¿‹¿‹E¿‹|¿‹´¿‹÷¿›¿›J¿›ì¿›ù¿›ß¿›¥¿›Î¿ﬁ¿ﬁ8¿ﬁ>¿ﬁT¿ﬁu¿ﬁ{¿ﬁ|¿ﬁ‡¿ﬂ¿ﬂK¿ﬂT¿ﬂa¿ﬂñ¿ﬂ√¿ﬂ˛¿‡¿‡¿‡¿‡¿‡H¿‡k¿‡õ¿‡ü¿‡†¿‡∆¿‡Ã¿·¿·\¿·b¿·≥¿·œ¿‚3¿‚W¿‚Ç¿‚Æ¿‚Ÿ¿„#¿„i¿„Ç¿„ß¿„∫¿„¿¿„Ë¿‰¿‰'¿‰-¿‰G¿‰X¿‰\¿‰]¿‰w¿‰ù¿‰∑¿Â¿Â1¿Â5¿Â6¿Âû¿Â¬¿ÂÌ¿Ê¿Ê>¿Êk¿Ê®¿Ê±¿Ê∑¿Êª¿Êº¿Á¿Á ¿ÁI¿Á_¿ÁÄ¿ÁÜ¿Áä¿Áã¿Á§¿Á•¿Á¿¿Á◊¿ÁÛ¿Ë¿Ë¿Ë ¿ËH¿ËI¿Ëx¿Ë•¿Ë±¿Ë‚¿È2¿ÈÄ¿Èá¿È≈¿È”¿ÈŸ¿È¿Í¿ÍG¿ÍK¿ÍL¿Í¿Íª¿Í«¿Í¯¿ÎH¿Îñ¿Îù¿Î€¿ÎÈ¿ÎÔ¿Ï¿Ï2¿ÏN¿Ï{¿Ï¿ÏÄ¿Ïî¿Ï‘¿Ì ¿Ì¿Ì¿ÌB¿ÌH¿Ìô¿Ì±¿Ì ¿Ó¿Ó8¿ÓM¿ÓQ¿ÓR¿ÓÉ¿Óâ¿ÓŸ¿Ô¿Ô@¿ÔF¿Ôê¿Ô£¿ÔÂ¿¿¿d¿±¿Û¿ÒB¿Òì¿Òî¿Ú¿Ú¿Ú$¿Ú;¿ÚI¿ÚO¿ÚP¿Úy¿Úí¿Ú ¿Û¿Û:¿Û\¿Ûr¿Ûè¿ÛØ¿Û¬¿ÛÍ¿Ù¿ÙT¿Ù¢¿ÙÔ¿ı>¿ıc¿ıp¿ı∏¿ıÒ¿ˆ¿ˆd¿ˆ≤¿ˆ“¿˜¿˜.¿˜<¿˜{¿˜ò¿˜¶¿˜∞¿˜π¿˜‹¿˜‚¿˜Ê¿˜Á¿¯¿¯A¿¯}¿¯Å¿¯Ç¿¯ô¿¯⁄¿˘¿˘¿˘¿˘s¿˘t¿˘ô¿˘‹¿˙¿˙¿˙¿˙J¿˙ã¿˙»¿˙Ã¿˙Õ¿˚¿˚=¿˚ã¿˚«¿˚’¿˚¿¸/¿¸6¿¸:¿¸;¿¸É¿¸ı¿˝E¿˝F¿˝ç¿˝≈¿˝…¿˝ ¿˝÷¿˛*¿˛+¿˛7¿˛¿˛¨¿˛≠¿˛˜¿˛¯¿ˇ¿ˇ¿ˇ'¿ˇk¿ˇΩ¿ ¿ ¿ @¿ D¿ E¿ Q¿ g¿ s¿ ∑¿¿[¿b¿ä¿é¿è¿õ¿¡¿Õ¿¿o¿√¿ ¿‰¿¿¿¿¿J¿V¿ß¿¯¿L¿Z¿a¿Ä¿™¿Æ¿Ø¿ª¿‘¿‡¿1¿Ä¿‘¿‚¿È¿˜¿!¿%¿&¿o¿ñ¿√¿¿¿¿¿/¿H¿_¿x¿}¿¢¿ ¿À¿ˆ¿¯¿˘¿9¿V¿n¿à¿ç¿é¿ö¿∆¿˙¿˛¿	 ¿	¿	@¿	\¿	t¿	é¿	ì¿	î¿	†¿	Ã¿	ˇ¿
¿
¿
¿
H¿
g¿
¿
ô¿
û¿
ü¿
´¿
◊¿¿¿¿¿W¿w¿è¿©¿Æ¿Ø¿ª¿Á¿2¿6¿8¿9¿a¿e¿Æ¿¿:¿j¿∑¿«¿Õ¿¿X¿^¿≠¿Ò¿=¿Å¿‡¿?¿@¿ï¿§¿“¿
¿¿P¿Q¿ë¿”¿‘¿/¿0¿\¿]¿ë¿í¿û¿≥¿ ¿⁄¿¿8¿\¿Ä¿°¿»¿¿3¿D¿m¿ñ¿•¿≤¿·¿¿&¿M¿î¿ª¿Ã¿ı¿¿-¿:¿D¿L¿_¿i¿™¿‘¿
¿¿<¿=¿ä¿ø¿¸¿B¿j¿¶¿ß¿‘¿¿¿¿¿P¿ß¿®¿¿¿¿W¿ù¿⁄¿€¿¿C¿a¿é¿è¿∆¿¿H¿u¿ò¿±¿‹¿Â¿Û¿¿i¿∏¿¡¿‹¿,¿2¿3¿Å¿™¿‹¿˛¿A¿I¿k¿Ñ¿Æ¿¿¿ˇ¿ 6¿ K¿ k¿ ú¿ ﬁ¿!¿!=¿!`¿!ß¿!π¿!—¿!‡¿!Ì¿!¯¿" ¿"¿"¿"¿".¿"z¿"»¿#¿#2¿#9¿#T¿#å¿#®¿#·¿#Â¿#Ê¿#Ú¿$)¿$O¿$i¿$ñ¿$£¿$«¿$Õ¿$—¿$›¿%¿%¿%$¿%E¿%h¿%©¿%Ÿ¿&¿&	¿&¿&¿&F¿&o¿&µ¿&“¿&Â¿&Ì¿'¿'Q¿'W¿'[¿'\¿'¨¿'ˆ¿(¿(¿(-¿(D¿(Q¿(n¿(t¿(x¿(y¿(ª¿(Ù¿)¿)p¿)Ñ¿)”¿*#¿*T¿*â¿*ÿ¿+)¿+z¿+Ω¿,"¿,U¿,®¿,˜¿-¿-W¿-É¿-¨¿-€¿.1¿.Ñ¿.®¿.“¿/'¿/y¿/∞¿/…¿/˙¿0+¿0B¿0W¿0i¿0y¿0â¿0ï¿0¨¿0∫¿0˚¿1¿1S¿1l¿1•¿1Ó¿1ˆ¿2*¿2M¿2S¿2W¿2X¿2}¿2©¿3¿3¿3C¿3I¿3M¿3N¿3Z¿3à¿3Æ¿3æ¿3Û¿4¿4@¿4d¿4Ö¿4¨¿4¿5¿5(¿5Q¿5z¿5â¿5ñ¿5≈¿5È¿6
¿61¿6x¿6ü¿6∞¿6Ÿ¿7¿7¿7¿7(¿70¿7C¿7M¿7Ä¿7∆¿7˛¿8¿8I¿8u¿8≠¿8µ¿8ÿ¿8ﬁ¿9¿9.¿9R¿9v¿9ó¿9æ¿:¿:)¿::¿:c¿:å¿:õ¿:®¿:≤¿:«¿:”¿:È¿:Ô¿:¿; ¿;J¿;P¿;T¿;U¿;~¿;é¿;Ω¿;Ù¿<¿<7¿<h¿<ã¿<ï¿<ù¿<∞¿<∫¿<æ¿<ø¿<À¿<·¿=%¿=[¿=a¿=y¿=}¿=~¿=ä¿=û¿=¥¿=¯¿>"¿>X¿>^¿>b¿>c¿>o¿>Ç¿>ù¿>≠¿>»¿>€¿>Â¿>ı¿?;¿?g¿?o¿?Ç¿?å¿?≠¿?∆¿?Î¿@¿@A¿@n¿@É¿@º¿@÷¿@⁄¿@€¿A¿AW¿AX¿Aè¿A™¿A⁄¿B¿B¿B¿B¿B0¿B1¿BT¿Bl¿B|¿Bü¿B∆¿BÁ¿B˙¿C¿C¿CI¿Cì¿C›¿D$¿D+¿DZ¿Dz¿DÕ¿D¸¿EJ¿Eo¿Eº¿F¿F¿F`¿Fµ¿FË¿G3¿G¿GÃ¿GÌ¿H1¿HY¿Hù¿H≠¿HË¿I6¿IW¿Iì¿IŸ¿J(¿JF¿Jê¿J´¿J˘¿K%¿K_¿K`¿Kà¿K§¿K¬¿KÒ¿L¿L¿LY¿L…¿L ¿LÒ¿M¿MM¿Må¿MÕ¿N¿N5¿NV¿NÆ¿N”¿NÙ¿Nˇ¿O%¿OD¿OV¿O^¿Oà¿Oó¿Oü¿O·¿P¿P¿P&¿PR¿PÅ¿P°¿Pº¿PŸ¿Pﬂ¿P‡¿Q&¿Qx¿Qà¿Q›¿R¿RZ¿R{¿R´¿R«¿RŸ¿R·¿S ¿SN¿S]¿Se¿Sf¿SΩ¿S„¿T¿TD¿TX¿Tõ¿T¶¿T–¿Tÿ¿TŸ¿TÛ¿U¿U¿UL¿UÇ¿UÉ¿U’¿V¿V\¿V©¿V¡¿V˛¿W4¿Wy¿Wú¿W™¿WÂ¿WÓ¿X=¿XL¿Xm¿X¿Xá¿Xà¿X”¿XÒ¿Y¿Y¿Y¿Y1¿YW¿Yi¿Yq¿Y©¿Yÿ¿Yﬁ¿Yﬂ¿Z¿Z2¿Zu¿Zê¿Zõ¿Zª¿ZÛ¿[5¿[?¿[è¿[⁄¿[˙¿\,¿\U¿\p¿\°¿\¨¿\“¿\‚¿]¿]c¿]¥¿]ø¿]·¿]¿^;¿^é¿^≈¿^¸¿_#¿_+¿_1¿_2¿_Ñ¿`¿`A¿`é¿`´¿`¨¿`€¿a¿aY¿aq¿aò¿aª¿a»¿a¸¿bj¿bß¿b±¿b√¿bÀ¿bÃ¿c6¿cÜ¿c“¿cˆ¿d%¿dk¿d®¿e ¿eF¿ez¿e∑¿e¡¿e…¿f¿f	¿f
¿f/¿fb¿fë¿fº¿fÂ¿g:¿gT¿gd¿gì¿g√¿gı¿hG¿hV¿hÉ¿hã¿hï¿hñ¿h∫¿i¿iN¿iè¿i∞¿i„¿j.¿jF¿jk¿jé¿jô¿jø¿j—¿jŸ¿k¿kG¿kv¿k•¿k≈¿k‚¿k˝¿l¿l¿lR¿lÆ¿lﬁ¿lˇ¿m6¿m_¿mü¿m›¿m˙¿n ¿n ¿nY¿nê¿n…¿nœ¿nˇ¿o¿oV¿oì¿oõ¿o°¿oﬁ¿p¿p2¿pk¿po¿pp¿pë¿pí¿p–¿q¿q¿qm¿qº¿r¿rT¿ry¿rê¿r∫¿r˛¿s{¿s·¿tA¿t}¿tñ¿tª¿t›¿u¿u¿u9¿uô¿u¶¿uÊ¿u˙¿v¿vO¿vi¿và¿v∞¿vø¿vˇ¿w¿w!¿wD¿wn¿wî¿w∏¿w‘¿wÒ¿x¿xx¿xû¿x´¿xÈ¿y.¿yo¿y´¿y¡¿yÕ¿z%¿za¿zí¿zû¿z√¿zÊ¿{"¿{S¿{_¿{Ñ¿{÷¿|¿|4¿|V¿|v¿|ó¿|˝¿}=¿}S¿}_¿}Ñ¿}´¿}ﬁ¿}Ï¿~¿~¿~F¿~º¿~…¿¿U¿v¿å¿ò¿Ÿ¿˙¿Ä ¿Ä\¿Äm¿Äî¿Ä∂¿Äˆ¿Å
¿Å/¿ÅT¿Å{¿ÅÆ¿Åº¿Å‹¿ÅË¿Ç¿Ç$¿ÇÑ¿Çë¿Ç”¿ÇÁ¿É¿É?¿Éz¿Éç¿Éô¿É—¿ÉÂ¿Ñ¿Ñ]¿Ñì¿Ñ´¿Ñ”¿Ñ˙¿Ö ¿Ö9¿ÖA¿ÖS¿Ög¿Ö¿Ö∏¿Öæ¿Öˆ¿Ü¿Ü¿Üf¿Ü|¿Üõ¿Üú¿Ü¿¿ÜÌ¿áN¿áé¿á’¿à!¿àN¿àV¿à\¿à]¿à´¿à∏¿àÏ¿â¿â#¿â?¿âr¿âx¿âí¿âø¿â≈¿â„¿âÁ¿âË¿ä¿ä6¿ä]¿äÑ¿äí¿äò¿ä…¿ã¿ãV¿ã\¿ã]¿ãé¿ãÂ¿å¿å"¿å&¿å'¿åJ¿åo¿åà¿åπ¿åÂ¿å˘¿ç¿ç¿çÉ¿çÑ¿çΩ¿ç˙¿é,¿é6¿éj¿ér¿éÁ¿è(¿è`¿èú¿è§¿è∂¿èº¿è¿¿è¡¿ê¿ê<¿êl¿êp¿êq¿ê¥¿êÏ¿ê˛¿ë¿ë¿ë¿ë¿ëf¿ë´¿ëΩ¿ë√¿í ¿í¿í¿íh¿íÉ¿í∫¿íÕ¿í”¿í„¿ì¿ì+¿ìâ¿ìÊ¿î4¿î[¿î|¿îë¿îú¿î§¿î∑¿î¡¿îÛ¿ï¿ï!¿ï(¿ïp¿ïó¿ï©¿ï÷¿ñ¿ñ|¿ñö¿ñ˘¿ó(¿ó7¿óÆ¿óº¿ó∆¿ó€¿óÁ¿ò%¿ò7¿òT¿òé¿ò˘¿ôN¿ô≈¿ô”¿ô›¿ôÚ¿ô˛¿ö¿ö,¿ö>¿öB¿öC¿öp¿öv¿ö©¿öØ¿öÓ¿öÙ¿õ'¿õ-¿õC¿õI¿õl¿õr¿õÄ¿õù¿õ«¿õœ¿õŸ¿õÎ¿õÒ¿ú¿ú¿úQ¿út¿úà¿ú≥¿úÀ¿ú‚¿úÈ¿ù0¿ù4¿ù5¿ùb¿ùh¿ù•¿ù´¿ùﬁ¿ù‰¿û+¿û1¿ûz¿ûÄ¿ûñ¿ûú¿ûø¿û≈¿û”¿ûÔ¿ü#¿ü+¿ü5¿üG¿ü[¿üå¿ü§¿üª¿ü¬¿†G¿†Ñ¿†õ¿†∑¿†Ú¿°0¿°G¿°h¿°l¿°m¿°π¿¢¿¢%¿¢+¿¢i¿¢o¿¢Æ¿¢¥¿¢Á¿¢Ì¿£¿£	¿£,¿£2¿£@¿£Z¿£í¿£ö¿£§¿£∂¿£º¿£Ã¿£“¿§#¿§T¿§h¿§≤¿§ ¿§⁄¿§Ò¿§¯¿•^¿•b¿•c¿•Ø¿•˛¿¶¿¶!¿¶i¿¶o¿¶≠¿¶≥¿¶˙¿ß ¿ßI¿ßO¿ße¿ßk¿ßé¿ßî¿ß¢¿ßª¿ß˝¿®¿®¿®!¿®5¿®Ö¿®ù¿®≠¿®ƒ¿®À¿©P¿©ç¿©§¿©¿¿©˚¿™@¿™j¿™ã¿™è¿™ê¿™‹¿™È¿™Ô¿´(¿´.¿´m¿´s¿´¶¿´¨¿´¬¿´»¿´Î¿´Ò¿´ˇ¿¨¿¨E¿¨M¿¨W¿¨i¿¨o¿¨¿¨Ö¿¨–¿¨¸¿≠¿≠U¿≠m¿≠}¿≠î¿≠õ¿≠∞¿≠Í¿≠Ó¿≠Ô¿Æ;¿ÆH¿ÆN¿Æë¿Æó¿Æ–¿Æ÷¿Ø¿Ø#¿Øl¿Ør¿Øà¿Øé¿Ø±¿Ø∑¿Ø≈¿ØŸ¿∞¿∞¿∞%¿∞7¿∞K¿∞ñ¿∞Æ¿∞æ¿∞’¿∞‹¿∞Ò¿±2¿±6¿±7¿±à¿±∆¿±Ã¿≤¿≤¿≤R¿≤X¿≤ã¿≤ë¿≤ß¿≤≠¿≤–¿≤÷¿≤‰¿≥¿≥Y¿≥a¿≥k¿≥}¿≥É¿≥ì¿≥ô¿≥È¿¥¿¥,¿¥e¿¥~¿¥û¿¥µ¿¥º¿µ¿µ#¿µ$¿µu¿µ≥¿µπ¿∂¿∂
¿∂K¿∂Q¿∂ò¿∂û¿∂Á¿∂Ì¿∑¿∑	¿∑,¿∑2¿∑@¿∑]¿∑π¿∑¡¿∑À¿∑›¿∑Ò¿∏0¿∏I¿∏i¿∏Ä¿∏á¿π¿πI¿πc¿π¿π∫¿π¯¿∫(¿∫I¿∫M¿∫N¿∫}¿∫É¿∫±¿∫∑¿∫ˆ¿∫¸¿ª¿ª¿ª;¿ªA¿ªO¿ªh¿ªÜ¿ª©¿ªË¿ªı¿º ¿º¿º¿º$¿º*¿º:¿º@¿ºå¿º®¿ºº¿ºÛ¿ΩM¿Ωf¿Ωj¿Ωk¿Ωû¿Ω∑¿Ω«¿æ<¿æç¿æ†¿æ™¿æΩ¿æ¡¿æ¬¿æÌ¿æÛ¿ø+¿ø1¿ø_¿øe¿øù¿ø£¿øÏ¿øÚ¿¿¿¿+¿¿1¿¿ì¿¿•¿¿π¿¡#¿¡ç¿¬¿¬S¿¬u¿¬ë¿¬Ã¿√
¿√!¿√B¿√F¿√G¿√n¿√â¿√ô¿√¥¿√«¿√—¿√˝¿ƒ5¿ƒN¿ƒj¿ƒz¿ƒñ¿ƒ©¿ƒ≥¿ƒ÷¿ƒ⁄¿ƒ€¿≈¿≈%¿≈u¿≈æ¿∆¿∆¿∆0¿∆K¿∆x¿∆y¿∆õ¿∆Ã¿«¿«B¿«S¿«u¿«¿«≥¿«¥¿«Î¿»5¿»V¿»a¿»ã¿»¡¿»·¿…¿…&¿…0¿…f¿…n¿…o¿…≤¿…“¿…‹¿…‚¿…ˇ¿ ¿ ¿ T¿ ú¿ ∞¿ ∂¿ Ô¿ ı¿À4¿À:¿ÀP¿ÀV¿Ày¿À¿Àç¿À®¿À◊¿À˙¿Ã=¿ÃJ¿ÃU¿Ã]¿Ãg¿Ãy¿Ã¿Ãè¿Ãï¿ÃÂ¿Õ¿Õ(¿Õë¿Õ∫¿Œ1¿ŒM¿ŒQ¿ŒR¿Œû¿ŒÊ¿Œ˙¿œ ¿œC¿œI¿œÇ¿œà¿œ¿¿œ∆¿–¿–¿–+¿–N¿–T¿–¬¿–‘¿–Ë¿—¿—È¿“n¿“Ø¿“—¿“Ì¿”(¿”m¿”ó¿”∏¿”º¿”Ω¿‘¿‘*¿‘:¿‘U¿‘h¿‘r¿‘û¿‘ø¿’'¿’f¿’¡¿’⁄¿’ˆ¿÷¿÷"¿÷5¿÷?¿÷b¿÷f¿÷g¿÷∑¿÷Ë¿÷Ó¿◊*¿◊0¿◊o¿◊u¿◊ã¿◊ë¿◊¥¿◊∫¿◊»¿◊È¿ÿ¿ÿo¿ÿì¿ÿû¿ÿ¶¿ÿ∞¿ÿ¬¿ÿ»¿ÿŒ¿ÿﬁ¿ÿ‰¿Ÿ.¿ŸZ¿Ÿn¿Ÿ–¿Ÿ˘¿⁄&¿⁄ú¿⁄∏¿⁄º¿⁄Ω¿€	¿€:¿€@¿€Ü¿€å¿€»¿€Œ¿‹¿‹¿‹U¿‹[¿‹q¿‹î¿‹ö¿›¿›¿›3¿›»¿ﬁ5¿ﬁ∫¿ﬁ˚¿ﬂ ¿ﬂ<¿ﬂw¿ﬂµ¿ﬂÂ¿‡¿‡
¿‡¿‡Z¿‡u¿‡Ö¿‡†¿‡≥¿‡Ω¿‡È¿·¿·Q¿·v¿·è¿·Õ¿·Ù¿‚¿‚¿‚0¿‚6¿‚R¿‚S¿‚c¿‚¿‚í¿‚ú¿‚ø¿‚√¿‚ƒ¿‚˛¿„¿„5¿„;¿„K¿„Q¿„†¿„Î¿‰4¿‰`¿‰t¿‰⁄¿‰ı¿Â¿Âã¿Âè¿Âê¿Â ¿Â–¿Ê¿Ê¿ÊB¿ÊH¿ÊÄ¿ÊÜ¿Êœ¿Ê„¿ÁÄ¿Á©¿Ë¿Ëõ¿Ë‹¿È¿È¿ÈX¿Èô¿ÈΩ¿Èﬁ¿È‚¿È„¿Í&¿ÍA¿Íd¿Ír¿Íx¿Íà¿Í£¿Í∂¿Í¿¿Í˚¿Î'¿Îz¿ÎÕ¿Ï;¿Ïk¿Ïí¿Ï¿¿Ï‹¿ÏÏ¿Ì¿Ì¿Ì%¿Ì;¿Ì`¿Ìf¿Ìj¿Ìk¿Ìµ¿ÌÓ¿ÌÙ¿Ó/¿Ó5¿ÓE¿ÓK¿Óò¿Ó´¿Ó˚¿Ô*¿Ô>¿Ô±¿Ô⁄¿¿{¿¿Ä¿ ¿Ò¿Ò	¿ÒN¿ÒT¿Òè¿Òï¿ÒÕ¿Ò”¿Ú¿Ú0¿Ú⁄¿Û¿Ûs¿Û¯¿Ù9¿Ù^¿Ùz¿Ùµ¿Ùˆ¿ı"¿ıC¿ıG¿ıH¿ıì¿ıÆ¿ıÊ¿ˆB¿ˆû¿˜¿˜6¿˜O¿˜v¿˜Ö¿˜ç¿˜ü¿˜•¿˜ı¿¯¿¯J¿¯f¿¯ü¿¯£¿¯§¿¯œ¿¯’¿˘¿˘¿˘¿˘!¿˘l¿˘Ñ¿˘ñ¿˘˙¿˙¿˙N¿˙b¿˙h¿˙¢¿˙‚¿˙ı¿˙˚¿˚¿˚M¿˚a¿˚g¿˚¶¿˚™¿˚´¿˚¸¿¸M¿¸q¿¸w¿¸©¿¸Ø¿¸ø¿¸≈¿˝¿˝P¿˝°¿˝“¿˝Ê¿˛(¿˛á¿˛§¿˛∏¿˛æ¿˛Ó¿ˇS¿ˇg¿ˇ©¿ˇº¿ˇ¬¿ $¿ I¿ ú¿ Ø¿ µ¿ –¿ ˜¿¿1¿F¿[¿Ñ¿ô¿ü¿£¿§¿‘¿⁄¿¿¿#¿)¿`¿f¿t¿ê¿©¿±¿ª¿Õ¿„¿È¿¿!¿/¿L¿Ä¿à¿í¿§¿∏¿Á¿¿¿-¿@¿J¿ú¿∑¿¿h¿ü¿—¿Ÿ¿Ê¿¿<¿B¿w¿¨¿≤¿¿#¿?¿R¿\¿¿É¿Ñ¿√¿…¿˚¿¿¿¿@¿F¿T¿m¿®¿∞¿∫¿Ã¿¯¿	Q¿	q¿	ô¿	©¿	±¿	æ¿
¿
¿
¿
¿
d¿
j¿
ü¿
 ¿
Â¿
ı¿¿#¿-¿S¿Ä¿ÿ¿Ï¿¿/¿K¿^¿h¿~¿ñ¿·¿Í¿¿Ù¿ı¿F¿ä¿ê¿ ¿ ¿¿+¿F¿Y¿c¿è¿Î¿G¿æ¿ﬂ¿¯¿¿.¿6¿H¿N¿û¿º¿Ô¿ˇ¿¿.¿8¿<¿=¿é¿î¿‰¿4¿Å¿À¿ı¿˚¿H¿ô¿±¿ﬁ¿*¿x¿ê¿™¿¿N¿û¿Œ¿¿D¿ó¿"¿/¿l¿r¿à¿–¿Ô¿¿A¿G¿H¿ã¿è¿ê¿§¿Œ¿<¿@¿A¿Ñ¿¨¿◊¿¿H¿L¿M¿î¿π¿ø¿œ¿’¿¿V¿ü¿†¿Ó¿F¿G¿Ç¿à¿Ã¿“¿¿-¿O¿w¿•¿¬¿Ó¿˜¿6¿[¿ô¿¬¿‹¿
¿¿$¿j¿¶¿Æ¿¥¿∏¿π¿Ÿ¿ﬂ¿ -¿ q¿ è¿ ∏¿ ⁄¿!¿!H¿!o¿!w¿!}¿!Å¿!Ç¿!Æ¿!Ø¿!„¿"¿"¿"¿"F¿"q¿"u¿"v¿"ó¿#¿#N¿#ï¿#ﬁ¿$¿$å¿$†¿$ƒ¿%¿%:¿%D¿%J¿%ó¿%õ¿%ú¿%È¿&4¿&f¿&Å¿&ô¿&°¿&ß¿&∏¿&º¿&Ω¿'	¿'S¿'l¿'û¿'π¿'”¿'€¿'·¿'Ù¿'¯¿'˘¿(¿(,¿(G¿(h¿(∂¿)¿)¿)<¿)S¿)~¿)≠¿)‡¿)˛¿*R¿*x¿*≤¿*Ã¿*¿+¿+2¿+Y¿+â¿+©¿+…¿+Ì¿,"¿,°¿,¥¿,≈¿,‘¿,·¿,Ï¿,ı¿,¸¿- ¿-¿-¿- ¿-)¿-6¿-8¿-9¿-b¿-à¿-≤¿-Ã¿-Ï¿.¿.6¿.d¿.ü¿.ø¿.‰¿/¿/¿/T¿/å¿/´¿0¿0¿0?¿0î¿0¿¿1¿1¿1#¿1$¿1H¿1f¿1É¿1Ñ¿1•¿1¶¿1«¿1¸¿2¿2¿2 ¿21¿2\¿2}¿2Å¿2Ç¿2è¿2«¿2»¿35¿3n¿3Ü¿3ì¿3´¿3Õ¿3Ò¿3¯¿3¸¿3˛¿3ˇ¿4D¿4e¿4}¿4ö¿4¿¿4Î¿4Ï¿5>¿5\¿5Ö¿5∞¿5–¿6¿6
¿6¿6¿6¿6F¿6É¿6ù¿6©¿6∆¿6⁄¿6‚¿6Ê¿6Á¿6Û¿7¿7(¿7C¿7D¿7P¿7â¿7Á¿7˘¿7˝¿7ˇ¿8 ¿8I¿8n¿8é¿8´¿8—¿9 ¿9¿9W¿9t¿:$¿:Q¿:|¿:û¿:—¿:ÿ¿:‹¿:›¿:È¿;Z¿;~¿;¿;ã¿;∂¿;–¿<*¿<F¿<É¿<ù¿<∫¿<◊¿<Î¿<Û¿<˜¿<¯¿=¿=$¿=Z¿=u¿=v¿=Ç¿=ª¿>	¿>¿> ¿>"¿>#¿>t¿>∏¿>Ì¿>Ó¿>˝¿>˛¿?)¿?C¿?Ñ¿?¥¿?Ï¿@
¿@A¿@û¿@¬¿@√¿A¿AW¿AX¿Aá¿A≥¿A›¿AÔ¿A˜¿A¯¿B%¿BB¿B∑¿C¿C(¿Cb¿Cô¿Cª¿CÍ¿D¿D¿Dê¿D∆¿D¸¿E¿E¿E ¿E!¿EA¿E©¿Eﬁ¿E˛¿F+¿Fu¿F´¿G¿G6¿GÜ¿G‡¿H¿H¿H#¿Hî¿H‰¿HÂ¿I-¿I.¿Iï¿Iñ¿I¥¿I⁄¿IÛ¿I˘¿I˝¿I˛¿J¿J.¿JE¿Jr¿Jí¿Jò¿Jƒ¿K ¿K¿KW¿Kê¿Kº¿KÁ¿KÌ¿KÒ¿KÚ¿LG¿L}¿Lë¿Ló¿Lø¿LË¿L˛¿M¿M¿M¿M!¿M"¿M3¿MM¿Mv¿MÑ¿Mä¿M¨¿M√¿M«¿M»¿M⁄¿M€¿N¿N¿Nj¿NÑ¿N∞¿NÊ¿O?¿OT¿OZ¿O∞¿O“¿OÁ¿OÌ¿P¿P{¿PÅ¿Pî¿Pò¿Pô¿Pº¿PΩ¿P…¿P˛¿Q¿Q¿Q¿Q ¿Q]¿Q¶¿R¿R*¿R[¿Rc¿Rg¿Rh¿Rt¿RÆ¿R—¿R’¿R÷¿R‚¿R˝¿S¿S#¿S$¿S0¿SO¿SQ¿SR¿Só¿Sõ¿SÍ¿T¿Te¿Tf¿TÆ¿T˘¿U¿U¿U\¿U£¿Uß¿U÷¿V8¿V9¿Vu¿Vy¿V«¿V„¿VÁ¿W¿WU¿WV¿W§¿W€¿Wﬂ¿X.¿X}¿X¡¿X≈¿Y¿Y`¿Y¨¿Y˚¿ZJ¿Za¿Ze¿Z≤¿Z◊¿Z€¿[,¿[z¿[¡¿[Â¿[È¿\4¿\É¿\∑¿\ª¿\œ¿]¿][¿]_¿]∑¿]«¿^¿^5¿^;¿^É¿^ù¿^—¿^Ó¿_¿_	¿_
¿_X¿_®¿_Á¿`¿`¿`\¿`b¿`≤¿`ˇ¿aJ¿ak¿aq¿aæ¿b¿b*¿bW¿bX¿b†¿b±¿b∑¿bˆ¿c&¿c'¿ct¿cÖ¿cã¿c‘¿d¿d]¿dÉ¿dõ¿dµ¿dÚ¿e¿e,¿e0¿e1¿et¿ez¿e ¿eÒ¿eÚ¿f)¿f/¿fc¿fÑ¿fò¿fô¿f•¿fÕ¿fŒ¿f⁄¿g ¿g¿g<¿gB¿gF¿gG¿gS¿gn¿gâ¿gû¿g ¿gŒ¿gœ¿g€¿h¿h¿h9¿h=¿h>¿hX¿hY¿he¿hx¿hç¿hÕ¿h„¿hÁ¿hË¿hÙ¿i3¿i4¿iV¿iõ¿i±¿iµ¿i∂¿iﬂ¿j¿j)¿je¿jè¿j¶¿j∂¿jæ¿k ¿k¿k.¿kS¿k[¿k_¿k`¿k¿¿k¬    Ä•  Ä∫  Ä‘  ÄÎÅ ÅÅ& Å*  ÅT  Å}  Å¶  Åœ  Å‰  Å˚  Ç  Ç3  ÇR  Çk  ÇÅ  Çò  Ç≥  ÇŸ  ÇÔ    éŒ¿ CSì~Ñ†/// An abstraction for an entry managed by a [Navigator].
///
/// This class defines an abstract interface between the navigator and the
/// "routes" that are pushed on and popped off the navigator. Most routes have
/// visual affordances, which they place in the navigators [Overlay] using one
/// or more [OverlayEntry] objects.
///
/// See [Navigator] for more explanation of how to use a [Route] with
/// navigation, including code examples.
///
/// See [MaterialPageRoute] for a route that replaces the entire screen with a
/// platform-adaptive transition.
///
/// A route can belong to a page if the [settings] are a subclass of [Page]. A
/// page-based route, as opposed to a pageless route, is created from
/// [Page.createRoute] during [Navigator.pages] updates. The page associated
/// with this route may change during the lifetime of the route. If the
/// [Navigator] updates the page of this route, it calls [changedInternalState]
/// to notify the route that the page has been updated.
///
/// The type argument `T` is the route's return type, as used by
/// [currentResult], [popped], and [didPop]. The type `void` may be used if the
/// route does not return a value.ìÑìÑìãÄÿ îî|/// Initialize the [Route].
///
/// If the [settings] are not provided, an empty [RouteSettings] object is
/// used instead.îî(  î?î5îJîAîMîSî`îaî»îÿ  óhóv  ö^Oö{ öëöûö¶öüö•ößö¨ö®≤ä3≤û ≤Æ≤∑≤∫≤∏≤π≤ª≤ºîg^î≠//// The navigator that the route is in, if any.   îÁÇ~óOÇ;/// The settings for this route.
///
/// See [RouteSettings] for details.
///
/// The settings can change during the route's lifetime. If the settings
/// change, the route's overlays will be marked dirty (see
/// [changedInternalState]).
///
/// If the route is created from a [Page] in the [Navigator.pages] list, then
/// this will be a [Page] subclass, and it will be updated each time its
/// corresponding [Page] in the [Navigator.pages] has changed. Once the
/// [Route] is removed from the history, this value stops updating (and
/// remains with its last value).   óÑÇ◊ö1Çw/// The restoration scope ID to be used for the [RestorationScope] surrounding
/// this route.
///
/// The restoration scope ID is null if restoration is currently disabled
/// for this route.
///
/// If the restoration scope ID changes (e.g. because restoration is enabled
/// or disabled) during the life of the route, the [ValueListenable] notifies
/// its listeners. As an example, the ID changes to null while the route is
/// transitioning off screen, which triggers a notification on this field. At
/// that point, the route is considered as no longer present for restoration
/// purposes and its state will not be restored.   úÅ’ù±ÅÄ/// The overlay entries of this route.
///
/// These are typically populated by [install]. The [Navigator] is in charge
/// of adding them to and removing them from the [Overlay].
///
/// There must be at least one entry in this list after [install] has been
/// invoked.
///
/// The [Navigator] will take care of keeping the entries together if the
/// route is moved in the history.   ØÀ]∞0/// Whether calling [didPop] would return false.   ∞,Å%±;Ä˝/// When this route is popped (see [Navigator.pop]) if the result isn't
/// specified or if it's null, this value will be used instead.
///
/// This fallback is implemented by [didComplete]. This value is used if the
/// argument to that method is null.   ±UÅ2≤hÄ˘/// A future that completes when this route is popped off the navigator.
///
/// The future completes with the value given to [Navigator.pop], if any, or
/// else the value of [currentResult]. See [didComplete] for more discussion
/// on this topic.   ¿ JÅ™¿ Jàu/// Whether this route is the top-most route on the navigator.
///
/// If this is true, then [isActive] is also true.   ¿ K±Ç¿ LìÄ–/// Whether this route is the bottom-most active route on the navigator.
///
/// If [isFirst] and [isCurrent] are both true then this is the only route on
/// the navigator (and [isActive] will also be true).   ¿ MªÅí¿ NE/// Whether there is at least one active route underneath this route.  ¿ N¿ N¿ OQÇŒ¿ QmÇ /// Whether this route is on the navigator.
///
/// If the route is not only active, but also the current route (the top-most
/// route), then [isCurrent] will also be true. If it is the first route (the
/// bottom-most route), then [isFirst] will also be true.
///
/// If a higher route is entirely opaque, then the route will be active but not
/// rendered. It is even possible for the route to be active but for the stateful
/// widgets within the route to not be instantiated. See [ModalRoute.maintainState].   ö≤Äúö∑  ö«ö÷   õúeõ°  õ∂õø   ùﬁÅzüKÅ=/// Called when the route is inserted into the navigator.
///
/// Uses this to populate [overlayEntries]. There must be at least one entry in
/// this list after [install] has been invoked. The [Navigator] will be in charge
/// to add them to the [Overlay] or remove them from it by calling
/// [OverlayEntry.remove].  ü(ü)ü5ü6ü\Ç¶°7Åù/// Called after [install] when the route is pushed onto the navigator.
///
/// The returned value resolves when the push transition is complete.
///
/// The [didAdd] method will be called instead of [didPush] when the route
/// immediately appears on screen without any push transition.
///
/// The [didChangeNext] and [didChangePrevious] methods are typically called
/// immediately after this method is called.  °°°°¢áº£{ÅC/// Called after [install] when the route is added to the navigator.
///
/// This method is called instead of [didPush] when the route immediately
/// appears on screen without any push transition.
///
/// The [didChangeNext] and [didChangePrevious] methods are typically called
/// immediately after this method is called.  £X£Y£e£f©∆Å™ºÄ /// Called after [install] when the route replaced another in the navigator.
///
/// The [didChangeNext] and [didChangePrevious] methods are typically called
/// immediately after this method is called. ™«™ÿ  ™ô™ö™¶™ß™ËÑﬂØgÑ0/// Returns whether calling [Navigator.maybePop] when this [Route] is current
/// ([isCurrent]) should do anything.
///
/// [Navigator.maybePop] is usually used instead of [Navigator.pop] to handle
/// the system back button.
///
/// By default, if a [Route] is the first route in the history (i.e., if
/// [isFirst]), it reports that pops should be bubbled
/// ([RoutePopDisposition.bubble]). This behavior prevents the user from
/// popping the first route off the history and being stranded at a blank
/// screen; instead, the larger scope is popped (e.g. the application quits,
/// so that the user returns to the previous application).
///
/// In other cases, the default behavior is to accept the pop
/// ([RoutePopDisposition.pop]).
///
/// The third possible value is [RoutePopDisposition.doNotPop], which causes
/// the pop request to be ignored entirely.
///
/// See also:
///
///  * [Form], which provides a [Form.onWillPop] callback that uses this
///    mechanism.
///  * [WillPopScope], another widget that provides a way to intercept the
///    back button.   ≤¬Ñî∑Ñ/// A request was made to pop this route. If the route can handle it
/// internally (e.g. because it has its own stack of internal state) then
/// return false, otherwise return true (by returning the value of calling
/// `super.didPop`). Returning false will prevent the default behavior of
/// [NavigatorState.pop].
///
/// When this function returns true, the navigator removes this route from
/// the history but does not yet call [dispose]. Instead, it is the route's
/// responsibility to call [NavigatorState.finalizeRoute], which will in turn
/// call [dispose] on the route. This sequence lets the route perform an
/// exit animation (or some other visual effect) after being popped but prior
/// to being disposed.
///
/// This method should call [didComplete] to resolve the [popped] future (and
/// this is all that the default implementation does); routes should not wait
/// for their exit animation to complete before doing so.
///
/// See [popped], [didComplete], and [currentResult] for a discussion of the
/// `result` argument. ∑	∑   ∂ˇ∑ ∑ZÉ»∫—É5/// The route was popped or is otherwise being removed somewhat gracefully.
///
/// This is called by [didPop] and in response to
/// [NavigatorState.pushReplacement]. If [didPop] was not called, then the
/// [NavigatorState.finalizeRoute] method must be called immediately, and no exit
/// animation will run.
///
/// The [popped] future is completed by this method. The `result` argument
/// specifies the value that this future is completed with, unless it is null,
/// in which case [currentResult] is used instead.
///
/// This should be called before the pop animation, if any, takes place,
/// though in some cases the animation may be driven by the user before the
/// route is committed to being popped; this can in particular happen with the
/// iOS-style back gesture. See [NavigatorState.didStartUserGesture]. ∫›	∫·  ∫Æ∫Ø∫ª∫ºª&ÅºÄº/// The given route, which was above this one, has been popped off the
/// navigator.
///
/// This route is now the current route ([isCurrent] is now true), and there
/// is no next route. ºº+  ªÌªÓª˙ª˚º<Çæ%Å≥/// This route's next route has changed to the given new route.
///
/// This is called on a route whenever the next route changes for any reason,
/// so long as it is in the history, including when a route is first added to
/// a [Navigator] (e.g. by [Navigator.push]), except for cases when
/// [didPopNext] would be called.
///
/// The `nextRoute` argument will be null if there's no new next route (i.e.
/// if [isCurrent] is true). æ3æD  æææææUÇ ¿ @AÅ∂/// This route's previous route has changed to the given new route.
///
/// This is called on a route whenever the previous route changes for any
/// reason, so long as it is in the history, except for immediately after the
/// route itself has been pushed (in which case [didPush] or [didReplace] will
/// be called instead).
///
/// The `previousRoute` argument will be null if there's no previous route
/// (i.e. if [isFirst] is true). ¿ @S¿ @d  ¿ @¿ @¿ @+¿ @,¿ @yÇO¿ BÆÅ˚/// Called whenever the internal state of the route has changed.
///
/// This should be called whenever [willHandlePopInternally], [didPop],
/// [ModalRoute.offstage], or other internal state of the route changes value.
/// It is used by [ModalRoute], for example, to report the new information via
/// its inherited widget to any children of the route.
///
/// See also:
///
///  * [changedExternalState], which is called when the [Navigator] has
///    updated in some manner that might affect the routes.  ¿ Bã¿ Bå¿ Bò¿ Bô¿ BÃÑµ¿ GgÑI/// Called whenever the [Navigator] has updated in some manner that might
/// affect routes, to indicate that the route may wish to rebuild as well.
///
/// This is called by the [Navigator] whenever the
/// [NavigatorState]'s [State.widget] changes (as in [State.didUpdateWidget]),
/// for example because the [MaterialApp] has been rebuilt. This
/// ensures that routes that directly refer to the state of the
/// widget that built the [MaterialApp] will be notified when that
/// widget rebuilds, since it would otherwise be difficult to notify
/// the routes that state they depend on may have changed.
///
/// It is also called whenever the [Navigator]'s dependencies change
/// (as in [State.didChangeDependencies]). This allows routes to use the
/// [Navigator]'s context ([NavigatorState.context]), for example in
/// [ModalRoute.barrierColor], and update accordingly.
///
/// The [ModalRoute] subclass overrides this to force the barrier
/// overlay to rebuild.
///
/// See also:
///
///  * [changedInternalState], the equivalent but for changes to the internal
///    state of the route.  ¿ GD¿ GE¿ GQ¿ GR¿ GÖÇz¿ I∂Å˜/// Discards any resources used by the object.
///
/// This method should not remove its [overlayEntries] from the [Overlay]. The
/// object's owner is in charge of doing that.
///
/// After this is called, the object is not in a usable state and should be
/// discarded.
///
/// This method should only be called by the object's owner; typically the
/// [Navigator] owns a route and so will call this method when the route is
/// removed, after which the route is no longer referenced by the navigator.  ¿ Iì¿ Iî¿ I§¿ I• ¿ R#Ç_¿ Rm8/// Data that might be useful in constructing a [Route]. ¿ Rk ¿ R≤¿ Rø*/// Creates data used to construct routes.¿ R∆	¿ RÃ  ¿ R’¿ R€   ¿ RÓp¿ SZW/// The name of the route (e.g., "/settings").
///
/// If null, the route is anonymous. ¿ ScÄó¿ SÒy/// The arguments passed to this route.
///
/// May be used when building the route, e.g. in [Navigator.onGenerateRoute].  ¿ SˇÄÅ¿ T   ¿ Sˇ¿ T ¿ R\¿ R]¿ TÑÜa¿ UÃÅ8/// Describes the configuration of a [Route].
///
/// The type argument `T` is the corresponding [Route]'s return type, as
/// used by [Route.currentResult], [Route.popped], and [Route.didPop].
///
/// See also:
///
///  * [Navigator.pages], which accepts a list of [Page]s and updates its routes
///    history.¿ U—¿ U—¿ UÓÄœ ¿ Vf¿ Vjk/// Creates a page and initializes [key] for subclasses.
///
/// The [arguments] argument must not be null.¿ Vq¿ Vw  ¿ V
¿ VÜ  ¿ Vè¿ Vñ  ¿ V§¿ V™   ¿ V¡ÄÇ¿ W@h/// The key associated with this page.
///
/// This key will be used for comparing pages in [canUpdate]. ¿ WHÅM¿ XàÅ/// Restoration ID to save and restore the state of the [Route] configured by
/// this page.
///
/// If no restoration ID is provided, the [Route] will not restore its state.
///
/// See also:
///
///  * [RestorationManager], which explains how state restoration works in
///    Flutter.  ¿ XöÅ¿ Y?Äó/// Whether this page can be updated with the [other] page.
///
/// Two pages are consider updatable if they have same the [runtimeType] and
/// [key]. ¿ YI¿ YX   ¿ Y≥ÄÀ¿ Z\Äé/// Creates the [Route] that corresponds to this page.
///
/// The created [Route] must have its [Route.settings] property set to this [Page]. ¿ Zh¿ Zv  ¿ ZH¿ ZI¿ ZÇa¿ Zï   ¿ ZÇ¿ ZÉ ¿ ZÁât¿ [+=/// An interface for observing the behavior of a [Navigator].  ¿ ^
L¿ ^/ ¿ ^=¿ ^D¿ ^S¿ ^E¿ ^T¿ ^U¿ [Ao¿ [ë9/// The navigator that the observer is observing, if any.   ¿ ^[Ä›¿ ^¯Äè/// The [Navigator] pushed `route`.
///
/// The route immediately below that one, and thus the previously active
/// route, is `previousRoute`. ¿ _ ¿ _  ¿ _¿ _'   ¿ _<Ä◊¿ _‘Ää/// The [Navigator] popped `route`.
///
/// The route immediately below that one, and thus the newly active
/// route, is `previousRoute`. ¿ _€¿ _Î  ¿ _Ò¿ `   ¿ `Å¿ a≈Åñ/// The [Navigator] removed `route`.
///
/// If only one route is being removed, then the route immediately below
/// that one, if any, is `previousRoute`.
///
/// If multiple routes are being removed, then the route below the
/// bottommost route being removed, if any, is `previousRoute`, and this
/// method will be called once for each removed route, from the topmost route
/// to the bottommost route. ¿ aœ¿ aﬂ  ¿ aÂ¿ aˆ   ¿ bÄÜ¿ bK8/// The [Navigator] replaced `oldRoute` with `newRoute`. ¿ bX¿ bi  ¿ br¿ bÉ   ¿ bïÅ$¿ cmÄ /// The [Navigator]'s routes are being moved by a user gesture.
///
/// For example, this is called when an iOS back gesture starts, and is used
/// to disabled hero animations during such interactions. ¿ cÅ¿ cë  ¿ có¿ c®   ¿ cΩÄú¿ dAx/// User gesture is no longer controlling the [Navigator].
///
/// Paired with an earlier call to [didStartUserGesture].    ¿ d]å$¿ f∂ÇR/// An inherited widget to host a hero controller.
///
/// The hosted hero controller will be picked up by the navigator in the
/// [child] subtree. Once a navigator picks up this controller, the navigator
/// will bar any navigator below its subtree from receiving this controller.
///
/// The hero controller inside the [HeroControllerScope] can only subscribe to
/// one navigator at a time. An assertion will be thrown if the hero controller
/// subscribes to more than one navigators. This can happen when there are
/// multiple navigators under the same [HeroControllerScope] in parallel. ¿ fÊÄÆ ¿ g#¿ g64/// Creates a widget to host the input [controller].¿ g=	¿ gD  ¿ gL'¿ gj  ¿ gy¿ gâ   ¿ gòÄ¡¿ h¿ h¿ hY/// Creates a widget to prevent the subtree from receiving the hero controller
/// above.¿ h	¿ h"  ¿ h*¿ h:  ¿ hR¿ hG¿ hT¿ h]]¿ h∞:/// The hero controller that is hosted inside this widget.  ¿ høÇ]¿ jsÅà/// Retrieves the [HeroController] from the closest [HeroControllerScope]
/// ancestor, or null if none exists.
///
/// Calling this method will create a dependency on the closest
/// [HeroControllerScope] in the [context], if there is one.
///
/// See also:
///
/// * [HeroControllerScope.of], which is similar to this method, but asserts
///   if no [HeroControllerScope] ancestor is found. ¿ j{¿ jâ   ¿ k Ñ‰¿ m.Å›/// Retrieves the [HeroController] from the closest [HeroControllerScope]
/// ancestor.
///
/// If no ancestor is found, this method will assert in debug mode, and throw
/// an exception in release mode.
///
/// Calling this method will create a dependency on the closest
/// [HeroControllerScope] in the [context].
///
/// See also:
///
/// * [HeroControllerScope.maybeOf], which is similar to this method, but
///   returns null if no [HeroControllerScope] ancestor is found. ¿ m1¿ m?   ¿ pw¿ p  ¿ p,¿ pA  ¿ p¿ p	 ¿ pÉâÕ¿ q+Äò/// A [Route] wrapper interface that can be staged for [TransitionDelegate] to
/// decide how its underlying [Route] should transition on or off screen.   ¿ qE>¿ q}"/// Retrieves the wrapped [Route].   ¿ qáÅ<¿ r¶Å/// Whether this route is waiting for the decision on how to enter the screen.
///
/// If this property is true, this route requires an explicit decision on how
/// to transition into the screen. Such a decision should be made in the
/// [TransitionDelegate.resolve].   ¿ r«Å9¿ s‰Å	/// Whether this route is waiting for the decision on how to exit the screen.
///
/// If this property is true, this route requires an explicit decision on how
/// to transition off the screen. Such a decision should be made in the
/// [TransitionDelegate.resolve].   ¿ tÅQ¿ uGÅ3/// Marks the [route] to be pushed with transition.
///
/// During [TransitionDelegate.resolve], this can be called on an entering
/// route (where [RouteTransitionRecord.isWaitingForEnteringDecision] is true) in indicate that the
/// route should be pushed onto the [Navigator] with an animated transition.   ¿ uYÅT¿ v†Å7/// Marks the [route] to be added without transition.
///
/// During [TransitionDelegate.resolve], this can be called on an entering
/// route (where [RouteTransitionRecord.isWaitingForEnteringDecision] is true) in indicate that the
/// route should be added onto the [Navigator] without an animated transition.   ¿ v±Å¿ w≠ÄÏ/// Marks the [route] to be popped with transition.
///
/// During [TransitionDelegate.resolve], this can be called on an exiting
/// route to indicate that the route should be popped off the [Navigator] with
/// an animated transition. ¿ wπ¿ w¬   ¿ wŒÅP¿ x¸Å/// Marks the [route] to be completed without transition.
///
/// During [TransitionDelegate.resolve], this can be called on an exiting
/// route to indicate that the route should be completed with the provided
/// result and removed from the [Navigator] without an animated transition. ¿ y¿ y   ¿ y"Å,¿ z>Å/// Marks the [route] to be removed without transition.
///
/// During [TransitionDelegate.resolve], this can be called on an exiting
/// route to indicate that the route should be removed from the [Navigator]
/// without completing and without an animated transition.    ¿ zR®¿ Éà∞/// The delegate that decides how pages added and removed from [Navigator.pages]
/// transition in or out of the screen.
///
/// This abstract class implements the API to be called by [Navigator] when it
/// requires explicit decisions on how the routes transition on or off the screen.
///
/// To make route transition decisions, subclass must implement [resolve].
///
/// {@tool snippet}
/// The following example demonstrates how to implement a subclass that always
/// removes or adds routes without animated transitions and puts the removed
/// routes at the top of the list.
///
/// ```dart
/// class NoAnimationTransitionDelegate extends TransitionDelegate<void> {
///   @override
///   Iterable<RouteTransitionRecord> resolve({
///     required List<RouteTransitionRecord> newPageRouteHistory,
///     required Map<RouteTransitionRecord?, RouteTransitionRecord> locationToExitingPageRoute,
///     required Map<RouteTransitionRecord?, List<RouteTransitionRecord>> pageRouteToPagelessRoutes,
///   }) {
///     final List<RouteTransitionRecord> results = <RouteTransitionRecord>[];
///
///     for (final RouteTransitionRecord pageRoute in newPageRouteHistory) {
///       if (pageRoute.isWaitingForEnteringDecision) {
///         pageRoute.markForAdd();
///       }
///       results.add(pageRoute);
///
///     }
///     for (final RouteTransitionRecord exitingPageRoute in locationToExitingPageRoute.values) {
///       if (exitingPageRoute.isWaitingForExitingDecision) {
///        exitingPageRoute.markForRemove();
///        final List<RouteTransitionRecord>? pagelessRoutes = pageRouteToPagelessRoutes[exitingPageRoute];
///        if (pagelessRoutes != null) {
///          for (final RouteTransitionRecord pagelessRoute in pagelessRoutes) {
///             pagelessRoute.markForRemove();
///           }
///        }
///       }
///       results.add(exitingPageRoute);
///
///     }
///     return results;
///   }
/// }
///
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [Navigator.transitionDelegate], which uses this class to make route
///    transition decisions.
///  * [DefaultTransitionDelegate], which implements the default way to decide
///    how routes transition in or out of the screen.¿ É%¿ É%¿ É,e ¿ É|¿ ÉéG/// Creates a delegate and enables subclass to create a constant class.    ¿ Éïç¿ Éµ  ¿ É«8¿ ÉÌ  ¿ ÑV¿ ÑB  ¿ Ña[¿ Ñ§   ¿ ê∞ë±¿ °WèÓ/// A method that will be called by the [Navigator] to decide how routes
/// transition in or out of the screen when [Navigator.pages] is updated.
///
/// The `newPageRouteHistory` list contains all page-based routes in the order
/// that will be on the [Navigator]'s history stack after this update
/// completes. If a route in `newPageRouteHistory` has its
/// [RouteTransitionRecord.isWaitingForEnteringDecision] set to true, this
/// route requires explicit decision on how it should transition onto the
/// Navigator. To make a decision, call [RouteTransitionRecord.markForPush] or
/// [RouteTransitionRecord.markForAdd].
///
/// The `locationToExitingPageRoute` contains the pages-based routes that
/// are removed from the routes history after page update. This map records
/// page-based routes to be removed with the location of the route in the
/// original route history before the update. The keys are the locations
/// represented by the page-based routes that are directly below the removed
/// routes, and the value are the page-based routes to be removed. The
/// location is null if the route to be removed is the bottom most route. If
/// a route in `locationToExitingPageRoute` has its
/// [RouteTransitionRecord.isWaitingForExitingDecision] set to true, this
/// route requires explicit decision on how it should transition off the
/// Navigator. To make a decision for a removed route, call
/// [RouteTransitionRecord.markForPop],
/// [RouteTransitionRecord.markForComplete] or
/// [RouteTransitionRecord.markForRemove]. It is possible that decisions are
/// not required for routes in the `locationToExitingPageRoute`. This can
/// happen if the routes have already been popped in earlier page updates and
/// are still waiting for popping animations to finish. In such case, those
/// routes are still included in the `locationToExitingPageRoute` with their
/// [RouteTransitionRecord.isWaitingForExitingDecision] set to false and no
/// decisions are required.
///
/// The `pageRouteToPagelessRoutes` records the page-based routes and their
/// associated pageless routes. If a page-based route is waiting for exiting
/// decision, its associated pageless routes also require explicit decisions
/// on how to transition off the screen.
///
/// Once all the decisions have been made, this method must merge the removed
/// routes (whether or not they require decisions) and the
/// `newPageRouteHistory` and return the merged result. The order in the
/// result will be the order the [Navigator] uses for updating the route
/// history. The return list must preserve the same order of routes in
/// `newPageRouteHistory`. The removed routes, however, can be inserted into
/// the return list freely as long as all of them are included.
///
/// For example, consider the following case.
///
/// `newPageRouteHistory = [A, B, C]`
///
/// `locationToExitingPageRoute = {A -> D, C -> E}`
///
/// The following outputs are valid.
///
/// `result = [A, B ,C ,D ,E]` is valid.
/// `result = [D, A, B ,C ,E]` is also valid because exiting route can be
/// inserted in any place.
///
/// The following outputs are invalid.
///
/// `result = [B, A, C ,D ,E]` is invalid because B must be after A.
/// `result = [A, B, C ,E]` is invalid because results must include D.
///
/// See also:
///
///  * [RouteTransitionRecord.markForPush], which makes route enter the screen
///    with an animated transition.
///  * [RouteTransitionRecord.markForAdd], which makes route enter the screen
///    without an animated transition.
///  * [RouteTransitionRecord.markForPop], which makes route exit the screen
///    with an animated transition.
///  * [RouteTransitionRecord.markForRemove], which does not complete the
///    route and makes it exit the screen without an animated transition.
///  * [RouteTransitionRecord.markForComplete], which completes the route and
///    makes it exit the screen without an animated transition.
///  * [DefaultTransitionDelegate.resolve], which implements the default way
///    to decide how routes transition in or out of the screen. ¿ °e8¿ °ã  ¿ °£V¿ °‡  ¿ °ˇ[¿ ¢B    ¿ ¢eéX¿ §tÇ/// The default implementation of [TransitionDelegate] that the [Navigator] will
/// use if its [Navigator.transitionDelegate] is not specified.
///
/// This transition delegate follows two rules. Firstly, all the entering routes
/// are placed on top of the exiting routes if they are at the same location.
/// Secondly, the top most route will always transition with an animated transition.
/// All the other routes below will either be completed with
/// [Route.currentResult] or added without an animated transition.¿ §é¿ §é¿ §≥Y ¿ §Ê¿ §ˇ*/// Creates a default transition delegate. ¿ •¿ •	¿ •
  ¿ •ã´¿ •<  ¿ •J8¿ •p  ¿ •àV¿ •≈  ¿ •‰[¿ ¶'  ¿ •¿ • ¿ ±‡¿h¿ Â≥6/// A widget that manages a set of child widgets with a stack discipline.
///
/// Many apps have a navigator near the top of their widget hierarchy in order
/// to display their logical history using an [Overlay] with the most recently
/// visited pages visually on top of the older pages. Using this pattern lets
/// the navigator visually transition from one page to another by moving the widgets
/// around in the overlay. Similarly, the navigator can be used to show a dialog
/// by positioning the dialog widget above the current page.
///
/// ## Using the Pages API
///
/// The [Navigator] will convert its [Navigator.pages] into a stack of [Route]s
/// if it is provided. A change in [Navigator.pages] will trigger an update to
/// the stack of [Route]s. The [Navigator] will update its routes to match the
/// new configuration of its [Navigator.pages]. To use this API, one can create
/// a [Page] subclass and defines a list of [Page]s for [Navigator.pages]. A
/// [Navigator.onPopPage] callback is also required to properly clean up the
/// input pages in case of a pop.
///
/// By Default, the [Navigator] will use [DefaultTransitionDelegate] to decide
/// how routes transition in or out of the screen. To customize it, define a
/// [TransitionDelegate] subclass and provide it to the
/// [Navigator.transitionDelegate].
///
/// For more information on using the pages API, see the [Router] widget.
///
/// ## Using the Navigator API
///
/// Mobile apps typically reveal their contents via full-screen elements
/// called "screens" or "pages". In Flutter these elements are called
/// routes and they're managed by a [Navigator] widget. The navigator
/// manages a stack of [Route] objects and provides two ways for managing
/// the stack, the declarative API [Navigator.pages] or imperative API
/// [Navigator.push] and [Navigator.pop].
///
/// When your user interface fits this paradigm of a stack, where the user
/// should be able to _navigate_ back to an earlier element in the stack,
/// the use of routes and the Navigator is appropriate. On certain platforms,
/// such as Android, the system UI will provide a back button (outside the
/// bounds of your application) that will allow the user to navigate back
/// to earlier routes in your application's stack. On platforms that don't
/// have this build-in navigation mechanism, the use of an [AppBar] (typically
/// used in the [Scaffold.appBar] property) can automatically add a back
/// button for user navigation.
///
/// ### Displaying a full-screen route
///
/// Although you can create a navigator directly, it's most common to use the
/// navigator created by the `Router` which itself is created and configured by
/// a [WidgetsApp] or a [MaterialApp] widget. You can refer to that navigator
/// with [Navigator.of].
///
/// A [MaterialApp] is the simplest way to set things up. The [MaterialApp]'s
/// home becomes the route at the bottom of the [Navigator]'s stack. It is what
/// you see when the app is launched.
///
/// ```dart
/// void main() {
///   runApp(const MaterialApp(home: MyAppHome()));
/// }
/// ```
///
/// To push a new route on the stack you can create an instance of
/// [MaterialPageRoute] with a builder function that creates whatever you
/// want to appear on the screen. For example:
///
/// ```dart
/// Navigator.push(context, MaterialPageRoute<void>(
///   builder: (BuildContext context) {
///     return Scaffold(
///       appBar: AppBar(title: const Text('My Page')),
///       body: Center(
///         child: TextButton(
///           child: const Text('POP'),
///           onPressed: () {
///             Navigator.pop(context);
///           },
///         ),
///       ),
///     );
///   },
/// ));
/// ```
///
/// The route defines its widget with a builder function instead of a
/// child widget because it will be built and rebuilt in different
/// contexts depending on when it's pushed and popped.
///
/// As you can see, the new route can be popped, revealing the app's home
/// page, with the Navigator's pop method:
///
/// ```dart
/// Navigator.pop(context);
/// ```
///
/// It usually isn't necessary to provide a widget that pops the Navigator
/// in a route with a [Scaffold] because the Scaffold automatically adds a
/// 'back' button to its AppBar. Pressing the back button causes
/// [Navigator.pop] to be called. On Android, pressing the system back
/// button does the same thing.
///
/// ### Using named navigator routes
///
/// Mobile apps often manage a large number of routes and it's often
/// easiest to refer to them by name. Route names, by convention,
/// use a path-like structure (for example, '/a/b/c').
/// The app's home page route is named '/' by default.
///
/// The [MaterialApp] can be created
/// with a [Map<String, WidgetBuilder>] which maps from a route's name to
/// a builder function that will create it. The [MaterialApp] uses this
/// map to create a value for its navigator's [onGenerateRoute] callback.
///
/// ```dart
/// void main() {
///   runApp(MaterialApp(
///     home: const MyAppHome(), // becomes the route named '/'
///     routes: <String, WidgetBuilder> {
///       '/a': (BuildContext context) => const MyPage(title: Text('page A')),
///       '/b': (BuildContext context) => const MyPage(title: Text('page B')),
///       '/c': (BuildContext context) => const MyPage(title: Text('page C')),
///     },
///   ));
/// }
/// ```
///
/// To show a route by name:
///
/// ```dart
/// Navigator.pushNamed(context, '/b');
/// ```
///
/// ### Routes can return a value
///
/// When a route is pushed to ask the user for a value, the value can be
/// returned via the [pop] method's result parameter.
///
/// Methods that push a route return a [Future]. The Future resolves when the
/// route is popped and the [Future]'s value is the [pop] method's `result`
/// parameter.
///
/// For example if we wanted to ask the user to press 'OK' to confirm an
/// operation we could `await` the result of [Navigator.push]:
///
/// ```dart
/// bool? value = await Navigator.push(context, MaterialPageRoute<bool>(
///   builder: (BuildContext context) {
///     return Center(
///       child: GestureDetector(
///         child: const Text('OK'),
///         onTap: () { Navigator.pop(context, true); }
///       ),
///     );
///   }
/// ));
/// ```
///
/// If the user presses 'OK' then value will be true. If the user backs
/// out of the route, for example by pressing the Scaffold's back button,
/// the value will be null.
///
/// When a route is used to return a value, the route's type parameter must
/// match the type of [pop]'s result. That's why we've used
/// `MaterialPageRoute<bool>` instead of `MaterialPageRoute<void>` or just
/// `MaterialPageRoute`. (If you prefer to not specify the types, though, that's
/// fine too.)
///
/// ### Popup routes
///
/// Routes don't have to obscure the entire screen. [PopupRoute]s cover the
/// screen with a [ModalRoute.barrierColor] that can be only partially opaque to
/// allow the current screen to show through. Popup routes are "modal" because
/// they block input to the widgets below.
///
/// There are functions which create and show popup routes. For
/// example: [showDialog], [showMenu], and [showModalBottomSheet]. These
/// functions return their pushed route's Future as described above.
/// Callers can await the returned value to take an action when the
/// route is popped, or to discover the route's value.
///
/// There are also widgets which create popup routes, like [PopupMenuButton] and
/// [DropdownButton]. These widgets create internal subclasses of PopupRoute
/// and use the Navigator's push and pop methods to show and dismiss them.
///
/// ### Custom routes
///
/// You can create your own subclass of one of the widget library route classes
/// like [PopupRoute], [ModalRoute], or [PageRoute], to control the animated
/// transition employed to show the route, the color and behavior of the route's
/// modal barrier, and other aspects of the route.
///
/// The [PageRouteBuilder] class makes it possible to define a custom route
/// in terms of callbacks. Here's an example that rotates and fades its child
/// when the route appears or disappears. This route does not obscure the entire
/// screen because it specifies `opaque: false`, just as a popup route does.
///
/// ```dart
/// Navigator.push(context, PageRouteBuilder<void>(
///   opaque: false,
///   pageBuilder: (BuildContext context, _, __) {
///     return const Center(child: Text('My PageRoute'));
///   },
///   transitionsBuilder: (___, Animation<double> animation, ____, Widget child) {
///     return FadeTransition(
///       opacity: animation,
///       child: RotationTransition(
///         turns: Tween<double>(begin: 0.5, end: 1.0).animate(animation),
///         child: child,
///       ),
///     );
///   }
/// ));
/// ```
///
/// The page route is built in two parts, the "page" and the
/// "transitions". The page becomes a descendant of the child passed to
/// the `transitionsBuilder` function. Typically the page is only built once,
/// because it doesn't depend on its animation parameters (elided with `_`
/// and `__` in this example). The transition is built on every frame
/// for its duration.
///
/// (In this example, `void` is used as the return type for the route, because
/// it does not return a value.)
///
/// ### Nesting Navigators
///
/// An app can use more than one [Navigator]. Nesting one [Navigator] below
/// another [Navigator] can be used to create an "inner journey" such as tabbed
/// navigation, user registration, store checkout, or other independent journeys
/// that represent a subsection of your overall application.
///
/// #### Example
///
/// It is standard practice for iOS apps to use tabbed navigation where each
/// tab maintains its own navigation history. Therefore, each tab has its own
/// [Navigator], creating a kind of "parallel navigation."
///
/// In addition to the parallel navigation of the tabs, it is still possible to
/// launch full-screen pages that completely cover the tabs. For example: an
/// on-boarding flow, or an alert dialog. Therefore, there must exist a "root"
/// [Navigator] that sits above the tab navigation. As a result, each of the
/// tab's [Navigator]s are actually nested [Navigator]s sitting below a single
/// root [Navigator].
///
/// In practice, the nested [Navigator]s for tabbed navigation sit in the
/// [WidgetsApp] and [CupertinoTabView] widgets and do not need to be explicitly
/// created or managed.
///
/// {@tool sample}
/// The following example demonstrates how a nested [Navigator] can be used to
/// present a standalone user registration journey.
///
/// Even though this example uses two [Navigator]s to demonstrate nested
/// [Navigator]s, a similar result is possible using only a single [Navigator].
///
/// Run this example with `flutter run --route=/signup` to start it with
/// the signup flow instead of on the home page.
///
/// ** See code in examples/api/lib/widgets/navigator/navigator.0.dart **
/// {@end-tool}
///
/// [Navigator.of] operates on the nearest ancestor [Navigator] from the given
/// [BuildContext]. Be sure to provide a [BuildContext] below the intended
/// [Navigator], especially in large `build` methods where nested [Navigator]s
/// are created. The [Builder] widget can be used to access a [BuildContext] at
/// a desired location in the widget subtree.
///
/// ### Finding the enclosing route
///
/// In the common case of a modal route, the enclosing route can be obtained
/// from inside a build method using [ModalRoute.of]. To determine if the
/// enclosing route is the active route (e.g. so that controls can be dimmed
/// when the route is not active), the [Route.isCurrent] property can be checked
/// on the returned route.
///
/// ## State Restoration
///
/// If provided with a [restorationScopeId] and when surrounded by a valid
/// [RestorationScope] the [Navigator] will restore its state by recreating
/// the current history stack of [Route]s during state restoration and by
/// restoring the internal state of those [Route]s. However, not all [Route]s
/// on the stack can be restored:
///
///  * [Page]-based routes restore their state if [Page.restorationId] is
///    provided.
///  * [Route]s added with the classic imperative API ([push], [pushNamed], and
///    friends) can never restore their state.
///  * A [Route] added with the restorable imperative API ([restorablePush],
///    [restorablePushNamed], and all other imperative methods with "restorable"
///    in their name) restores its state if all routes below it up to and
///    including the first [Page]-based route below it are restored. If there
///    is no [Page]-based route below it, it only restores its state if all
///    routes below it restore theirs.
///
/// If a [Route] is deemed restorable, the [Navigator] will set its
/// [Route.restorationScopeId] to a non-null value. Routes can use that ID to
/// store and restore their own state. As an example, the [ModalRoute] will
/// use this ID to create a [RestorationScope] for its content widgets. ¿ ÂBÉr ¿ Êl¿ ÊuÅ/// Creates a widget that maintains a stack-based history of child widgets.
///
/// The [onGenerateRoute], [pages], [onGenerateInitialRoutes],
/// [transitionDelegate], [observers] arguments must not be null.
///
/// If the [pages] is not empty, the [onPopPage] must not be null.¿ Ê|	¿ ÊÉ  ¿ Êã$¿ Êë  ¿ Êµ¿ Êª  ¿ Ê…¿ Êœ  ¿ Ê‡E¿ ÊÊ  ¿ Á+¿ Á1  ¿ ÁE¿ ÁK  ¿ Á^D¿ Ád  ¿ Á®'¿ ÁÆ  ¿ Á’!¿ Á€  ¿ Á¸,¿ Ë  ¿ Ë.¿ Ë4  ¿ ËL¿ ËR  ¿ ËiD¿ Ëo  ¿ Êò¿ Ê≠¿ ÊÆ¿ Êû¿ Ê¨¿ Êü¿ Ê£¿ Ê´¿ Ê§¿ Êˇ¿ Á¿ Á	¿ Áx¿ Á~¿ Áó¿ Áü¿ Áò¿ Á†¿ Á°¿ Á ¿ ÁÈ¿ ÁÌ¿ ÁÓ¿ Ë¿ Ë&¿ Ë'¿ Ë¿ Ë%¿ Ë¿ ËB¿ Ëã¿ Ë∏Ü"¿ Ó’Ö /// The list of pages with which to populate the history.
///
/// Pages are turned into routes using [Page.createRoute] in a manner
/// analogous to how [Widget]s are turned into [Element]s (and [State]s or
/// [RenderObject]s) using [Widget.createElement] (and
/// [StatefulWidget.createState] or [RenderObjectWidget.createRenderObject]).
///
/// When this list is updated, the new list is compared to the previous
/// list and the set of routes is updated accordingly.
///
/// Some [Route]s do not correspond to [Page] objects, namely, those that are
/// added to the history using the [Navigator] API ([push] and friends). A
/// [Route] that does not correspond to a [Page] object is called a pageless
/// route and is tied to the [Route] that _does_ correspond to a [Page] object
/// that is below it in the history.
///
/// Pages that are added or removed may be animated as controlled by the
/// [transitionDelegate]. If a page is removed that had other pageless routes
/// pushed on top of it using [push] and friends, those pageless routes are
/// also removed with or without animation as determined by the
/// [transitionDelegate].
///
/// To use this API, an [onPopPage] callback must also be provided to properly
/// clean up this list if a page has been popped.
///
/// If [initialRoute] is non-null when the widget is first created, then
/// [onGenerateInitialRoutes] is used to generate routes that are above those
/// corresponding to [pages] in the initial history. ¿ ÓﬂÇº¿ ÒíÇÅ/// Called when [pop] is invoked but the current [Route] corresponds to a
/// [Page] found in the [pages] list.
///
/// The `result` argument is the value with which the route is to complete
/// (e.g. the value returned from a dialog).
///
/// This callback is responsible for calling [Route.didPop] and returning
/// whether this pop is successful.
///
/// The [Navigator] widget should be rebuilt with a [pages] list that does not
/// contain the [Page] for the given [Route]. The next time the [pages] list
/// is updated, if the [Page] corresponding to this [Route] is still present,
/// it will be interpreted as a new route to display. ¿ Ò†Ä¸¿ ÚäÄø/// The delegate used for deciding how routes transition in or off the screen
/// during the [pages] updates.
///
/// Defaults to [DefaultTransitionDelegate] if not specified, cannot be null. ¿ Ú°Å ¿ ÛïÄŸ/// The name of the first route to show.
///
/// Defaults to [Navigator.defaultRouteName].
///
/// The value is interpreted according to [onGenerateInitialRoutes], which
/// defaults to [defaultGenerateInitialRoutes]. ¿ Û¶a¿ Û¯;/// Called to generate a route for a given [RouteSettings]. ¿ ÙÅÆ¿ ı¨Å{/// Called when [onGenerateRoute] fails to generate a route.
///
/// This callback is typically used for error handling. For example, this
/// callback might always generate a "not found" page that describes the route
/// that wasn't found.
///
/// Unknown routes can arise either from errors in the app or from external
/// requests to push routes, such as from Android intents. ¿ ıøU¿ ˆ+/// A list of observers for this navigator. ¿ ˆÖt¿ ˚{Ö/// Restoration ID to save and restore the state of the navigator, including
/// its history.
///
/// {@template flutter.widgets.navigator.restorationScopeId}
/// If a restoration ID is provided, the navigator will persist its internal
/// state (including the route history as well as the restorable state of the
/// routes) and restore it during state restoration.
///
/// If no restoration ID is provided, the route history stack will not be
/// restored and state restoration is disabled for the individual routes as
/// well.
///
/// The state is persisted in a [RestorationBucket] claimed from
/// the surrounding [RestorationScope] using the provided restoration ID.
/// Within that bucket, the [Navigator] also creates a new [RestorationScope]
/// for its children (the [Route]s).
///
/// See also:
///
///  * [RestorationManager], which explains how state restoration works in
///    Flutter.
///  * [RestorationMixin], which contains a runnable code sample showcasing
///    state restoration in Flutter.
///  * [Navigator], which explains under the heading "state restoration"
///    how and under what conditions the navigator restores its state.
///  * [Navigator.restorablePush], which includes an example showcasing how
///    to push a restorable route unto the navigator.
/// {@endtemplate} ¿ ˚íÉn¿ ˛ÊÉ/// Controls the transfer of focus beyond the first and the last items of a
/// focus scope that defines focus traversal of widgets within a route.
///
/// {@template flutter.widgets.navigator.routeTraversalEdgeBehavior}
/// The focus inside routes installed in the top of the app affects how
/// the app behaves with respect to the platform content surrounding it.
/// For example, on the web, an app is at a minimum surrounded by browser UI,
/// such as the address bar, browser tabs, and more. The user should be able
/// to reach browser UI using normal focus shortcuts. Similarly, if the app
/// is embedded within an `<iframe>` or inside a custom element, it should
/// be able to participate in the overall focus traversal, including elements
/// not rendered by Flutter.
/// {@endtemplate} ¿ ˇÅ ¿ ˇÔÄ…/// The name for the default route of the application.
///
/// See also:
///
///  * [dart:ui.PlatformDispatcher.defaultRouteName], which reflects the route that the
///    application was started with.¿ ¿ 
É˙¿ÌÉ±/// Called when the widget is created to generate the initial list of [Route]
/// objects if [initialRoute] is not null.
///
/// Defaults to [defaultGenerateInitialRoutes].
///
/// The [NavigatorState] and [initialRoute] will be passed to the callback.
/// The callback must return a list of [Route] objects with which the history
/// will be primed.
///
/// When parsing the initialRoute, if there's any chance that the it may
/// contain complex characters, it's best to use the
/// [characters](https://pub.dev/packages/characters) API. This will ensure
/// that extended grapheme clusters and surrogate pairs are treated as single
/// characters by the code, the same way that they appear to the user. For
/// example, the string "üë®‚Äçüë©‚Äçüë¶" appears to the user as a single
/// character and `string.characters.length` intuitively returns 1. On the
/// other hand, `string.length` returns 8, and `string.runes.length` returns
/// 5! ¿	Ñx¿gÑ(/// Whether this navigator should report route update message back to the
/// engine when the top-most route changes.
///
/// If the property is set to true, this navigator automatically sends the
/// route update message to the engine when it detects top-most route changes.
/// The messages are used by the web engine to update the browser URL bar.
///
/// If the property is set to true when the [Navigator] is first created,
/// single-entry history mode is requested using
/// [SystemNavigator.selectSingleEntryHistory]. This means this property
/// should not be used at the same time as [PlatformRouteInformationProvider]
/// is used with a [Router] (including when used with [MaterialApp.router],
/// for example).
///
/// If there are multiple navigators in the widget tree, at most one of them
/// can set this property to true (typically, the top-most one created from
/// the [WidgetsApp]). Otherwise, the web engine may receive multiple route
/// update messages from different navigators and fail to update the URL
/// bar.
///
/// Defaults to false. ¿ÜÄı¿	oÄ—/// {@macro flutter.material.Material.clipBehavior}
///
/// In cases where clipping is not desired, consider setting this property to
/// [Clip.none].
///
/// Defaults to [Clip.hardEdge], and must not be null. ¿	ÄÄø¿
3Äü/// Whether or not the navigator and it's new topmost route should request focus
/// when the new route is pushed onto the navigator.
///
/// Defaults to true.  ¿
DåÄ¿ä⁄/// Push a named route onto the navigator that most tightly encloses the given
/// context.
///
/// {@template flutter.widgets.navigator.pushNamed}
/// The route name will be passed to the [Navigator.onGenerateRoute]
/// callback. The returned route will be pushed into the navigator.
///
/// The new route and the previous route (if any) are notified (see
/// [Route.didPush] and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didPush]).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the route.
///
/// To use [pushNamed], an [Navigator.onGenerateRoute] callback must be
/// provided,
/// {@endtemplate}
///
/// {@template flutter.widgets.navigator.pushNamed.returnValue}
/// Returns a [Future] that completes to the `result` value passed to [pop]
/// when the pushed route is popped off the navigator.
/// {@endtemplate}
///
/// {@template flutter.widgets.Navigator.pushNamed}
/// The provided `arguments` are passed to the pushed route via
/// [RouteSettings.arguments]. Any object can be passed as `arguments` (e.g. a
/// [String], [int], or an instance of a custom `MyRouteArguments` class).
/// Often, a [Map] is used to pass key-value pairs.
///
/// The `arguments` may be used in [Navigator.onGenerateRoute] or
/// [Navigator.onUnknownRoute] to construct the route.
/// {@endtemplate}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _didPushButton() {
///   Navigator.pushNamed(context, '/settings');
/// }
/// ```
/// {@end-tool}
///
/// {@tool snippet}
///
/// The following example shows how to pass additional `arguments` to the
/// route:
///
/// ```dart
/// void _showBerlinWeather() {
///   Navigator.pushNamed(
///     context,
///     '/weather',
///     arguments: <String, String>{
///       'city': 'Berlin',
///       'country': 'Germany',
///     },
///   );
/// }
/// ```
/// {@end-tool}
///
/// {@tool snippet}
///
/// The following example shows how to pass a custom Object to the route:
///
/// ```dart
/// class WeatherRouteArguments {
///   WeatherRouteArguments({ required this.city, required this.country });
///   final String city;
///   final String country;
///
///   bool get isGermanCapital {
///     return country == 'Germany' && city == 'Berlin';
///   }
/// }
///
/// void _showWeather() {
///   Navigator.pushNamed(
///     context,
///     '/weather',
///     arguments: WeatherRouteArguments(city: 'Berlin', country: 'Germany'),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushNamed], which pushes a route that can be restored
///    during state restoration.¿¿¿%¿3  ¿?¿G  ¿W¿`  ¿›¿ﬁ¿»áƒ¿∑Üp/// Push a named route onto the navigator that most tightly encloses the given
/// context.
///
/// {@template flutter.widgets.navigator.restorablePushNamed}
/// Unlike [Route]s pushed via [pushNamed], [Route]s pushed with this method
/// are restored during state restoration according to the rules outlined
/// in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed}
///
/// {@template flutter.widgets.Navigator.restorablePushNamed.arguments}
/// The provided `arguments` are passed to the pushed route via
/// [RouteSettings.arguments]. Any object that is serializable via the
/// [StandardMessageCodec] can be passed as `arguments`. Often, a Map is used
/// to pass key-value pairs.
///
/// The arguments may be used in [Navigator.onGenerateRoute] or
/// [Navigator.onUnknownRoute] to construct the route.
/// {@endtemplate}
///
/// {@template flutter.widgets.Navigator.restorablePushNamed.returnValue}
/// The method returns an opaque ID for the pushed route that can be used by
/// the [RestorableRouteFuture] to gain access to the actual [Route] object
/// added to the navigator and its return value. You can ignore the return
/// value of this method, if you do not care about the route object or the
/// route's return value.
/// {@endtemplate}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _showParisWeather() {
///   Navigator.restorablePushNamed(
///     context,
///     '/weather',
///     arguments: <String, String>{
///       'city': 'Paris',
///       'country': 'France',
///     },
///   );
/// }
/// ```
/// {@end-tool}¿À¿À¿„¿Ò  ¿˝¿  ¿¿  ¿ï¿ñ¿êä1¿'≤àì/// Replace the current route of the navigator that most tightly encloses the
/// given context by pushing the route named [routeName] and then disposing
/// the previous route once the new route has finished animating in.
///
/// {@template flutter.widgets.navigator.pushReplacementNamed}
/// If non-null, `result` will be used as the result of the route that is
/// removed; the future that had been returned from pushing that old route
/// will complete with `result`. Routes such as dialogs or popup menus
/// typically use this mechanism to return the value selected by the user to
/// the widget that created their route. The type of `result`, if provided,
/// must match the type argument of the class of the old route (`TO`).
///
/// The route name will be passed to the [Navigator.onGenerateRoute]
/// callback. The returned route will be pushed into the navigator.
///
/// The new route and the route below the removed route are notified (see
/// [Route.didPush] and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didReplace]). The removed route is notified once the
/// new route has finished animating (see [Route.didComplete]). The removed
/// route's exit animation is not run (see [popAndPushNamed] for a variant
/// that does animated the removed route).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the new route,
/// and `TO` is the type of the return value of the old route.
///
/// To use [pushReplacementNamed], a [Navigator.onGenerateRoute] callback must
/// be provided.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _switchToBrightness() {
///   Navigator.pushReplacementNamed(context, '/settings/brightness');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushReplacementNamed], which pushes a replacement route that
///    can be restored during state restoration.¿'«¿'«¿'⁄¿'⁄¿'Û¿(  ¿(¿(  ¿(%
¿(*  ¿(5¿(>  ¿'å¿'ç¿(≈Ö?¿,·É≈/// Replace the current route of the navigator that most tightly encloses the
/// given context by pushing the route named [routeName] and then disposing
/// the previous route once the new route has finished animating in.
///
/// {@template flutter.widgets.navigator.restorablePushReplacementNamed}
/// Unlike [Route]s pushed via [pushReplacementNamed], [Route]s pushed with
/// this method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushReplacementNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _switchToAudioVolume() {
///   Navigator.restorablePushReplacementNamed(context, '/settings/volume');
/// }
/// ```
/// {@end-tool}¿- ¿- ¿-¿-¿-,¿-:  ¿-F¿-N  ¿-^
¿-c  ¿-n¿-w  ¿,ø¿,¿¿.àÇ¿5ÖÜ˙/// Pop the current route off the navigator that most tightly encloses the
/// given context and push a named route in its place.
///
/// {@template flutter.widgets.navigator.popAndPushNamed}
/// The popping of the previous route is handled as per [pop].
///
/// The new route's name will be passed to the [Navigator.onGenerateRoute]
/// callback. The returned route will be pushed into the navigator.
///
/// The new route, the old route, and the route below the old route (if any)
/// are all notified (see [Route.didPop], [Route.didComplete],
/// [Route.didPopNext], [Route.didPush], and [Route.didChangeNext]). If the
/// [Navigator] has any [Navigator.observers], they will be notified as well
/// (see [NavigatorObserver.didPop] and [NavigatorObserver.didPush]). The
/// animations for the pop and the push are performed simultaneously, so the
/// route below may be briefly visible even if both the old route and the new
/// route are opaque (see [TransitionRoute.opaque]).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the new route,
/// and `TO` is the return value type of the old route.
///
/// To use [popAndPushNamed], a [Navigator.onGenerateRoute] callback must be provided.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _selectAccessibility() {
///   Navigator.popAndPushNamed(context, '/settings/accessibility');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePopAndPushNamed], which pushes a new route that can be
///    restored during state restoration.¿5ï¿5ï¿5®¿5®¿5¡¿5œ  ¿5€¿5„  ¿5Û
¿5¯  ¿6¿6  ¿5_¿5`¿6éÑΩ¿:2ÉO/// Pop the current route off the navigator that most tightly encloses the
/// given context and push a named route in its place.
///
/// {@template flutter.widgets.navigator.restorablePopAndPushNamed}
/// Unlike [Route]s pushed via [popAndPushNamed], [Route]s pushed with
/// this method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.popAndPushNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _selectNetwork() {
///   Navigator.restorablePopAndPushNamed(context, '/settings/network');
/// }
/// ```
/// {@end-tool}¿:L¿:L¿:_¿:_¿:x¿:Ü  ¿:í¿:ö  ¿:™
¿:Ø  ¿:∫¿:√  ¿:¿:¿;Oäz¿DΩà”/// Push the route with the given name onto the navigator that most tightly
/// encloses the given context, and then remove all the previous routes until
/// the `predicate` returns true.
///
/// {@template flutter.widgets.navigator.pushNamedAndRemoveUntil}
/// The predicate may be applied to the same route more than once if
/// [Route.willHandlePopInternally] is true.
///
/// To remove routes until a route with a certain name, use the
/// [RoutePredicate] returned from [ModalRoute.withName].
///
/// To remove all the routes below the pushed route, use a [RoutePredicate]
/// that always returns false (e.g. `(Route<dynamic> route) => false`).
///
/// The removed routes are removed without being completed, so this method
/// does not take a return value argument.
///
/// The new route's name (`routeName`) will be passed to the
/// [Navigator.onGenerateRoute] callback. The returned route will be pushed
/// into the navigator.
///
/// The new route and the route below the bottommost removed route (which
/// becomes the route below the new route) are notified (see [Route.didPush]
/// and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didPush] and [NavigatorObserver.didRemove]). The
/// removed routes are disposed, without being notified, once the new route
/// has finished animating. The futures that had been returned from pushing
/// those routes will not complete.
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the new route.
///
/// To use [pushNamedAndRemoveUntil], an [Navigator.onGenerateRoute] callback
/// must be provided.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _resetToCalendar() {
///   Navigator.pushNamedAndRemoveUntil(context, '/calendar', ModalRoute.withName('/'));
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushNamedAndRemoveUntil], which pushes a new route that can
///    be restored during state restoration.¿D’¿D’¿DÌ¿D˚  ¿E¿E  ¿E ¿E0  ¿E@¿EI  ¿Dó¿Dò¿EÕÖ4¿I·ÉΩ/// Push the route with the given name onto the navigator that most tightly
/// encloses the given context, and then remove all the previous routes until
/// the `predicate` returns true.
///
/// {@template flutter.widgets.navigator.restorablePushNamedAndRemoveUntil}
/// Unlike [Route]s pushed via [pushNamedAndRemoveUntil], [Route]s pushed with
/// this method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamedAndRemoveUntil}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _resetToOverview() {
///   Navigator.restorablePushNamedAndRemoveUntil(context, '/overview', ModalRoute.withName('/'));
/// }
/// ```
/// {@end-tool}¿J¿J¿J¿J)  ¿J5¿J=  ¿JN¿J^  ¿Jn¿Jw  ¿Iø¿I¿¿KÑ˝¿OëÑ/// Push the given route onto the navigator that most tightly encloses the
/// given context.
///
/// {@template flutter.widgets.navigator.push}
/// The new route and the previous route (if any) are notified (see
/// [Route.didPush] and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didPush]).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the route.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _openMyPage() {
///   Navigator.push<void>(
///     context,
///     MaterialPageRoute<void>(
///       builder: (BuildContext context) => const MyPage(),
///     ),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePush], which pushes a route that can be restored during
///    state restoration.¿Oñ¿Oñ¿O©¿O∑  ¿Oø¿O…  ¿Ok¿Ol¿PÜW¿UéÖ)/// Push a new route onto the navigator that most tightly encloses the
/// given context.
///
/// {@template flutter.widgets.navigator.restorablePush}
/// Unlike [Route]s pushed via [push], [Route]s pushed with this method are
/// restored during state restoration according to the rules outlined in the
/// "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.push}
///
/// {@template flutter.widgets.Navigator.restorablePush}
/// The method takes a [RestorableRouteBuilder] as argument, which must be a
/// _static_ function annotated with `@pragma('vm:entry-point')`. It must
/// instantiate and return a new [Route] object that will be added to the
/// navigator. The provided `arguments` object is passed to the
/// `routeBuilder`. The navigator calls the static `routeBuilder` function
/// again during state restoration to re-create the route object.
///
/// Any object that is serializable via the [StandardMessageCodec] can be
/// passed as `arguments`. Often, a Map is used to pass key-value pairs.
/// {@endtemplate}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator.restorable_push.0.dart **
/// {@end-tool}¿Uù¿Uù¿U∞¿Uæ  ¿U∆&¿U·  ¿UÔ¿U¯  ¿Ul¿Um¿Vaàä¿^#á=/// Replace the current route of the navigator that most tightly encloses the
/// given context by pushing the given route and then disposing the previous
/// route once the new route has finished animating in.
///
/// {@template flutter.widgets.navigator.pushReplacement}
/// If non-null, `result` will be used as the result of the route that is
/// removed; the future that had been returned from pushing that old route will
/// complete with `result`. Routes such as dialogs or popup menus typically
/// use this mechanism to return the value selected by the user to the widget
/// that created their route. The type of `result`, if provided, must match
/// the type argument of the class of the old route (`TO`).
///
/// The new route and the route below the removed route are notified (see
/// [Route.didPush] and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didReplace]). The removed route is notified once the
/// new route has finished animating (see [Route.didComplete]).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the new route,
/// and `TO` is the type of the return value of the old route.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _completeLogin() {
///   Navigator.pushReplacement<void, void>(
///     context,
///     MaterialPageRoute<void>(
///       builder: (BuildContext context) => const MyHomePage(),
///     ),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushReplacement], which pushes a replacement route that can
///    be restored during state restoration.¿^3¿^3¿^F¿^F¿^Z¿^h  ¿^p¿^z  ¿^Ö
¿^ä  ¿]˝¿]˛¿^ÔÑ€¿b¨Ép/// Replace the current route of the navigator that most tightly encloses the
/// given context by pushing a new route and then disposing the previous
/// route once the new route has finished animating in.
///
/// {@template flutter.widgets.navigator.restorablePushReplacement}
/// Unlike [Route]s pushed via [pushReplacement], [Route]s pushed with this
/// method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushReplacement}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator.restorable_push_replacement.0.dart **
/// {@end-tool}¿b∆¿b∆¿bŸ¿bŸ¿bÌ¿b˚  ¿c&¿c  ¿c-
¿c2  ¿c9¿cB  ¿bä¿bã¿cŒâ`¿lsà/// Push the given route onto the navigator that most tightly encloses the
/// given context, and then remove all the previous routes until the
/// `predicate` returns true.
///
/// {@template flutter.widgets.navigator.pushAndRemoveUntil}
/// The predicate may be applied to the same route more than once if
/// [Route.willHandlePopInternally] is true.
///
/// To remove routes until a route with a certain name, use the
/// [RoutePredicate] returned from [ModalRoute.withName].
///
/// To remove all the routes below the pushed route, use a [RoutePredicate]
/// that always returns false (e.g. `(Route<dynamic> route) => false`).
///
/// The removed routes are removed without being completed, so this method
/// does not take a return value argument.
///
/// The newly pushed route and its preceding route are notified for
/// [Route.didPush]. After removal, the new route and its new preceding route,
/// (the route below the bottommost removed route) are notified through
/// [Route.didChangeNext]). If the [Navigator] has any [Navigator.observers],
/// they will be notified as well (see [NavigatorObserver.didPush] and
/// [NavigatorObserver.didRemove]). The removed routes are disposed of and
/// notified, once the new route has finished animating. The futures that had
/// been returned from pushing those routes will not complete.
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the new route.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _finishAccountCreation() {
///   Navigator.pushAndRemoveUntil<void>(
///     context,
///     MaterialPageRoute<void>(builder: (BuildContext context) => const MyHomePage()),
///     ModalRoute.withName('/'),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushAndRemoveUntil], which pushes a route that can be
///    restored during state restoration.¿lÜ¿lÜ¿lô¿lß  ¿lØ¿lπ  ¿l¬¿l“  ¿lM¿lN¿m2Ñø¿pÿÉY/// Push a new route onto the navigator that most tightly encloses the
/// given context, and then remove all the previous routes until the
/// `predicate` returns true.
///
/// {@template flutter.widgets.navigator.restorablePushAndRemoveUntil}
/// Unlike [Route]s pushed via [pushAndRemoveUntil], [Route]s pushed with this
/// method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushAndRemoveUntil}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator.restorable_push_and_remove_until.0.dart **
/// {@end-tool}¿pı¿pı¿q¿q  ¿q)¿q9  ¿qI¿qY  ¿qd¿qm  ¿p∂¿p∑¿qıáe¿xçÜ5/// Replaces a route on the navigator that most tightly encloses the given
/// context with a new route.
///
/// {@template flutter.widgets.navigator.replace}
/// The old route must not be currently visible, as this method skips the
/// animations and therefore the removal would be jarring if it was visible.
/// To replace the top-most route, consider [pushReplacement] instead, which
/// _does_ animate the new route, and delays removing the old route until the
/// new route has finished animating.
///
/// The removed route is removed without being completed, so this method does
/// not take a return value argument.
///
/// The new route, the route below the new route (if any), and the route above
/// the new route, are all notified (see [Route.didReplace],
/// [Route.didChangeNext], and [Route.didChangePrevious]). If the [Navigator]
/// has any [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didReplace]). The removed route is disposed without
/// being notified. The future that had been returned from pushing that routes
/// will not complete.
///
/// This can be useful in combination with [removeRouteBelow] when building a
/// non-linear user experience.
///
/// The `T` type argument is the type of the return value of the new route.
/// {@endtemplate}
///
/// See also:
///
///  * [replaceRouteBelow], which is the same but identifies the route to be
///    removed by reference to the route above it, rather than directly.
///  * [restorableReplace], which adds a replacement route that can be
///    restored during state restoration.¿xï¿xï¿x®¿x∂  ¿x¿ ¿xŸ  ¿x‚¿xı  ¿xm¿xn¿y^É¨¿{⁄Ç=/// Replaces a route on the navigator that most tightly encloses the given
/// context with a new route.
///
/// {@template flutter.widgets.navigator.restorableReplace}
/// Unlike [Route]s added via [replace], [Route]s added with this method are
/// restored during state restoration according to the rules outlined in the
/// "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.replace}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}¿{Ï¿{Ï¿{ˇ¿|  ¿| ¿|0  ¿|92¿|]  ¿|m¿|v  ¿{∏¿{π¿}á+¿ÉOÖ‚/// Replaces a route on the navigator that most tightly encloses the given
/// context with a new route. The route to be replaced is the one below the
/// given `anchorRoute`.
///
/// {@template flutter.widgets.navigator.replaceRouteBelow}
/// The old route must not be current visible, as this method skips the
/// animations and therefore the removal would be jarring if it was visible.
/// To replace the top-most route, consider [pushReplacement] instead, which
/// _does_ animate the new route, and delays removing the old route until the
/// new route has finished animating.
///
/// The removed route is removed without being completed, so this method does
/// not take a return value argument.
///
/// The new route, the route below the new route (if any), and the route above
/// the new route, are all notified (see [Route.didReplace],
/// [Route.didChangeNext], and [Route.didChangePrevious]). If the [Navigator]
/// has any [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didReplace]). The removed route is disposed without
/// being notified. The future that had been returned from pushing that routes
/// will not complete.
///
/// The `T` type argument is the type of the return value of the new route.
/// {@endtemplate}
///
/// See also:
///
///  * [replace], which is the same but identifies the route to be removed
///    directly.
///  * [restorableReplaceRouteBelow], which adds a replacement route that can
///    be restored during state restoration.¿Éa¿Éa¿Ét¿ÉÇ  ¿Éå#¿É•  ¿É±¿Éƒ  ¿É/¿É0¿Ñ=Ñ:¿á*Ç¨/// Replaces a route on the navigator that most tightly encloses the given
/// context with a new route. The route to be replaced is the one below the
/// given `anchorRoute`.
///
/// {@template flutter.widgets.navigator.restorableReplaceRouteBelow}
/// Unlike [Route]s added via [restorableReplaceRouteBelow], [Route]s added
/// with this method are restored during state restoration according to the
/// rules outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.replaceRouteBelow}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}¿áF¿áF¿áY¿ág  ¿áq#¿áä  ¿áñ2¿á∫  ¿á ¿á”  ¿á¿á	¿à{Ç«¿ä™Ç/// Whether the navigator that most tightly encloses the given context can be
/// popped.
///
/// {@template flutter.widgets.navigator.canPop}
/// The initial route cannot be popped off the navigator, which implies that
/// this function returns true only if popping the navigator would not remove
/// the initial route.
///
/// If there is no [Navigator] in scope, returns false.
/// {@endtemplate}
///
/// See also:
///
///  * [Route.isFirst], which returns true for routes for which [canPop]
///    returns false. ¿ä±¿äø   ¿ãFÜS¿ëÖr/// Consults the current route's [Route.willPop] method, and acts accordingly,
/// potentially popping the route as a result; returns whether the pop request
/// should be considered handled.
///
/// {@template flutter.widgets.navigator.maybePop}
/// If [Route.willPop] returns [RoutePopDisposition.pop], then the [pop]
/// method is called, and this method returns true, indicating that it handled
/// the pop request.
///
/// If [Route.willPop] returns [RoutePopDisposition.doNotPop], then this
/// method returns true, but does not do anything beyond that.
///
/// If [Route.willPop] returns [RoutePopDisposition.bubble], then this method
/// returns false, and the caller is responsible for sending the request to
/// the containing scope (e.g. by closing the application).
///
/// This method is typically called for a user-initiated [pop]. For example on
/// Android it's called by the binding for the system's back button.
///
/// The `T` type argument is the type of the return value of the current
/// route. (Typically this isn't known; consider specifying `dynamic` or
/// `Null`.)
/// {@endtemplate}
///
/// See also:
///
///  * [Form], which provides an `onWillPop` callback that enables the form
///    to veto a [pop] initiated by the app's back button.
///  * [ModalRoute], which provides a `scopedWillPopCallback` that can be used
///    to define the route's `willPop` method.¿ë&¿ë&¿ë9¿ëG  ¿ëQ	¿ëU  ¿êı¿êˆ¿ëùáå¿òæÜ¶/// Pop the top-most route off the navigator that most tightly encloses the
/// given context.
///
/// {@template flutter.widgets.navigator.pop}
/// The current route's [Route.didPop] method is called first. If that method
/// returns false, then the route remains in the [Navigator]'s history (the
/// route is expected to have popped some internal state; see e.g.
/// [LocalHistoryRoute]). Otherwise, the rest of this description applies.
///
/// If non-null, `result` will be used as the result of the route that is
/// popped; the future that had been returned from pushing the popped route
/// will complete with `result`. Routes such as dialogs or popup menus
/// typically use this mechanism to return the value selected by the user to
/// the widget that created their route. The type of `result`, if provided,
/// must match the type argument of the class of the popped route (`T`).
///
/// The popped route and the route below it are notified (see [Route.didPop],
/// [Route.didComplete], and [Route.didPopNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didPop]).
///
/// The `T` type argument is the type of the return value of the popped route.
///
/// The type of `result`, if provided, must match the type argument of the
/// class of the popped route (`T`).
/// {@endtemplate}
///
/// {@tool snippet}
///
/// Typical usage for closing a route is as follows:
///
/// ```dart
/// void _close() {
///   Navigator.pop(context);
/// }
/// ```
/// {@end-tool}
///
/// A dialog box might be closed with a result:
///
/// ```dart
/// void _accept() {
///   Navigator.pop(context, true); // dialog returns true
/// }
/// ```¿ò¬¿ò¬¿ò’¿ò„  ¿òÌ	¿òÒ  ¿òû¿òü¿ô-É•¿úeÇ˘/// Calls [pop] repeatedly on the navigator that most tightly encloses the
/// given context until the predicate returns true.
///
/// {@template flutter.widgets.navigator.popUntil}
/// The predicate may be applied to the same route more than once if
/// [Route.willHandlePopInternally] is true.
///
/// To pop until a route with a certain name, use the [RoutePredicate]
/// returned from [ModalRoute.withName].
///
/// The routes are closed with null as their `return` value.
///
/// See [pop] for more details of the semantics of popping a route.
/// {@endtemplate}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _logout() {
///   Navigator.popUntil(context, ModalRoute.withName('/login'));
/// }
/// ```
/// {@end-tool} ¿ún¿ú|  ¿úÑ¿úî   ¿ú÷Ñ€¿°?Ñ./// Immediately remove `route` from the navigator that most tightly encloses
/// the given context, and [Route.dispose] it.
///
/// {@template flutter.widgets.navigator.removeRoute}
/// The removed route is removed without being completed, so this method does
/// not take a return value argument. No animations are run as a result of
/// this method call.
///
/// The routes below and above the removed route are notified (see
/// [Route.didChangeNext] and [Route.didChangePrevious]). If the [Navigator]
/// has any [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didRemove]). The removed route is disposed without
/// being notified. The future that had been returned from pushing that routes
/// will not complete.
///
/// The given `route` must be in the history; this method will throw an
/// exception if it is not.
///
/// Ongoing gestures within the current route are canceled.
/// {@endtemplate}
///
/// This method is used, for example, to instantly dismiss dropdown menus that
/// are up when the screen's orientation changes. ¿°K¿°Y  ¿°a¿°q   ¿°µÑ‰¿¶Ñ%/// Immediately remove a route from the navigator that most tightly encloses
/// the given context, and [Route.dispose] it. The route to be removed is the
/// one below the given `anchorRoute`.
///
/// {@template flutter.widgets.navigator.removeRouteBelow}
/// The removed route is removed without being completed, so this method does
/// not take a return value argument. No animations are run as a result of
/// this method call.
///
/// The routes below and above the removed route are notified (see
/// [Route.didChangeNext] and [Route.didChangePrevious]). If the [Navigator]
/// has any [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didRemove]). The removed route is disposed without
/// being notified. The future that had been returned from pushing that routes
/// will not complete.
///
/// The given `anchorRoute` must be in the history and must have a route below
/// it; this method will throw an exception if it is not or does not.
///
/// Ongoing gestures within the current route are canceled.
/// {@endtemplate} ¿¶"¿¶0  ¿¶8¿¶H   ¿¶ùÜ[¿©gÇã/// The state from the closest instance of this class that encloses the given
/// context.
///
/// Typical usage is as follows:
///
/// ```dart
/// Navigator.of(context)
///   ..pop()
///   ..pop()
///   ..pushNamed('/settings');
/// ```
///
/// If `rootNavigator` is set to true, the state from the furthest instance of
/// this class is given instead. Useful for pushing contents above all
/// subsequent instances of [Navigator].
///
/// If there is no [Navigator] in the give `context`, this function will throw
/// a [FlutterError] in debug mode, and an exception in release mode.
///
/// This method can be expensive (it walks the element tree). ¿©o¿©}  ¿©ã¿©ë  ¿©†¿¨¸Ö¿ØÛÇ≥/// The state from the closest instance of this class that encloses the given
/// context, if any.
///
/// Typical usage is as follows:
///
/// ```dart
/// NavigatorState? navigatorState = Navigator.maybeOf(context);
/// if (navigatorState != null) {
///   navigatorState
///     ..pop()
///     ..pop()
///     ..pushNamed('/settings');
/// }
/// ```
///
/// If `rootNavigator` is set to true, the state from the furthest instance of
/// this class is given instead. Useful for pushing contents above all
/// subsequent instances of [Navigator].
///
/// Will return null if there is no ancestor [Navigator] in the `context`.
///
/// This method can be expensive (it walks the element tree). ¿∞ ¿∞  ¿∞¿∞"  ¿∞1¿≤åÏ¿µÇ∆/// Turn a route name into a set of [Route] objects.
///
/// This is the default value of [onGenerateInitialRoutes], which is used if
/// [initialRoute] is not null.
///
/// If this string starts with a `/` character and has multiple `/` characters
/// in it, then the string is split on those characters and substrings from
/// the start of the string up to each such character are, in turn, used as
/// routes to push.
///
/// For example, if the route `/stocks/HOOLI` was used as the [initialRoute],
/// then the [Navigator] would push the following routes on startup: `/`,
/// `/stocks`, `/stocks/HOOLI`. This enables deep linking while allowing the
/// application to maintain a predictable route history. ¿µ5¿µE  ¿µO¿µW   ¿ø	=¿ø$   ¿ø	¿ø
 ¿ŒHÄ”¿ŒN       ¿œ∑È¿œ#  ¿œQÇ ¿œQ¿œ\ ¿œb
¿œh  ¿œv%¿œê  ¿œ£¿œ≤  ¿œ¬¿œ»  .¿œË¿œÓ¿–¿œ˙¿œÔ¿œ¿–¿œ˝¿–¿–¿–¿–¿–%¿—9¿–˘¿–ø¿–å¿–Z¿–?¿–2¿–B¿–Q¿–R¿–u¿–h¿–x¿–á¿–à¿–ß¿–ö¿–™¿–π¿–∫¿–⁄¿–Õ¿–›¿–Ï¿–Ì¿—¿—¿—¿—&¿—'¿—R¿—E¿—T¿—e&¿—Ü ¿—e¿—f¿—è5¿—Æ  ¿—»¿—”  ¿—·4¿—˜ ¿“¿“¿“¿“¿“*  ¿“:9¿“J ¿“g¿“£:¿“≤ ¿“—¿”5¿” ¿”/¿Áç¿Áï  ¿Ë"$¿Ë' ¿ËB¿˛Å)¿˛Ü ¿˛•
¿”hÇw¿‘
Äë/// Restoration ID to be used for the encapsulating route when restoration is
/// enabled for it or null if restoration cannot be enabled for it.   ¿˜ÈÄó¿˜Ú    ¿¯ÑÄï¿¯ç    ¿˘U¿˘&    ¿˘vÄ¶¿˘    ¿˙ Ä´¿˙)    ¿˝Ã]¿˝·   ¿˝Ã¿˝Õ¿˛-Q¿˛B   ¿˛-¿˛.¿(F¿1    ¿qÄì¿u  ¿à
¿é   ¿’„Ä˚¿’Ë  ¿’ˆ¿÷   ¿÷‚Å⁄¿÷Á  ¿÷Û!¿◊  ¿◊(¿◊0   ¿ÿ¿áP¿ÿ≈  ¿ÿ“!¿ÿÎ  ¿ÿı¿Ÿ  ¿Ÿ!¿Ÿ)  ¿Ÿ2(¿ŸL   ¿‡Ää¿‡  ¿‡*¿‡:   ¿‡¢Éπ¿·÷Å /// Process the to-be-popped route.
///
/// A route can be marked for pop by transition delegate or Navigator.pop,
/// this method actually pops the route by calling Route.didPop.
///
/// Returns true if the route is popped; otherwise, returns false if the route
/// refuses to be popped. ¿·‚!¿·˚  ¿‚(¿‚   ¿‰_Ä’¿‰d    ¿Â8ÅÇ¿Â=  ¿ÂM!¿Âf  ¿Âp(¿Âä   ¿ÊæÄÀ¿Ê√  ¿ÊÃ!¿ÊÂ  ¿ÊÔ¿Ê˛   ¿Áßw¿Á¨ ¿Á∞¿Á∞¿Á≥	¿Á∑   ¿ËzÅ–¿Ë  ¿Ëà¿Ëé  ¿Ëö¿ÍÅÅ˝¿ÍÜ ¿Íè¿Íè¿Íí¿Íï  ¿Íû¿Í§  ¿Í∞¿ÏÇÄÅ¿Ïá    ¿ÌÅI¿Ì∏Ä£/// Disposes this route entry and its [route] immediately.
///
/// This method does not wait for the widget subtree of the [route] to unmount
/// before disposing.   ¿ÓTâë¿ÔóÅ//// Disposes this route entry and its [route].
///
/// This method waits for the widget subtree of the [route] to unmount before
/// disposing. If subtree is already unmounted, this method calls
/// [forcedDispose] immediately.
///
/// Use [forcedDispose] if the [route] need to be disposed immediately.   ¿˙œÅj¿˙‘  ¿˙Ô¿˚    ¿¸=E¿¸I  ¿¸\¿¸i   ¿¸Öo¿¸ë  ¿¸π¿¸∆   ¿¸˜M¿˝  ¿˝¿˝'   ¿˝HÄÄ¿˝d  ¿˝u¿˝Ö   ¿˛ØG¿˛¥    ¿˛˙ÅI¿ˇ   ¿˛˙¿˛˚¿ GÅF¿ X   ¿ G¿ H¿ëÅÄ¿¢  ¿Æ¿∑  ¿ë¿í¿Åò¿&  ¿7¿@  ¿¿¿±Ås¿¬   ¿±¿≤ ¿ÄÔ¿  ¿1K ¿1¿F ¿L¿R  ¿c¿i   ¿!¿î  ¿§$¿∫   ¿Õ(¿“  ¿Ÿ¿Ï    ¿˘Å¿ˇ  ¿;Q ¿;¿T ¿Z¿a  ¿r¿y     ¿êm¿°  ¿®¿ª  ¿ê¿ë ¿	Å¿	  ¿	BP ¿	B¿	Z ¿	`¿	g  ¿	x¿	     ¿	ñl¿	ß  ¿	Æ¿	¡  ¿	ñ¿	ó ¿
Å¿
  ¿
JS ¿
J¿
e ¿
k¿
r  ¿
É¿
ä     ¿
°o¿
≤  ¿
π¿
Ã  ¿
°¿
¢ ¿Å#¿  ¿YT ¿Y¿u ¿{¿Ç  ¿ì¿ö     ¿±ÄÑ¿¬  ¿…¿‹  ¿±¿≤ ¿9¿ »¿¥t/// The state for a [Navigator] widget.
///
/// A reference to this class can be obtained by calling [Navigator.of].  ¿(¿-  ¿<,¿N ¿f¿g¿Y¿e¿Z¿lÅœ¿
Åv/// A set for entries that are waiting to dispose until their subtrees are
/// disposed.
///
/// These entries are not considered to be in the _history and will usually
/// remove themselves from this set once they can dispose.
///
/// The navigator keep track of these entries so that, in case the navigator
/// itself is disposed, it can dispose these entries immediately.¿9¿:¿,¿8¿-¿?@¿V ¿m¿}¿~¿É[¿¶ ¿¿¿≈¿€¿∆¿‹¿›¿‚[¿ ¿¿$¿:¿%¿;¿<¿S~¿£=/// The [FocusNode] for the [Focus] that encloses the routes.¿Ø¿∏¿–¿√¿π¿≈¿÷¿€ ¿Í¿2(¿B  ¿_0¿|  ¿RS¿k ¿ê¿ù¿°¿û¿¢¿§¿£¿B¿B  ¿B3¿B8 ¿BM¿pr¿pw ¿pä¿Ü$¿ä ¿©¿¢Ä¢¿
K/// Notifies its listeners if the value of [userGestureInProgress] changes.¿*¿7¿<¿8¿=¿C¿>¿!Ñ(¿!ì ¿!™¿!´¿!•¿!©¿!¶¿BÅ¿#R/// The [FocusScopeNode] for the [FocusScope] that encloses the topmost navigator.  ¿ó¿ò¿¢¿¿®¿÷¿™V¿≤    ¿$”C¿$Î   ¿$”¿$‘¿@›y¿A2@/// The overlay this navigator uses for its visual presentation.   ¿AZÄ±¿Au    ¿C@¿K    ¿ÆÄù¿≤  ¿ 	¿œ   ¿OÅO¿aÄ˙/// Whether a route is currently being manipulated by the user, e.g.
/// as during an iOS back gesture.
///
/// See also:
///
///  * [userGestureInProgressNotifier], which notifies its listeners if
///    the value of [userGestureInProgress] changes.   >¿îÜ{¿•   ¿î¿ï¿â‡¿  ¿"¿6  ¿@¿F  ¿¿¿#ËÄË¿#˘  ¿$	¿$  ¿#Ë¿#È¿%ÄÚ¿%+   ¿%¿%¿&ÅJ¿&M5/// Dispose all lingering router entries immediately.   ¿'^Å¿'j  ¿'}¿'ä  ¿'ë¿'†   ¿({â€¿(Ä  ¿(ñ!¿(ß   ¿2ZÄÚ¿2_    ¿3Pà¿3a  ¿3q¿3|  ¿3P¿3Q¿;WÅf¿;\    ¿<¡Äª¿<“   ¿<¡¿<¬¿=ÄÄ·¿=ë   ¿=Ä¿=Å¿>eÇt¿>v   ¿>e¿>f¿BVÆ¿B[    ¿pîôR¿pô  ¿pØ¿pµ  ¿p«¿âÍÇ;¿âÔ    ¿å)Éñ¿å.    ¿è√Ä¨¿è–  ¿è‡	¿èÂ  ¿èÎ¿ê   ¿êsÄ¶¿êw  ¿êá	¿êå  ¿êí¿ê®   ¿ëÄÊ¿ë*  ¿ë9	¿ë>  ¿ëD¿ëZ   ¿íà:¿í ¿í¿í¿í!¿í)  ¿í0¿íB  ¿íL¿íR  ¿í]¿öEÇÓ¿úïÇ/// Push a named route onto the navigator.
///
/// {@macro flutter.widgets.navigator.pushNamed}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _aaronBurrSir() {
///   navigator.pushNamed('/nyc/1776');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushNamed], which pushes a route that can be restored
///    during state restoration.¿úü¿úü¿ú∑¿úø  ¿úœ¿úÿ  ¿úv¿úw¿ù7Ñ4¿üdÅÈ/// Push a named route onto the navigator.
///
/// {@macro flutter.widgets.navigator.restorablePushNamed}
///
/// {@macro flutter.widgets.navigator.pushNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _openDetails() {
///   navigator.restorablePushNamed('/nyc/1776');
/// }
/// ```
/// {@end-tool}¿üx¿üx¿üê¿üò  ¿ü®¿ü±  ¿üI¿üJ¿°oÉÚ¿§uÇ¥/// Replace the current route of the navigator by pushing the route named
/// [routeName] and then disposing the previous route once the new route has
/// finished animating in.
///
/// {@macro flutter.widgets.navigator.pushReplacementNamed}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _startBike() {
///   navigator.pushReplacementNamed('/jouett/1781');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushReplacementNamed], which pushes a replacement route that
///  can be restored during state restoration.¿§ä¿§ä¿§ù¿§ù¿§∂¿§æ  ¿§Œ
¿§”  ¿§ﬁ¿§Á  ¿§V¿§W¿•eÖ)¿®>Çë/// Replace the current route of the navigator by pushing the route named
/// [routeName] and then disposing the previous route once the new route has
/// finished animating in.
///
/// {@macro flutter.widgets.navigator.restorablePushReplacementNamed}
///
/// {@macro flutter.widgets.navigator.pushReplacementNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _startCar() {
///   navigator.restorablePushReplacementNamed('/jouett/1781');
/// }
/// ```
/// {@end-tool}¿®]¿®]¿®p¿®p¿®â¿®ë  ¿®°
¿®¶  ¿®±¿®∫  ¿®#¿®$¿™íÉ[¿≠Ç;/// Pop the current route off the navigator and push a named route in its
/// place.
///
/// {@macro flutter.widgets.navigator.popAndPushNamed}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _begin() {
///   navigator.popAndPushNamed('/nyc/1776');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePopAndPushNamed], which pushes a new route that can be
///    restored during state restoration.¿≠-¿≠-¿≠@¿≠@¿≠Y¿≠a  ¿≠q
¿≠v  ¿≠Å¿≠ä  ¿¨˛¿¨ˇ¿≠ÒÉD¿∞TÇ/// Pop the current route off the navigator and push a named route in its
/// place.
///
/// {@macro flutter.widgets.navigator.restorablePopAndPushNamed}
///
/// {@macro flutter.widgets.navigator.popAndPushNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _end() {
///   navigator.restorablePopAndPushNamed('/nyc/1776');
/// }
/// ```
/// {@end-tool}¿∞n¿∞n¿∞Å¿∞Å¿∞ö¿∞¢  ¿∞≤
¿∞∑  ¿∞¬¿∞À  ¿∞9¿∞:¿±9ÉÈ¿¥9Ç∞/// Push the route with the given name onto the navigator, and then remove all
/// the previous routes until the `predicate` returns true.
///
/// {@macro flutter.widgets.navigator.pushNamedAndRemoveUntil}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _handleOpenCalendar() {
///   navigator.pushNamedAndRemoveUntil('/calendar', ModalRoute.withName('/'));
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushNamedAndRemoveUntil], which pushes a new route that can
///    be restored during state restoration.¿¥Q¿¥Q¿¥i¿¥q  ¿¥Ç¿¥í  ¿¥¢¿¥´  ¿¥¿¥¿µ&Ö&¿∑˙Çé/// Push the route with the given name onto the navigator, and then remove all
/// the previous routes until the `predicate` returns true.
///
/// {@macro flutter.widgets.navigator.restorablePushNamedAndRemoveUntil}
///
/// {@macro flutter.widgets.navigator.pushNamedAndRemoveUntil}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _openCalendar() {
///   navigator.restorablePushNamedAndRemoveUntil('/calendar', ModalRoute.withName('/'));
/// }
/// ```
/// {@end-tool}¿∏¿∏¿∏4¿∏<  ¿∏M¿∏]  ¿∏m¿∏v  ¿∑ﬂ¿∑‡¿∫PÉ¿º…Ç'/// Push the given route onto the navigator.
///
/// {@macro flutter.widgets.navigator.push}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _openPage() {
///   navigator.push<void>(
///     MaterialPageRoute<void>(
///       builder: (BuildContext context) => const MyPage(),
///     ),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePush], which pushes a route that can be restored during
///    state restoration.¿ºŒ¿ºŒ¿º·¿ºÎ  ¿º™¿º´¿ΩmÅS¿Ωr  ¿Ωâ¿Ωì   ¿æƒÑÅ¿¿¬Åƒ/// Push a new route onto the navigator.
///
/// {@macro flutter.widgets.navigator.restorablePush}
///
/// {@macro flutter.widgets.navigator.push}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator_state.restorable_push.0.dart **
/// {@end-tool}¿¿—¿¿—¿¿‰&¿¿ˇ  ¿¡¿¡  ¿¿ß¿¿®¿√IÅê¿√N  ¿√Y¿√f   ¿ƒ›Ö%¿ƒ‚  ¿ƒÛ¿≈   ¿ ÑJ¿Õ5ÇŸ/// Replace the current route of the navigator by pushing the given route and
/// then disposing the previous route once the new route has finished
/// animating in.
///
/// {@macro flutter.widgets.navigator.pushReplacement}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _doOpenPage() {
///   navigator.pushReplacement<void, void>(
///     MaterialPageRoute<void>(
///       builder: (BuildContext context) => const MyHomePage(),
///     ),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushReplacement], which pushes a replacement route that can
///    be restored during state restoration.¿ÕE¿ÕE¿ÕX¿ÕX¿Õl¿Õv  ¿ÕÅ
¿ÕÜ  ¿Õ¿Õ¿ŒTÖg¿–ÒÇ_/// Replace the current route of the navigator by pushing a new route and
/// then disposing the previous route once the new route has finished
/// animating in.
///
/// {@macro flutter.widgets.navigator.restorablePushReplacement}
///
/// {@macro flutter.widgets.navigator.pushReplacement}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator_state.restorable_push_replacement.0.dart **
/// {@end-tool}¿—¿—¿—¿—¿—2&¿—M  ¿—\
¿—a  ¿—h¿—q  ¿–÷¿–◊¿”øÇ¶¿”ƒ ¿”⁄¿”⁄¿”Ó¿”˚  ¿‘
¿‘   ¿÷iÑR¿Ÿ{Çæ/// Push the given route onto the navigator, and then remove all the previous
/// routes until the `predicate` returns true.
///
/// {@macro flutter.widgets.navigator.pushAndRemoveUntil}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _resetAndOpenPage() {
///   navigator.pushAndRemoveUntil<void>(
///     MaterialPageRoute<void>(builder: (BuildContext context) => const MyHomePage()),
///     ModalRoute.withName('/'),
///   );
/// }
/// ```
/// {@end-tool}
///
///
/// See also:
///
///  * [restorablePushAndRemoveUntil], which pushes a route that can be
///    restored during state restoration.¿Ÿé¿Ÿé¿Ÿ°¿Ÿ´  ¿Ÿ¥¿Ÿƒ  ¿Ÿ\¿Ÿ]¿⁄øÖJ¿›<ÇA/// Push a new route onto the navigator, and then remove all the previous
/// routes until the `predicate` returns true.
///
/// {@macro flutter.widgets.navigator.restorablePushAndRemoveUntil}
///
/// {@macro flutter.widgets.navigator.pushAndRemoveUntil}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator_state.restorable_push_and_remove_until.0.dart **
/// {@end-tool}¿›Y¿›Y¿›l)¿›á  ¿›ó¿›ß  ¿›≤¿›ª  ¿›!¿›"¿‡Çµ¿‡  ¿‡+¿‡8  ¿‡>¿‡N   ¿‚∆Ç»¿‰{Åá/// Replaces a route on the navigator with a new route.
///
/// {@macro flutter.widgets.navigator.replace}
///
/// See also:
///
///  * [replaceRouteBelow], which is the same but identifies the route to be
///    removed by reference to the route above it, rather than directly.
///  * [restorableReplace], which adds a replacement route that can be
///    restored during state restoration.¿‰É¿‰É¿‰ò ¿‰±  ¿‰∫¿‰Õ  ¿‰b¿‰c¿ÂíÑO¿ÊÏÅ,/// Replaces a route on the navigator with a new route.
///
/// {@macro flutter.widgets.navigator.restorableReplace}
///
/// {@macro flutter.widgets.navigator.replace}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}¿Ê˛¿Ê˛¿Á ¿Á,  ¿Á52¿ÁY  ¿Ái¿Ár  ¿Ê—¿Ê“¿ÈÂÉÑ¿ÈÍ  ¿È¯¿Í  ¿Í¿Í   ¿ÌmÉ¿ÔEÅ®/// Replaces a route on the navigator with a new route. The route to be
/// replaced is the one below the given `anchorRoute`.
///
/// {@macro flutter.widgets.navigator.replaceRouteBelow}
///
/// See also:
///
///  * [replace], which is the same but identifies the route to be removed
///    directly.
///  * [restorableReplaceRouteBelow], which adds a replacement route that can
///    be restored during state restoration.¿ÔW¿ÔW¿Ôl#¿ÔÖ  ¿Ôë¿Ô§  ¿Ô,¿Ô-¿ÇÑƒ¿Ú9Åá/// Replaces a route on the navigator with a new route. The route to be
/// replaced is the one below the given `anchorRoute`.
///
/// {@macro flutter.widgets.navigator.restorableReplaceRouteBelow}
///
/// {@macro flutter.widgets.navigator.replaceRouteBelow}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}¿ÚU¿ÚU¿Új#¿ÚÉ  ¿Úè2¿Ú≥  ¿Ú√¿ÚÃ  ¿Ú¿Ú¿ıJÉX¿ıO  ¿ıb¿ıo  ¿ıu¿ıÖ   ¿¯¶É¿˘ãÄœ/// Whether the navigator can be popped.
///
/// {@macro flutter.widgets.navigator.canPop}
///
/// See also:
///
///  * [Route.isFirst], which returns true for routes for which [canPop]
///    returns false.   ¿˚≠Öı¿˝ıÇ/// Consults the current route's [Route.willPop] method, and acts accordingly,
/// potentially popping the route as a result; returns whether the pop request
/// should be considered handled.
///
/// {@macro flutter.widgets.navigator.maybePop}
///
/// See also:
///
///  * [Form], which provides an `onWillPop` callback that enables the form
///    to veto a [pop] initiated by the app's back button.
///  * [ModalRoute], which provides a `scopedWillPopCallback` that can be used
///    to define the route's `willPop` method.¿˝˛¿˝˛¿˛	¿˛  ¿˝‘¿˝’¿¶Ö‹¿øÅœ/// Pop the top-most route off the navigator.
///
/// {@macro flutter.widgets.navigator.pop}
///
/// {@tool snippet}
///
/// Typical usage for closing a route is as follows:
///
/// ```dart
/// void _handleClose() {
///   navigator.pop();
/// }
/// ```
/// {@end-tool}
/// {@tool snippet}
///
/// A dialog box might be closed with a result:
///
/// ```dart
/// void _handleAccept() {
///   navigator.pop(true); // dialog returns true
/// }
/// ```
/// {@end-tool}¿√¿√¿ÿ	¿‹  ¿¶¿ß¿ÜÇè¿”Å+/// Calls [pop] repeatedly until the predicate returns true.
///
/// {@macro flutter.widgets.navigator.popUntil}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _doLogout() {
///   navigator.popUntil(ModalRoute.withName('/login'));
/// }
/// ```
/// {@end-tool} ¿‹¿Ï   ¿
Ç⁄¿
¶ÄÅ/// Immediately remove `route` from the navigator, and [Route.dispose] it.
///
/// {@macro flutter.widgets.navigator.removeRoute} ¿
≤¿
¬   ¿˜ÑD¿—ÄÃ/// Immediately remove a route from the navigator, and [Route.dispose] it. The
/// route to be removed is the one below the given `anchorRoute`.
///
/// {@macro flutter.widgets.navigator.removeRouteBelow} ¿‚¿Ú   ¿?áO¿∏Ç]/// Complete the lifecycle for a route that has been popped off the navigator.
///
/// When the navigator pops a route, the navigator retains a reference to the
/// route in order to call [Route.dispose] if the navigator itself is removed
/// from the tree. When the route is finished with any exit animation, the
/// route should call this function to complete its lifecycle (e.g., to
/// receive a call to [Route.dispose]).
///
/// The given `route` must have already received a call to [Route.didPop].
/// This function may be called directly from [Route.didPop] if [Route.didPop]
/// will return true. ¿∆¿÷   ¿íÄ≠¿∞ ¿æ¿æ¿¡	¿…  ¿í¿ì¿IÉn¿Äº/// The navigator is being controlled by a user gesture.
///
/// For example, called when the user beings an iOS back gesture.
///
/// When the gesture finishes, call [didStopUserGesture].   ¿ªÅ≈¿ xÄØ/// A user gesture completed.
///
/// Notifies the navigator that a gesture regarding which the navigator was
/// previously notified with [didStartUserGesture] has completed.   ¿!±]¿!∂  ¿!…¿!€   ¿"b¿"  ¿"0¿">   ¿"xÉ"¿"}    ¿%ûÅ¿%¯J/// Gets first route entry satisfying the predicate, or null if not found.¿&¿&¿&¿&-   ¿&øÅ8¿'I/// Gets last route entry satisfying the predicate, or null if not found.¿'3¿'3¿'6¿'L   ¿'˚Ö¿(  ¿(¿("  ¿'˚¿'¸ ¿-9Üƒ¿-H  ¿-d# ¿-d¿-{ ¿-|	¿-Ç   ¿-äÄ´¿-©¿-™¿-Ø ¿-∂¿-«  ¿-–¿-‚  ¿-¿-˛   ¿.8Ä‘¿.W¿.X¿.a ¿.h5¿.í  ¿.£¿.µ  ¿.√¿.—   ¿/Ç¿//¿/0¿/D ¿/E¿/M   ¿1& ¿1B  ¿1h¿1p  ¿1J¿1R    ¿1Ü¿1è    ¿1®v¿1Ø    ¿2"^¿2@   ¿2"¿2#¿2ÑB¿2†  ¿2¨¿2º  ¿2Ñ¿2Ö¿2 Å1¿2÷  ¿2„¿2Û  ¿2˛2¿3  ¿3¿3,¿3- ¿3ˇÉˇ¿4  ¿4FÄ§ ¿4F¿4b ¿4i¿4x  ¿4Å¿4ê  ¿4û ¿4≠  ¿4«¿4Ã¿4Ë¿4Õ¿4‚¿4„¿4ÓÅ¿5¿5¿5' ¿5(¿57   ¿6È(¿6ˇ ¿6È¿6Í¿7¿7"  ¿7*¿78   ¿6Ä‘¿6*   ¿6¿6¿7FÄ∂¿7a  ¿7m¿7}  ¿7F¿7G ¿8 Ü!¿8  ¿8KÄ¥ ¿8K¿8k ¿8r¿8Å  ¿8í¿8°  ¿8Ø ¿8æ  ¿8ÿ¿8›¿8˝¿8ﬁ¿8Û¿8Ù¿9Åÿ¿9+¿9,¿9@ ¿9A¿9P   ¿<˙(¿= ¿<˙¿<˚¿=&2¿=L  ¿=\¿=j  ¿:ﬂÄû¿;e   ¿:ﬂ¿:‡¿;ÅÅu¿;ö   ¿;Å¿;Ç¿=xÄß¿=ì  ¿=ü¿=Ø  ¿=x¿=y ¿>#ï-¿>)   ¿>∫1¿>÷  ¿M›2¿MÊ    ¿S&(¿S;   ¿S&¿S'	¿? ä¸¿?  ¿?¿?   ¿J Å¿J  ¿J¿J'  ¿J2¿J@  ¿JI'¿Je  ¿Jv¿JÑ   ¿KÙÅ,¿K˘  ¿L	¿L%  ¿L'¿LC   ¿M$Ä¢¿M)    ¿NÇÑ¿N%  ¿N;¿NI  ¿NN¿N^   ¿PøS¿PÁ   ¿Pø¿P¿¿QÅP¿Q>  ¿QM¿QV  ¿Q¿Q¿Rjj¿R{  ¿Râ!¿R¶  ¿Rj¿Rk¿RÿJ¿RÏ   ¿Rÿ¿RŸ ¿WVîk¿]ÕÜp/// Gives access to a [Route] object and its return value that was added to a
/// navigator via one of its "restorable" API methods.
///
/// When a [State] object wants access to the return value of a [Route] object
/// it has pushed onto the [Navigator], a [RestorableRouteFuture] ensures that
/// it will also have access to that value after state restoration.
///
/// To show a new route on the navigator defined by the [navigatorFinder], call
/// [present], which will invoke the [onPresent] callback. The [onPresent]
/// callback must add a new route to the navigator provided to it using one
/// of the "restorable" API methods. When the newly added route completes, the
/// [onComplete] callback executes. It is given the return value of the route,
/// which may be null.
///
/// While the route added via [present] is shown on the navigator, it can be
/// accessed via the [route] getter.
///
/// If the property is restored to a state in which [present] had been called on
/// it, but the route has not completed yet, the [RestorableRouteFuture] will
/// obtain the restored route object from the navigator again and call
/// [onComplete] once it completes.
///
/// The [RestorableRouteFuture] can only keep track of one active [route].
/// When [present] has been called to add a route, it may only be called again
/// after the previously added route has completed.
///
/// {@tool dartpad}
/// This example uses a [RestorableRouteFuture] in the `_MyHomeState` to push a
/// new `MyCounter` route and to retrieve its return value.
///
/// ** See code in examples/api/lib/widgets/navigator/restorable_route_future.0.dart **
/// {@end-tool}¿]„¿]„¿^Ä˙ ¿^Ö¿^öp/// Creates a [RestorableRouteFuture].
///
/// The [onPresent] and [navigatorFinder] arguments must not be null.¿^°.¿^ß  ¿^’¿^‰  ¿^Ú¿^¯  ¿^∏¿_Å
¿`Ä÷/// A callback that given the [BuildContext] of the [State] object to which
/// this property is registered returns the [NavigatorState] of the navigator
/// to which the route instantiated in [onPresent] is added. ¿`Ç:¿bLÅ¸/// A callback that add a new [Route] to the provided navigator.
///
/// The callback must use one of the API methods on the [NavigatorState] that
/// have "restorable" in their name (e.g. [NavigatorState.restorablePush],
/// [NavigatorState.restorablePushNamed], etc.) and return the opaque ID
/// returned by those methods.
///
/// This callback is invoked when [present] is called with the `arguments`
/// Object that was passed to that method and the [NavigatorState] obtained
/// from [navigatorFinder]. ¿bZÄ ¿cÄï/// A callback that is invoked when the [Route] added via [onPresent]
/// completes.
///
/// The return value of that route is passed to this method. ¿fÜ¿fê  ¿h@¿hE ¿hQ¿e3ÄΩ¿e’Äí/// Whether the [Route] created by [present] is currently shown.
///
/// Returns true after [present] has been called until the [Route] completes.   ¿eÙÄè¿fsj/// The route that [present] added to the Navigator.
///
/// Returns null when currently no route is shown   ¿hÍH¿hˇ   ¿hÍ¿hÎ¿i6~¿iI    ¿c)Ç¿ddÅ)/// Shows the route created by [onPresent] and invoke [onComplete] when it
/// completes.
///
/// The `arguments` object is passed to [onPresent] and can be used to
/// customize the route. It must be serializable via the
/// [StandardMessageCodec]. Often, a [Map] is used to pass key-value pairs. ¿dm¿dv   ¿fõ1¿fØ   ¿fõ¿fú¿f–u¿f·  ¿fÔ¿f¯  ¿f–¿f—¿gIÄÑ¿g]   ¿gI¿gJ¿g—k¿g‰  ¿gÛ¿g¸  ¿g—¿g“¿h[Äã¿hl   ¿h[¿h\¿i∏Å¶¿iΩ  ¿i“	¿i⁄   ¿kb]¿kx  ¿kê¿kû     ã„ÇÈåÃÄ„/// Indicates whether the current route should be popped.
///
/// Used as the return value for [Route.willPop].
///
/// See also:
///
///  * [WillPopScope], a widget that hooks into the route's [Route.willPop]
///    mechanism.  å‰ÄÖçfy/// Pop the route.
///
/// If [Route.willPop] returns [pop] then the back button will actually pop
/// the current route. çn|ç‚m/// Do not pop the route.
///
/// If [Route.willPop] returns [doNotPop] then the back button will be ignored. çÔÄ⁄é√ÄÀ/// Delegate this to the next level of navigation.
///
/// If [Route.willPop] returns [bubble] then the back button will be handled
/// by the [SystemNavigator], which will usually close the application.    ¿«FÜæ¿«K   ¿«_¿«_  ¿«‡¿«‡  ¿»\¿»\  ¿»‹¿»‹  ¿…5¿…5  ¿…ú¿…ú  ¿…‡¿…‡  ¿ B¿ B  ¿ ˙¿ ˙  ¿À¿À  ¿ÀM¿ÀM  ¿ÀÌ¿ÀÌ  ¿ÃB¿ÃB  ¿Ã¿Ã  ¿Õ$	¿Õ$  ¿Õ€¿Õ€     ¿-4¿-   ¿-"¿-"  ¿-+	¿-+         
ÑÄ˘Ñ–Ä∞/// Creates a route for the given route settings.
///
/// Used by [Navigator.onGenerateRoute].
///
/// See also:
///
///  * [Navigator], which is where all the [Route]s end up.  Ñ¯Ö   ÖÄ…Ö{`/// Creates a series of one or more routes.
///
/// Used by [Navigator.onGenerateInitialRoutes].  Ö¨Öº  Ö∆ÖŒ   Ö›ÇóàÇ7/// Creates a [Route] that is to be added to a [Navigator].
///
/// The route can be configured with the provided `arguments`. The provided
/// `context` is the `BuildContext` of the [Navigator] to which the route is
/// added.
///
/// Used by the restorable methods of the [Navigator] that add anonymous routes
/// (e.g. [NavigatorState.restorablePush]). For this use case, the
/// [RestorableRouteBuilder] must be static function annotated with
/// `@pragma('vm:entry-point')`. The [Navigator] will call it again during
/// state restoration to re-create the route.à4à4 àKàY  àaàj   àv|àΩ>/// Signature for the [Navigator.popUntil] predicate argument.  à‹àÏ   àÙÅâÿÄ€/// Signature for a callback that verifies that it's OK to call [Navigator.pop].
///
/// Used by [Form.onWillPop], [ModalRoute.addScopedWillPopCallback],
/// [ModalRoute.removeScopedWillPopCallback], and [WillPopScope].    äÅ›ãõÅé/// Signature for the [Navigator.onPopPage] callback.
///
/// This callback must call [Route.didPop] on the specified route and must
/// properly update the pages list the next time it is passed into
/// [Navigator.pages] so that it no longer includes the corresponding [Page].
/// (Otherwise, the page will be interpreted as a new page to show when the
/// [Navigator.pages] list is next updated.)  ãªãÀ  ã—ã⁄   ¿Œ@¿Œ   ¿Œ3¿Œ@   ¿SRÅ¿TÄ¡/// A callback that given a [BuildContext] finds a [NavigatorState].
///
/// Used by [RestorableRouteFuture.navigatorFinder] to determine the navigator
/// to which a new route should be added.  ¿TN¿T\   ¿TfÅ—¿UﬁÅo/// A callback that given some `arguments` and a `navigator` adds a new
/// restorable route to that `navigator` and returns the opaque ID of that
/// new route.
///
/// Usually, this callback calls one of the imperative methods on the Navigator
/// that have "restorable" in the name and returns their return value.
///
/// Used by [RestorableRouteFuture.onPresent].  ¿V
¿V  ¿V$¿V-   ¿V9Å¿WÄ›/// A callback to handle the result of a completed [Route].
///
/// The return value of the route (which can be null for e.g. void routes) is
/// passed to the callback.
///
/// Used by [RestorableRouteFuture.onComplete].¿W7¿W7 ¿WJ¿WM    ¿ ∞øÅ¿ ±bÄÜ/// The default value of [Navigator.routeTraversalEdgeBehavior].
///
/// {@macro flutter.widgets.navigator.routeTraversalEdgeBehavior}	¿ ±ê¿ ±ª¿ ±á¿ ±í¿ ±ß¿ ±®¿ ±Ω¿ ±“¿ ±”  ñ´ <ÄÜÄ§Ä•Ä∫Ä‘ÄÎÅÅ)Å*ÅTÅ}Å¶ÅŒÅœÅ‰Å˚ÇÇ3ÇRÇkÇÅÇòÇ≥ÇŸÇÔÉÉÉ'ÉKÉpÉ÷É¯ÑÑÑIÑMÑvÑzÑàÑåÑ»ÖÖÖ>ÖBÖsÖ‹Ö›ÜÜÜiÜ∂Ü¡Ü≈ááXáúáÁààuàvàµàÛàÙâEâIâéâ–äää:ä>äâäÃããfãìã‚ã„åå!åSåWåeåiåµå«å‚å˜å˝çKçdçkçlçàçéç‡çÏçÌé"é(éwé¡éÀéÕéŒèèèWè¶èıêêêcêåêêêﬂëëëTëöëÁí/íí∑íªí¸ìLìoìâìßì≠ì˙îîdîeîóî∆î‰îÂïïï5ï;ïÜï√ï‚ïËñ8ñÉñÕóó;ófóÅóÇó”óÂóÎò7òMòSò¢òÚô@ôêôﬂöö\öØö∞ö‰õõ'õEõKõOõPõöõœõ˛úúú,ú2úÅúøú≈ùù!ù'ùsùòù€ù‹ûûûpûƒü	ü&ü3üDüYüZü§ü™üÚü¯†E†Ü†å†€°
°°(°C°}°≤°Ô°˜°ˇ¢¢¢K¢Q¢ù¢“¢ÿ£'£V£c£t£Ü£π§
§X§ß§ˆ•• •t•«¶¶H¶|¶Œß!ßsß√®®e®ñ®°®Ò©?©r©Ø©π©ø©√©ƒ™™™h™ó™§™µ™Â™Ê´6´^´d´¥´“´ÿ¨#¨\¨ß¨Û≠B≠≠Ö≠≈≠Ë≠ÓÆ=ÆkÆqÆÅÆáÆ“ÆÊØ3ØIØyØƒØ»Ø…Ø¸∞)∞*∞t∞∂∞º±±2±R±S±û±§±Û≤B≤W≤à≤ø≤¿≥≥S≥†≥Ï¥¥¥[¥©¥˘µDµîµ≠µ≥∂∂S∂è∂ï∂‰∂˝∑∑)∑B∑S∑W∑X∑¶∑¨∑‡∏-∏Å∏õ∏°∏Óπ?πtπzπ≈∫∫d∫¨∫π∫ ∫Íªª#ª$ªmª~ªÑª”ªÎª¯º	º9º:º|ºÇº“Ω"ΩhΩåΩíΩ·æ æææRæSæôæüæÎø;øåø¶ø¨ø˘¿ @¿ @)¿ @:¿ @v¿ @w¿ @∫¿ @¿¿ A
¿ A[¿ A¨¿ AÂ¿ AÎ¿ A˚¿ B¿ BK¿ Bâ¿ Bñ¿ Bß¿ B…¿ B ¿ C¿ Cc¿ Ci¿ Cû¿ CÔ¿ D2¿ Dt¿ Dπ¿ E ¿ E=¿ EC¿ Eä¿ E’¿ F¿ FU¿ F[¿ Fü¿ Fπ¿ Fø¿ Fœ¿ F’¿ G%¿ GB¿ GO¿ G`¿ GÇ¿ GÉ¿ G¥¿ G∫¿ H¿ H<¿ HB¿ Hê¿ H°¿ Hß¿ HÙ¿ IB¿ Ië¿ I¢¿ IØ¿ I¬¿ IŸ¿ I¸¿ J ¿ J¿ JB¿ JH¿ J}¿ Jî¿ J≤¿ J∆¿ JÃ¿ K?¿ Kd¿ Kx¿ K~¿ K™¿ KÆ¿ KØ¿ K˙¿ L ¿ LP¿ Là¿ Lù¿ Lª¿ Lœ¿ L’¿ MI¿ Mn¿ MÇ¿ Mà¿ M¥¿ M∏¿ Mπ¿ N¿ N¿ N/¿ NM¿ Na¿ Ng¿ N£¿ Nƒ¿ N⁄¿ N‚¿ O¿ O*¿ O2¿ O8¿ OJ¿ ON¿ OO¿ O}¿ OÉ¿ O”¿ P#¿ P_¿ Pe¿ P∑¿ Q¿ Qb¿ Qx¿ Qñ¿ Q™¿ Q∞¿ R¿ R ¿ R"¿ R#¿ R\¿ Rg¿ R}¿ R™¿ R¬¿ R—¿ RÂ¿ RÎ¿ RÏ¿ S¿ S#¿ SJ¿ S`¿ Sa¿ Sã¿ Së¿ S·¿ S¸¿ S˝¿ T	¿ TÅ¿ TÉ¿ TÑ¿ T≤¿ T∂¿ Tˇ¿ UF¿ UJ¿ UX¿ U\¿ U≠¿ UΩ¿ UÏ¿ V'¿ V-¿ V^¿ Vm¿ V{¿ Vã¿ V†¿ V∏¿ Væ¿ Vø¿ VË¿ VÓ¿ W.¿ WE¿ WF¿ Wñ¿ Wß¿ W≠¿ W˝¿ X¿ X¿ X¿ Xf¿ Xx¿ Xó¿ Xò¿ X÷¿ X‹¿ Y+¿ Y8¿ Y`¿ Yè¿ Y¨¿ Y∞¿ Y±¿ YÍ¿ Y¿ ZF¿ ZQ¿ Z¿ ZÄ¿ Zå¿ Z‰¿ ZÊ¿ ZÁ¿ [%¿ [?¿ [{¿ [±¿ [≤¿ [˙¿ \I¿ \É¿ \Ω¿ ]¿ ]S¿ ]û¿ ]Ë¿ ^¿ ^X¿ ^Y¿ ^¿ ^Ö¿ ^–¿ ^Ò¿ _9¿ _:¿ _`¿ _f¿ _¨¿ _Õ¿ `¿ `¿ `<¿ `B¿ `ç¿ `π¿ `ø¿ a¿ aO¿ aü¿ aæ¿ b¿ b	¿ bD¿ bí¿ bì¿ b’¿ b€¿ c*¿ cf¿ c∫¿ cª¿ c¯¿ c˛¿ d:¿ dZ¿ d\¿ d]¿ dê¿ dî¿ d›¿ e+¿ ex¿ e|¿ eÀ¿ f¿ ff¿ f∞¿ f‰¿ g¿ g9¿ gH¿ gu¿ gè¿ gï¿ gñ¿ gÁ¿ gÙ¿ h¿ h&¿ h@¿ hZ¿ h[¿ hò¿ hº¿ hΩ¿ i	¿ i1¿ i7¿ iy¿ i∏¿ iæ¿ iŒ¿ i‘¿ j#¿ jZ¿ jì¿ j¸¿ k¿ k¿ k¿ kj¿ kz¿ kÄ¿ k–¿ kÙ¿ k˙¿ l<¿ lj¿ lp¿ lÄ¿ lÜ¿ l“¿ m¿ mI¿ mÇ¿ mí¿ m≤¿ mŒ¿ n&¿ nP¿ n•¿ n˜¿ oH¿ o}¿ o°¿ oπ¿ oƒ¿ oÃ¿ oﬂ¿ oÈ¿ p¿ p¿ p¿ p¿ pM¿ p|¿ pÄ¿ pÇ¿ pÉ¿ p“¿ q¿ qC¿ qh¿ qÑ¿ qÖ¿ q÷¿ q‹¿ r,¿ rw¿ rõ¿ rƒ¿ r≈¿ s¿ s¿ sk¿ sµ¿ sŸ¿ t¿ t¿ t8¿ t>¿ tã¿ tÒ¿ u@¿ uV¿ uW¿ uè¿ uï¿ u‚¿ vH¿ vô¿ vÆ¿ vØ¿ vÂ¿ vÎ¿ w7¿ wà¿ w¶¿ wÀ¿ wÃ¿ x¿ x¿ xZ¿ xß¿ xı¿ y¿ y ¿ yZ¿ y`¿ y¨¿ y˙¿ z7¿ zO¿ zQ¿ zR¿ z£¿ zÀ¿ zœ¿ {¿ {q¿ {u¿ {¿¿ {ƒ¿ {ÿ¿ |'¿ |t¿ |ó¿ |õ¿ |ß¿ |Ú¿ }¿ }2¿ }t¿ }‘¿ ~9¿ ~D¿ ~ì¿ ~ó¿ ~‰¿ ¿ @¿ L¿ n¿ r¿ |¿ ﬁ¿ Ä¿ ÄI¿ Äµ¿ Äﬁ¿ Å/¿ Å^¿ Ån¿ Å{¿ Åá¿ Å∞¿ Å¥¿ Åæ¿ Å÷¿ Åﬁ¿ Å‰¿ ÅË¿ Å¿ Ç ¿ Ç¿ Ç¿ Ç¿ Ça¿ Ç~¿ ÇÕ¿ É¿ É*¿ Ét¿ Éí¿ Éì¿ É√¿ Ñ¿ Ñ]¿ Ñæ¿ Ñ≈¿ Ö¿ Ö2¿ Öp¿ Ö¨¿ Ö≥¿ Öı¿ Ö¸¿ Ü¿ Üh¿ Üx¿ Ü≈¿ ÜÏ¿ á:¿ áa¿ á∞¿ à¿ à¿ à-¿ à4¿ à_¿ àf¿ àü¿ à¶¿ à‘¿ â$¿ âE¿ âL¿ âó¿ â‰¿ âÙ¿ äO¿ äµ¿ äı¿ ãE¿ ãÑ¿ ãÀ¿ å7¿ åw¿ åÉ¿ åç¿ åï¿ åÊ¿ ç¿ ç@¿ çA¿ çì¿ ç¯¿ é¿ éM¿ éó¿ é£¿ é›¿ è¿ è¿ èK¿ èU¿ è]¿ è^¿ èl¿ è≤¿ è’¿ ê%¿ ên¿ êw¿ êä¿ êî¿ êï¿ ê©¿ ê≠¿ êÆ¿ ê˘¿ ëE¿ ëK¿ ëú¿ ë‰¿ í!¿ ín¿ í∫¿ ì¿ ì5¿ ì;¿ ìá¿ ì’¿ î!¿ îl¿ îª¿ ï¿ ïS¿ ïâ¿ ï’¿ ñ ¿ ñ^¿ ñà¿ ñπ¿ ó¿ óT¿ ó§¿ óÚ¿ òA¿ òè¿ ò≠¿ ò≥¿ ô¿ ôP¿ ôü¿ ô ¿ ô–¿ ö ¿ ö]¿ ö®¿ öÛ¿ õ<¿ õã¿ õÕ¿ õ”¿ ú¿ ú	¿ ú1¿ ú7¿ úm¿ ús¿ úö¿ ú†¿ úÀ¿ ù¿ ù4¿ ù:¿ ùc¿ ùi¿ ù∞¿ ù˘¿ ùˇ¿ û¿ û¿ ûf¿ ûå¿ û‹¿ ü¿ üT¿ üz¿ ü∆¿ †¿ †b¿ †§¿ †Û¿ °5¿ °a¿ °ü¿ °˚¿ ¢\¿ ¢b¿ ¢d¿ ¢e¿ ¢∂¿ ¢ˆ¿ ¢˙¿ £K¿ £ô¿ £Ó¿ §+¿ §n¿ §±¿ §ﬁ¿ •¿ •¿ •¿ •F¿ •Ñ¿ •‡¿ ¶A¿ ¶H¿ ¶ì¿ ¶„¿ ß1¿ ßs¿ ßø¿ ®¿ ®A¿ ®Q¿ ®Y¿ ®ì¿ ®Ú¿ ©c¿ ©û¿ ©Î¿ ©¸¿ ™N¿ ™X¿ ™x¿ ™„¿ ´1¿ ´Ä¿ ´Ã¿ ¨¿ ¨X¿ ¨¨¿ ¨˘¿ ≠¿ ≠b¿ ≠r¿ ≠Ä¿ ≠å¿ ≠ñ¿ ≠û¿ ≠√¿ ≠ƒ¿ Æ¿ ÆL¿ ÆR¿ ÆS¿ Æä¿ Æ≈¿ Æ∆¿ Ø¿ ØY¿ Øç¿ Ø‚¿ ∞¿ ∞¿ ∞8¿ ∞B¿ ∞J¿ ∞h¿ ∞û¿ ∞§¿ ∞∏¿ ∞º¿ ∞æ¿ ∞ø¿ ± ¿ ±¿ ±F¿ ±é¿ ±π¿ ±ﬂ¿ ±‡¿ ≤*¿ ≤.¿ ≤}¿ ≤Ã¿ ≥¿ ≥o¿ ≥¿¿ ≥˝¿ ¥¿ ¥¿ ¥ ¿ ¥p¿ ¥ø¿ µ¿ µ^¿ µ´¿ µ¯¿ ∂¿ ∂¿ ∂m¿ ∂∫¿ ∂Ú¿ ∑¿ ∑¿ ∑d¿ ∑h¿ ∑á¿ ∑ã¿ ∑‘¿ ∏¿ ∏`¿ ∏™¿ ∏Ò¿ π¿ π¿ πj¿ π¥¿ ∫¿ ∫M¿ ∫ó¿ ∫‚¿ ª1¿ ªz¿ ªö¿ ªû¿ ª≈¿ ª…¿ º¿ ºg¿ ºµ¿ ºŒ¿ º“¿ Ω ¿ Ωp¿ Ωñ¿ Ωö¿ Ω¶¿ Ω∏¿ ΩÏ¿ ΩÚ¿ Ω˙¿ Ω˛¿ æA¿ æã¿ æ∫¿ ææ¿ æ ¿ æˇ¿ ø'¿ ø@¿ øx¿ øê¿ øØ¿ ø◊¿ øı¿ ¿¿ ¿.¿ ¿=¿ ¿J¿ ¿U¿ ¿^¿ ¿f¿ ¿n¿ ¿r¿ ¿∏¿ ¿˚¿ ¡2¿ ¡6¿ ¡Ä¿ ¡´¿ ¡Ø¿ ¡ª¿ ¡◊¿ ¡ﬂ¿ ¡„¿ ¬.¿ ¬y¿ ¬∫¿ √¿ √!¿ √%¿ √J¿ √N¿ √ì¿ √’¿ ƒ¿ ƒC¿ ƒG¿ ƒl¿ ƒ∂¿ ƒ˛¿ ≈H¿ ≈L¿ ≈X¿ ≈j¿ ≈Ñ¿ ≈ƒ¿ ≈Ó¿ ∆=¿ ∆å¿ ∆€¿ ∆Ê¿ ∆¿ ∆ˆ¿ ∆˛¿ «¿ «¿ «#¿ «/¿ «W¿ «_¿ «c¿ «Ö¿ «â¿ «“¿ »¿ »¿ »Z¿ »¶¿ »µ¿ »π¿ …¿ …A¿ …E¿ …Q¿ …ö¿ …¬¿ …Ÿ¿ …˚¿   ¿  X¿  e¿  p¿  x¿  Ä¿  à¿  å¿  ‘¿ À¿ À:¿ À>¿ Àä¿ À∆¿ Ã¿ Ãb¿ Ãq¿ Ãu¿ Ãä¿ Ãé¿ Ã⁄¿ Õ+¿ Õz¿ Õ•¿ Õ©¿ ÕÈ¿ Œ2¿ Œw¿ Œª¿ ŒÚ¿ Œˆ¿ œG¿ œî¿ œﬂ¿ œ„¿ œ˘¿ œ˝¿ –M¿ –ö¿ –Î¿ —¿ —"¿ —n¿ —º¿ “¿ “Z¿ “^¿ “j¿ “û¿ “≥¿ “Ê¿ ” ¿ ”)¿ ”|¿ ”õ¿ ”π¿ ”ﬁ¿ ‘)¿ ‘C¿ ‘P¿ ‘[¿ ‘c¿ ‘k¿ ‘s¿ ‘w¿ ‘¥¿ ‘¸¿ ’J¿ ’ï¿ ’€¿ ’Ò¿ ’ı¿ ÷D¿ ÷e¿ ÷i¿ ÷Ñ¿ ÷à¿ ÷‘¿ ◊$¿ ◊u¿ ◊≤¿ ◊∂¿ ◊«¿ ◊À¿ ÿ¿ ÿf¿ ÿ°¿ ÿ•¿ ÿı¿ ŸB¿ Ÿë¿ Ÿﬁ¿ ⁄-¿ ⁄C¿ ⁄G¿ ⁄ë¿ ⁄‚¿ ⁄˙¿ ⁄˛¿ €¿ €`¿ €î¿ €ò¿ €·¿ ‹1¿ ‹5¿ ‹~¿ ‹Ø¿ ‹≥¿ ‹˝¿ ›¿ ›¿ ›`¿ ›´¿ ›˙¿ ﬁJ¿ ﬁx¿ ﬁ|¿ ﬁ†¿ ﬁ§¿ ﬁÒ¿ ﬂ;¿ ﬂà¿ ﬂŸ¿ ﬂÙ¿ ﬂ¯¿ ‡¿ ‡¿ ‡`¿ ‡¨¿ ‡ˆ¿ ·D¿ ·f¿ ·j¿ ·¥¿ ·≈¿ ‚¿ ‚D¿ ‚ë¿ ‚‚¿ „,¿ „z¿ „∆¿ „Ì¿ „Ò¿ ‰5¿ ‰É¿ ‰œ¿ Â¿ Â@¿ Âé¿ Âî¿ Â’¿ Ê¿ Ê¿ Êd¿ Êx¿ Êá¿ Ê±¿ Ê≈¿ Ê‹¿ Á'¿ ÁA¿ ÁZ¿ Á§¿ Á—¿ Á¯¿ Ë*¿ ËH¿ Ëe¿ ËØ¿ Ëµ¿ Ë∂¿ ËÚ¿ Ë¯¿ È@¿ Èç¿ È∆¿ Í¿ Í¿ Íf¿ Íü¿ Í•¿ Íı¿ ÎB¿ Îë¿ Î‚¿ Ï	¿ Ï¿ ÏZ¿ Ï™¿ Ï¯¿ Ì:¿ ÌV¿ Ì\¿ Ì≠¿ Ì·¿ ÌÁ¿ Ó2¿ ÓÇ¿ Óπ¿ Ó‹¿ Ó›¿ Ô)¿ ÔQ¿ ÔW¿ Ô§¿ Ô”¿ ÔŸ¿ %¿ K¿ Q¿ ¢¿ Ò¿ ÒA¿ Òy¿ Òù¿ Òû¿ ÒÓ¿ Ú¿ Ú¿ Úf¿ Úû¿ Úü¿ Ú ¿ Ú–¿ Û ¿ Û¿ ÛS¿ ÛÖ¿ Û£¿ Û§¿ Û‚¿ Ù	¿ Ù
¿ ÙI¿ ÙO¿ Ùõ¿ ÙÏ¿ ı¿ ı¿ ıY¿ ıñ¿ ıº¿ ıΩ¿ ıÎ¿ ˆ¿ ˆ¿ ˆf¿ ˆy¿ ˆ¿ ˆæ¿ ˜¿ ˜]¿ ˜î¿ ˜ö¿ ˜Ê¿ ¯4¿ ¯@¿ ¯F¿ ¯â¿ ¯’¿ ˘%¿ ˘L¿ ˘R¿ ˘b¿ ˘h¿ ˘µ¿ ˘«¿ ˙¿ ˙<¿ ˙á¿ ˙–¿ ˚¿ ˚V¿ ˚k¿ ˚è¿ ˚ê¿ ˚ﬁ¿ ¸(¿ ¸.¿ ¸u¿ ¸ø¿ ˝
¿ ˝Z¿ ˝©¿ ˝˜¿ ˛D¿ ˛î¿ ˛≥¿ ˛»¿ ˇ¿ ˇ¿ ˇ<¿ ˇB¿ ˇR¿ ˇX¿ ˇ≤¿ ˇŸ¿ ¿ ¿ X¿ Ö¿ ã¿ Ω¿ √¿¿a¿w¿}¿»¿ˇ¿M¿ù¿Í¿/¿|¿À¿‘¿¿¿S¿Å¿á¿‘¿%¿r¿x¿ƒ¿˜¿B¿í¿‡¿Ù¿˙¿I¿ó¿Â¿0¿;¿A¿Z¿É¿Ñ¿∫¿¿¿	¿	#¿	)¿	b¿	}¿	~¿	—¿
¿
¿
&¿
A¿
B¿
ì¿
¢¿
®¿
ﬁ¿%¿k¿q¿∑¿¿D¿h¿n¿ø¿Õ¿”¿¿#¿m¿}¿í¿ò¿⁄¿(¿a¿v¿|¿≤¿Ù¿E¿í¿»¿Œ¿¿K¿`¿f¿|¿Ç¿•¿´¿π¿◊¿
¿¿¿.¿4¿J¿P¿ú¿©¿Ø¿Ω¿ﬂ¿¸¿¿%¿L¿j¿å¿ô¿§¿¨¿∂¿»¿Œ¿‰¿Í¿6¿<¿J¿n¿º¿◊¿ı¿˚¿¿Y¿c¿k¿q¿ç¿™¿Ω¿”¿#¿.¿6¿@¿R¿X¿h¿n¿∏¿€¿Ô¿!¿;¿S¿j¿q¿¡¿≈¿∆¿¿&¿,¿l¿ª¿¿@¿U¿[¿é¿î¿ﬁ¿ ¿i¿π¿ÿ¿ﬁ¿ ¿Y¿n¿t¿¿¿¿]¿™¿˜¿¿(¿.¿D¿J¿m¿s¿Å¿¢¿…¿‹¿Ú¿¿6¿W¿d¿o¿w¿Å¿ì¿ß¿ﬂ¿˘¿¿(¿/¿â¿ç¿é¿ﬁ¿,¿s¿y¿∫¿ ¿ S¿ ú¿ Î¿!9¿!Ç¿!à¿!œ¿"¿"¿"g¿"¥¿"Ù¿#B¿#ê¿#›¿$
¿$¿$a¿$o¿$u¿$√¿%¿%
¿%[¿%n¿%É¿%â¿%»¿%Œ¿&¿&¿&¿&#¿&F¿&L¿&Z¿&}¿&∆¿&Œ¿&ÿ¿&Í¿&¿' ¿'¿'W¿'ä¿'û¿'Ô¿(	¿(!¿(1¿(H¿(O¿(æ¿(¬¿(√¿)¿)a¿)®¿)Æ¿)˘¿*G¿*ñ¿*ÿ¿*Ì¿*Û¿+1¿+7¿+~¿+Ñ¿+Õ¿+”¿+È¿+Ô¿,¿,¿,&¿,J¿,ô¿,°¿,´¿,Ω¿,—¿-(¿-B¿-Z¿-j¿-Å¿-à¿.¿.¿.¿.S¿.å¿.í¿.Œ¿/¿/¿/b¿/®¿/Æ¿/˝¿0>¿0å¿0€¿1'¿1v¿1∆¿1˝¿2¿2T¿2b¿2h¿2∂¿2¿2ˆ¿3O¿3d¿3j¿3©¿3Ø¿3‚¿3Ë¿3˛¿4¿4'¿4-¿4;¿4_¿4¶¿4Æ¿4∏¿4 ¿4–¿4‡¿4Ê¿51¿5]¿5q¿5Ω¿5◊¿5Ô¿5ˇ¿6¿6¿6á¿6ã¿6å¿6Ÿ¿7¿7¿7^¿7ß¿7ˆ¿88¿8M¿8S¿8å¿8í¿8Ÿ¿8ﬂ¿9(¿9.¿9D¿9J¿9m¿9s¿9Å¿9ü¿9Í¿9Ú¿9¸¿:¿:"¿:t¿:é¿:¶¿:∂¿:Õ¿:‘¿;H¿;L¿;M¿;õ¿;Î¿<¿<¿<Y¿<†¿<œ¿<’¿=¿=S¿=Y¿=ß¿=Ò¿=˜¿>D¿>q¿>w¿>∂¿?¿?¿?$¿?p¿?ø¿?¸¿@<¿@Ü¿@‘¿A"¿AH¿AN¿Aü¿A≠¿A≥¿B¿B¿BW¿Bo¿BÑ¿Bä¿B…¿Bœ¿C¿C¿C¿C$¿CG¿CM¿C[¿C{¿C÷¿Cﬁ¿CË¿C˙¿D ¿D¿D¿Df¿Dï¿D©¿DÈ¿E¿E¿E<¿ES¿EZ¿E∆¿E ¿EÀ¿F¿Fi¿Fç¿Fì¿F·¿G2¿GÅ¿G√¿Gÿ¿Gﬁ¿H¿H%¿Hl¿Hr¿Hª¿H¡¿H◊¿H›¿I ¿I¿I¿I4¿Iô¿I°¿I´¿IΩ¿I—¿J¿J1¿JJ¿Jj¿JÅ¿Jà¿J˛¿K¿K¿KP¿Ke¿Kk¿Kú¿K‚¿L/¿Lo¿Lì¿Lô¿LÍ¿L¯¿L˛¿MH¿M]¿Mc¿M¢¿M®¿Mæ¿Mƒ¿MÁ¿MÌ¿M˚¿N¿N4¿NG¿Nj¿N©¿N∂¿N¡¿N…¿N”¿NÂ¿NÎ¿N˚¿O¿OM¿Oi¿O}¿O—¿Oˇ¿P¿P¿PM¿Pb¿Ph¿P£¿PÒ¿Q@¿Qr¿Qá¿Qç¿Qª¿Q¡¿Q¸¿RK¿Ró¿R„¿S%¿Sr¿S∂¿Sº¿T¿TS¿Th¿Tn¿T∑¿TΩ¿T”¿Tˆ¿T¸¿UX¿Uj¿U~¿V¿VZ¿V^¿V_¿VØ¿V˛¿W8¿W>¿Wz¿W∆¿X¿Xf¿X∂¿Y¿YB¿YH¿Yî¿Y·¿Z!¿Zo¿Z±¿Z∑¿[¿[¿[¿[j¿[´¿[¿¿[∆¿\¿\¿\!¿\'¿\J¿\P¿\^¿\|¿\´¿\æ¿\·¿]$¿]1¿]<¿]D¿]N¿]`¿]f¿]v¿]|¿]Ã¿]˚¿^¿^ï¿^Ë¿^Ï¿^Ì¿_=¿_à¿_¬¿_»¿`¿`\¿`¶¿`Ë¿`˝¿a¿a<¿aB¿az¿aÄ¿a…¿aœ¿aÂ¿b¿b¿bv¿bà¿bú¿cP¿c«¿cÀ¿cÃ¿d¿d`¿dÄ¿dÜ¿d≈¿e¿e;¿eA¿eÉ¿eø¿e≈¿f¿f]¿fc¿f∞¿f›¿f„¿g)¿gz¿gƒ¿h¿h]¿h™¿h˙¿i;¿iA¿ií¿i†¿i¶¿iÙ¿j	¿j¿jN¿jT¿jj¿jp¿jì¿jô¿jß¿jÕ¿j˘¿k¿kf¿kä¿kï¿kù¿kß¿kπ¿kø¿kœ¿k’¿l¿lK¿l_¿lﬁ¿m+¿m/¿m0¿my¿m¿¿m‡¿mÊ¿n/¿nÄ¿n ¿o¿o!¿o'¿oc¿oi¿o°¿oß¿o¿oˆ¿p¿p/¿p5¿p¢¿p¥¿p»¿qz¿qÓ¿qÚ¿qÛ¿r@¿r`¿rf¿rö¿rÊ¿s5¿sÑ¿s‘¿s¸¿t¿tR¿tz¿tÄ¿t—¿u¿u`¿u®¿uı¿vF¿v_¿ve¿vµ¿v◊¿v›¿w+¿w@¿wF¿wV¿w\¿w´¿wˆ¿x?¿xk¿x¿y¿yW¿y[¿y\¿y©¿y…¿yœ¿z¿z\¿z´¿z›¿zÚ¿z¯¿{)¿{/¿{g¿{m¿{∂¿{ ¿|Ñ¿}¿}¿}¿}Y¿}ß¿}¬¿}»¿~¿~P¿~ü¿~Ó¿>¿f¿l¿º¿‰¿Í¿Ä;¿Äz¿Ä ¿Å¿Å_¿Å∞¿Å…¿Åœ¿Ç¿Ç2¿Ç8¿ÇH¿ÇN¿Çõ¿ÇÆ¿Ç˛¿É-¿ÉA¿É—¿Ñ6¿Ñ:¿Ñ;¿Ñà¿Ñ÷¿ÑÒ¿Ñ˜¿Ö?¿Öç¿Ö€¿Ü#¿Ü8¿Ü>¿Üy¿Ü¿Ü∑¿ÜΩ¿á¿á¿á·¿àt¿àx¿ày¿à…¿à◊¿à›¿â¿â_¿âØ¿â»¿âŒ¿ä¿ä¿ä#¿ä3¿ä9¿äÑ¿äú¿ä…¿ã¿ã?¿ãC¿ãD¿ãï¿ãÊ¿å
¿å¿åE¿åê¿å·¿å¯¿å˛¿çI¿çä¿çê¿ç‡¿é.¿él¿ér¿é√¿è
¿è¿è[¿è¶¿èµ¿è ¿è–¿è‡¿èÊ¿ê4¿êq¿ê¬¿êÛ¿ë¿ë`¿ëñ¿ëö¿ëõ¿ëÈ¿ë˛¿í¿í4¿íÑ¿í“¿ì¿ìd¿ìj¿ì∂¿î¿îM¿îú¿îÍ¿ï5¿ï;¿ïã¿ï⁄¿ñ¿ñ=¿ñC¿ñî¿ñö¿ñÁ¿ó¿ó#¿ó)¿ó?¿óE¿ó|¿óÇ¿óê¿ó¶¿ó∆¿óŒ¿óÿ¿óÍ¿ó¿ò"¿ò(¿ò6¿òM¿òä¿òí¿òú¿ò∞¿ò¸¿ô&¿ô*¿ô+¿ôx¿ôÆ¿ô¥¿ôÈ¿ö0¿ö_¿öe¿öÆ¿öŸ¿öﬂ¿õ¿õ$¿õj¿õ¿õÖ¿õõ¿õ°¿õƒ¿õ ¿õÿ¿õÔ¿ú3¿ú;¿úE¿úW¿ú†¿úœ¿ú”¿ú‘¿ù#¿ùT¿ùZ¿ùí¿ù‚¿û/¿ûG¿ûM¿ûí¿û·¿ü)¿üu¿ü∆¿üﬂ¿üÂ¿†/¿†M¿†S¿†ë¿†¶¿†¨¿†˝¿°1¿°y¿°Æ¿°≤¿°≥¿¢¿¢R¿¢{¿¢Å¿¢æ¿£¿£[¿£s¿£y¿£æ¿§¿§U¿§°¿§Ú¿•¿•¿•b¿•™¿•∞¿•Ó¿¶¿¶V¿¶ñ¿¶ö¿¶õ¿¶Î¿¶˙¿ß ¿ß#¿ß)¿ß7¿ßS¿ßc¿ßs¿ßï¿ßü¿ß•¿ßˆ¿®?¿®j¿®p¿®¡¿©	¿©¿©O¿©k¿©á¿©ß¿©Æ¿©ˆ¿™¿™^¿™ë¿™ó¿™∞¿´¿´¿´e¿´k¿´l¿´|¿´õ¿´∑¿¨¿¨n¿¨Æ¿¨π¿¨¡¿¨‘¿¨ﬁ¿¨ı¿¨˘¿¨˙¿≠J¿≠a¿≠g¿≠ä¿≠ê¿≠û¿≠·¿Æ¿Æ¿Æ.¿Æ@¿Æd¿Æl¿Æv¿Æ|¿ÆÕ¿Ø¿ØA¿ØG¿Øî¿Øö¿Ø⁄¿Ø¸¿∞¿∞8¿∞?¿∞á¿∞¶¿∞Ô¿±"¿±(¿±A¿±ó¿±§¿±ˆ¿±¸¿≤¿≤¿≤¿≤N¿≤T¿≤£¿≤≈¿≤À¿≥¿≥j¿≥∏¿≥Œ¿≥‘¿¥$¿¥p¿¥ø¿¥˙¿µj¿µ®¿µÛ¿∂@¿∂q¿∂ñ¿∂®¿∂Í¿∂ˇ¿∑¿∑{¿∑æ¿∑Á¿∏¿∏6¿∏W¿∏m¿∏ö¿∏≥¿∏√¿π&¿π0¿π8¿πY¿πm¿πë¿π≤¿πÀ¿∫¿∫K¿∫Ω¿ª¿ª!¿ª.¿ªE¿ªS¿ªk¿ªs¿ª¥¿º¿ºa¿º«¿ºÕ¿Ω¿Ω¿Ω_¿ΩÆ¿Ω˜¿æ¿æY¿æs¿æ“¿æÿ¿ø¿ø¿ø¿ø¿øG¿øI¿øJ¿øÅ¿øÑ¿ø∂¿ø€¿¿ ¿¿&¿¿M¿¿z¿¿°¿¿«¿¿˜¿¡'¿¡W¿¡á¿¡∑¿¡Á¿¬¿¬K¿¬z¿¬®¿¬’¿√¿√,¿√N¿√x¿√¢¿√–¿√¯¿ƒ¿ƒD¿ƒo¿ƒó¿ƒø¿ƒÁ¿≈¿≈8¿≈]¿≈á¿≈¨¿≈’¿≈˙¿∆¿∆S¿∆Ä¿∆É¿∆œ¿∆ˆ¿«F¿«]¿«∂¿«ª¿«Ÿ¿«ﬁ¿»Z¿»Ø¿»⁄¿…3¿…ö¿…ﬁ¿ @¿ c¿ h¿ ä¿ è¿ ¯¿À¿ÀK¿ÀÉ¿ÀÎ¿Ã@¿Ã¶¿ÃÓ¿Õ"¿Õm¿Õ∫¿ÕŸ¿Œ¿Œ¿Œ¿ŒG¿ŒH¿Œr¿Œ≠¿Œ˙¿œ¿œ¿œ¿œO¿œ^¿œp¿œù¿œº¿œﬂ¿–¿–'¿–]¿–è¿–¬¿–¸¿—0¿—<¿—b¿—c¿—o¿—ç¿—∆¿—ﬁ¿—ﬂ¿“¿“¿“8¿“°¿”¿”e¿”f¿”∂¿”¸¿‘¿‘j¿‘≤¿‘«¿’	¿’U¿’[¿’Ö¿’≈¿’À¿’‹¿’‡¿’·¿÷¿÷&¿÷:¿÷@¿÷V¿÷j¿÷p¿÷µ¿÷€¿÷ﬂ¿÷‡¿◊D¿◊u¿◊ô¿◊ø¿◊·¿◊ˆ¿ÿ#¿ÿN¿ÿy¿ÿ≤¿ÿπ¿ÿΩ¿ÿæ¿Ÿ`¿ŸÏ¿⁄¿⁄¿⁄<¿⁄â¿⁄±¿⁄∏¿⁄¿€¿€'¿€T¿€≥¿€Î¿‹¿‹E¿‹|¿‹´¿‹÷¿›¿›J¿›ì¿›ù¿›ß¿›¥¿›Î¿ﬁ¿ﬁ8¿ﬁ>¿ﬁT¿ﬁu¿ﬁ{¿ﬁ|¿ﬁ‡¿ﬂ¿ﬂK¿ﬂT¿ﬂa¿ﬂñ¿ﬂ√¿ﬂ˛¿‡¿‡¿‡¿‡¿‡H¿‡k¿‡õ¿‡ü¿‡†¿‡∆¿‡Ã¿·¿·\¿·b¿·≥¿·œ¿‚3¿‚W¿‚Ç¿‚Æ¿‚Ÿ¿„#¿„i¿„Ç¿„ß¿„∫¿„¿¿„Ë¿‰¿‰'¿‰-¿‰G¿‰X¿‰\¿‰]¿‰w¿‰ù¿‰∑¿Â¿Â1¿Â5¿Â6¿Âû¿Â¬¿ÂÌ¿Ê¿Ê>¿Êk¿Ê®¿Ê±¿Ê∑¿Êª¿Êº¿Á¿Á ¿ÁI¿Á_¿ÁÄ¿ÁÜ¿Áä¿Áã¿Á§¿Á•¿Á¿¿Á◊¿ÁÛ¿Ë¿Ë¿Ë ¿ËH¿ËI¿Ëx¿Ë•¿Ë±¿Ë‚¿È2¿ÈÄ¿Èá¿È≈¿È”¿ÈŸ¿È¿Í¿ÍG¿ÍK¿ÍL¿Í¿Íª¿Í«¿Í¯¿ÎH¿Îñ¿Îù¿Î€¿ÎÈ¿ÎÔ¿Ï¿Ï2¿ÏN¿Ï{¿Ï¿ÏÄ¿Ïî¿Ï‘¿Ì ¿Ì¿Ì¿ÌB¿ÌH¿Ìô¿Ì±¿Ì ¿Ó¿Ó8¿ÓM¿ÓQ¿ÓR¿ÓÉ¿Óâ¿ÓŸ¿Ô¿Ô@¿ÔF¿Ôê¿Ô£¿ÔÂ¿¿¿d¿±¿Û¿ÒB¿Òì¿Òî¿Ú¿Ú¿Ú$¿Ú;¿ÚI¿ÚO¿ÚP¿Úy¿Úí¿Ú ¿Û¿Û:¿Û\¿Ûr¿Ûè¿ÛØ¿Û¬¿ÛÍ¿Ù¿ÙT¿Ù¢¿ÙÔ¿ı>¿ıc¿ıp¿ı∏¿ıÒ¿ˆ¿ˆd¿ˆ≤¿ˆ“¿˜¿˜.¿˜<¿˜{¿˜ò¿˜¶¿˜∞¿˜π¿˜‹¿˜‚¿˜Ê¿˜Á¿¯¿¯A¿¯}¿¯Å¿¯Ç¿¯ô¿¯⁄¿˘¿˘¿˘¿˘s¿˘t¿˘ô¿˘‹¿˙¿˙¿˙¿˙J¿˙ã¿˙»¿˙Ã¿˙Õ¿˚¿˚=¿˚ã¿˚«¿˚’¿˚¿¸/¿¸6¿¸:¿¸;¿¸É¿¸ı¿˝E¿˝F¿˝ç¿˝≈¿˝…¿˝ ¿˝÷¿˛*¿˛+¿˛7¿˛¿˛¨¿˛≠¿˛˜¿˛¯¿ˇ¿ˇ¿ˇ'¿ˇk¿ˇΩ¿ ¿ ¿ @¿ D¿ E¿ Q¿ g¿ s¿ ∑¿¿[¿b¿ä¿é¿è¿õ¿¡¿Õ¿¿o¿√¿ ¿‰¿¿¿¿¿J¿V¿ß¿¯¿L¿Z¿a¿Ä¿™¿Æ¿Ø¿ª¿‘¿‡¿1¿Ä¿‘¿‚¿È¿˜¿!¿%¿&¿o¿ñ¿√¿¿¿¿¿/¿H¿_¿x¿}¿¢¿ ¿À¿ˆ¿¯¿˘¿9¿V¿n¿à¿ç¿é¿ö¿∆¿˙¿˛¿	 ¿	¿	@¿	\¿	t¿	é¿	ì¿	î¿	†¿	Ã¿	ˇ¿
¿
¿
¿
H¿
g¿
¿
ô¿
û¿
ü¿
´¿
◊¿¿¿¿¿W¿w¿è¿©¿Æ¿Ø¿ª¿Á¿2¿6¿8¿9¿a¿e¿Æ¿¿:¿j¿∑¿«¿Õ¿¿X¿^¿≠¿Ò¿=¿Å¿‡¿?¿@¿ï¿§¿“¿
¿¿P¿Q¿ë¿”¿‘¿/¿0¿\¿]¿ë¿í¿û¿≥¿ ¿⁄¿¿8¿\¿Ä¿°¿»¿¿3¿D¿m¿ñ¿•¿≤¿·¿¿&¿M¿î¿ª¿Ã¿ı¿¿-¿:¿D¿L¿_¿i¿™¿‘¿
¿¿<¿=¿ä¿ø¿¸¿B¿j¿¶¿ß¿‘¿¿¿¿¿P¿ß¿®¿¿¿¿W¿ù¿⁄¿€¿¿C¿a¿é¿è¿∆¿¿H¿u¿ò¿±¿‹¿Â¿Û¿¿i¿∏¿¡¿‹¿,¿2¿3¿Å¿™¿‹¿˛¿A¿I¿k¿Ñ¿Æ¿¿¿ˇ¿ 6¿ K¿ k¿ ú¿ ﬁ¿!¿!=¿!`¿!ß¿!π¿!—¿!‡¿!Ì¿!¯¿" ¿"¿"¿"¿".¿"z¿"»¿#¿#2¿#9¿#T¿#å¿#®¿#·¿#Â¿#Ê¿#Ú¿$)¿$O¿$i¿$ñ¿$£¿$«¿$Õ¿$—¿$›¿%¿%¿%$¿%E¿%h¿%©¿%Ÿ¿&¿&	¿&¿&¿&F¿&o¿&µ¿&“¿&Â¿&Ì¿'¿'Q¿'W¿'[¿'\¿'¨¿'ˆ¿(¿(¿(-¿(D¿(Q¿(n¿(t¿(x¿(y¿(ª¿(Ù¿)¿)p¿)Ñ¿)”¿*#¿*T¿*â¿*ÿ¿+)¿+z¿+Ω¿,"¿,U¿,®¿,˜¿-¿-W¿-É¿-¨¿-€¿.1¿.Ñ¿.®¿.“¿/'¿/y¿/∞¿/…¿/˙¿0+¿0B¿0W¿0i¿0y¿0â¿0ï¿0¨¿0∫¿0˚¿1¿1S¿1l¿1•¿1Ó¿1ˆ¿2*¿2M¿2S¿2W¿2X¿2}¿2©¿3¿3¿3C¿3I¿3M¿3N¿3Z¿3à¿3Æ¿3æ¿3Û¿4¿4@¿4d¿4Ö¿4¨¿4¿5¿5(¿5Q¿5z¿5â¿5ñ¿5≈¿5È¿6
¿61¿6x¿6ü¿6∞¿6Ÿ¿7¿7¿7¿7(¿70¿7C¿7M¿7Ä¿7∆¿7˛¿8¿8I¿8u¿8≠¿8µ¿8ÿ¿8ﬁ¿9¿9.¿9R¿9v¿9ó¿9æ¿:¿:)¿::¿:c¿:å¿:õ¿:®¿:≤¿:«¿:”¿:È¿:Ô¿:¿; ¿;J¿;P¿;T¿;U¿;~¿;é¿;Ω¿;Ù¿<¿<7¿<h¿<ã¿<ï¿<ù¿<∞¿<∫¿<æ¿<ø¿<À¿<·¿=%¿=[¿=a¿=y¿=}¿=~¿=ä¿=û¿=¥¿=¯¿>"¿>X¿>^¿>b¿>c¿>o¿>Ç¿>ù¿>≠¿>»¿>€¿>Â¿>ı¿?;¿?g¿?o¿?Ç¿?å¿?≠¿?∆¿?Î¿@¿@A¿@n¿@É¿@º¿@÷¿@⁄¿@€¿A¿AW¿AX¿Aè¿A™¿A⁄¿B¿B¿B¿B¿B0¿B1¿BT¿Bl¿B|¿Bü¿B∆¿BÁ¿B˙¿C¿C¿CI¿Cì¿C›¿D$¿D+¿DZ¿Dz¿DÕ¿D¸¿EJ¿Eo¿Eº¿F¿F¿F`¿Fµ¿FË¿G3¿G¿GÃ¿GÌ¿H1¿HY¿Hù¿H≠¿HË¿I6¿IW¿Iì¿IŸ¿J(¿JF¿Jê¿J´¿J˘¿K%¿K_¿K`¿Kà¿K§¿K¬¿KÒ¿L¿L¿LY¿L…¿L ¿LÒ¿M¿MM¿Må¿MÕ¿N¿N5¿NV¿NÆ¿N”¿NÙ¿Nˇ¿O%¿OD¿OV¿O^¿Oà¿Oó¿Oü¿O·¿P¿P¿P&¿PR¿PÅ¿P°¿Pº¿PŸ¿Pﬂ¿P‡¿Q&¿Qx¿Qà¿Q›¿R¿RZ¿R{¿R´¿R«¿RŸ¿R·¿S ¿SN¿S]¿Se¿Sf¿SΩ¿S„¿T¿TD¿TX¿Tõ¿T¶¿T–¿Tÿ¿TŸ¿TÛ¿U¿U¿UL¿UÇ¿UÉ¿U’¿V¿V\¿V©¿V¡¿V˛¿W4¿Wy¿Wú¿W™¿WÂ¿WÓ¿X=¿XL¿Xm¿X¿Xá¿Xà¿X”¿XÒ¿Y¿Y¿Y¿Y1¿YW¿Yi¿Yq¿Y©¿Yÿ¿Yﬁ¿Yﬂ¿Z¿Z2¿Zu¿Zê¿Zõ¿Zª¿ZÛ¿[5¿[?¿[è¿[⁄¿[˙¿\,¿\U¿\p¿\°¿\¨¿\“¿\‚¿]¿]c¿]¥¿]ø¿]·¿]¿^;¿^é¿^≈¿^¸¿_#¿_+¿_1¿_2¿_Ñ¿`¿`A¿`é¿`´¿`¨¿`€¿a¿aY¿aq¿aò¿aª¿a»¿a¸¿bj¿bß¿b±¿b√¿bÀ¿bÃ¿c6¿cÜ¿c“¿cˆ¿d%¿dk¿d®¿e ¿eF¿ez¿e∑¿e¡¿e…¿f¿f	¿f
¿f/¿fb¿fë¿fº¿fÂ¿g:¿gT¿gd¿gì¿g√¿gı¿hG¿hV¿hÉ¿hã¿hï¿hñ¿h∫¿i¿iN¿iè¿i∞¿i„¿j.¿jF¿jk¿jé¿jô¿jø¿j—¿jŸ¿k¿kG¿kv¿k•¿k≈¿k‚¿k˝¿l¿l¿lR¿lÆ¿lﬁ¿lˇ¿m6¿m_¿mü¿m›¿m˙¿n ¿n ¿nY¿nê¿n…¿nœ¿nˇ¿o¿oV¿oì¿oõ¿o°¿oﬁ¿p¿p2¿pk¿po¿pp¿pë¿pí¿p–¿q¿q¿qm¿qº¿r¿rT¿ry¿rê¿r∫¿r˛¿s{¿s·¿tA¿t}¿tñ¿tª¿t›¿u¿u¿u9¿uô¿u¶¿uÊ¿u˙¿v¿vO¿vi¿và¿v∞¿vø¿vˇ¿w¿w!¿wD¿wn¿wî¿w∏¿w‘¿wÒ¿x¿xx¿xû¿x´¿xÈ¿y.¿yo¿y´¿y¡¿yÕ¿z%¿za¿zí¿zû¿z√¿zÊ¿{"¿{S¿{_¿{Ñ¿{÷¿|¿|4¿|V¿|v¿|ó¿|˝¿}=¿}S¿}_¿}Ñ¿}´¿}ﬁ¿}Ï¿~¿~¿~F¿~º¿~…¿¿U¿v¿å¿ò¿Ÿ¿˙¿Ä ¿Ä\¿Äm¿Äî¿Ä∂¿Äˆ¿Å
¿Å/¿ÅT¿Å{¿ÅÆ¿Åº¿Å‹¿ÅË¿Ç¿Ç$¿ÇÑ¿Çë¿Ç”¿ÇÁ¿É¿É?¿Éz¿Éç¿Éô¿É—¿ÉÂ¿Ñ¿Ñ]¿Ñì¿Ñ´¿Ñ”¿Ñ˙¿Ö ¿Ö9¿ÖA¿ÖS¿Ög¿Ö¿Ö∏¿Öæ¿Öˆ¿Ü¿Ü¿Üf¿Ü|¿Üõ¿Üú¿Ü¿¿ÜÌ¿áN¿áé¿á’¿à!¿àN¿àV¿à\¿à]¿à´¿à∏¿àÏ¿â¿â#¿â?¿âr¿âx¿âí¿âø¿â≈¿â„¿âÁ¿âË¿ä¿ä6¿ä]¿äÑ¿äí¿äò¿ä…¿ã¿ãV¿ã\¿ã]¿ãé¿ãÂ¿å¿å"¿å&¿å'¿åJ¿åo¿åà¿åπ¿åÂ¿å˘¿ç¿ç¿çÉ¿çÑ¿çΩ¿ç˙¿é,¿é6¿éj¿ér¿éÁ¿è(¿è`¿èú¿è§¿è∂¿èº¿è¿¿è¡¿ê¿ê<¿êl¿êp¿êq¿ê¥¿êÏ¿ê˛¿ë¿ë¿ë¿ë¿ëf¿ë´¿ëΩ¿ë√¿í ¿í¿í¿íh¿íÉ¿í∫¿íÕ¿í”¿í„¿ì¿ì+¿ìâ¿ìÊ¿î4¿î[¿î|¿îë¿îú¿î§¿î∑¿î¡¿îÛ¿ï¿ï!¿ï(¿ïp¿ïó¿ï©¿ï÷¿ñ¿ñ|¿ñö¿ñ˘¿ó(¿ó7¿óÆ¿óº¿ó∆¿ó€¿óÁ¿ò%¿ò7¿òT¿òé¿ò˘¿ôN¿ô≈¿ô”¿ô›¿ôÚ¿ô˛¿ö¿ö,¿ö>¿öB¿öC¿öp¿öv¿ö©¿öØ¿öÓ¿öÙ¿õ'¿õ-¿õC¿õI¿õl¿õr¿õÄ¿õù¿õ«¿õœ¿õŸ¿õÎ¿õÒ¿ú¿ú¿úQ¿út¿úà¿ú≥¿úÀ¿ú‚¿úÈ¿ù0¿ù4¿ù5¿ùb¿ùh¿ù•¿ù´¿ùﬁ¿ù‰¿û+¿û1¿ûz¿ûÄ¿ûñ¿ûú¿ûø¿û≈¿û”¿ûÔ¿ü#¿ü+¿ü5¿üG¿ü[¿üå¿ü§¿üª¿ü¬¿†G¿†Ñ¿†õ¿†∑¿†Ú¿°0¿°G¿°h¿°l¿°m¿°π¿¢¿¢%¿¢+¿¢i¿¢o¿¢Æ¿¢¥¿¢Á¿¢Ì¿£¿£	¿£,¿£2¿£@¿£Z¿£í¿£ö¿£§¿£∂¿£º¿£Ã¿£“¿§#¿§T¿§h¿§≤¿§ ¿§⁄¿§Ò¿§¯¿•^¿•b¿•c¿•Ø¿•˛¿¶¿¶!¿¶i¿¶o¿¶≠¿¶≥¿¶˙¿ß ¿ßI¿ßO¿ße¿ßk¿ßé¿ßî¿ß¢¿ßª¿ß˝¿®¿®¿®!¿®5¿®Ö¿®ù¿®≠¿®ƒ¿®À¿©P¿©ç¿©§¿©¿¿©˚¿™@¿™j¿™ã¿™è¿™ê¿™‹¿™È¿™Ô¿´(¿´.¿´m¿´s¿´¶¿´¨¿´¬¿´»¿´Î¿´Ò¿´ˇ¿¨¿¨E¿¨M¿¨W¿¨i¿¨o¿¨¿¨Ö¿¨–¿¨¸¿≠¿≠U¿≠m¿≠}¿≠î¿≠õ¿≠∞¿≠Í¿≠Ó¿≠Ô¿Æ;¿ÆH¿ÆN¿Æë¿Æó¿Æ–¿Æ÷¿Ø¿Ø#¿Øl¿Ør¿Øà¿Øé¿Ø±¿Ø∑¿Ø≈¿ØŸ¿∞¿∞¿∞%¿∞7¿∞K¿∞ñ¿∞Æ¿∞æ¿∞’¿∞‹¿∞Ò¿±2¿±6¿±7¿±à¿±∆¿±Ã¿≤¿≤¿≤R¿≤X¿≤ã¿≤ë¿≤ß¿≤≠¿≤–¿≤÷¿≤‰¿≥¿≥Y¿≥a¿≥k¿≥}¿≥É¿≥ì¿≥ô¿≥È¿¥¿¥,¿¥e¿¥~¿¥û¿¥µ¿¥º¿µ¿µ#¿µ$¿µu¿µ≥¿µπ¿∂¿∂
¿∂K¿∂Q¿∂ò¿∂û¿∂Á¿∂Ì¿∑¿∑	¿∑,¿∑2¿∑@¿∑]¿∑π¿∑¡¿∑À¿∑›¿∑Ò¿∏0¿∏I¿∏i¿∏Ä¿∏á¿π¿πI¿πc¿π¿π∫¿π¯¿∫(¿∫I¿∫M¿∫N¿∫}¿∫É¿∫±¿∫∑¿∫ˆ¿∫¸¿ª¿ª¿ª;¿ªA¿ªO¿ªh¿ªÜ¿ª©¿ªË¿ªı¿º ¿º¿º¿º$¿º*¿º:¿º@¿ºå¿º®¿ºº¿ºÛ¿ΩM¿Ωf¿Ωj¿Ωk¿Ωû¿Ω∑¿Ω«¿æ<¿æç¿æ†¿æ™¿æΩ¿æ¡¿æ¬¿æÌ¿æÛ¿ø+¿ø1¿ø_¿øe¿øù¿ø£¿øÏ¿øÚ¿¿¿¿+¿¿1¿¿ì¿¿•¿¿π¿¡#¿¡ç¿¬¿¬S¿¬u¿¬ë¿¬Ã¿√
¿√!¿√B¿√F¿√G¿√n¿√â¿√ô¿√¥¿√«¿√—¿√˝¿ƒ5¿ƒN¿ƒj¿ƒz¿ƒñ¿ƒ©¿ƒ≥¿ƒ÷¿ƒ⁄¿ƒ€¿≈¿≈%¿≈u¿≈æ¿∆¿∆¿∆0¿∆K¿∆x¿∆y¿∆õ¿∆Ã¿«¿«B¿«S¿«u¿«¿«≥¿«¥¿«Î¿»5¿»V¿»a¿»ã¿»¡¿»·¿…¿…&¿…0¿…f¿…n¿…o¿…≤¿…“¿…‹¿…‚¿…ˇ¿ ¿ ¿ T¿ ú¿ ∞¿ ∂¿ Ô¿ ı¿À4¿À:¿ÀP¿ÀV¿Ày¿À¿Àç¿À®¿À◊¿À˙¿Ã=¿ÃJ¿ÃU¿Ã]¿Ãg¿Ãy¿Ã¿Ãè¿Ãï¿ÃÂ¿Õ¿Õ(¿Õë¿Õ∫¿Œ1¿ŒM¿ŒQ¿ŒR¿Œû¿ŒÊ¿Œ˙¿œ ¿œC¿œI¿œÇ¿œà¿œ¿¿œ∆¿–¿–¿–+¿–N¿–T¿–¬¿–‘¿–Ë¿—¿—È¿“n¿“Ø¿“—¿“Ì¿”(¿”m¿”ó¿”∏¿”º¿”Ω¿‘¿‘*¿‘:¿‘U¿‘h¿‘r¿‘û¿‘ø¿’'¿’f¿’¡¿’⁄¿’ˆ¿÷¿÷"¿÷5¿÷?¿÷b¿÷f¿÷g¿÷∑¿÷Ë¿÷Ó¿◊*¿◊0¿◊o¿◊u¿◊ã¿◊ë¿◊¥¿◊∫¿◊»¿◊È¿ÿ¿ÿo¿ÿì¿ÿû¿ÿ¶¿ÿ∞¿ÿ¬¿ÿ»¿ÿŒ¿ÿﬁ¿ÿ‰¿Ÿ.¿ŸZ¿Ÿn¿Ÿ–¿Ÿ˘¿⁄&¿⁄ú¿⁄∏¿⁄º¿⁄Ω¿€	¿€:¿€@¿€Ü¿€å¿€»¿€Œ¿‹¿‹¿‹U¿‹[¿‹q¿‹î¿‹ö¿›¿›¿›3¿›»¿ﬁ5¿ﬁ∫¿ﬁ˚¿ﬂ ¿ﬂ<¿ﬂw¿ﬂµ¿ﬂÂ¿‡¿‡
¿‡¿‡Z¿‡u¿‡Ö¿‡†¿‡≥¿‡Ω¿‡È¿·¿·Q¿·v¿·è¿·Õ¿·Ù¿‚¿‚¿‚0¿‚6¿‚R¿‚S¿‚c¿‚¿‚í¿‚ú¿‚ø¿‚√¿‚ƒ¿‚˛¿„¿„5¿„;¿„K¿„Q¿„†¿„Î¿‰4¿‰`¿‰t¿‰⁄¿‰ı¿Â¿Âã¿Âè¿Âê¿Â ¿Â–¿Ê¿Ê¿ÊB¿ÊH¿ÊÄ¿ÊÜ¿Êœ¿Ê„¿ÁÄ¿Á©¿Ë¿Ëõ¿Ë‹¿È¿È¿ÈX¿Èô¿ÈΩ¿Èﬁ¿È‚¿È„¿Í&¿ÍA¿Íd¿Ír¿Íx¿Íà¿Í£¿Í∂¿Í¿¿Í˚¿Î'¿Îz¿ÎÕ¿Ï;¿Ïk¿Ïí¿Ï¿¿Ï‹¿ÏÏ¿Ì¿Ì¿Ì%¿Ì;¿Ì`¿Ìf¿Ìj¿Ìk¿Ìµ¿ÌÓ¿ÌÙ¿Ó/¿Ó5¿ÓE¿ÓK¿Óò¿Ó´¿Ó˚¿Ô*¿Ô>¿Ô±¿Ô⁄¿¿{¿¿Ä¿ ¿Ò¿Ò	¿ÒN¿ÒT¿Òè¿Òï¿ÒÕ¿Ò”¿Ú¿Ú0¿Ú⁄¿Û¿Ûs¿Û¯¿Ù9¿Ù^¿Ùz¿Ùµ¿Ùˆ¿ı"¿ıC¿ıG¿ıH¿ıì¿ıÆ¿ıÊ¿ˆB¿ˆû¿˜¿˜6¿˜O¿˜v¿˜Ö¿˜ç¿˜ü¿˜•¿˜ı¿¯¿¯J¿¯f¿¯ü¿¯£¿¯§¿¯œ¿¯’¿˘¿˘¿˘¿˘!¿˘l¿˘Ñ¿˘ñ¿˘˙¿˙¿˙N¿˙b¿˙h¿˙¢¿˙‚¿˙ı¿˙˚¿˚¿˚M¿˚a¿˚g¿˚¶¿˚™¿˚´¿˚¸¿¸M¿¸q¿¸w¿¸©¿¸Ø¿¸ø¿¸≈¿˝¿˝P¿˝°¿˝“¿˝Ê¿˛(¿˛á¿˛§¿˛∏¿˛æ¿˛Ó¿ˇS¿ˇg¿ˇ©¿ˇº¿ˇ¬¿ $¿ I¿ ú¿ Ø¿ µ¿ –¿ ˜¿¿1¿F¿[¿Ñ¿ô¿ü¿£¿§¿‘¿⁄¿¿¿#¿)¿`¿f¿t¿ê¿©¿±¿ª¿Õ¿„¿È¿¿!¿/¿L¿Ä¿à¿í¿§¿∏¿Á¿¿¿-¿@¿J¿ú¿∑¿¿h¿ü¿—¿Ÿ¿Ê¿¿<¿B¿w¿¨¿≤¿¿#¿?¿R¿\¿¿É¿Ñ¿√¿…¿˚¿¿¿¿@¿F¿T¿m¿®¿∞¿∫¿Ã¿¯¿	Q¿	q¿	ô¿	©¿	±¿	æ¿
¿
¿
¿
¿
d¿
j¿
ü¿
 ¿
Â¿
ı¿¿#¿-¿S¿Ä¿ÿ¿Ï¿¿/¿K¿^¿h¿~¿ñ¿·¿Í¿¿Ù¿ı¿F¿ä¿ê¿ ¿ ¿¿+¿F¿Y¿c¿è¿Î¿G¿æ¿ﬂ¿¯¿¿.¿6¿H¿N¿û¿º¿Ô¿ˇ¿¿.¿8¿<¿=¿é¿î¿‰¿4¿Å¿À¿ı¿˚¿H¿ô¿±¿ﬁ¿*¿x¿ê¿™¿¿N¿û¿Œ¿¿D¿ó¿"¿/¿l¿r¿à¿–¿Ô¿¿A¿G¿H¿ã¿è¿ê¿§¿Œ¿<¿@¿A¿Ñ¿¨¿◊¿¿H¿L¿M¿î¿π¿ø¿œ¿’¿¿V¿ü¿†¿Ó¿F¿G¿Ç¿à¿Ã¿“¿¿-¿O¿w¿•¿¬¿Ó¿˜¿6¿[¿ô¿¬¿‹¿
¿¿$¿j¿¶¿Æ¿¥¿∏¿π¿Ÿ¿ﬂ¿ -¿ q¿ è¿ ∏¿ ⁄¿!¿!H¿!o¿!w¿!}¿!Å¿!Ç¿!Æ¿!Ø¿!„¿"¿"¿"¿"F¿"q¿"u¿"v¿"ó¿#¿#N¿#ï¿#ﬁ¿$¿$å¿$†¿$ƒ¿%¿%:¿%D¿%J¿%ó¿%õ¿%ú¿%È¿&4¿&f¿&Å¿&ô¿&°¿&ß¿&∏¿&º¿&Ω¿'	¿'S¿'l¿'û¿'π¿'”¿'€¿'·¿'Ù¿'¯¿'˘¿(¿(,¿(G¿(h¿(∂¿)¿)¿)<¿)S¿)~¿)≠¿)‡¿)˛¿*R¿*x¿*≤¿*Ã¿*¿+¿+2¿+Y¿+â¿+©¿+…¿+Ì¿,"¿,°¿,¥¿,≈¿,‘¿,·¿,Ï¿,ı¿,¸¿- ¿-¿-¿- ¿-)¿-6¿-8¿-9¿-b¿-à¿-≤¿-Ã¿-Ï¿.¿.6¿.d¿.ü¿.ø¿.‰¿/¿/¿/T¿/å¿/´¿0¿0¿0?¿0î¿0¿¿1¿1¿1#¿1$¿1H¿1f¿1É¿1Ñ¿1•¿1¶¿1«¿1¸¿2¿2¿2 ¿21¿2\¿2}¿2Å¿2Ç¿2è¿2«¿2»¿35¿3n¿3Ü¿3ì¿3´¿3Õ¿3Ò¿3¯¿3¸¿3˛¿3ˇ¿4D¿4e¿4}¿4ö¿4¿¿4Î¿4Ï¿5>¿5\¿5Ö¿5∞¿5–¿6¿6
¿6¿6¿6¿6F¿6É¿6ù¿6©¿6∆¿6⁄¿6‚¿6Ê¿6Á¿6Û¿7¿7(¿7C¿7D¿7P¿7â¿7Á¿7˘¿7˝¿7ˇ¿8 ¿8I¿8n¿8é¿8´¿8—¿9 ¿9¿9W¿9t¿:$¿:Q¿:|¿:û¿:—¿:ÿ¿:‹¿:›¿:È¿;Z¿;~¿;¿;ã¿;∂¿;–¿<*¿<F¿<É¿<ù¿<∫¿<◊¿<Î¿<Û¿<˜¿<¯¿=¿=$¿=Z¿=u¿=v¿=Ç¿=ª¿>	¿>¿> ¿>"¿>#¿>t¿>∏¿>Ì¿>Ó¿>˝¿>˛¿?)¿?C¿?Ñ¿?¥¿?Ï¿@
¿@A¿@û¿@¬¿@√¿A¿AW¿AX¿Aá¿A≥¿A›¿AÔ¿A˜¿A¯¿B%¿BB¿B∑¿C¿C(¿Cb¿Cô¿Cª¿CÍ¿D¿D¿Dê¿D∆¿D¸¿E¿E¿E ¿E!¿EA¿E©¿Eﬁ¿E˛¿F+¿Fu¿F´¿G¿G6¿GÜ¿G‡¿H¿H¿H#¿Hî¿H‰¿HÂ¿I-¿I.¿Iï¿Iñ¿I¥¿I⁄¿IÛ¿I˘¿I˝¿I˛¿J¿J.¿JE¿Jr¿Jí¿Jò¿Jƒ¿K ¿K¿KW¿Kê¿Kº¿KÁ¿KÌ¿KÒ¿KÚ¿LG¿L}¿Lë¿Ló¿Lø¿LË¿L˛¿M¿M¿M¿M!¿M"¿M3¿MM¿Mv¿MÑ¿Mä¿M¨¿M√¿M«¿M»¿M⁄¿M€¿N¿N¿Nj¿NÑ¿N∞¿NÊ¿O?¿OT¿OZ¿O∞¿O“¿OÁ¿OÌ¿P¿P{¿PÅ¿Pî¿Pò¿Pô¿Pº¿PΩ¿P…¿P˛¿Q¿Q¿Q¿Q ¿Q]¿Q¶¿R¿R*¿R[¿Rc¿Rg¿Rh¿Rt¿RÆ¿R—¿R’¿R÷¿R‚¿R˝¿S¿S#¿S$¿S0¿SO¿SQ¿SR¿Só¿Sõ¿SÍ¿T¿Te¿Tf¿TÆ¿T˘¿U¿U¿U\¿U£¿Uß¿U÷¿V8¿V9¿Vu¿Vy¿V«¿V„¿VÁ¿W¿WU¿WV¿W§¿W€¿Wﬂ¿X.¿X}¿X¡¿X≈¿Y¿Y`¿Y¨¿Y˚¿ZJ¿Za¿Ze¿Z≤¿Z◊¿Z€¿[,¿[z¿[¡¿[Â¿[È¿\4¿\É¿\∑¿\ª¿\œ¿]¿][¿]_¿]∑¿]«¿^¿^5¿^;¿^É¿^ù¿^—¿^Ó¿_¿_	¿_
¿_X¿_®¿_Á¿`¿`¿`\¿`b¿`≤¿`ˇ¿aJ¿ak¿aq¿aæ¿b¿b*¿bW¿bX¿b†¿b±¿b∑¿bˆ¿c&¿c'¿ct¿cÖ¿cã¿c‘¿d¿d]¿dÉ¿dõ¿dµ¿dÚ¿e¿e,¿e0¿e1¿et¿ez¿e ¿eÒ¿eÚ¿f)¿f/¿fc¿fÑ¿fò¿fô¿f•¿fÕ¿fŒ¿f⁄¿g ¿g¿g<¿gB¿gF¿gG¿gS¿gn¿gâ¿gû¿g ¿gŒ¿gœ¿g€¿h¿h¿h9¿h=¿h>¿hX¿hY¿he¿hx¿hç¿hÕ¿h„¿hÁ¿hË¿hÙ¿i3¿i4¿iV¿iõ¿i±¿iµ¿i∂¿iﬂ¿j¿j)¿je¿jè¿j¶¿j∂¿jæ¿k ¿k¿k.¿kS¿k[¿k_¿k`¿k¿¿k¬    RoutePopDispositionRouteRouteSettingsPageNavigatorObserverHeroControllerScopeRouteTransitionRecordTransitionDelegateDefaultTransitionDelegate"kDefaultRouteTraversalEdgeBehavior	Navigator_RouteLifecycle_NotAnnounced_RouteEntry_NavigatorObservation_NavigatorPushObservation_NavigatorPopObservation_NavigatorRemoveObservation_NavigatorReplaceObservationNavigatorState_RouteRestorationType_RestorationInformation_NamedRestorationInformation _AnonymousRestorationInformation_HistoryPropertyRestorableRouteFuture i«