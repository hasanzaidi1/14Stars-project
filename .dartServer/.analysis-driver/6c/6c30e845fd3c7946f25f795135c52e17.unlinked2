ÅnametoStringmergeUpsiblingMergeGroups_mergeUp_siblingMergeGroupsmarkAsMergeUpmarkAsSiblingMergeGroupbuildlabelhintactionhashCode==_nextId_actions_idsgetIdentifier	getActionstring
attributes+showWhenEmptyisInterestingvalueToStringflagsactionsattributedLabelvalueattributedValueincreasedValueattributedIncreasedValuedecreasedValueattributedDecreasedValueattributedHinttooltiptextDirectiontextSelectionscrollChildCountscrollIndexscrollPositionscrollExtentMaxscrollExtentMinplatformViewIdmaxValueLengthcurrentValueLengthrecttags	transform	elevation	thicknesscustomSemanticsActionIdshasFlag	hasActiontoStringShortdebugFillProperties_sortedListsEqual
childOrdergetChildren	onTapHintonLongPressHint
isNotEmptyenabledcheckedmixedtoggledselectedbuttonlinkheader	textFieldsliderkeyboardKeyreadOnly	focusablefocusedinMutuallyExclusiveGrouphiddenobscured	multilinescopesRoute
namesRouteimage
liveRegionhintOverridessortKeytagForChildrenonTaponLongPressonScrollLeftonScrollRight
onScrollUponScrollDown
onIncrease
onDecreaseonCopyonCutonPasteonMoveCursorForwardByCharacteronMoveCursorBackwardByCharacteronMoveCursorForwardByWordonMoveCursorBackwardByWordonSetSelection	onSetTextonDidGainAccessibilityFocusonDidLoseAccessibilityFocus	onDismisscustomSemanticsActions$_maxFrameworkAccessibilityIdentifier_lastIdentifier_generateNewIdkeyid_id_showOnScreen
_transform_rectparentSemanticsClipRectparentPaintClipRectelevationAdjustmentindexInParentisInvisibleisMergedIntoParent_isMergedIntoParentareUserActionsBlocked_areUserActionsBlockedisPartOfNodeMergingmergeAllDescendantsIntoThisNode _mergeAllDescendantsIntoThisNode	_children_debugPreviousSnapshot_replaceChildrenhasChildren_deadchildrenCountvisitChildren_visitDescendantsowner_ownerattachedparent_parentdepth_depth_redepthChild_redepthChildren_adoptChild
_dropChildattachdetach_dirty
_markDirty)_isDifferentFromCurrentSemanticAnnotation_customSemanticsActions_effectiveActionsAsBits_actionsAsBitsisTagged_flags_attributedLabel_attributedValue_attributedIncreasedValue_attributedDecreasedValue_attributedHint_tooltip
_elevation
_thickness_hintOverrides_textDirection_sortKey_textSelectionisMultiline_isMultiline_scrollChildCount_scrollIndex_scrollPosition_scrollExtentMax_scrollExtentMin_platformViewId_maxValueLength_currentValueLength_canPerformAction_kEmptyConfig
updateWithgetSemanticsData_initIdentityTransform_kEmptyChildList!_kEmptyCustomSemanticsActionsList_kIdentityTransform_addToUpdate_childrenInTraversalOrder	sendEvent_debugIsActionBlockedtoStringDeeptoDiagnosticsNodedebugDescribeChildrendebugListChildrenInOrderisLeadingEdgeoffsetnode	compareTostartOffsetnodessortedWithinVerticalGroupsortedWithinKnotpositiononSemanticsUpdate_dirtyNodes_nodes_detachedNodesrootSemanticsNodedisposesendSemanticsUpdate_getSemanticsActionHandlerForIdperformAction%_getSemanticsActionHandlerForPositionperformActionAtisSemanticBoundary_isSemanticBoundaryisBlockingUserActionsexplicitChildNodes+isBlockingSemanticsOfPreviouslyPaintedNodeshasBeenAnnotated_hasBeenAnnotated
_addAction_addArgumentlessAction_onTap_onLongPress_onScrollLeft
_onDismiss_onScrollRight_onScrollUp_onScrollDown_onIncrease_onDecrease_onCopy_onCut_onPasteonShowOnScreen_onShowOnScreen_onMoveCursorForwardByCharacter _onMoveCursorBackwardByCharacter_onMoveCursorForwardByWord_onMoveCursorBackwardByWord_onSetSelection
_onSetText_onDidGainAccessibilityFocus_onDidLoseAccessibilityFocuschildConfigurationsDelegate_childConfigurationsDelegategetActionHandler_indexInParentisMergingSemanticsOfDescendants _isMergingSemanticsOfDescendants_onCustomSemanticsActionisImage
isSelected	isEnabled	isCheckedisCheckStateMixed	isToggledisInMutuallyExclusiveGroupisFocusable	isFocusedisButtonisLinkisHeaderisSliderisKeyboardKeyisHiddenisTextField
isReadOnly
isObscuredhasImplicitScrollingtagsForChildrentagsChildrenWith_tagsForChildrenaddTagForChildren_setFlag_hasFlagisCompatibleWithabsorbcopyinverseHitTesttraversalOrder	doCompareorderSemanticsNodeVisitorMoveCursorHandlerSetSelectionHandlerSetTextHandlerSemanticsActionHandlerSemanticsUpdateCallback$ChildSemanticsConfigurationsDelegate_kUnblockedUserActionsSemanticsTag"ChildSemanticsConfigurationsResult)ChildSemanticsConfigurationsResultBuilderCustomSemanticsActionAttributedStringAttributedStringPropertySemanticsData_SemanticsDiagnosticableNodeSemanticsHintOverridesSemanticsPropertiesdebugResetSemanticsIdCounterSemanticsNode_BoxEdge_SemanticsSortGroup_pointInParentCoordinates_childrenInDefaultOrder_TraversalSortNodeSemanticsOwnerSemanticsConfigurationDebugSemanticsDumpOrder_concatAttributedStringSemanticsSortKeyOrdinalSortKeyÅùOffsetRectSemanticsActionSemanticsFlagStringAttributeTextDirectionMatrixUtilsTransformPropertySemanticsBindingVoidCallbackDiagnosticLevelDiagnosticPropertiesBuilderDiagnosticsNodeDiagnosticsTreeStyleKeyTextTreeConfigurationTextSelectionMatrix4SemanticsEventvisitChildrenboolvoidsetSelectionsetTextStringgetActionHandlerObjectonSemanticsUpdateSemanticsUpdatechildConfigurationsDelegatetagsChildrenWithListintdidGainAccessibilityFocusindexdidLoseAccessibilityFocusRenderSemanticsGestureHandleroverrideobjectRuntimeTypePipelineOwnermergeUpaddsiblingMergeGroupsSet	flattenedconfig_	immutablehashruntimeTypelabelhintactionMap	TextRange
isNotEmptyisEmptylength	attributerangestartendstringof
attributescopy
listEqualsDiagnosticsPropertyvaluedefaultValueisInterestingparentConfigurationlineBreakProperties
replaceAllmergeAllDescendantsIntoThisNodegetSemanticsDataDiagnosticableincreasedecreaseScrollPositionpixelsdoublemaxScrollExtentminScrollExtentAndroidView	UiKitViewisTextField	elevation	thicknessdebugFillPropertiesshowNameDoublePropertyvaluesnamemap	getActionactionIdtoListIterablePropertyifEmptyflagStringPropertyEnumPropertyisValidMessagePropertyIntPropertyflagsactionsattributedLabelattributedValueattributedIncreasedValueattributedDecreasedValueattributedHinttooltiptextDirectionrect	setEqualstagsscrollChildCountscrollIndextextSelectionscrollPositionscrollExtentMaxscrollExtentMinplatformViewIdmaxValueLengthcurrentValueLength	transformcustomSemanticsActionIdshashAlliDiagnosticableNodedebugDescribeChildren
childOrderDiagnosticableTree	onTapHintonLongPressHintCheckboxtristateexplicitChildNodesscopesRoute
namesRouteisImageSnackBarisLiveRegion
liveRegionDirectionalityincreasedValuedecreasedValueRenderObjectaddTagForChildrentap	longPress
scrollLeftscrollRightscrollUp
scrollDowncutpastemoveCursorForwardByCharactermoveCursorBackwardByCharactermoveCursorForwardByWordmoveCursorBackwardByWord	FocusNode
FocusScopeFocusManagerdismisscustomActionid_lastIdentifierflushSemanticsDiagnosticableTreeMixinshowOnScreenmatrixEquals
isIdentityzeroisFiniteisMergingSemanticsOfDescendantsanychild	identicalErrorDescriptionErrorSpacertoDiagnosticsNodestyle
singleLineFlutterError	fromPartsErrorSummary	ErrorHintnodeisMergedIntoParentparent_deadisInvisible
_dropChildattached_visitDescendantsowner_depth_redepthChildrenforEach_parentattachdetachvisibleForTesting_nodescontainsKey_detachedNodesremovecontains_dirtyNodes_flags_sortKey_textSelection_scrollPosition_scrollExtentMax_scrollExtentMin_actionsAsBitsindexInParent_maxValueLength_currentValueLengthisBlockingUserActions_actions_customSemanticsActionsPhysicalModelAchildrenInInversePaintOrderhintOverridessortKeyisMultiline_platformViewIdkeysgetIdentifieroverridingAction_effectiveActionsAsBits_textDirection_scrollChildCount_scrollIndex_attributedValue_attributedIncreasedValue_attributedDecreasedValue_tooltipaddAllthisAttributedStringthisTextDirectionotherAttributedString_attributedLabelotherTextDirection_attributedHintmax
_thickness
_elevationsortFloat64Listidentitystorage	Int32ListSemanticsUpdateBuilder
updateNodelabelAttributesvalueAttributesincreasedValueAttributesdecreasedValueAttributeshintAttributestextSelectionBase
baseOffsettextSelectionExtentextentOffsetscrollChildrennanchildrenInTraversalOrderchildrenInHitTestOrderadditionalActionspositionclearsortNodeSystemChannelsaccessibilitysendtoMapnodeIdFlagPropertyifTrueifFalselevelhiddeninfogetAsTranslationshift
getAsScaletoStringAsFixedtoStringsplittakeline	substringjoindescriptiontagwhereisHiddendebugtraversalOrdertoStringDeepprefixLineOneprefixOtherLinesminLevelsparseinverseHitTest
Comparable	compareTooffsetstartOffsetdeflateisLeadingEdgetopLeftdxbottomRightedgenodesrtlreversedexpandsortedWithinKnot	directioncenternextNodeltrpiabdyVector3
transform3xysortedWithinVerticalGroupensureSemanticsSemanticsHandleChangeNotifierFlutterViewdisposedepth_dirtyisPartOfNodeMerging
_markDirtyinstancecreateSemanticsUpdateBuilder_addToUpdateupdateCustomAction
overrideIdbuildnotifyListeners_canPerformActionargs_showOnScreencopyInversetransformPointhasChildren	_childrendescribeIdentityvisitChildrenForSemantics	addActionGestureDetectordynamiccastListTileselected
isSelectedExcludeSemanticshasEnabledState	isEnabledhasCheckedState	isCheckedisCheckStateMixedhasToggledState	isToggledRadioisInMutuallyExclusiveGroupisFocusable	isFocusedisButtonisLinkisHeaderisSliderisKeyboardKey
isReadOnly
isObscuredListViewTabBarhasImplicitScrollingIterableRenderViewportexcludeFromScrollinghasBeenAnnotatedkey_hintOverrides_hasBeenAnnotated_isSemanticBoundary+isBlockingSemanticsOfPreviouslyPaintedNodes _isMergingSemanticsOfDescendants_tagsForChildren_indexInParentdebugDumpSemanticsTreeUnicodeRLEPDFLRE	protectedinfinitynegativeInfinityorderDiagnosticsPropertyDiagnosticableDiagnosticableNodeDiagnosticableTreeDiagnosticableTreeMixin
ComparableChangeNotifierSemanticsSortKeyk∞¶>≠íØÚ ÿï`2“ ÇöÇ˘OffsetRectSemanticsActionSemanticsFlagStringAttributeTextDirectionVoidCallback Çâdart:uiÉ%ÉôDiagnosticLevelDiagnosticPropertiesBuilderDiagnosticsNodeDiagnosticsTreeStyleKeyTextTreeConfiguration Ç¸package:flutter/foundation.dartÉ¬É‘TextSelection Éõpackage:flutter/services.dartÑÑMatrix4 É÷'package:vector_math/vector_math_64.dartÑ4ÑGSemanticsEvent Ñsemantics_event.dart  Ä¶  Ä∏mathÄª	dart:math  Ä¬  Ä“uiÄ’dart:uiÄÍÅ;OffsetRectSemanticsActionSemanticsFlagStringAttributeTextDirection Ä⁄  dart:ui  Å?  "package:collection/collection.dart  Ål  package:flutter/foundation.dartÅºÅﬂMatrixUtilsTransformProperty Åñ  package:flutter/painting.dart  Å‚  package:flutter/services.dart  Ç
  'package:vector_math/vector_math_64.dartÇRÇgSemanticsBinding Ç=  binding.dart  Çj  semantics_event.dart    	dart:core¿ÛÎ ¿oìá <ÄÜÄ§Ä•Ä¡ÄŸÅ=Å>ÅkÅïÅ·Ç	Ç;Ç<ÇiÇàÇâÇ˚Ç¸ÉõÉ÷ÑÑÑIÑJÑêÑîÑΩÑ¡ÑÏÖ.Ö/ÖjÖnÖºÜÜLÜMÜôÜÿááágáèáƒá≈á˘á˝à8àvàwàÃà–â âLâMâôâùâÊä+äpäüä£äÌã>ãBãçãòåååfåõåúåΩå¡ç çMçôçùçÎé8éFéJéòéÊè4èCèXèxè~èŒêênêê†ê°êﬁê‰ë*ë?ë@ëLëòëöëõë÷ëıë˘íFítíÀí‹í‡ì)ìTì£ì§ìÙîîîgî±îÛï!ï"ïqïõï°ïÍñ#ñoñ∏ñæóó_ó¨ó˝òJòÉò¬òƒò≈ôô#ô'ô`ôùôÏö&öXöïöƒö≈õõtõuõ≈õ—õ◊úú\ú©ú™úÌùùù_ù∑û!û"ûpûüûÆü ü}üçü∞ü˝†J†n†y†Å†î†û†Ó†Ú†Ù†ı°%°)°k°≥°˚¢C¢í¢·¢Ô¢Û£B£v£z£…£‹£‡§(§S§W§e§i§∫§≈§„•••N•ä•••∏•Õ•Œ¶¶,¶2¶i¶€¶ıß	ß
ßHß_ß`ßúß≤ß≥ßÌ®®®®S®T®`®É®Ø®√®…®Û©©1©T©X©Y©e©{©ÿ©‹©›™&™?™Y™≥´	´
´9´t´î´Æ´»´Â¨¨¨¨#¨$¨S¨á¨†¨§¨¶¨ß¨ﬂ¨Í≠≠&≠,≠w≠á≠ç≠◊≠Ê≠˙ÆÆ>ÆvÆâÆ«ÆŸØØAØâØñØ†ØµØ¡Ø¬Ø˙∞∞∞<∞B∞Ñ∞Æ∞Ø∞Ú∞¯±I±í± ±‰±¯±˛≤≤1≤7≤8≤]≤ë≤Á≥≥6≥x≥¶≥◊¥¥¥b¥ê¥ò¥û¥·¥Â¥Êµ2µ>µaµçµ≤µ‘∂∂∂∂+∂b∂c∂o∂Ö∂Ê∂Í∂Ï∂Ì∑7∑u∑ƒ∏
∏∏M∏i∏Ä∏ì∏ß∏«∏ﬂ∏ππππ[πñπúπ¡π›πﬁπÍ∫]∫^∫j∫±∫ ∫ﬂ∫Âªª-ªaªúª«ªÕªÚº
ºº}ºÅºÉºÑººº¿ΩΩ]Ω≠ΩøΩ√æææ6æ]æcæ±æ∑øøø-øHøkøéø∫øÊ¿ @¿ @#¿ @D¿ @\¿ @y¿ @ñ¿ @∑¿ @÷¿ @˙¿ A¿ A?¿ Ab¿ AÑ¿ A¶¿ AÃ¿ A€¿ AÔ¿ B¿ Bï¿ C6¿ C◊¿ Dì¿ EO¿ EÌ¿ EÓ¿ F-¿ F@¿ FA¿ FÇ¿ Fó¿ Fò¿ F◊¿ F›¿ G¿ G¿ GV¿ GÑ¿ GÖ¿ G∆¿ GÁ¿ GÌ¿ H&¿ H,¿ He¿ Hè¿ Hê¿ Hœ¿ H’¿ I¿ I¿ IN¿ I|¿ I}¿ Iæ¿ Iﬂ¿ IÂ¿ J¿ J$¿ J]¿ Já¿ Jà¿ Jƒ¿ JÌ¿ JÛ¿ K,¿ K2¿ Ku¿ Kµ¿ K∂¿ KÚ¿ L8¿ L>¿ Lw¿ L}¿ Lø¿ LÚ¿ LÛ¿ M/¿ MX¿ M^¿ Mó¿ Mù¿ M‡¿ N ¿ N!¿ N]¿ N£¿ N©¿ N‚¿ NË¿ O*¿ O]¿ O^¿ O¨¿ O≤¿ OÎ¿ OÒ¿ P*¿ PV¿ PW¿ P§¿ P»¿ PŒ¿ Q¿ Q¿ QE¿ Qn¿ Qo¿ Q§¿ Q™¿ Q„¿ Q˚¿ Q¸¿ R:¿ Rp¿ Rñ¿ Ró¿ RË¿ S¿ S:¿ S;¿ Sá¿ Sç¿ S⁄¿ SÊ¿ T¿ T¿ TL¿ Tf¿ Tg¿ T∑¿ T…¿ Tœ¿ U¿ Uk¿ U±¿ U∑¿ U«¿ UÕ¿ V¿ V7¿ V8¿ Vá¿ Vô¿ Vü¿ V⁄¿ V‡¿ V¿ Vˆ¿ WI¿ Wj¿ Wk¿ W∫¿ WÃ¿ W“¿ X¿ X¿ X#¿ X)¿ X|¿ Xù¿ Xû¿ XË¿ Y¿ Y¿ YY¿ Y£¿ Y∏¿ Yæ¿ YŒ¿ Y‘¿ Z¿ ZN¿ Zk¿ Zl¿ Z∏¿ Z ¿ Z–¿ [¿ [1¿ [7¿ [á¿ […¿ [Ê¿ [Á¿ \6¿ \H¿ \N¿ \õ¿ \Ø¿ \µ¿ ]¿ ]1¿ ]R¿ ]S¿ ]í¿ ]•¿ ]¶¿ ]‚¿ ^¿ ^¿ ^^¿ ^d¿ ^´¿ ^¸¿ _¿ _'¿ _(¿ _p¿ _v¿ _Ü¿ _å¿ _‹¿ _˛¿ `¿ `¿ `_¿ `e¿ `u¿ `{¿ `«¿ `·¿ `‚¿ a-¿ aL¿ aR¿ aÖ¿ aã¿ aõ¿ a°¿ aÈ¿ b¿ b¿ bF¿ bá¿ bà¿ bª¿ c¿ c¿ c¿ cY¿ cZ¿ cf¿ c´¿ c÷¿ d$¿ dà¿ d◊¿ e&¿ eW¿ eö¿ e≈¿ e‹¿ e„¿ f4¿ få¿ fù¿ fÙ¿ ga¿ gb¿ gë¿ gŒ¿ gı¿ h
¿ h¿ hd¿ h¨¿ hÙ¿ iN¿ i®¿ iÓ¿ j8¿ jù¿ j»¿ k4¿ k:¿ kë¿ kË¿ lG¿ l†¿ lÒ¿ mM¿ mß¿ n¿ n¿ n¿ n¿ n7¿ nY¿ ny¿ nù¿ n—¿ o¿ oK¿ oë¿ o√¿ oÁ¿ p¿ p5¿ p\¿ pí¿ pæ¿ pÓ¿ q ¿ qT¿ qà¿ q∫¿ qÏ¿ r&¿ rN¿ rv¿ rû¿ rˆ¿ r˙¿ r˚¿ s¿ s*¿ s5¿ sB¿ sW¿ sl¿ sä¿ s®¿ sº¿ s…¿ s‹¿ sÊ¿ s¿ t¿ t¿ t*¿ t>¿ tS¿ th¿ t|¿ tê¿ t°¿ tª¿ tÃ¿ t›¿ tÓ¿ uI¿ uP¿ uU¿ uV¿ uõ¿ uƒ¿ u◊¿ u›¿ v¿ v/¿ vE¿ vM¿ v{¿ vû¿ v∂¿ væ¿ v»¿ v€¿ v·¿ vÛ¿ v˜¿ v˘¿ v˙¿ wI¿ wj¿ wz¿ wî¿ wÆ¿ wÃ¿ w“¿ w”¿ wˇ¿ x ¿ x¿ xj¿ xl¿ xm¿ x¥¿ x√¿ x«¿ xÙ¿ xˇ¿ y9¿ yc¿ yÑ¿ yò¿ y≤¿ y“¿ y¯¿ y˘¿ z¿ z%¿ zW¿ z]¿ z§¿ z—¿ z◊¿ zˇ¿ {¿ {5¿ {6¿ {c¿ {i¿ {õ¿ {°¿ {Î¿ |%¿ |+¿ |]¿ |y¿ |ö¿ |õ¿ |Õ¿ }¿ }¿ }!¿ }`¿ }a¿ }m¿ }ê¿ }º¿ }–¿ }÷¿ ~¿ ~)¿ ~^¿ ~b¿ ~c¿ ~o¿ ~¥¿ ~ﬂ¿ /¿ ã¿ è¿ ë¿ í¿ ·¿ ˆ¿ ˙¿ ÄJ¿ Ä^¿ Äi¿ Ä†¿ Ä≈¿ Ä„¿ Äı¿ Å¿ Å¿ Å*¿ Å<¿ ÅM¿ Å\¿ Åm¿ ÅÅ¿ Åí¿ Å®¿ Åª¿ Åœ¿ Å·¿ Ç¿ Ç¿ Ç(¿ Ç<¿ ÇR¿ Çg¿ Çw¿ Çå¿ Ç•¿ Ç¬¿ Ç“¿ ÇÏ¿ Ç¸¿ É¿ É/¿ ÉR¿ Ék¿ Éé¿ Éù¿ ÉØ¿ É»¿ É‡¿ É¯¿ Ñ
¿ Ñ#¿ Ñ3¿ ÑI¿ Ñ`¿ Ñx¿ Ñç¿ Ñ§¿ Ñπ¿ ÑŒ¿ Ñﬂ¿ ÑÔ¿ Ö¿ Ö*¿ ÖT¿ Öx¿ Öù¿ Ö∂¿ Ö ¿ Ö¿ Ü¿ Ü*¿ ÜK¿ Üø¿ á3¿ áÀ¿ àc¿ à”¿ à‘¿ â$¿ âK¿ âQ¿ âü¿ âÍ¿ ä¿ ä3¿ ä4¿ äy¿ äæ¿ äŒ¿ ä‘¿ ã¿ ãX¿ ãz¿ ãÄ¿ ãΩ¿ ã‘¿ ã’¿ å¿ å^¿ åò¿ åû¿ å‹¿ ç¿ çQ¿ ça¿ çg¿ ç¶¿ çª¿ çº¿ é¿ éG¿ éW¿ é]¿ éö¿ é±¿ é≤¿ è¿ èI¿ èO¿ èü¿ èƒ¿ è‹¿ è›¿ ê!¿ ê'¿ êt¿ êÜ¿ êú¿ êù¿ êﬂ¿ êÂ¿ ë5¿ ë¿ ëç¿ ë°¿ ë¢¿ ëÊ¿ ëÏ¿ í;¿ íâ¿ íÆ¿ íƒ¿ í≈¿ ì¿ ì¿ ì]¿ ìo¿ ìà¿ ìâ¿ ìÕ¿ ì”¿ î¿ î3¿ îI¿ îJ¿ îî¿ îØ¿ î∞¿ îÌ¿ îÛ¿ ï#¿ ï)¿ ïl¿ ïÑ¿ ïÖ¿ ï∆¿ ïÃ¿ ñ¿ ñ¿ ñk¿ ñµ¿ ó¿ óE¿ ó^¿ ó_¿ ó†¿ ó¶¿ ó˜¿ ò7¿ ò=¿ òè¿ òŸ¿ ô*¿ ôi¿ ôÄ¿ ôÅ¿ ôŒ¿ ô‘¿ ö$¿ öe¿ öç¿ öé¿ ö»¿ öŒ¿ õ¿ õn¿ õt¿ õƒ¿ ú¿ ú#¿ ú)¿ úy¿ úò¿ úû¿ úÔ¿ ù=¿ ùä¿ ù¬¿ ùÿ¿ ùŸ¿ û¿ û¿ ûc¿ û≥¿ û¯¿ ü¿ ü¿ ü_¿ ün¿ üt¿ üæ¿ ü¯¿ ü˛¿ †3¿ †L¿ †M¿ †ö¿ †»¿ †Œ¿ †ˇ¿ °M¿ °É¿ °â¿ °ô¿ °ü¿ °Î¿ ¢¿ ¢"¿ ¢#¿ ¢p¿ ¢v¿ ¢Ü¿ ¢å¿ ¢€¿ ¢ı¿ ¢ˆ¿ £/¿ £5¿ £E¿ £K¿ £ë¿ £¶¿ £ß¿ £Ô¿ £ı¿ §A¿ §é¿ §¡¿ §«¿ •¿ •c¿ •±¿ •ˆ¿ ¶E¿ ¶o¿ ¶u¿ ¶Ö¿ ¶ã¿ ¶‹¿ ß3¿ ßM¿ ßN¿ ßö¿ ß¨¿ ß≤¿ ßˇ¿ ®¿ ®¿ ®c¿ ®ú¿ ®π¿ ®∫¿ ©	¿ ©¿ ©!¿ ©n¿ ©Ç¿ ©à¿ ©—¿ ©¿ ™¿ ™¿ ™F¿ ™L¿ ™õ¿ ™‘¿ ™⁄¿ ´)¿ ´=¿ ´C¿ ´S¿ ´Y¿ ´™¿ ´Œ¿ ¨¿ ¨4¿ ¨5¿ ¨à¿ ¨é¿ ¨ÿ¿ ≠"¿ ≠(¿ ≠w¿ ≠ã¿ ≠ë¿ ≠°¿ ≠ß¿ ≠˜¿ Æ&¿ Æd¿ Æè¿ Æê¿ Æ—¿ Æ◊¿ Ø&¿ Ø_¿ Øe¿ Ø¥¿ Ø»¿ ØŒ¿ Øﬁ¿ Ø‰¿ ∞5¿ ∞Y¿ ∞®¿ ∞ø¿ ∞¿¿ ±¿ ±&¿ ±,¿ ±v¿ ±¿¿ ±∆¿ ≤¿ ≤)¿ ≤/¿ ≤?¿ ≤E¿ ≤ï¿ ≤ƒ¿ ≥¿ ≥-¿ ≥.¿ ≥t¿ ≥ø¿ ≥≈¿ ¥¿ ¥[¿ ¥s¿ ¥y¿ ¥≤¿ ¥Ó¿ ¥Ù¿ µ¿ µ
¿ µY¿ µà¿ µ÷¿ µÈ¿ ∂	¿ ∂
¿ ∂[¿ ∂®¿ ∂Æ¿ ∂ˇ¿ ∑I¿ ∑q¿ ∑w¿ ∑∞¿ ∑Ï¿ ∑Ú¿ ∏¿ ∏¿ ∏X¿ ∏ê¿ ∏◊¿ π¿ π¿ πR¿ πù¿ π£¿ πÓ¿ ∫9¿ ∫Q¿ ∫W¿ ∫ê¿ ∫Ã¿ ∫“¿ ∫‚¿ ∫Ë¿ ª7¿ ªf¿ ª¥¿ ª«¿ ªÁ¿ ªË¿ º9¿ ºÜ¿ ºå¿ º›¿ Ω'¿ ΩO¿ ΩU¿ Ωé¿ Ω÷¿ Ω‹¿ ΩÏ¿ ΩÚ¿ æB¿ æz¿ æ¡¿ æı¿ æˆ¿ øF¿ ø[¿ øa¿ øØ¿ øË¿ øÓ¿ ¿;¿ ¿O¿ ¿U¿ ¿e¿ ¿k¿ ¿ª¿ ¿ﬂ¿ ¡-¿ ¡C¿ ¡D¿ ¡ï¿ ¡»¿ ¡Œ¿ ¬¿ ¬a¿ ¬g¿ ¬¥¿ ¬»¿ ¬Œ¿ ¬ﬁ¿ ¬‰¿ √3¿ √b¿ √ü¿ √…¿ √ ¿ ƒ¿ ƒ¿ ƒ_¿ ƒô¿ ƒÃ¿ ƒ“¿ ≈¿ ≈^¿ ≈w¿ ≈x¿ ≈¡¿ ≈“¿ ≈ÿ¿ ∆$¿ ∆s¿ ∆™¿ ∆∞¿ ∆ˇ¿ «.¿ «/¿ «v¿ «ö¿ «†¿ «–¿ «ˆ¿ «˜¿ »F¿ »X¿ »^¿ »¨¿ »˙¿ …!¿ …D¿ …E¿ …ç¿ …ì¿ …ﬁ¿  -¿  N¿  T¿  û¿  Ô¿ À8¿ À>¿ ÀN¿ ÀT¿ À§¿ À¬¿ ÀË¿ ÀÈ¿ Ã¿ Ã¿ Ãl¿ Ãº¿ Ã ¿ Ã–¿ Õ¿ Õe¿ Õk¿ Õ∏¿ Œ¿ ŒX¿ Œí¿ ŒØ¿ Œ∞¿ Œ„¿ ŒÈ¿ œ9¿ œt¿ œz¿ œ»¿ –¿ –)¿ –/¿ –|¿ –Õ¿ —¿ —k¿ —x¿ —õ¿ —ú¿ —–¿ —÷¿ “%¿ “s¿ “í¿ “ò¿ “Ë¿ ”4¿ ”¿ ”Œ¿ ”·¿ ‘¿ ‘¿ ‘;¿ ‘A¿ ‘ê¿ ‘ﬁ¿ ‘˝¿ ’¿ ’T¿ ’†¿ ’Ì¿ ÷=¿ ÷P¿ ÷u¿ ÷v¿ ÷®¿ ÷Æ¿ ÷˝¿ ◊K¿ ◊h¿ ◊n¿ ◊º¿ ÿ¿ ÿS¿ ÿ¢¿ ÿµ¿ ÿ◊¿ ÿÿ¿ Ÿ¿ Ÿ¿ Ÿa¿ ŸØ¿ ŸÃ¿ Ÿ“¿ ⁄"¿ ⁄n¿ ⁄ª¿ €¿ €¿ €B¿ €C¿ €u¿ €{¿ €»¿ ‹¿ ‹¿ ‹X¿ ‹•¿ ‹´¿ ‹˜¿ ›G¿ ›_¿ ›Å¿ ›Ç¿ ›¥¿ ›∫¿ ﬁ¿ ﬁK¿ ﬁQ¿ ﬁó¿ ﬁ‰¿ ﬁÍ¿ ﬂ8¿ ﬂà¿ ﬂ¢¿ ﬂƒ¿ ﬂ≈¿ ﬂÛ¿ ﬂ˘¿ ‡A¿ ‡G¿ ‡ñ¿ ‡ø¿ ‡›¿ ‡ﬁ¿ ·¿ ·¿ ·Z¿ ·k¿ ·q¿ ·¿¿ ·È¿ ‚¿ ‚¿ ‚6¿ ‚<¿ ‚É¿ ‚â¿ ‚ÿ¿ „¿ „ ¿ „!¿ „g¿ „m¿ „∑¿ „‚¿ „Ë¿ ‰6¿ ‰\¿ ‰ó¿ ‰ò¿ ‰ﬂ¿ ‰Â¿ Â/¿ Â[¿ Âa¿ Â±¿ Â◊¿ Ê¿ Ê¿ ÊU¿ Ê[¿ Ê•¿ ÊÃ¿ Ê“¿ Á"¿ ÁH¿ Á~¿ Á¿ Á¡¿ Á«¿ Ë¿ Ë8¿ Ë>¿ Ëé¿ Ë¥¿ ËÎ¿ ËÏ¿ È"¿ È(¿ Èy¿ È√¿ È…¿ Í¿ ÍV¿ ÍÉ¿ ÍÑ¿ Íµ¿ Íª¿ Î¿ Î2¿ Î8¿ Îá¿ Î§¿ Î«¿ Î»¿ Ï¿ Ï¿ Ï_¿ Ïù¿ ÏÂ¿ Ì/¿ ÌY¿ Ì_¿ Ì∞¿ Ó¿ ÓO¿ ÓU¿ Óe¿ Ók¿ Óª¿ Ó‰¿ Ô6¿ Ôi¿ Ôj¿ Ô≠¿ Ô≥¿ Ô˚¿ ;¿ á¿ —¿ ˚¿ Ò¿ ÒR¿ Ò£¿ ÒÒ¿ Ò˜¿ Ú¿ Ú¿ ÚZ¿ Úx¿ Ú ¿ Ú˝¿ Ú˛¿ Û/¿ Û5¿ Ût¿ Ûz¿ Û«¿ Ù¿ Ù4¿ ÙU¿ ÙV¿ Ù•¿ Ù´¿ Ùı¿ ıD¿ ıí¿ ı„¿ ıÈ¿ ı˘¿ ıˇ¿ ˆG¿ ˆë¿ ˆí¿ ˆû¿ ˆ„¿ ˜¿ ˜e¿ ˜∏¿ ¯¿ ¯Y¿ ¯ø¿ ˘¿ ˘m¿ ˘æ¿ ˙6¿ ˙á¿ ˙ˇ¿ ˚E¿ ˚©¿ ˚·¿ ¸F¿ ¸©¿ ˝¿ ˝"¿ ˝#¿ ˝/¿ ˝±¿ ˝≥¿ ˝¥¿ ˝˘¿ ˛¿ ˛7¿ ˛\¿ ˛^¿ ˛_¿ ˛é¿ ˛í¿ ˛‚¿ ˇ)¿ ˇv¿ ˇì¿ ˇ∆¿ ˇÂ¿ ˇÎ¿ ;¿ M¿ _¿ m¿ ç¿ ¨¿ —¿ “¿¿#¿Z¿q¿¿ü¿¬¿“¿¯¿¿¿¿¿W¿\¿ø¿!¿R¿ô¿ö¿º¿‹¿0¿L¿P¿Q¿ì¿ô¿È¿
¿¿¿H¿N¿ó¿Á¿¿¿c¿Ø¿È¿˛¿	¿
¿/¿0¿>¿?¿ô¿ü¿Ê¿7¿F¿n¿Ö¿ß¿ﬂ¿	1¿	E¿	K¿	O¿	P¿	è¿	©¿	√¿	‹¿
/¿
I¿
^¿
r¿
x¿
|¿
}¿
≈¿
À¿¿0¿6¿Ü¿÷¿&¿t¿£¿©¿¿,¿2¿n¿Ω¿Œ¿Ô¿¿5¿;¿å¿†¿¶¿ˆ¿E¿î¿‘¿⁄¿¿%¿o¿å¿ç¿“¿ÿ¿"¿l¿¥¿˛¿N¿[¿a¿Æ¿ˆ¿¸¿¿¿V¿u¿v¿¬¿»¿¿_¿Ø¿·¿˜¿¯¿¿#¿r¿¿¿¿"¿(¿u¿ƒ¿Â¿$¿%¿2¿3¿Ç¿∏¿‹¿¿+¿9¿?¿`¿r¿v¿w¿≈¿À¿¿d¿ü¿¬¿˛¿%¿O¿z¿à¿é¿≤¿ƒ¿»¿…¿¿¿k¿õ¿°¿±¿∑¿’¿ ¿Y¿Z¿∂¿¿_¿`¿a¿o¿p¿∫¿‹¿›¿,¿{¿é¿¡¿¬¿˝¿C¿S¿Ç¿Ã¿ ¿ >¿ ë¿ ∫¿ »¿ Ÿ¿!¿![¿!ä¿!Ω¿!Õ¿",¿"∞¿#:¿#H¿#T¿#^¿#á¿#¡¿$8¿$¥¿$‰¿%¿%¿%¿%#¿%ã¿%å¿%–¿%—¿%ˆ¿&'¿&L¿&T¿&†¿&≥¿&Ω¿&Õ¿'¿'E¿'n¿'í¿'•¿'Ø¿'∞¿'Ë¿(¿(;¿(W¿(_¿(e¿(ö¿)¿)!¿)'¿)C¿)`¿)ñ¿)±¿)◊¿*¿*T¿*s¿*¿*õ¿*•¿*≠¿*≥¿*Ë¿+
¿+.¿+z¿+√¿,	¿,Q¿,â¿,¥¿,æ¿,ﬂ¿,˚¿-¿-¿-#¿-N¿-Ö¿-§¿-ÿ¿.¿.)¿.:¿.D¿.L¿.R¿.o¿.Ñ¿.ò¿.û¿.¢¿.£¿.ﬁ¿/¿/.¿//¿/[¿/õ¿/ú¿/Œ¿/‘¿0%¿0q¿0Ü¿0ª¿0ÿ¿1¿1-¿1?¿1I¿1Q¿1W¿1[¿1\¿1ä¿1ê¿1ﬂ¿2(¿2V¿2è¿2¨¿2‚¿3&¿3>¿3H¿3P¿3V¿3g¿3k¿3l¿3†¿3¶¿3Û¿4¿44¿45¿4¿4Ö¿4∫¿4¿¿4ˆ¿5¿5¿5I¿5q¿5ã¿5å¿5∂¿5º¿6¿6¿67¿6I¿6J¿6v¿6ò¿6∫¿6€¿6˚¿7¿7¿7¿7"¿7I¿7M¿7N¿7x¿7õ¿7´¿7Ã¿7¿8¿8¿8^¿8q¿8{¿8ï¿8©¿8∆¿8Ã¿8Ê¿8Í¿8Î¿9¿97¿9_¿9y¿9ç¿9£¿9©¿9≠¿9Æ¿9„¿9¯¿:¿::¿:N¿:y¿: ¿;¿;,¿;2¿;O¿;v¿;à¿;û¿;≤¿;∏¿;’¿<¿<(¿<0¿<6¿<:¿<;¿<]¿<r¿<Ñ¿<†¿<À¿<˛¿=¿=A¿=T¿=ê¿=≠¿=„¿>0¿>`¿>Ñ¿>û¿>®¿>∞¿>∂¿>˙¿?;¿?]¿?o¿?s¿?t¿?ä¿?ã¿?¢¿?∏¿? ¿?ÿ¿?ﬁ¿?Ò¿@¿@:¿@^¿@d¿@h¿@i¿@ª¿@Ò¿A%¿AO¿Ay¿AØ¿A˜¿B?¿Be¿Bà¿B∫¿B·¿C¿CI¿CÄ¿C∑¿CÍ¿D¿DN¿DÉ¿D¿¿E¿EY¿E]¿E^¿Ey¿Ez¿EÃ¿F8¿F9¿F±¿FÊ¿FÁ¿G¿G!¿Gq¿Gí¿G≠¿GÆ¿G‹¿H&¿H'¿HL¿HM¿Hå¿HÃ¿HÕ¿H˜¿H˝¿I6¿I<¿Iv¿I•¿I¶¿IÌ¿IÛ¿J,¿J2¿Jk¿Jß¿JÏ¿JÌ¿K,¿K2¿Kk¿Kq¿K´¿K⁄¿K€¿L¿L=¿LC¿L|¿LÇ¿Lª¿L˜¿M<¿M=¿Mé¿M®¿MÆ¿M¸¿N¿N ¿NY¿N_¿N¢¿N„¿N‰¿O3¿OÅ¿Oá¿O’¿OÛ¿O˘¿P2¿P8¿Pz¿P»¿Q¿Q ¿Qq¿Qã¿Që¿Qﬂ¿Q˝¿R¿R<¿RB¿RÖ¿R∆¿R«¿S¿Sd¿Sj¿S∏¿S÷¿S‹¿T¿T¿T]¿T´¿U¿U¿UQ¿UW¿Uê¿Uñ¿Uœ¿U¸¿U˝¿VJ¿Vn¿Vt¿V≠¿V≥¿VÎ¿W%¿Wh¿Wi¿Wû¿W§¿W›¿Wˇ¿X*¿X+¿X|¿Xü¿X•¿XÌ¿Y=¿Yf¿Yl¿Y|¿YÇ¿YÀ¿Z¿ZX¿Z~¿Z≠¿ZÆ¿Z¸¿[¿[L¿[ô¿[Ë¿\1¿\Å¿\ ¿\–¿\Ê¿]2¿]Z¿]`¿]∞¿]ı¿^¿^!¿^q¿^Ú¿^¯¿_H¿_ï¿_‚¿`¿`¿`.¿`K¿`e¿`â¿`¥¿`’¿`Ò¿a¿a:¿aY¿a}¿aå¿aô¿a§¿a¨¿a∂¿a»¿aŒ¿aﬁ¿a‰¿b.¿b~¿b§¿b”¿b‘¿c¿c.¿cm¿có¿cò¿cË¿d ¿d6¿du¿dv¿d≈¿d◊¿d›¿e+¿ey¿e†¿eÕ¿eÎ¿eÏ¿f=¿fi¿fü¿f¿¿f¡¿g¿g.¿gW¿gm¿gn¿g∫¿g¿¿h¿h¿hK¿he¿hf¿h¨¿h‘¿hÈ¿hÍ¿i:¿iL¿iR¿i¢¿iÓ¿j4¿j:¿jJ¿jP¿jö¿jÀ¿jÊ¿jÁ¿k6¿kH¿kN¿kâ¿kè¿kü¿k•¿k¯¿l+¿lG¿lH¿ló¿l©¿lØ¿lÍ¿l¿m ¿m¿mX¿mã¿mß¿m®¿mÚ¿n¿n¿nc¿n≠¿n¬¿n»¿nÿ¿nﬁ¿o¿oX¿oÜ¿oû¿oü¿oÎ¿o˝¿p¿pP¿pd¿pj¿p∫¿p¸¿q*¿qB¿qC¿qí¿q§¿q™¿q˜¿r¿r¿r`¿rà¿ræ¿r⁄¿r€¿s-¿s.¿s~¿s¿sŒ¿t¿tC¿tI¿tñ¿tƒ¿t ¿u¿ui¿u}¿u™¿u‡¿uÁ¿v¿vB¿vV¿v\¿v]¿vi¿v‹¿w%¿w,¿w-¿w\¿wã¿wÃ¿x¿x:¿xY¿xÑ¿xß¿x ¿xÊ¿y¿y0¿yÅ¿yÏ¿z¿zD¿zk¿zô¿z…¿z˘¿{H¿{y¿{†¿{ ¿{¯¿|&¿|\¿|ó¿|Â¿|Ê¿|Ú¿}Q¿}–¿}◊¿}„¿~B¿~¡¿~»¿~Ã¿~Õ¿~Œ¿¿¿]¿©¿‹¿Ä¿Ä¿Äe¿Ä†¿Ä¬¿Ä˚¿Å4¿Å¿Å ¿Ç¿Ç ¿ÇS¿Ç™¿Ç›¿É¿É1¿É_¿Éè¿Éø¿ÉÍ¿Ñ¿ÑH¿Ñq¿Ñî¿ÑÀ¿Ö¿Ök¿Öq¿Öí¿Ö¿¿Ü¿Ü@¿Üg¿Ür¿Ü≈¿ÜÕ¿á¿áV¿áá¿á¥¿áø¿à¿à¿à ¿à!¿àL¿à{¿à§¿à¬¿àÛ¿àÙ¿â#¿âR¿âá¿â≤¿â„¿ä¿äI¿äz¿ä´¿ä‰¿ã¿ãC¿ãM¿ãÇ¿ã«¿ã—¿å¿åK¿åU¿år¿åï¿åü¿å¿¿åÎ¿ç¿ç¿çr¿ç«¿ç—¿ç˚¿é2¿éã¿éø¿éÍ¿é˘¿èP¿è\¿èô¿èÚ¿ê,¿ê]¿êl¿ê√¿êœ¿êŸ¿ë¿ë=¿ëi¿ë°¿ë‘¿ëﬂ¿í¿íA¿ím¿í§¿í◊¿í‚¿í„¿ì/¿ì0¿ìE¿ìO¿ìU¿ìV¿ìp¿ìÑ¿ìÿ¿î ¿î(¿îb¿îú¿î¬¿î⁄¿î˛¿ï¿ï,¿ïH¿ïd¿ï|¿ï†¿ï ¿ïÍ¿ñ¿ñ8¿ñ`¿ñÜ¿ñ¨¿ñ⁄¿ó%¿ó,¿ó0¿ó1¿óa¿óà¿óå¿óç¿ó«¿ò¿ò]¿ò^¿ò¿¿ò‘¿ô¿ô5¿ôa¿ôú¿ôœ¿ö ¿ö¿ö=¿öã¿ö√¿öÛ¿õ/¿õ7¿õà¿õò¿õŒ¿ú¿úJ¿úR¿úX¿úÅ¿úø¿ù¿ùZ¿ù£¿ùÚ¿ù˙¿û ¿û¿û&¿û?¿û\¿ûs¿ûù¿û’¿ûˇ¿ü7¿üs¿üΩ¿ü˘¿†C¿†k¿†°¿†æ¿†Á¿°B¿°°¿°“¿¢¿¢<¿¢n¿¢ô¿¢“¿£¿£H¿£â¿£™¿£À¿§¿§;¿§ì¿§ö¿§Æ¿§≤¿§≥¿•¿•7¿•r¿•ò¿•Ÿ¿¶¿¶2¿¶8¿¶9¿¶j¿¶î¿¶¿¶˝¿ß?¿ßi¿ßo¿ßp¿ßø¿®¿®[¿®¢¿®¿©7¿©Z¿©±¿©ı¿™,¿™M¿™Ü¿™ò¿™‹¿´¿´Z¿´†¿´¿¨¿¨3¿¨O¿¨Y¿¨Ö¿¨†¿¨®¿¨©¿¨—¿¨Ê¿≠ ¿≠¿≠&¿≠,¿≠-¿≠y¿≠ï¿≠¥¿≠Ã¿≠“¿≠˙¿≠˚¿Æ¿Æa¿Ær¿Æv¿Æw¿Æº¿Æ¬¿Ø¿Ø\¿ØÖ¿Øö¿Ø®¿ØÆ¿ØÓ¿ØÚ¿ØÛ¿∞*¿∞C¿∞R¿∞ê¿∞£¿∞≠¿∞¿¿∞ƒ¿∞≈¿∞—¿± ¿±!¿±-¿±r¿±ù¿±∏¿± ¿≤¿≤ä¿≤™¿≤∞¿≥;¿≥¶¿¥0¿¥ê¿¥™¿µ¿µ¿µp¿µã¿µ¶¿µÏ¿∂9¿∂º¿∂Ù¿∂¸¿∑f¿∑l¿∑·¿∏â¿∏◊¿π¿π,¿π}¿π‰¿∫v¿∫√¿ª¿ªÖ¿ªŒ¿º¿ºr¿ºÕ¿Ω¿Ω_¿Ω≈¿æ(¿æT¿æ√¿æ…¿ø ¿øw¿ø÷¿¿/¿¿Ä¿¿‹¿¡6¿¡í¿¡·¿¬0¿¬4¿¬5¿¬}¿¬É¿¬”¿√¿√¿√'¿√F¿√d¿√ö¿√Î¿√Ú¿ƒã¿ƒè¿ƒê¿ƒú¿ƒ¬¿ƒ‘¿≈¿≈d¿≈k¿≈î¿≈¶¿≈π¿≈Õ¿≈Î¿≈Ú¿≈ˆ¿≈˜¿∆¿∆Ñ¿∆¥¿«¿«)¿«-¿«.¿«}¿«“¿«Ô¿»¿»¿»¿»6¿»i¿»Ñ¿»∑¿»„¿»È¿»Ì¿»Ô¿»¿…:¿…x¿…|¿…Ã¿ ¿ r¿ ¬¿À¿À>¿ÀK¿Àl¿ÀÜ¿Àû¿Àæ¿Àø¿Ã¿Ã.¿Ã4¿ÃT¿ÃZ¿ÃÆ¿Õ ¿ÕP¿Õd¿ÕÄ¿ÕÅ¿ÕÀ¿ÕÌ¿Œ¿Œ¿Œ,¿ŒH¿ŒI¿ŒU¿Œw¿Œ¢¿Œ¶¿Œ®¿Œ©¿Œ¯¿œ.¿œ2¿œ{¿œ¬¿œ⁄¿œ˘¿–¿– ¿–!¿–k¿–ç¿–ì¿–ﬂ¿—¿— ¿—!¿—F¿—G¿—y¿—∞¿—±¿—Ω¿—Í¿“¿“#¿“$¿“t¿“z¿“»¿“¯¿”,¿”[¿”ä¿”ÿ¿‘¿‘(¿‘E¿‘ç¿‘¢¿‘¨¿‘∆¿‘‰¿’0¿’E¿’O¿’U¿’g¿’h¿’≤¿’“¿’Â¿÷¿÷.¿÷B¿÷i¿÷ç¿÷µ¿÷¿¿÷‰¿÷Û¿◊¿◊¿◊'¿◊M¿◊c¿◊k¿◊q¿◊é¿◊è¿◊Ω¿◊˙¿ÿ ¿ÿ¿ÿ¿ÿd¿ÿu¿ÿy¿ÿz¿ÿ∆¿ÿÃ¿Ÿ¿Ÿ<¿ŸB¿Ÿê¿Ÿ›¿⁄-¿⁄T¿⁄Z¿⁄•¿⁄ı¿€C¿€í¿€æ¿€È¿‹¿‹,¿‹@¿‹F¿‹ä¿‹∏¿‹Ê¿›¿›T¿›à¿›“¿ﬁ¿ﬁC¿ﬁW¿ﬁa¿ﬁb¿ﬁø¿ﬁ˜¿ﬂ+¿ﬂc¿ﬂÆ¿ﬂÛ¿‡>¿‡â¿‡ª¿‡„¿‡Ì¿‡ı¿‡˚¿‡¸¿·%¿·N¿·≥¿·ˇ¿‚K¿‚é¿‚≠¿‚À¿‚”¿„¿„¿„¿„(¿„M¿„]¿„e¿„¿„¢¿„æ¿„∆¿„ﬂ¿„Â¿„Ê¿‰0¿‰é¿‰í¿‰î¿‰ï¿‰÷¿Â¿Â;¿ÂM¿ÂQ¿Âå¿Â≤¿Â◊¿ÂŸ¿Â⁄¿Ê*¿Ê8¿Ê<¿Êä¿Ê€¿Á¿Á¿ÁK¿ÁÄ¿ÁÑ¿Á⁄¿ËC¿Ëp¿Ë†¿Ë¡¿È¿ÈA¿ÈY¿Èt¿È∫¿ÈÕ¿È’¿ÈÌ¿Í	¿ÍS¿Íf¿Ín¿Ír¿ÍÇ¿ÍÉ¿Íœ¿ÍÌ¿Í˛¿Î%¿ÎC¿ÎU¿Îz¿Îú¿Î¬¿ÎÀ¿ÎÌ¿Î˙¿Ï¿Ï¿Ï(¿ÏJ¿Ï^¿Ïd¿Ïh¿ÏÅ¿ÏÇ¿Ïö¿ÏË¿Ï˜¿Ï˘¿Ï˙¿ÌA¿Ìv¿Ìz¿Ìƒ¿Ì»¿Ó¿Ó_¿Ó§¿Óª¿Ó”¿ÓÂ¿Ô¿Ô¿Ô¿ÔA¿Ô]¿Ô^¿Ôù¿Ô£¿Ô‚¿ÔÙ¿¿¿e¿r¿à¿â¿ï¿¡¿ı¿Ò¿Ò#¿ÒR¿ÒV¿ÒX¿ÒY¿Ò£¿Òæ¿Ò¬¿Ú¿Ú^¿Úä¿Ú∏¿Û¿Û¿ÛD¿ÛJ¿ÛK¿Ûù¿ÛÏ¿Ù¿Ù
¿ÙZ¿ÙÆ¿Ù“¿ı¿ıA¿ıÇ¿ı¡¿ı¬¿ıı¿ı˚¿ˆ/¿ˆd¿ˆe¿ˆq¿ˆÑ¿ˆù¿ˆ±¿ˆÕ¿ˆ‚¿ˆÊ¿ˆÁ¿˜¿˜<¿˜[¿˜i¿˜o¿˜¶¿˜Ê¿¯¿¯ë¿¯¨¿¯ ¿˘¿˘K¿˘Ö¿˘¢¿˙¿˙/¿˙~¿˙‹¿˚%¿˚w¿˚«¿˚”¿˚›¿˚Â¿˚Î¿¸;¿¸£¿¸ÿ¿˝5¿˝w¿˝º¿˛¿˛C¿˛g¿˛®¿˛Î¿ˇ1¿ˇu¿ˇä¿ˇ¥¿ˇÚ¿ˇ˙¿  ¿ ¿ T¿ ´¿+¿1¿Y¿p¿t¿u¿—¿˘¿V¿å¿∫¿”¿¿¿5¿?¿E¿Ö¿ò¿û¿√¿«¿»¿¿¿k¿ç¿ì¿‡¿¸¿E¿û¿π¿Œ¿‹¿‚¿„¿¿o¿ì¿ô¿ù¿û¿¿?¿q¿™¿ø¿«¿¿¿6¿I¿O¿¿ú¿—¿	 ¿	¿	2¿	<¿	Q¿	[¿	Ç¿	à¿	§¿	Ë¿
X¿
w¿
ë¿
õ¿
£¿
©¿
À¿
œ¿
–¿"¿(¿w¿ô¿ü¿Ï¿¿\¿è¿ß¿µ¿ª¿&¿A¿V¿\¿`¿a¿m¿ú¿û¿ü¿·¿ı¿˘¿C¿W¿v¿w¿ó¿ò¿Ê¿¿¿V¿•¿Ò¿
¿¿^¿®¿’¿€¿(¿^¿Ç¿©¿‡¿¿¿¿U¿[¿£¿¿<¿B¿è¿œ¿¿*¿0¿~¿Õ¿˜¿¿¿o¿æ¿Ò¿˜¿D¿í¿∆¿¿b¿ì¿ô¿Ê¿5¿X¿Y¿®¿ˆ¿¿¿[¿ß¿ˆ¿!¿'¿w¿≈¿¿¿b¿ù¿Ÿ¿⁄¿Ù¿.¿N¿O¿z¿Ä¿Œ¿ˇ¿1¿S¿T¿†¿÷¿‹¿Ï¿Ú¿¿Ü¿á¿˛¿¿¿G¿M¿ï¿•¿Ò¿ ¿ 5¿ S¿ W¿ X¿ ¶¿ ª¿ ¡¿!	¿!¿!g¿!è¿!´¿!º¿!ƒ¿!»¿!…¿!ˆ¿!¸¿"L¿"ú¿"™¿"∞¿"¸¿#C¿#I¿#î¿#‚¿$3¿$Å¿$—¿%"¿%m¿%ª¿&¿&T¿&î¿&π¿&—¿&Ù¿'-¿'A¿'E¿'F¿'y¿'¿'œ¿(
¿(¿(\¿(´¿(Ω¿(Ó¿)¿)5¿)t¿)é¿)í¿)ì¿)«¿)Õ¿*¿*j¿*â¿*è¿*ﬂ¿++¿+v¿+≈¿+ÿ¿,¿,*¿,T¿,î¿,Ø¿,≥¿,¥¿,Â¿,Î¿-*¿-0¿-}¿-Ã¿-Í¿.¿.3¿.Z¿.ó¿.Ø¿.≥¿.¥¿.È¿.Ô¿/>¿/å¿/´¿/±¿0¿0N¿0õ¿0Î¿0˛¿13¿1S¿1~¿1ø¿1€¿1ﬂ¿1‡¿2¿2¿2g¿2µ¿2“¿2ÿ¿3&¿3r¿3Ω¿4¿4¿4N¿4k¿4ì¿4—¿4Í¿4Ó¿4Ô¿5#¿5)¿5x¿5∆¿5„¿5È¿69¿6Ö¿6“¿7"¿75¿7h¿7á¿7±¿7Ò¿8¿8¿8¿8C¿8I¿8ñ¿8⁄¿8‡¿9)¿9i¿9Å¿9á¿9”¿:#¿:;¿:j¿:á¿:Ø¿:Ì¿;¿;
¿;¿;=¿;C¿;ê¿;‘¿;⁄¿<#¿<c¿<{¿<Å¿<œ¿=¿=9¿=h¿=Ö¿=≠¿=Î¿>¿>¿>	¿>7¿>=¿>Ö¿>ã¿>⁄¿?¿?*¿?C¿?g¿?°¿?∂¿?∫¿?ª¿?Ë¿?Ó¿@7¿@H¿@N¿@ù¿@∆¿@Î¿A¿A&¿A_¿As¿Aw¿Ax¿Aß¿A≠¿AÙ¿A˙¿BI¿Br¿Bõ¿Bµ¿B⁄¿C¿C+¿C/¿C0¿Cf¿Cl¿C∫¿D
¿D.¿D4¿D}¿D≈¿DÁ¿E¿E?¿Ek¿E≠¿E ¿EŒ¿Eœ¿F¿F¿Fe¿Fê¿Fñ¿F‰¿G
¿Gf¿Gú¿G›¿G¯¿HF¿Hx¿Hó¿Hü¿HÃ¿H–¿H—¿I¿I¿Ih¿Iî¿Iö¿IÍ¿J¿Jn¿J•¿JÁ¿K¿KQ¿KÉ¿K¢¿K™¿Kÿ¿K‹¿K›¿L¿L$¿Ln¿Lï¿Lõ¿LÎ¿M¿Mc¿Mî¿M–¿MÎ¿N4¿Nf¿NÖ¿Nç¿N∫¿Næ¿Nø¿O¿O¿OQ¿Ox¿O~¿OŒ¿OÙ¿PH¿Pz¿P∑¿P“¿Q¿QN¿Qm¿Qu¿Q£¿Qß¿Q®¿Qﬁ¿Q‰¿R5¿R¿RÖ¿R–¿S¿SP¿Sx¿S´¿S∆¿T¿T/¿Té¿T÷¿TÚ¿U¿UF¿UP¿UX¿Uu¿Uy¿Uz¿U´¿U±¿V¿V(¿V.¿V}¿Vö¿V…¿VÁ¿W¿W+¿Wd¿Wí¿WΩ¿W—¿WŸ¿WÒ¿Wı¿Wˆ¿X9¿X?¿Xç¿XÀ¿Y¿Y]¿Yá¿Yç¿Yﬁ¿Z/¿Z}¿ZÉ¿Zì¿Zô¿ZÈ¿[¿[d¿[µ¿[„¿\¿\k¿\ï¿\ô¿\ö¿\›¿\„¿]+¿]k¿]∑¿^¿^+¿^1¿^Ç¿^”¿_!¿_'¿_7¿_=¿_ä¿_®¿_˙¿`K¿`y¿`≤¿a¿a+¿a/¿a0¿a¿aú¿a¢¿aÔ¿b<¿bé¿b⁄¿b‡¿c0¿c¿c±¿d¿d`¿d±¿dÃ¿dˆ¿e?¿ek¿eo¿ep¿eΩ¿eœ¿f'¿f(¿fw¿fâ¿fè¿f›¿g+¿gR¿gX¿gß¿gÚ¿h8¿h`¿hç¿h´¿h‘¿hÔ¿i¿i#¿i'¿i(¿it¿iz¿i¬¿j¿ja¿jì¿jø¿j÷¿j¯¿k¿k2¿k6¿k7¿kÉ¿kâ¿k÷¿k‚¿l¿l.¿lS¿lx¿lÜ¿lå¿l´¿l…¿lÕ¿lŒ¿m¿m)¿mQ¿mf¿mÜ¿m¶¿m¥¿m∫¿m‘¿mÚ¿mˆ¿m˜¿nA¿n^¿nå¿n§¿n«¿nÍ¿n¯¿n˛¿o¿o9¿o=¿o>¿oä¿oú¿o¢¿oÔ¿p¿p	¿pU¿pé¿pº¿p‘¿p˜¿q¿q(¿q.¿qK¿qi¿qm¿qn¿qΩ¿qœ¿q’¿r"¿r6¿r<¿rá¿r¶¿r‹¿r¯¿s¿sF¿sT¿sZ¿s{¿sô¿sù¿sû¿sÔ¿t5¿t;¿tÄ¿t≈¿u¿u	¿uU¿u•¿u÷¿v
¿v*¿vX¿vv¿vz¿v{¿v∫¿v¿¿w¿wV¿wü¿w÷¿x8¿x¶¿xı¿y¿yM¿yr¿yπ¿yΩ¿yæ¿yÓ¿zG¿za¿zo¿zu¿zπ¿z’¿zÁ¿zÌ¿zÒ¿zÚ¿{,¿{2¿{t¿{z¿{≥¿{π¿{…¿{œ¿|¿|L¿|h¿|ò¿|∂¿|∫¿|ª¿}
¿}¿}¿}h¿}∑¿~¿~L¿~ç¿~ì¿~Ã¿~“¿~‚¿~Ë¿"¿^¿ö¿‘¿¸¿Ä¿Ä¿Ä¿Äo¿Äu¿Ä∑¿ÄΩ¿Äˆ¿Ä¸¿Å¿Å¿Å`¿ÅÆ¿ÅÙ¿ÇB¿Çà¿Ç∑¿Ç”¿É¿É!¿É%¿É&¿Éu¿Éô¿Éü¿ÉÈ¿Ñ8¿ÑÑ¿ÑÕ¿Ö¿Ö¿ÖM¿ÖS¿Öc¿Öi¿Ö£¿ÖÛ¿Ü#¿Üs¿Ü£¿Üﬂ¿á¿áU¿á}¿áõ¿áü¿á†¿á⁄¿à¿à	¿àT¿àZ¿à©¿àÛ¿â¿â$¿â]¿âc¿âs¿ây¿â–¿ä¿ä?¿äÅ¿äü¿ä£¿ä§¿äﬁ¿ã$¿ã*¿ãy¿ã√¿ãÓ¿ãÙ¿å-¿å3¿åC¿åI¿åå¿å⁄¿ç¿çk¿ç•¿ç√¿ç«¿ç»¿é¿é+¿é1¿é|¿éÇ¿é—¿è¿èF¿èL¿èÖ¿èã¿è‚¿ê#¿êQ¿êì¿ê±¿êµ¿ê∂¿ê¿ë6¿ë<¿ëã¿ë’¿í ¿í¿í?¿íE¿íU¿í[¿íû¿íÏ¿ì1¿ì}¿ì∑¿ì’¿ìŸ¿ì⁄¿î(¿î.¿îo¿îu¿îÆ¿î¥¿îƒ¿î ¿ï¿ïD¿ï^¿ïå¿ï™¿ïÆ¿ïØ¿ïˇ¿ñ ¿ñ&¿ño¿ñæ¿ó¿óT¿óï¿óõ¿ó‘¿ó⁄¿óÍ¿ó¿ò)¿òc¿òû¿ò÷¿ò¸¿ô¿ô¿ô¿ôT¿ôZ¿ôì¿ôµ¿ôÕ¿ôÌ¿ö¿ö#¿ö'¿ö(¿öq¿öÇ¿ö¡¿öÎ¿õ ¿õ9¿õG¿õM¿õi¿õá¿õã¿õå¿õ’¿õ˚¿ú!¿ú<¿ú\¿úv¿úï¿ú£¿ú©¿ú¡¿úﬂ¿ú„¿ú‰¿ù5¿ùK¿ùQ¿ù°¿ù¿û¿û*¿ûE¿ûe¿û¿ûû¿û¨¿û≤¿û ¿ûË¿ûÏ¿ûÌ¿ü8¿üS¿üY¿üi¿üo¿üæ¿ü˝¿†¿†M¿†Q¿†R¿†í¿†ò¿†®¿†Æ¿†˚¿°8¿°W¿°Ü¿°ä¿°ã¿°¡¿°¯¿¢¿¢@¿¢D¿¢E¿¢x¿¢~¿¢ ¿£¿£J¿£P¿£û¿£Ï¿§:¿§¿§Œ¿§¯¿§˛¿•¿•¿•j¿•©¿•»¿•˘¿•˝¿•˛¿¶D¿¶r¿¶®¿¶…¿¶˝¿ß!¿ß?¿ßC¿ßD¿ßè¿ßï¿ß‚¿®5¿®á¿®ø¿®¸¿©¿©J¿©N¿©O¿©ç¿©ì¿©‰¿™3¿™h¿™n¿™æ¿™‚¿™Ë¿´7¿´d¿´j¿´Ω¿¨¿¨!¿¨é¿¨≠¿¨‡¿≠¿≠¿≠¿≠e¿≠∞¿≠ƒ¿≠ ¿Æ¿Æb¿Æh¿Æ±¿Æ–¿Ø=¿Ø\¿Øî¿Ø«¿Øˆ¿Ø˙¿Ø˚¿∞G¿∞o¿∞u¿∞∆¿±¿±¿±\¿±w¿±Ù¿≤¿≤K¿≤~¿≤µ¿≤π¿≤∫¿≥¿≥Y¿≥_¿≥∞¿≥Ï¿≥Ú¿¥;¿¥O¿¥º¿¥€¿µ¿µ=¿µA¿µB¿µí¿µ»¿µŒ¿∂¿∂c¿∂¿¿∂Ô¿∑.¿∑2¿∑3¿∑u¿∑¥¿∑‘¿∏¿∏¿∏	¿∏R¿∏ç¿∏´¿∏Ÿ¿∏›¿∏ﬁ¿π)¿πb¿π¿π¨¿π∞¿π±¿π˙¿∫/¿∫J¿∫u¿∫y¿∫z¿∫≈¿∫˛¿ª¿ªH¿ªL¿ªM¿ªò¿ª—¿ªÓ¿º¿º¿º ¿ºh¿ºu¿º∏¿º⁄¿Ω¿Ω¿Ω¿ΩO¿ΩU¿Ω§¿Ωı¿Ω˚¿æK¿æò¿æ™¿æ∞¿ø ¿ø¿ø%¿øv¿øƒ¿¿¿¿I¿¿Ç¿¿ü¿¿Ã¿¿–¿¿—¿¡
¿¡I¿¡i¿¡ô¿¡ù¿¡û¿¡‘¿¡⁄¿¬¿¬I¿¬h¿¬ó¿¬õ¿¬ú¿¬À¿¬—¿√ ¿√p¿√∂¿√Û¿ƒ¿ƒA¿ƒE¿ƒF¿ƒq¿ƒw¿ƒ∆¿ƒˇ¿≈>¿≈^¿≈é¿≈í¿≈ì¿≈„¿∆¿∆¿∆d¿∆≤¿∆˝¿«.¿«¿«®¿«·¿«Â¿«Ê¿»/¿»h¿»û¿»ø¿»Î¿…¿…"¿…@¿…D¿…E¿…ï¿…ß¿…≠¿…˝¿ I¿ è¿ ï¿ •¿ ´¿ ı¿À&¿ÀA¿Àg¿ÀÇ¿Àü¿ÀΩ¿À¡¿À¬¿Ã¿Ã#¿Ã)¿Ãd¿Ãj¿Ãz¿ÃÄ¿Ã”¿Õ¿Õ"¿ÕI¿Õd¿ÕÇ¿Õ†¿Õ§¿Õ•¿ÕÙ¿Œ¿Œ¿ŒG¿ŒM¿Œ]¿Œc¿Œ∂¿ŒÈ¿œ¿œ,¿œG¿œe¿œÉ¿œá¿œà¿œí¿œì¿œ€¿œÛ¿œ˘¿–	¿–¿–^¿–n¿–±¿–≤¿–˝¿—¿—p¿—q¿—ò¿—ô¿—Ë¿“¿“¿“P¿“°¿“ø¿“≈¿”¿”b¿”Ø¿”µ¿”≈¿”À¿‘¿‘(¿‘U¿‘Ä¿‘†¿‘§¿‘•¿‘√¿‘ƒ¿‘÷¿’¿’¿’5¿’B¿’_¿’e¿’É¿’á¿’à¿’À¿’Ã¿’Ò¿’Ú¿÷;¿÷P¿÷V¿÷•¿÷Í¿◊#¿◊l¿◊¿◊Ö¿◊ª¿◊œ¿◊’¿◊˝¿ÿ¿ÿ¿ÿ[¿ÿo¿ÿu¿ÿπ¿ÿÕ¿ÿ”¿Ÿ¿Ÿ3¿Ÿ9¿Ÿì¿Ÿß¿Ÿ≠¿Ÿæ¿Ÿ¬¿Ÿ√¿⁄¿⁄¿⁄c¿⁄á¿⁄ç¿⁄‹¿€¿€¿€f¿€∏¿€Ú¿‹ ¿‹A¿‹B¿‹e¿‹s¿‹y¿‹†¿‹Û¿›)¿›J¿›T¿›^¿›k¿›í¿›ò¿›Õ¿ﬁ¿ﬁ,¿ﬁY¿ﬁà¿ﬁπ¿ﬁÍ¿ﬂ¿ﬂC¿ﬂl¿ﬂü¿ﬂŒ¿ﬂ˝¿‡4¿‡5¿‡`¿‡Å¿‡±¿‡ﬂ¿·¿·<¿·k¿·r¿·õ¿·Ã¿·“¿‚¿‚G¿‚M¿‚¿‚¬¿‚»¿‚˜¿„$¿„L¿„Ä¿„Ø¿„∂¿„–¿„Ò¿„˜¿„¯¿‰D¿‰E¿‰ã¿‰è¿‰ê¿‰√¿‰Â¿Â	¿Â;¿Âk¿ÂÕ¿Â˚¿ÊG¿Êo¿Êã¿Ê∑¿Êı¿Á!¿Á_¿Áâ¿Á±¿ÁÕ¿ÁÌ¿Ë¿Ë%¿ËQ¿Ëy¿Ë£¿Ëœ¿Ë˚¿È#¿ÈJ¿Èn¿Èú¿È∆¿È¿Í"¿ÍD¿ÍÑ¿Íª¿Íø¿Í¡¿Í¬¿Î¿Î"¿ÎA¿În¿Ît¿Î¡¿Ï¿ÏC¿ÏU¿ÏV¿ÏÖ¿Ïã¿Ï⁄¿Ï˘¿Ì¿Ì¿Ì¿Ì9¿Ìk¿Ìû¿ÌÀ¿Ì˘¿Ì˛¿Ó,¿ÓM¿ÓQ¿Ó†¿Ó¬¿Ó‡¿ÔW¿Ôu¿ÔÏ¿ÔÚ¿Ôˆ¿#¿E¿I¿J¿ö¿ú¿ù¿Ó¿Ò¿Ò¿Ò\¿Ò¨¿ÒÊ¿ÒÍ¿Ú6¿Úc¿Úg¿Ú∏¿Ú‰¿ÚË¿Úˆ¿Ú˙¿Û>¿Ûú¿ÛÌ¿Ù5¿Ù\¿Ù]¿ÙÆ¿Ù¡¿Ù«¿ı¿ı¿ı[¿ıä¿ı†¿ı°¿ı≠¿ı◊¿ˆ¿ˆå¿ˆç¿ˆ‹¿ˆ˝¿˜¿˜:¿˜@¿˜A¿˜ì¿˜¢¿˜–¿˜·¿¯¿¯&¿¯,¿¯-¿¯V¿¯Z¿¯[¿¯Ñ¿¯ä¿¯⁄¿¯Ò¿¯˜¿˘H¿˘ò¿˘Ê¿˘Û¿˙ ¿˙3¿˙4¿˙@¿˙Ö¿˙∞¿˙ˆ¿˙˙¿˙¸¿˙˝¿˚C¿˚N¿˚R¿˚ò¿˚ƒ¿˚»¿¸¿¸g¿¸®¿¸ø¿¸√¿˝¿˝<¿˝@¿˝å¿˝’¿˛¿˛M¿˛}¿˛Õ¿˛”¿ˇ¿ˇ,¿ˇ>¿ˇN¿ˇ~¿ˇ¶¿ˇß¿ˇı¿ E¿ U¿ [¿ ©¿ ˆ¿¿¿¿A¿a¿q¿w¿†¿§¿•¿±¿ˆ¿!¿i¿m¿o    
Ä•Äº Ä¡Ä÷ ÄŸ ÄÍÅ;Å>  Åk  Åï ÅºÅﬂÅ·  Ç	  Ç< ÇRÇgÇi  ÇâÇöÇ˘Ç¸É%ÉôÉõÉ¬É‘É÷ÑÑÑÑ4ÑG åúÑ˝èIÇ¶/// A tag for a [SemanticsNode].
///
/// Tags can be interpreted by the parent of a [SemanticsNode]
/// and depending on the presence of a tag the parent can for example decide
/// how to add the tagged node as a child. Tags are not sent to the engine.
///
/// As an example, the [RenderSemanticsGestureHandler] uses tags to determine
/// if a child node should be excluded from the scrollable area for semantic
/// purposes.
///
/// The provided [name] is only used for debugging. Two tags created with the
/// same [name] and the `new` operator are not considered identical. However,
/// two tags created with the same [name] and the `const` operator are always
/// identical. èZÅE êáêìÅ/// Creates a [SemanticsTag].
///
/// The provided [name] is only used for debugging. Two tags created with the
/// same [name] and the `new` operator are not considered identical. However,
/// two tags created with the same [name] and the `const` operator are always
/// identical.êî	êö   ê£Äöë9ÄÇ/// A human-readable name for this tag used for debugging.
///
/// This string is not used to determine if two tags are identical.  ëBUëU   ëBëC ëõá(ì/Åç/// The result that contains the arrangement for the child
/// [SemanticsConfiguration]s.
///
/// When the [PipelineOwner] builds the semantics tree, it uses the returned
/// [ChildSemanticsConfigurationsResult] from
/// [SemanticsConfiguration.childConfigurationsDelegate] to decide how semantics nodes
/// should form.
///
/// Use [ChildSemanticsConfigurationsResultBuilder] to build the result. ìVLìxìyìz ì{ìÅ  ìâìè   ì¶ÅyïÅB/// Returns the [SemanticsConfiguration]s that are supposed to be merged into
/// the parent semantics node.
///
/// [SemanticsConfiguration]s that are either semantics boundaries or are
/// conflicting with other [SemanticsConfiguration]s will form explicit
/// semantics nodes. All others will be merged into the parent. ï$ÉúòÆÉD/// The groups of child semantics configurations that want to merge together
/// and form a sibling [SemanticsNode].
///
/// All the [SemanticsConfiguration]s in a given group that are either
/// semantics boundaries or are conflicting with other
/// [SemanticsConfiguration]s of the same group will be excluded from the
/// sibling merge group and form independent semantics nodes as usual.
///
/// The result [SemanticsNode]s from the merges are attached as the sibling
/// nodes of the immediate parent semantics node. For example, a `RenderObjectA`
/// has a rendering child, `RenderObjectB`. If both of them form their own
/// semantics nodes, `SemanticsNodeA` and `SemanticsNodeB`, any semantics node
/// created from sibling merge groups of `RenderObjectB` will be attach to
/// `SemanticsNodeA` as a sibling of `SemanticsNodeB`.    ò≈à.ö,Å`/// The builder to build a [ChildSemanticsConfigurationsResult] based on its
/// annotations.
///
/// To use this builder, one can use [markAsMergeUp] and
/// [markAsSiblingMergeGroup] to annotate the arrangement of
/// [SemanticsConfiguration]s. Once all the configs are annotated, use [build]
/// to generate the [ChildSemanticsConfigurationsResult]. öZi öóö¿:/// Creates a [ChildSemanticsConfigurationsResultBuilder].  ö«HöÍ õõöıõöˆõ_õ< õpõqõRõoõSõWõnõX õwÅ1úcÄ‹/// Marks the [SemanticsConfiguration] to be merged into the parent semantics
/// node.
///
/// The [SemanticsConfiguration] will be added to the
/// [ChildSemanticsConfigurationsResult.mergeUp] that this builder builds. úqúâ   ú¨ÅtùæÅ/// Marks a group of [SemanticsConfiguration]s to merge together
/// and form a sibling [SemanticsNode].
///
/// The group of [SemanticsConfiguration]s will be added to the
/// [ChildSemanticsConfigurationsResult.siblingMergeGroups] that this builder builds. ù÷$ùÙ   û$ÇÕûïK/// Builds a [ChildSemanticsConfigurationsResult] contains the arrangement.    †ıã∞§ÀÉƒ/// An identifier of a custom semantics action.
///
/// Custom semantics actions can be provided to make complex user
/// interactions more accessible. For instance, if an application has a
/// drag-and-drop list that requires the user to press and hold an item
/// to move it, users interacting with the application using a hardware
/// switch may have difficulty. This can be made accessible by creating custom
/// actions and pairing them with handlers that move a list item up or down in
/// the list.
///
/// In Android, these actions are presented in the local context menu. In iOS,
/// these are presented in the radial context menu.
///
/// Localization and text direction do not automatically apply to the provided
/// label or hint.
///
/// Instances of this class should either be instantiated with const or
/// new instances cached in static fields.
///
/// See also:
///
///  * [SemanticsProperties], where the handler for a custom action is provided. §ÂÄÁ •V•kd/// Creates a new [CustomSemanticsAction].
///
/// The [label] must not be null or the empty string.•m•É  •ê•ñ•¢•ù•ó•†•∞•´•≤•≈•æ•«•–Å8¶Ü¶á¶óÄí/// Creates a new [CustomSemanticsAction] that overrides a standard semantics
/// action.
///
/// The [hint] must not be null or the empty string.¶ô¶Ø  ¶¥$¶”  	¶·¶Á¶Ú¶Ì¶Ë¶ß¶˚ßßQßX;/// The user readable name of this custom semantics action. ßbNß¨9/// The hint description of this custom semantics action. ßµW®7/// The standard semantics action this action replaces. ™A™L ™V™[V™à ™Ø™∞™ì™Æ™î™ô™µR™‚ ´´™È´™Í´®A®%   ®®®VÅ®p  ®s®{  ®V®W©[ÄÄ©n   ©[©\´Å´F,/// Get the identifier for a given `action`. ´T´k   ¨&}¨s,/// Get the `action` for a given identifier. ¨}¨Ç   §∫§ª¨ßäD¨7/// A string that carries a list of [StringAttribute]s. ≠Çª ≠Ë≠¯Ä‘/// Creates a attributed string.
///
/// The [TextRange] in the [attributes] must be inside the length of the
/// [string].
///
/// The [attributes] must not be changed after the attributed string is
/// created.≠˛Æ  Æ+Æ  Æ#Æ:Æ;Æ)Æ9Æ*ÆEÆKÆsÆ^ÆLÆRÆSÆaÆkÆlÆ}ÆÉØæÆÑØªØºØΩØƒK∞	5/// The plain string stored in the attributed string. ∞Äò∞¢k/// The attributes this string carries.
///
/// The list must not be modified after this string is created. ∂!@∂5   ∂!∂"∞±Ñ3±ÆÄ⁄/// Returns a new [AttributedString] by concatenate the operands
///
/// The string attribute list of the returned [AttributedString] will contains
/// the string attributes from both operands with updated text ranges. ±∞±¬   ¥ËÅ5µNI/// Two [AttributedString]s are equal if their string and attributes are. µQµY  µ4µ5∂eÄÑ∂x   ∂e∂f¨ﬂ¨‡∂ÌÖï∑{Äá/// A [DiagnosticsProperty] for [AttributedString]s, which shows a string
/// when there are no attributes, and more details otherwise. ∑∆ÅF ∏O∏gÄÇ/// Create a diagnostics property for an [AttributedString] object.
///
/// Such properties are used with [SemanticsData] objects.∏m∏{  ∏Ñ∏ã  ∏ó∏û  ∏´∏±  ∏À∏“  ∏„∏Í  ∏Ù∏˚  ∏¿πÄÀπŒÄ™/// Whether to show the property when the [value] is an [AttributedString]
/// whose [AttributedString.string] is the empty string.
///
/// This overrides [defaultValue]. π‡|πı   π‡π·∫`Ç ∫s  ∫Ç*∫ö  ∫`∫a ºÑ∫tæÅ|/// Summary information about a [SemanticsNode] object.
///
/// A semantics node might [SemanticsNode.mergeAllDescendantsIntoThisNode],
/// which means the individual fields on the semantics node don't fully describe
/// the semantics at that node. This data structure contains the full semantics
/// for the node.
///
/// Typically obtained from [SemanticsNode.getSemanticsData]. æ8á¥ øøÄ¡/// Creates a semantics data object.
///
/// The [flags], [actions], [label], and [Rect] arguments must not be null.
///
/// If [label] is not empty, then [textDirection] must also not be null.øø'  ø1ø@  øLø[  øoø~  øí&ø°  øæ&øÕ  øÍø˘  ¿ @¿ @  ¿ @'¿ @6  ¿ @H¿ @W  ¿ @`¿ @o  ¿ @}¿ @å  ¿ @ö¿ @©  ¿ @ª¿ @   ¿ @⁄¿ @È  ¿ @˛¿ A  ¿ A ¿ A/  ¿ AC¿ AR  ¿ Af¿ Au  ¿ Aà¿ Aó  ¿ A™ ¿ Aπ  ¿ A–	¿ A÷  ¿ Aﬂ¿ AÂ  ¿ AÛ¿ A˘  s¿ B¿ B¿ BF¿ Bí¿ B.¿ B(¿ B ¿ B+¿ B?¿ B1¿ BB¿ BH¿ Bn¿ Bo¿ Bv¿ Bú¿ B¢¿ Bÿ¿ C3¿ B¿¿ B∫¿ B£¿ B≤¿ B≥¿ BΩ¿ B—¿ B√¿ B‘¿ B⁄¿ B˛¿ C¿ C ¿ C¿ C¿ C¿ C=¿ CC¿ Cy¿ C‘¿ Ca¿ C[¿ CD¿ CS¿ CT¿ C^¿ Cr¿ Cd¿ Cu¿ C{¿ Cü¿ C∑¿ C°¿ C∞¿ C±¿ C∏¿ Cﬁ¿ C‰¿ D#¿ Dê¿ D¿ D¿ CÂ¿ C˝¿ C˛¿ D¿ D¿ D¿ D¿ D%¿ DR¿ Ds¿ DT¿ Dl¿ Dm¿ Dt¿ Dö¿ D†¿ Dﬂ¿ EL¿ D«¿ D¡¿ D°¿ Dπ¿ D∫¿ Dƒ¿ Dÿ¿ D ¿ D€¿ D·¿ E¿ E/¿ E¿ E(¿ E)¿ E0¿ EV¿ E\¿ Eë¿ EÍ¿ Ey¿ Es¿ E]¿ Ek¿ El¿ Ev¿ Eä¿ E|¿ Eç¿ Eì¿ E∂¿ EÕ¿ E∏¿ E∆¿ E«¿ EŒ¿ EN¿ F9</// A bit field of [SemanticsFlag]s that apply to this node. ¿ FCR¿ Fé>/// A bit field of [SemanticsAction]s that apply to this node. ¿ GáÅ¿ H~Ä”/// A textual description for the current label of the node in
/// [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [label], which exposes just the raw text. ¿ IÅ¿ JvÄ”/// A textual description for the current value of the node in
/// [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [value], which exposes just the raw text. ¿ K∏Å8¿ LÿÄ¸/// The value that [value] will become after performing a
/// [SemanticsAction.increase] action in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [increasedValue], which exposes just the raw text. ¿ N#Å8¿ OCÄ¸/// The value that [value] will become after performing a
/// [SemanticsAction.decrease] action in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [decreasedValue], which exposes just the raw text. ¿ PYÅ¿ Q^Ä·/// A brief description of the result of performing an action on this node
/// in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [hint], which exposes just the raw text. ¿ QqÄà¿ QÚm/// A textual description of the widget's tooltip.
///
/// The reading direction is given by [textDirection]. ¿ Q˛Äñ¿ Ráo/// The reading direction for the text in [label], [value],
/// [increasedValue], [decreasedValue], and [hint]. ¿ RôÄü¿ S+x/// The currently selected text (or the position of the cursor) within [value]
/// if this node represents a text field. ¿ S=Ä∆¿ SÛÄ¢/// The total number of scrollable children that contribute to semantics.
///
/// If the number of children are unknown or unbounded, this value will be
/// null. ¿ T\¿ TYC/// The index of the first visible semantic child of a scroll node. ¿ TiÅÃ¿ V'Åõ/// Indicates the current scrolling position in logical pixels if the node is
/// scrollable.
///
/// The properties [scrollExtentMin] and [scrollExtentMax] indicate the valid
/// in-range values for this property. The value for [scrollPosition] may
/// (temporarily) be outside that range, e.g. during an overscroll.
///
/// See also:
///
///  * [ScrollPosition.pixels], from where this value is usually taken. ¿ V:Å.¿ WYÅ /// Indicates the maximum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.maxScrollExtent], from where this value is usually taken. ¿ WmÅ.¿ XåÅ /// Indicates the minimum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.minScrollExtent], from where this value is usually taken. ¿ X†Å…¿ Z[Åô/// The id of the platform view, whose semantics nodes will be added as
/// children to this node.
///
/// If this value is non-null, the SemanticsNode must not have any children
/// as those would be replaced by the semantics nodes of the referenced
/// platform view.
///
/// See also:
///
///  * [AndroidView], which is the platform view for Android.
///  * [UiKitView], which is the platform view for iOS. ¿ ZnÅv¿ [÷ÅL/// The maximum number of characters that can be entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [SemanticsFlag.isTextField] is set. Defaults
/// to null, which means no limit is imposed on the text field. ¿ [ÈÅg¿ ]>Å9/// The current number of characters that have been entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [SemanticsFlag.isTextField] is set. This must
/// be set when [maxValueLength] is set. ¿ ]UN¿ ]ü</// The bounding box for this node in its coordinate system. ¿ ]®Y¿ ]˝9/// The set of [SemanticsTag]s associated with this node. ¿ ^Å¿ _Ä¸/// The transform from this node's coordinate system to its parent's coordinate system.
///
/// By default, the transform is null, which represents the identity
/// transformation (i.e., that this node has the same coordinate system as its
/// parent). ¿ _*ÄÏ¿ `Ä…/// The elevation of this node relative to the parent semantics node.
///
/// See also:
///
///  * [SemanticsConfiguration.elevation] for a detailed discussion regarding
///    elevation and semantics. ¿ `Äƒ¿ `÷Ä£/// The extent of this node along the z-axis beyond its [elevation]
///
/// See also:
///
///  * [SemanticsConfiguration.thickness] for a more detailed definition. ¿ `‰Å0¿ a¸Äˆ/// The identifiers for the custom semantics actions and standard action
/// overrides for this node.
///
/// The list must be sorted in increasing order.
///
/// See also:
///
///  * [CustomSemanticsAction], for an explanation of custom actions. ¿ FöÄÈ¿ GcÄ≥/// A textual description for the current label of the node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedLabel].   ¿ HíÄÈ¿ I[Ä≥/// A textual description for the current value of the node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedValue].   ¿ JäÅ*¿ KÇÄ‡/// The value that [value] will become after performing a
/// [SemanticsAction.increase] action.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedIncreasedValue].   ¿ LıÅ*¿ MÌÄ‡/// The value that [value] will become after performing a
/// [SemanticsAction.decrease] action.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedDecreasedValue].   ¿ O`Äı¿ P7Ä¡/// A brief description of the result of performing an action on this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedHint].   ¿ r˝ÇW¿ s   ¿ r˝¿ r˛¿ bm¿ bM,/// Whether [flags] contains the given flag. ¿ bU¿ bd   ¿ bä{¿ b¬0/// Whether [actions] contains the given action. ¿ bÃ¿ b›   ¿ c	O¿ c   ¿ c	¿ c
¿ c\ä™¿ cm  ¿ cÅ&¿ cû  ¿ c\¿ c]¿ n
ÑÔ¿ n$  ¿ n'¿ n/  ¿ n
¿ n¿ uXÅû¿ ud  ¿ uv¿ uÇ  ¿ uá¿ uì   ææ¿ v˙Åq¿ w   ¿ wKÄÜ ¿ wK¿ wg ¿ wn
¿ wu  ¿ w~¿ wé  ¿ wò¿ w®  ¿ w≤¿ w¡   ¿ w’(¿ wÛ   ¿ xg¿ x$   ¿ x¿ x ¿ xmá#¿ yÄÜ/// Provides hint values which override the default hints on supported
/// platforms.
///
/// On iOS, these values are always ignored. ¿ y;Äº ¿ yk¿ yÅ'/// Creates a semantics hint overrides.¿ yà¿ yé  ¿ yú¿ y¢  ¿ yπ¿ yø¿ yœ¿ y ¿ y¿¿ yÕ¿ yŸ¿ yﬂ¿ yı¿ y¿ y‡¿ yÛ¿ y˚Å8¿ {*Å/// The hint text for a tap action.
///
/// If null, the standard hint is used instead.
///
/// The hint should describe what happens when a tap occurs, not the
/// manner in which a tap is accomplished.
///
/// Bad: 'Double tap to show movies'.
/// Good: 'show movies'. ¿ {8Å`¿ |âÅ0/// The hint text for a long press action.
///
/// If null, the standard hint is used instead.
///
/// The hint should describe what happens when a long press occurs, not
/// the manner in which the long press is accomplished.
///
/// Bad: 'Double tap and hold to show tooltip'.
/// Good: 'show tooltip'. ¿ |ùv¿ |ÿ//// Whether there are any non-null hint values.   ¿ }H¿ }+   ¿ }¿ }¿ }cÄ˛¿ }}  ¿ }Ä¿ }à  ¿ }c¿ }d¿ ~eÅ)¿ ~v  ¿ ~ä&¿ ~ß  ¿ ~e¿ ~f¿ xÙ¿ xı¿ í¿ ~ ¿ ÄoÄÀ/// Contains properties used by assistive technologies to make the application
/// more accessible.
///
/// The properties of this class are used to generate a [SemanticsNode]s in the
/// semantics tree. ¿ Ä¢à0 ¿ ÄÕ¿ Ä‡"/// Creates a semantic annotation.<¿ ÄÁ¿ ÄÌ  ¿ Ä˘¿ Äˇ  ¿ Å
¿ Å  ¿ Å¿ Å!  ¿ Å.¿ Å4  ¿ Å@¿ ÅF  ¿ ÅQ	¿ ÅW  ¿ Å`¿ Åf  ¿ Åq¿ Åw  ¿ ÅÖ¿ Åã  ¿ Åñ¿ Åú  ¿ Å¨¿ Å≤  ¿ Åø¿ Å≈  ¿ Å”¿ ÅŸ  ¿ ÅÂ¿ ÅÎ  ¿ Ç¿ Ç  ¿ Ç¿ Ç  ¿ Ç,¿ Ç2  ¿ Ç@¿ ÇF  ¿ ÇV¿ Ç\  ¿ Çk
¿ Çq  ¿ Ç{¿ ÇÅ  ¿ Çê¿ Çñ  ¿ Ç©¿ ÇØ  ¿ Ç∆
¿ ÇÃ  ¿ Ç÷¿ Ç‹  ¿ Ç
¿ Çˆ  ¿ É ¿ É  ¿ É¿ É   ¿ É3¿ É9  ¿ ÉV¿ É\  ¿ Éo¿ Éu  ¿ Éí	¿ Éò  ¿ É°¿ Éß  ¿ É≥¿ Éπ  ¿ ÉÃ¿ É“  ¿ É‰¿ ÉÍ  ¿ É¸¿ Ñ  ¿ Ñ¿ Ñ  ¿ Ñ'
¿ Ñ-  ¿ Ñ7¿ Ñ=  ¿ ÑM¿ ÑS  ¿ Ñd¿ Ñj  ¿ Ñ|¿ ÑÇ  ¿ Ñë¿ Ñó  ¿ Ñ®¿ ÑÆ  ¿ ÑΩ¿ Ñ√  ¿ Ñ“¿ Ñÿ  ¿ Ñ„
¿ ÑÈ  ¿ ÑÛ¿ Ñ˘  ¿ Ö#¿ Ö  ¿ Ö.$¿ Ö4  ¿ ÖX¿ Ö^  ¿ Ö|¿ ÖÇ  ¿ Ö°¿ Öß  ¿ Ö∫¿ Ö¿  ¿ ÖŒ ¿ Ö‘  ¿ ÖÙ ¿ Ö˙  ¿ Ü¿ Ü   ¿ Ü.¿ Ü4  <¿ ÜR¿ ÜX¿ ÜÅ¿ Üº¿ Üg¿ Ü_¿ ÜY¿ Üb¿ Üz¿ Üj¿ Ü}¿ ÜÉ¿ Ü∆¿ ÜÃ¿ Üı¿ á0¿ Ü€¿ Ü”¿ ÜÕ¿ Ü÷¿ ÜÓ¿ Üﬁ¿ ÜÒ¿ Ü˜¿ á:¿ á@¿ á{¿ á»¿ áX¿ áP¿ áA¿ áS¿ át¿ á[¿ áw¿ á}¿ á“¿ áÿ¿ à¿ à`¿ á¿ áË¿ áŸ¿ áÎ¿ à¿ áÛ¿ à¿ à¿ àj¿ àp¿ àó¿ à–¿ à~¿ àv¿ àq¿ ày¿ àê¿ àÅ¿ àì¿ àô<¿ à÷Å[¿ ä*Å;/// If non-null, indicates that this subtree represents something that can be
/// in an enabled or disabled state.
///
/// For example, a button that a user can currently interact with would set
/// this field to true. A button that currently does not respond to user
/// interactions would set this field to false. ¿ ä6Åú¿ ãÀÅv/// If non-null, indicates that this subtree represents a checkbox
/// or similar widget with a "checked" state, and what its current
/// state is.
///
/// When the [Checkbox.value] of a tristate Checkbox is null,
/// indicating a mixed-state, this value shall be false, in which
/// case, [mixed] will be true.
///
/// This is mutually exclusive with [toggled] and [mixed]. ¿ ã◊Å‚¿ ç¥Åº/// If non-null, indicates that this subtree represents a checkbox
/// or similar widget with a "half-checked" state or similar, and
/// whether it is currently in this half-checked state.
///
/// This must be null when [Checkbox.tristate] is false, or
/// when the widget is not a checkbox. When a tristate
/// checkbox is fully unchecked/checked, this value shall
/// be false.
///
/// This is mutually exclusive with [checked] and [toggled]. ¿ çæÄÒ¿ é®Ä”/// If non-null, indicates that this subtree represents a toggle switch
/// or similar widget with an "on" state, and what its current
/// state is.
///
/// This is mutually exclusive with [checked] and [mixed]. ¿ é¥Å&¿ è“Å/// If non-null indicates that this subtree represents something that can be
/// in a selected or unselected state, and what its current state is.
///
/// The active tab in a tab bar for example is considered "selected", whereas
/// all other tabs are unselected. ¿ èﬂÄª¿ êîÄ†/// If non-null, indicates that this subtree represents a button.
///
/// TalkBack/VoiceOver provides users with the hint "button" when a button
/// is focused. ¿ êüÅ ¿ ëõÄÂ/// If non-null, indicates that this subtree represents a link.
///
/// iOS's VoiceOver provides users with a unique hint when a link is focused.
/// Android's Talkback will announce a link hint the same way it does a
/// button. ¿ ë§Å¿ íºÅ/// If non-null, indicates that this subtree represents a header.
///
/// A header divides into sections. For example, an address book application
/// might define headers A, B, C, etc. to divide the list of alphabetically
/// sorted contacts into sections. ¿ í«Äø¿ ì}Ä°/// If non-null, indicates that this subtree represents a text field.
///
/// TalkBack/VoiceOver provide special affordances to enter text into a
/// text field. ¿ ìãÄº¿ îAÄ°/// If non-null, indicates that this subtree represents a slider.
///
/// Talkback/\VoiceOver provides users with the hint "slider" when a
/// slider is focused. ¿ îLa¿ î¢G/// If non-null, indicates that this subtree represents a keyboard key. ¿ î≤Ä–¿ ïzÄ±/// If non-null, indicates that this subtree is read only.
///
/// Only applicable when [textField] is true.
///
/// TalkBack/VoiceOver will treat it as non-editable text field. ¿ ïáÅ’¿ óSÅØ/// If non-null, whether the node is able to hold input focus.
///
/// If [focusable] is set to false, then [focused] must not be true.
///
/// Input focus indicates that the node will receive keyboard events. It is not
/// to be confused with accessibility focus. Accessibility focus is the
/// green/black rectangular highlight that TalkBack/VoiceOver draws around the
/// element it is reading, and is separate from input focus. ¿ óaÇ¿ ôwÅ˜/// If non-null, whether the node currently holds input focus.
///
/// At most one node in the tree should hold input focus at any point in time,
/// and it should not be set to true if [focusable] is false.
///
/// Input focus indicates that the node will receive keyboard events. It is not
/// to be confused with accessibility focus. Accessibility focus is the
/// green/black rectangular highlight that TalkBack/VoiceOver draws around the
/// element it is reading, and is separate from input focus. ¿ ôÉÅ¿ ösÄ€/// If non-null, whether a semantic node is in a mutually exclusive group.
///
/// For example, a radio button is in a mutually exclusive group because only
/// one radio button in that group can be marked as [checked]. ¿ öêÉF¿ ù–É/// If non-null, whether the node is considered hidden.
///
/// Hidden elements are currently not visible on screen. They may be covered
/// by other elements or positioned outside of the visible area of a viewport.
///
/// Hidden elements cannot gain accessibility focus though regular touch. The
/// only way they can be focused is by moving the focus to them via linear
/// navigation.
///
/// Platforms are free to completely ignore hidden elements and new platforms
/// are encouraged to do so.
///
/// Instead of marking an element as hidden it should usually be excluded from
/// the semantics tree altogether. Hidden elements are only included in the
/// semantics tree to work around platform limitations and they are mainly
/// used to implement accessibility scrolling on iOS. ¿ ù€Å3¿ üÅ/// If non-null, whether [value] should be obscured.
///
/// This option is usually set in combination with [textField] to indicate
/// that the text field contains a password (or other sensitive information).
/// Doing so instructs screen readers to not read out the [value]. ¿ üÅ7¿ †AÅ/// Whether the [value] is coming from a field that supports multiline text
/// editing.
///
/// This option is only meaningful when [textField] is true to indicate
/// whether it's a single-line or multiline text field.
///
/// This option is null when [textField] is false. ¿ †OÅ—¿ ¢Å£/// If non-null, whether the node corresponds to the root of a subtree for
/// which a route name should be announced.
///
/// Generally, this is set in combination with
/// [SemanticsConfiguration.explicitChildNodes], since nodes with this flag
/// are not considered focusable by Android or iOS.
///
/// See also:
///
///  * [SemanticsFlag.scopesRoute] for a description of how the announced
///    value is selected. ¿ ¢%ÄŒ¿ ¢ÈÄ≠/// If non-null, whether the node contains the semantic label for a route.
///
/// See also:
///
///  * [SemanticsFlag.namesRoute] for a description of how the name is used. ¿ ¢¯Ä¨¿ £üÄê/// If non-null, whether the node represents an image.
///
/// See also:
///
///  * [SemanticsFlag.isImage], for the flag this setting controls. ¿ £©É¢¿ ßAÉi/// If non-null, whether the node should be considered a live region.
///
/// A live region indicates that updates to semantics node are important.
/// Platforms may use this information to make polite announcements to the
/// user to inform them of updates to this node.
///
/// An example of a live region is a [SnackBar] widget. On Android and iOS,
/// live region causes a polite announcement to be generated automatically,
/// even if the widget does not have accessibility focus. This announcement
/// may not be spoken if the OS accessibility services are already
/// announcing something else, such as reading the label of a focused widget
/// or providing a system announcement.
///
/// See also:
///
///  * [SemanticsFlag.isLiveRegion], the semantics flag this setting controls.
///  * [SemanticsConfiguration.liveRegion], for a full description of a live region. ¿ ßPÅg¿ ®©Å=/// The maximum number of characters that can be entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [textField] is true. Defaults to null,
/// which means no limit is imposed on the text field. ¿ ®ºÅS¿ ©˝Å%/// The current number of characters that have been entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [textField] is true. Must be set when
/// [maxValueLength] is set. ¿ ™Ç¿ ¨-Å/// Provides a textual description of the widget.
///
/// If a label is provided, there must either by an ambient [Directionality]
/// or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [label] and [attributedLabel]. One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.label] for a description of how this is exposed
///    in TalkBack and VoiceOver.
///  * [attributedLabel] for an [AttributedString] version of this property. ¿ ¨7ÇV¿ Æ~Ç/// Provides an [AttributedString] version of textual description of the widget.
///
/// If a [attributedLabel] is provided, there must either by an ambient
/// [Directionality] or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [label] and [attributedLabel]. One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedLabel] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [label] for a plain string version of this property. ¿ ÆíÇ+¿ ∞∏Å˝/// Provides a textual description of the value of the widget.
///
/// If a value is provided, there must either by an ambient [Directionality]
/// or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [value] and [attributedValue], One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.value] for a description of how this is exposed
///    in TalkBack and VoiceOver.
///  * [attributedLabel] for an [AttributedString] version of this property. ¿ ∞¬Çi¿ ≥Ç%/// Provides an [AttributedString] version of textual description of the value
/// of the widget.
///
/// If a [attributedValue] is provided, there must either by an ambient
/// [Directionality] or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [value] and [attributedValue], One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedValue] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [value] for a plain string version of this property. ¿ ≥0Ç◊¿ µ˘Çö/// The value that [value] or [attributedValue] will become after a
/// [SemanticsAction.increase] action has been performed on this widget.
///
/// If a value is provided, [onIncrease] must also be set and there must
/// either be an ambient [Directionality] or an explicit [textDirection]
/// must be provided.
///
/// Callers must not provide both [increasedValue] and
/// [attributedIncreasedValue], One or both must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.increasedValue] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [attributedIncreasedValue] for an [AttributedString] version of this
///    property. ¿ ∂Ç˝¿ ∏ÒÇÆ/// The [AttributedString] that [value] or [attributedValue] will become after
/// a [SemanticsAction.increase] action has been performed on this widget.
///
/// If a [attributedIncreasedValue] is provided, [onIncrease] must also be set
/// and there must either be an ambient [Directionality] or an explicit
/// [textDirection] must be provided.
///
/// Callers must not provide both [increasedValue] and
/// [attributedIncreasedValue], One or both must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedIncreasedValue] for a description of
///    how this is exposed in TalkBack and VoiceOver.
///  * [increasedValue] for a plain string version of this property. ¿ πÇ◊¿ ª◊Çö/// The value that [value] or [attributedValue] will become after a
/// [SemanticsAction.decrease] action has been performed on this widget.
///
/// If a value is provided, [onDecrease] must also be set and there must
/// either be an ambient [Directionality] or an explicit [textDirection]
/// must be provided.
///
/// Callers must not provide both [decreasedValue] and
/// [attributedDecreasedValue], One or both must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.decreasedValue] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [attributedDecreasedValue] for an [AttributedString] version of this
///    property. ¿ ªÍÉ	¿ æ€Ç∫/// The [AttributedString] that [value] or [attributedValue] will become after
/// a [SemanticsAction.decrease] action has been performed on this widget.
///
/// If a [attributedDecreasedValue] is provided, [onDecrease] must also be set
/// and there must either be an ambient [Directionality] or an explicit
/// [textDirection] must be provided.
///
/// Callers must not provide both [decreasedValue] and
/// [attributedDecreasedValue], One or both must be null/// provided.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedDecreasedValue] for a description of
///    how this is exposed in TalkBack and VoiceOver.
///  * [decreasedValue] for a plain string version of this property. ¿ æ¯ÇI¿ ¡=Ç/// Provides a brief textual description of the result of an action performed
/// on the widget.
///
/// If a hint is provided, there must either be an ambient [Directionality]
/// or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [hint] and [attributedHint], One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.hint] for a description of how this is exposed
///    in TalkBack and VoiceOver.
///  * [attributedHint] for an [AttributedString] version of this property. ¿ ¡FÇÅ¿ √πÇ>/// Provides an [AttributedString] version of brief textual description of the
/// result of an action performed on the widget.
///
/// If a [attributedHint] is provided, there must either by an ambient
/// [Directionality] or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [hint] and [attributedHint], One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedHint] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [hint] for a plain string version of this property. ¿ √ÃÅ©¿ ≈nÅÉ/// Provides a textual description of the widget's tooltip.
///
/// In Android, this property sets the `AccessibilityNodeInfo.setTooltipText`.
/// In iOS, this property is appended to the end of the
/// `UIAccessibilityElement.accessibilityLabel`.
///
/// If a [tooltip] is provided, there must either by an ambient
/// [Directionality] or an explicit [textDirection] should be provided. ¿ ≈zÅ≤¿ «Åv/// Provides hint values which override the default hints on supported
/// platforms.
///
/// On Android, If no hint overrides are used then default [hint] will be
/// combined with the [label]. Otherwise, the [hint] will be ignored as long
/// as there as at least one non-null hint override.
///
/// On iOS, these are always ignored and the default [hint] is used instead. ¿ «1Ä√¿ «ÁÄò/// The reading direction of the [label], [value], [increasedValue],
/// [decreasedValue], and [hint].
///
/// Defaults to the ambient [Directionality]. ¿ «˘ÅI¿ …;Å/// Determines the position of this node among its siblings in the traversal
/// sort order.
///
/// This is used to describe the order in which the semantic node should be
/// traversed by the accessibility services on the platform (e.g. VoiceOver
/// on iOS and TalkBack on Android). ¿ …GÇü¿ ÀÿÇ`/// A tag to be applied to the child [SemanticsNode]s of this widget.
///
/// The tag is added to all child [SemanticsNode]s that pass through the
/// [RenderObject] corresponding to this widget while looking to be attached
/// to a parent SemanticsNode.
///
/// Tags are used to communicate to a parent SemanticsNode that a child
/// SemanticsNode was passed through a particular RenderObject. The parent can
/// use this information to determine the shape of the semantics tree.
///
/// See also:
///
///  * [SemanticsConfiguration.addTagForChildren], to which the tags provided
///    here will be passed. ¿ ÀÎÇ¬¿ Œ®Çé/// The handler for [SemanticsAction.tap].
///
/// This is the semantic equivalent of a user briefly tapping the screen with
/// the finger without moving it. For example, a button should implement this
/// action.
///
/// VoiceOver users on iOS and TalkBack users on Android *may* trigger this
/// action by double-tapping the screen while an element is focused.
///
/// Note: different OSes or assistive technologies may decide to interpret
/// user inputs differently. Some may simulate real screen taps, while others
/// may call semantics tap. One way to handle taps properly is to provide the
/// same handler to both gesture tap and semantics tap. ¿ Œ≤ÇÁ¿ —éÇ´/// The handler for [SemanticsAction.longPress].
///
/// This is the semantic equivalent of a user pressing and holding the screen
/// with the finger for a few seconds without moving it.
///
/// VoiceOver users on iOS and TalkBack users on Android *may* trigger this
/// action by double-tapping the screen without lifting the finger after the
/// second tap.
///
/// Note: different OSes or assistive technologies may decide to interpret
/// user inputs differently. Some may simulate real long presses, while others
/// may call semantics long press. One way to handle long press properly is to
/// provide the same handler to both gesture long press and semantics long
/// press. ¿ —ûÇe¿ ”˜Ç./// The handler for [SemanticsAction.scrollLeft].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from right to left. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping left with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided. ¿ ‘Çk¿ ÷fÇ3/// The handler for [SemanticsAction.scrollRight].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from left to right. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping right with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided. ¿ ÷xÇ]¿ ÿÀÇ(/// The handler for [SemanticsAction.scrollUp].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from bottom to top. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping up with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided. ¿ ÿ⁄Çf¿ €4Ç//// The handler for [SemanticsAction.scrollDown].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from top to bottom. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping down with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided. ¿ €EÇ:¿ ›uÇ/// The handler for [SemanticsAction.increase].
///
/// This is a request to increase the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// If a [value] is set, [increasedValue] must also be provided and
/// [onIncrease] must ensure that [value] will be set to [increasedValue].
///
/// VoiceOver users on iOS can trigger this action by swiping up with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume up button. ¿ ›ÑÇ>¿ ﬂ∏Ç	/// The handler for [SemanticsAction.decrease].
///
/// This is a request to decrease the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// If a [value] is set, [decreasedValue] must also be provided and
/// [onDecrease] must ensure that [value] will be set to [decreasedValue].
///
/// VoiceOver users on iOS can trigger this action by swiping down with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume down button. ¿ ﬂ«Å¿ ‡’ÄÌ/// The handler for [SemanticsAction.copy].
///
/// This is a request to copy the current selection to the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example. ¿ ‡‡Å$¿ ·ˇÄ¸/// The handler for [SemanticsAction.cut].
///
/// This is a request to cut the current selection and place it in the
/// clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example. ¿ ‚	Å¿ „ÄÌ/// The handler for [SemanticsAction.paste].
///
/// This is a request to paste the current content of the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example. ¿ „#År¿ ‰wÅ,/// The handler for [SemanticsAction.moveCursorForwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field forward by one character.
///
/// TalkBack users can trigger this by pressing the volume up key while the
/// input focus is in a text field. ¿ ‰öÅw¿ ÂÚÅ0/// The handler for [SemanticsAction.moveCursorBackwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one character.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field. ¿ ÊÅf¿ ÁcÅ%/// The handler for [SemanticsAction.moveCursorForwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one word.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field. ¿ ÁÅÅh¿ ËœÅ&/// The handler for [SemanticsAction.moveCursorBackwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one word.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field. ¿ ËÓÅì¿ ÍsÅ[/// The handler for [SemanticsAction.setSelection].
///
/// This handler is invoked when the user either wants to change the currently
/// selected text in a text field or change the position of the cursor.
///
/// TalkBack users can trigger this handler by selecting "Move cursor to
/// beginning/end" or "Select all" from the local context menu. ¿ ÍÜÅ?¿ ÎºÅ/// The handler for [SemanticsAction.setText].
///
/// This handler is invoked when the user wants to replace the current text in
/// the text field with a new text.
///
/// Voice access users can trigger this handler by speaking "type <text>" to
/// their Android devices. ¿ Î Éù¿ ÔLÉK/// The handler for [SemanticsAction.didGainAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler gains
/// the accessibility focus. The accessibility focus is the
/// green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidLoseAccessibilityFocus], which is invoked when the accessibility
///    focus is removed from the node.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus. ¿ ÔlÉè¿ Ú‡É=/// The handler for [SemanticsAction.didLoseAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler
/// loses the accessibility focus. The accessibility focus is
/// the green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidGainAccessibilityFocus], which is invoked when the node gains
///    accessibility focus.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus. ¿ Û ÅS¿ ÙJÅ'/// The handler for [SemanticsAction.dismiss].
///
/// This is a request to dismiss the currently focused node.
///
/// TalkBack users on Android can trigger this action in the local context
/// menu, and VoiceOver users on iOS can trigger this action with a standard
/// gesture or menu option. ¿ ÙXÇ7¿ ˆyÅ‹/// A map from each supported [CustomSemanticsAction] to a provided handler.
///
/// The handler associated with each custom action is called whenever a
/// semantics action of type [SemanticsAction.customAction] is received. The
/// provided argument will be an identifier used to retrieve an instance of
/// a custom action which can then retrieve the correct handler from this map.
///
/// See also:
///
///  * [CustomSemanticsAction], for an explanation of custom actions.  ¿ ˆîÜç¿ ˆ•  ¿ ˆπ&¿ ˆ÷  ¿ ˆî¿ ˆï¿ ˝%U¿ ˝8   ¿ ˝%¿ ˝&¿ Ä^¿ Ä_¿ ˛_¿  è¿ ˇôÅ3/// A node that represents some semantic data.
///
/// The semantics tree is maintained during the semantics phase of the pipeline
/// (i.e., during [PipelineOwner.flushSemantics]), which happens after
/// compositing. The semantics tree is then uploaded into the engine for use
/// by assistive technology. ¿ ˇ»Å ¿ O¿ \~/// Creates a semantic node.
///
/// Each semantic node has a unique identifier that is assigned when the node
/// is created.¿ c¿ i  ¿ q¿ Ä  ¿ ò¿ î¿ ö¿ ®¿ ©¿ ¡¿ ≥¿ √¿ ‘Å:¿i¿j¿nÄÅ/// Creates a semantic node to represent the root of the semantics tree.
///
/// The root node is assigned an identifier of zero.¿u¿{  ¿É¿í  ¿£¿º  ¿Õ¿…¿œ¿Á¿Ÿ¿È3¿TC¿e ¿î¿å¿í¿é¿ç¿ê¿ñ¿ú¿ß ¿π¿SÄ«¿Ä∞/// Uniquely identifies this node in the list of sibling nodes.
///
/// Keys are used during the construction of the semantics tree. They are not
/// transferred to the engine. ¿ ¿  ¿!¿   ¿p¿y  ¿	´¿	∞ ¿	∏¿	º¿	Ω¿
Én¿÷É./// The semantic clip from an ancestor that was applied to this node.
///
/// Expressed in the coordinate system of the node. May be null if no clip has
/// been applied.
///
/// Descendant [SemanticsNode]s that are positioned outside of this rect will
/// be excluded from the semantics tree. Descendant [SemanticsNode]s that are
/// overlapping with this rect, but are outside of [parentPaintClipRect] will
/// be included in the tree, but they will be marked as hidden because they
/// are assumed to be not visible on screen.
///
/// If this rect is null, all descendant [SemanticsNode]s outside of
/// [parentPaintClipRect] will be excluded from the tree.
///
/// If this rect is non-null it has to completely enclose
/// [parentPaintClipRect]. If [parentPaintClipRect] is null this property is
/// also null. ¿ÚÇò¿wÇd/// The paint clip from an ancestor that was applied to this node.
///
/// Expressed in the coordinate system of the node. May be null if no clip has
/// been applied.
///
/// Descendant [SemanticsNode]s that are positioned outside of this rect will
/// either be excluded from the semantics tree (if they have no overlap with
/// [parentSemanticsClipRect]) or they will be included and marked as hidden
/// (if they are overlapping with [parentSemanticsClipRect]).
///
/// This rect is completely enclosed by [parentSemanticsClipRect].
///
/// If this rect is null [parentSemanticsClipRect] also has to be null. ¿èÇ‰¿`ÇÆ/// The elevation adjustment that the parent imposes on this node.
///
/// The [elevation] property is relative to the elevation of the parent
/// [SemanticsNode]. However, as [SemanticsConfiguration]s from various
/// ascending [RenderObject]s are merged into each other to form that
/// [SemanticsNode] the parent‚Äôs elevation may change. This requires an
/// adjustment of the child‚Äôs relative elevation which is represented by this
/// value.
///
/// The value is rarely accessed directly. Instead, for most use cases the
/// [elevation] value should be used, which includes this adjustment.
///
/// See also:
///
///  * [elevation], the actual elevation of this [SemanticsNode]. ¿xÅ}¿ËÅ^/// The index of this node within the parent's list of semantic children.
///
/// This includes all semantic nodes, not just those currently in the
/// child list. For example, if a scrollable has five children but the first
/// two are not visible (and thus not included in the list of children), then
/// the index of the last node will still be 4. ¿∫ ¿ø ¿’¿ #¿ ¿¿U¿ ¿0¿=¿>¿rh¿—G/// Contains the children in inverse hit test order (i.e. paint order). ¿ﬂÄ‡¿©Ä™/// A snapshot of `newChildren` passed to [_replaceChildren] that we keep in
/// debug mode. It supports the assertion that user does not mutate the list
/// of children. ¿/¿/ ¿/'¿4¿4,  ¿5s¿5Ç  ¿69¿6= ¿6F¿?ç¿?í ¿?õ¿E|N¿E© ¿E¥¿E¡¿E¬¿EŒh¿E˜ ¿F¿F¿F¿F≥1¿F∑ ¿F»¿F’¿F÷¿FÈÄ¬¿GßÄ¢/// The [SemanticsTag]s this node is tagged with.
///
/// Tags are used during the construction of the semantics tree. They are not
/// transferred to the engine. ¿H)!¿H- ¿H6¿HC¿HD¿J©A¿J∫ ¿JÕ¿J⁄¿J€¿L˘A¿M
 ¿M¿M*¿M+¿P S¿P€ ¿P˜¿Q¿Q¿T≠S¿Tæ ¿T⁄¿TÁ¿TË¿W'?¿W8 ¿WJ¿WW¿WX¿X'¿X ¿X¿X ¿X!¿ZÄ+¿Zá ¿Zî¿Z°¿Z¢¿b¶+¿b≠ ¿b∫¿b«¿b»¿co&¿cá  ¿d8;¿dG ¿dX¿de¿df¿eœ¿e·  ¿f°¿f∞  ¿gY¿g_  ¿hM¿hR  ¿h÷¿h€  ¿jÕ¿j’  ¿l-¿l5  ¿mç¿mï  ¿oà¿oç  ¿q,¿q1  ¿r¿¿r≈  ¿s0L¿sT ¿sd¿sz¿s{¿óè6¿ó¶ ¿óπ¿ó¬¿óƒ¿ó√¿ó…G¿ó‡ ¿ò¿ò¿ò¿ò¿òG¿ò- ¿òC¿òY¿òZ-¿Åﬁ¿ÛÅπ/// The unique identifier for this node.
///
/// The root node has an id of zero. Other nodes are given a unique id
/// when they are attached to a [SemanticsOwner]. If they are detached, their
/// ids are invalid and should not be used.
///
/// In rare circumstances, id may change if this node is detached and
/// re-attached to the [SemanticsOwner]. This should only happen when the
/// application has generated too many semantics nodes.   ¿AÅ,¿UÄ¸/// The transform from this node's coordinate system to its parent's coordinate system.
///
/// By default, the transform is null, which represents the identity
/// transformation (i.e., that this node has the same coordinate system as its
/// parent).   ¿áÄ«¿ã  ¿ï¿ü   ¿	RV¿	ö</// The bounding box for this node in its coordinate system.   ¿	≈Ä∂¿	…  ¿	Œ
¿	‘   ¿˙Ç)¿Åÿ/// Whether the node is invisible.
///
/// A node whose [rect] is outside of the bounds of the screen and hence not
/// reachable for users is considered invisible if its semantic information
/// is not merged into a (partially) visible parent as indicated by
/// [isMergedIntoParent].
///
/// An invisible node can be safely dropped from the semantic tree without
/// loosing semantic information that is relevant for describing the content
/// currently shown on screen.   ¿5ÄÇ¿çL/// Whether this node merges its semantic information into an ancestor node.   ¿ﬁÄó¿‚  ¿ı
¿˚   ¿yÅÑ¿ÕÅ>/// Whether the user can interact with this node in assistive technologies.
///
/// This node can still receive accessibility focus even if this is true.
/// Setting this to true prevents the user from activating pointer related
/// [SemanticsAction]s, such as [SemanticsAction.tap] or
/// [SemanticsAction.longPress].   ¿'Ä†¿+  ¿A
¿G   ¿ÀÅç¿Å$/// Whether this node is taking part in a merge of semantic information.
///
/// This returns true if the node is either merged into an ancestor node or if
/// decedent nodes are merged into this node.
///
/// See also:
///
///  * [isMergedIntoParent]
///  * [mergeAllDescendantsIntoThisNode]   ¿\Ä©¿¡Y/// Whether this node and all of its descendants should be treated as one logical entity.   ¿.•r¿.È8/// Whether this node has a non-zero number of children.   ¿/1i¿/e)/// The number of children this node has.   ¿3nÄ´¿4	ÄÄ/// The owner for this node (null if unattached).
///
/// The entire subtree that this node belongs to will have the same owner.   ¿47ÄÂ¿5Ä∂/// Whether this node is in a tree whose root is attached to something.
///
/// This becomes true during the call to [attach].
///
/// This becomes false during the call to [detach].   ¿5 P¿5^(/// The parent of this node in the tree.   ¿5éÄ®¿6&Äá/// The depth of this node in the tree.
///
/// The depth of nodes in a tree monotonically increases as you traverse down
/// the tree.   ¿F;u¿FC    ¿HœÄ’¿IÉÄû/// A textual description of this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedLabel].   ¿I®Ä˛¿JÇÄ∫/// A textual description of this node in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [label], which exposes just the raw text.   ¿JÔÄÍ¿K∏Ä≥/// A textual description for the current value of the node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedValue].   ¿K›Å¿L“Ä”/// A textual description for the current value of the node in
/// [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [value], which exposes just the raw text.   ¿M?Å£¿NØÅR/// The value that [value] will have after a [SemanticsAction.increase] action
/// has been performed.
///
/// This property is only valid if the [SemanticsAction.increase] action is
/// available on this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedIncreasedValue].   ¿NÊÅ·¿PëÅÉ/// The value in [AttributedString] format that [value] or [attributedValue]
/// will have after a [SemanticsAction.increase] action has been performed.
///
/// This property is only valid if the [SemanticsAction.increase] action is
/// available on this node.
///
/// The reading direction is given by [textDirection].
///
/// See also [increasedValue], which exposes just the raw text.   ¿Q"Å£¿RíÅR/// The value that [value] will have after a [SemanticsAction.decrease] action
/// has been performed.
///
/// This property is only valid if the [SemanticsAction.decrease] action is
/// available on this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedDecreasedValue].   ¿R…Å·¿TtÅÉ/// The value in [AttributedString] format that [value] or [attributedValue]
/// will have after a [SemanticsAction.decrease] action has been performed.
///
/// This property is only valid if the [SemanticsAction.decrease] action is
/// available on this node.
///
/// The reading direction is given by [textDirection].
///
/// See also [decreasedValue], which exposes just the raw text.   ¿UÄˆ¿U‹Ä¡/// A brief description of the result of performing an action on this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedHint].   ¿UˇÅ%¿WÄ·/// A brief description of the result of performing an action on this node
/// in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [hint], which exposes just the raw text.   ¿WkÄì¿WÍm/// A textual description of the widget's tooltip.
///
/// The reading direction is given by [textDirection].   ¿X-ÇP¿ZeÇ/// The elevation along the z-axis at which the [rect] of this [SemanticsNode]
/// is located above its parent.
///
/// The value is relative to the parent's [elevation]. The sum of the
/// [elevation]s of all ancestor node plus this value determines the absolute
/// elevation of this [SemanticsNode].
///
/// See also:
///
///  * [thickness], which describes how much space in z-direction this
///    [SemanticsNode] occupies starting at this [elevation].
///  * [elevationAdjustment], which has been used to calculate this value.   ¿Z∞áÛ¿bãáq/// Describes how much space the [SemanticsNode] takes up along the z-axis.
///
/// A [SemanticsNode] represents multiple [RenderObject]s, which can be
/// located at various elevations in 3D. The [thickness] is the difference
/// between the absolute elevations of the lowest and highest [RenderObject]
/// represented by this [SemanticsNode]. In other words, the thickness
/// describes how high the box is that this [SemanticsNode] occupies in three
/// dimensional space. The two other dimensions are defined by [rect].
///
/// {@tool snippet}
/// The following code stacks three [PhysicalModel]s on top of each other
/// separated by non-zero elevations.
///
/// [PhysicalModel] C is elevated 10.0 above [PhysicalModel] B, which in turn
/// is elevated 5.0 above [PhysicalModel] A. The side view of this
/// constellation looks as follows:
///
/// ![A diagram illustrating the elevations of three PhysicalModels and their
/// corresponding SemanticsNodes.](https://flutter.github.io/assets-for-api-docs/assets/semantics/SemanticsNode.thickness.png)
///
/// In this example the [RenderObject]s for [PhysicalModel] C and B share one
/// [SemanticsNode] Y. Given the elevations of those [RenderObject]s, this
/// [SemanticsNode] has a [thickness] of 10.0 and an elevation of 5.0 over
/// its parent [SemanticsNode] X.
/// ```dart
/// PhysicalModel( // A
///   color: Colors.amber,
///   child: Semantics(
///     explicitChildNodes: true,
///     child: const PhysicalModel( // B
///       color: Colors.brown,
///       elevation: 5.0,
///       child: PhysicalModel( // C
///         color: Colors.cyan,
///         elevation: 10.0,
///         child: Placeholder(),
///       ),
///     ),
///   ),
/// )
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [elevation], which describes the elevation of the box defined by
///    [thickness] and [rect] relative to the parent of this [SemanticsNode].   ¿b÷Äñ¿cLU/// Provides hint values which override the default hints on supported
/// platforms.   ¿cöÄõ¿dc/// The reading direction for [label], [value], [hint], [increasedValue], and
/// [decreasedValue].   ¿dxÅT¿e∏Å/// Determines the position of this node among its siblings in the traversal
/// sort order.
///
/// This is used to describe the order in which the semantic node should be
/// traversed by the accessibility services on the platform (e.g. VoiceOver
/// on iOS and TalkBack on Android).   ¿eÓÄ∞¿f~x/// The currently selected text (or the position of the cursor) within [value]
/// if this node represents a text field.   ¿f√Äì¿g:h/// If this node represents a text field, this indicates whether or not it's
/// a multiline text field.   ¿gpÄ⁄¿h$Ä¢/// The total number of scrollable children that contribute to semantics.
///
/// If the number of children are unknown or unbounded, this value will be
/// null.   ¿hhk¿h∑C/// The index of the first visible semantic child of a scroll node.   ¿hÏÅﬁ¿j®Åõ/// Indicates the current scrolling position in logical pixels if the node is
/// scrollable.
///
/// The properties [scrollExtentMin] and [scrollExtentMax] indicate the valid
/// in-range values for this property. The value for [scrollPosition] may
/// (temporarily) be outside that range, e.g. during an overscroll.
///
/// See also:
///
///  * [ScrollPosition.pixels], from where this value is usually taken.   ¿jÈÅA¿lÅ /// Indicates the maximum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.maxScrollExtent], from where this value is usually taken.   ¿lJÅ@¿mfÄˇ/// Indicates the minimum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.minScrollExtent] from where this value is usually taken.   ¿m™Å€¿ocÅô/// The id of the platform view, whose semantics nodes will be added as
/// children to this node.
///
/// If this value is non-null, the SemanticsNode must not have any children
/// as those would be replaced by the semantics nodes of the referenced
/// platform view.
///
/// See also:
///
///  * [AndroidView], which is the platform view for Android.
///  * [UiKitView], which is the platform view for iOS.   ¿o°Åà¿qÅL/// The maximum number of characters that can be entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [SemanticsFlag.isTextField] is set. Defaults
/// to null, which means no limit is imposed on the text field.   ¿qEÅx¿rìÅ4/// The current number of characters that have been entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [SemanticsFlag.isTextField] is set. Must be
/// set when [maxValueLength] is set.   ¿æÄë¿…    ¿ƒè›¿…  ¿⁄¿Ô   ¿/ûÅº¿0çÄﬂ/// Visits the immediate children of this node.
///
/// This function calls visitor for each immediate child until visitor returns
/// false. Returns true if all the visitor calls returned true, otherwise
/// returns false. ¿0õ¿0±   ¿1^Ç¿2]ÄÔ/// Visit all the descendants of this node.
///
/// This function calls visitor for each descendant in a pre-order traversal
/// until visitor returns false. Returns true if all the visitor calls
/// returned true, otherwise returns false. ¿2o¿2Ö   ¿6LÄ∏¿6Q  ¿6_¿6n   ¿7D¿7    ¿7PÅô¿7U  ¿7a¿7p   ¿8ÌÄø¿8Ú  ¿8˝¿9   ¿9∞Çâ¿9ˇ2/// Mark this node as attached to the given owner. ¿:¿:  ¿9Â¿9Ê¿<=É5¿<y/// Mark this node as detached.  ¿<_¿<`¿?§Ä√¿?©    ¿@kÑÒ¿@p  ¿@ö¿@≤   ¿G∞u¿G„+/// Whether this node is tagged with `tag`. ¿GÏ¿G˙   ¿HO|¿Hì</// Whether this node currently has a given [SemanticsFlag]. ¿Hõ¿H™   ¿r›O¿r‚  ¿rÙ¿s   ¿sÅãJ¿upÅ◊/// Reconfigures the properties of this object to describe the configuration
/// provided in the `config` argument and the children listed in the
/// `childrenInInversePaintOrder` argument.
///
/// The arguments may be null; this represents an empty configuration (all
/// values at their defaults, no children).
///
/// No reference is kept to the [SemanticsConfiguration] object, but the child
/// list is used as-is and should therefore not be changed after this call. ¿uÅ'¿u£  ¿uÆ0¿uƒ   ¿~–ò_¿ÏÅ/// Returns a summary of the semantics for this node.
///
/// If this node has [mergeAllDescendantsIntoThisNode], then the returned data
/// includes the information from this node's descendants. Otherwise, the
/// returned data matches the data on this node.   ¿ó3X¿óF    ¿ò`åQ¿òe  ¿òr!¿òç  ¿òï'¿òü   ¿§µâ¿¿•M/// Builds a new list made of [_children] sorted in semantic traversal order.   ¿ÆyÅx¿ØcÄ‹/// Sends a [SemanticsEvent] associated with this [SemanticsNode].
///
/// Semantics events should be sent to inform interested parties (like
/// the accessibility system of the operating system) about changes to the UI. ¿Øm¿Ø}   ¿ØıÄŒ¿Ø˙  ¿∞¿∞!   ¿∞«X¿∞⁄   ¿∞«¿∞»¿±#ë¿±4  ¿±H&¿±e  ¿±#¿±$¿¬7ÇW¿√Ä≈/// Returns a string representation of this node and its descendants.
///
/// The order in which the children of the [SemanticsNode] will be printed is
/// controlled by the [childOrder] parameter. ¿√+¿√3  ¿√J¿√S  ¿√h0¿√y  ¿√ûK¿√∑  	¿√¿√¿√B¿√É¿√í¿√ì¿√√¿√⁄¿√€¿ƒíÅc¿ƒÆ  ¿ƒ∆¿ƒœ  ¿ƒÿ9¿ƒÔ  ¿≈K¿≈0  ¿ƒí¿ƒì¿ƒˆ¿≈
¿≈¿≈<¿≈S¿≈T¿≈˘Å3¿∆  ¿∆3K¿∆L  ¿≈˘¿≈˙¿∆X¿∆o¿∆p¿«0Åº¿«ìL/// Returns the list of direct children of this node in the specified order. ¿«¨"¿«≈    ¿»Ö∑¿ÀÇ/// An edge of a box, such as top, bottom, left or right, used to compute
/// [SemanticsNode]s that overlap vertically or horizontally.
///
/// For computing horizontal overlap in an LTR setting we create two [_BoxEdge]
/// objects for each [SemanticsNode]: one representing the left edge (marked
/// with [isLeadingEdge] equal to true) and one for the right edge (with [isLeadingEdge]
/// equal to false). Similarly, for vertical overlap we also create two objects
/// for each [SemanticsNode], one for the top and one for the bottom edge. ¿À@} ¿À@¿ÀH ¿ÀO¿À^  ¿Àp¿À  ¿Àä¿Àô  ¿À•¿À´¿Àª¿À¨¿À≤¿À≥¿À¡ÅΩ¿ÕqÅí/// True if the edge comes before the seconds edge along the traversal
/// direction, and false otherwise.
///
/// This field is never null.
///
/// For example, in LTR traversal the left edge's [isLeadingEdge] is set to true,
/// the right edge's [isLeadingEdge] is set to false. When considering vertical
/// ordering of boxes, the top edge is the start edge, and the bottom edge is
/// the end edge. ¿ÕÉ¿Õ¸g/// The offset from the start edge of the parent [SemanticsNode] in the
/// direction of the traversal. ¿Œ?¿ŒB$/// The node whom this edge belongs.  ¿ŒKZ¿Œ[  ¿Œe¿Œo  ¿ŒK¿ŒL ¿Œ©ïÍ¿œÅÄ—/// A group of [nodes] that are disjoint vertically or horizontally from other
/// nodes that share the same [SemanticsNode] parent.
///
/// The [nodes] are sorted among each other separately from other nodes. ¿œƒ[ ¿œƒ¿œ◊ ¿œﬁ¿œÌ  ¿œ˝¿–   ¿–#Ä˚¿—Äÿ/// The offset from the start edge of the parent [SemanticsNode] in the
/// direction of the traversal.
///
/// This value is equal to the [_BoxEdge.offset] of the first node in the
/// [nodes] list being considered. ¿—#!¿—7  ¿—Ie¿—ï//// The nodes that are sorted among each other.¿—¨¿—≠¿—ù¿—´¿—û ¿—≥o¿—√  ¿—Õ¿—‚  ¿—≥¿—¥¿“&ÜR¿”ÄÀ/// Sorts this group assuming that [nodes] belong to the same vertical group.
///
/// This method breaks up this group into horizontal [_SemanticsSortGroup]s
/// then sorts them using [sortedWithinKnot].   ¿ÿ|å¿€‘É%/// Sorts [nodes] where nodes intersect both vertically and horizontally.
///
/// In the special case when [nodes] contains one or less nodes, this method
/// returns [nodes] unchanged.
///
/// This method constructs a graph, where vertices are [SemanticsNode]s and
/// edges are "traversed before" relation between pairs of nodes. The sort
/// order is the topological sorting of the graph, with the original order of
/// [nodes] used as the tie breaker.
///
/// Whether a node is traversed before another node is determined by the
/// vector that connects the two nodes' centers. If the vector "points to the
/// right or down", defined as the [Offset.direction] being between `-pi/4`
/// and `3*pi/4`), then the semantics node whose center is at the end of the
/// vector is said to be traversed after.    ¿Ï˙Ñ]¿ÓeÅd/// The implementation of [Comparable] that implements the ordering of
/// [SemanticsNode]s in the accessibility traversal.
///
/// [SemanticsNode]s are sorted prior to sending them to the engine side.
///
/// This implementation considers a [node]'s [sortKey] and its position within
/// the list of its siblings. [sortKey] takes precedence over position. ¿Ó¶` ¿Ó¶¿Ó∏ ¿Óø¿ÓŒ  ¿Ó◊¿Ó›  ¿ÓÈ¿Ó¯   ¿Ô
Q¿ÔW6/// The node whose position this sort node determines. ¿Ô`Äµ¿Äç/// Determines the position of this node among its siblings.
///
/// Sort keys take precedence over other attributes, such as
/// [position]. ¿l¿~U/// Position within the list of siblings as determined by the default sort
/// order.  ¿ãÄ ¿õ  ¿•¿π  ¿ã¿å ¿ÒYúD¿ÚêÅ0/// Owns [SemanticsNode] objects and notifies listeners of changes to the
/// render tree semantics.
///
/// To listen for semantic updates, call [SemanticsBinding.ensureSemantics] or
/// [PipelineOwner.ensureSemantics] to obtain a [SemanticsHandle]. This will
/// create a [SemanticsOwner] if necessary. ¿Ú∫Äè ¿Û¿ÛQ/// Creates a [SemanticsOwner] that manages zero or more [SemanticsNode] objects.¿Û#¿Û2   ¿ÛMÅ∂¿ÙÚÅx/// The [onSemanticsUpdate] callback is expected to dispatch [SemanticsUpdate]s
/// to the [FlutterView] that is associated with this [PipelineOwner] and/or
/// [SemanticsOwner].
///
/// A [SemanticsOwner] calls [onSemanticsUpdate] during [sendSemanticsUpdate]
/// after the [SemanticsUpdate] has been build, but before the [SemanticsOwner]'s
/// listeners have been notified. ¿ı8¿ı  ¿ı=¿ı>¿ı.¿ı<¿ı/¿ıC=¿ıa ¿ı~¿ı¿ıj¿ı}¿ık¿ıp¿ıÑ;¿ıù ¿ıΩ¿ıæ¿ıÆ¿ıº¿ıØ¿ıƒÄü¿ˆDf/// The root node of the semantics tree, if any.
///
/// If the semantics tree is empty, returns null.   ¿ˆg~¿ˆx   ¿ˆg¿ˆh¿ˆÈää¿˜$3/// Update the semantics using [onSemanticsUpdate].   ¿wÇO¿è  ¿Ø¿¥  ¿∑¿»   ¿ Ç“¿Å%/// Asks the [SemanticsNode] with the given id to perform the given action.
///
/// If the [SemanticsNode] has not indicated that it can perform the action,
/// this function does nothing.
///
/// If the given `action` requires arguments they need to be passed in via
/// the `args` parameter. ¿¿  ¿¿*  ¿3¿<   ¿†Ñ.¿∏  ¿ﬁ¿Ì  ¿Ú¿˙  ¿¿   ¿
“Çç¿Å)/// Asks the [SemanticsNode] at the given position to perform the given action.
///
/// If the [SemanticsNode] has not indicated that it can perform the action,
/// this function does nothing.
///
/// If the given `action` requires arguments they need to be passed in via
/// the `args` parameter. ¿¿'  ¿0¿A  ¿J¿S   ¿c8¿v   ¿c¿d ¿ü¿ ›!¿]Ä∑/// Describes the semantic information associated with the owning
/// [RenderObject].
///
/// The information provided in the configuration is used to generate the
/// semantics tree.  6¿` ¿e ¿{¿É¿˛Ç‘/// Whether to block pointer related user actions for the rendering subtree.
///
/// Setting this to true will prevent users from interacting with the
/// rendering object produces this semantics configuration and its subtree
/// through pointer-related [SemanticsAction]s in assistive technologies.
///
/// The [SemanticsNode] created from this semantics configuration is still
/// focusable by assistive technologies. Only pointer-related
/// [SemanticsAction]s, such as [SemanticsAction.tap] or its friends, are
/// blocked.
///
/// If this semantics configuration is merged into a parent semantics node,
/// only the [SemanticsAction]s from this rendering object and the rendering
/// objects in the subtree are blocked.¿¿ É6¿<Ç¸/// Whether the configuration forces all children of the owning [RenderObject]
/// that want to contribute semantic information to the semantics tree to do
/// so in the form of explicit [SemanticsNode]s.
///
/// When set to false children of the owning [RenderObject] are allowed to
/// annotate [SemanticsNode]s of their parent with the semantic information
/// they want to contribute to the semantic tree.
/// When set to true the only way for children of the owning [RenderObject]
/// to contribute semantic information to the semantic tree is to introduce
/// new explicit [SemanticsNode]s to the tree.
///
/// This setting is often used in combination with [isSemanticBoundary] to
/// create semantic boundaries that are either writable or not for children.¿Q¿[É|¿§É%/// Whether the owning [RenderObject] makes other [RenderObject]s previously
/// painted within the same semantic boundary unreachable for accessibility
/// purposes.
///
/// If set to true, the semantic information for all siblings and cousins of
/// this node, that are earlier in a depth-first pre-order traversal, are
/// dropped from the semantics tree up until a semantic boundary (as defined
/// by [isSemanticBoundary]) is reached.
///
/// If [isSemanticBoundary] and [isBlockingSemanticsOfPreviouslyPaintedNodes]
/// is set on the same node, all previously painted siblings and cousins up
/// until the next ancestor that is a semantic boundary are dropped.
///
/// Paint order as established by [RenderObject.visitChildrenForSemantics] is
/// used to determine if a node is previous to this one.¿“¿3¿8 ¿L¿VÅ.¿NÄ∏/// The actions (with associated action handlers) that this configuration
/// would like to contribute to the semantics tree.
///
/// See also:
///
///  * [addAction] to add an action.¿Ç¿É¿Y¿Å¿Z¿k¿ ¿ ¿¿&ª¿&…  ¿(¿(˛  ¿,¿,  ¿.¿.'  ¿15¿1C  ¿4P¿4^  ¿7j¿7x  ¿:l¿:z  ¿=j¿=x  ¿?,¿?:  ¿@Ì¿@˚  ¿Bù¿B´  ¿E ¿E.  ¿Gh2¿G{  ¿Jp3¿JÉ  ¿Me-¿Mx  ¿PJ.¿P]  ¿SR$¿Sg  ¿VÀ¿V€  ¿[∑*¿[≈  ¿`M*¿`[  ¿dB¿dB  ¿hè¿h°  ¿j¡¿j∆  ¿l¿l  ¿mS¿mX  ¿né¿nì  ¿pæ¿p√  ¿rﬁ¿r„  ¿uß-¿u¨ ¿uœ¿x:j¿xc ¿x¢¿x£¿x}¿x°¿x~¿xï¿`8¿q ¿Ñ¿î¿ó¿ï¿Ü·8¿ÜÚ ¿á¿á¿á¿á¿å‹A¿åÌ ¿ç	¿ç¿ç¿ç¿íÓA¿íˇ ¿ì¿ì+¿ì.¿ì,¿òe7¿òv ¿òà¿òò¿òõ¿òô¿ô∑¿ôæ ¿ô…¿ö√&¿ö€  ¿ú#¿ú* ¿ú7¿û,¿û3 ¿û@¿¶™¿¶π  ¿»†¿»Ø  ¿À(¿À0  ¿Õ¿Õ  ¿ŒÎ¿ŒÛ  ¿—s#¿—Ü  ¿‘∆¿‘  ¿‘”Äó¿öÇ√¿3Çu/// Whether the [RenderObject] owner of this configuration wants to own its
/// own [SemanticsNode].
///
/// When set to true semantic information associated with the [RenderObject]
/// owner of this configuration or any of its descendants will not leak into
/// parents. The [SemanticsNode] generated out of this configuration will
/// act as a boundary.
///
/// Whether descendants of the owning [RenderObject] can add their semantic
/// information to the [SemanticsNode] introduced by this configuration
/// is controlled by [explicitChildNodes].
///
/// This has to be true if [isMergingSemanticsOfDescendants] is also true.   ¿ÑÄÄ¿à  ¿õ
¿°   ¿QÄﬂ¿
Äß/// Whether this configuration is empty.
///
/// An empty configuration doesn't contain any semantic information that it
/// wants to contribute to the semantics tree.   ¿ât¿ë    ¿!ÀÑÌ¿&®Ñ¢/// The handler for [SemanticsAction.tap].
///
/// This is the semantic equivalent of a user briefly tapping the screen with
/// the finger without moving it. For example, a button should implement this
/// action.
///
/// VoiceOver users on iOS and TalkBack users on Android can trigger this
/// action by double-tapping the screen while an element is focused.
///
/// On Android prior to Android Oreo a double-tap on the screen while an
/// element with an [onTap] handler is focused will not call the registered
/// handler. Instead, Android will simulate a pointer down and up event at the
/// center of the focused element. Those pointer events will get dispatched
/// just like a regular tap with TalkBack disabled would: The events will get
/// processed by any [GestureDetector] listening for gestures in the center of
/// the focused element. Therefore, to ensure that [onTap] handlers work
/// properly on Android versions prior to Oreo, a [GestureDetector] with an
/// onTap handler should always be wrapping an element that defines a
/// semantic [onTap] handler. By default a [GestureDetector] will register its
/// own semantic [onTap] handler that follows this principle.   ¿&”q¿&◊  ¿&›¿&Ï   ¿'HÅ•¿(—Åf/// The handler for [SemanticsAction.longPress].
///
/// This is the semantic equivalent of a user pressing and holding the screen
/// with the finger for a few seconds without moving it.
///
/// VoiceOver users on iOS and TalkBack users on Android can trigger this
/// action by double-tapping the screen without lifting the finger after the
/// second tap.   ¿)ÄÉ¿)  ¿)¿)-   ¿)ïÇu¿+ÏÇ./// The handler for [SemanticsAction.scrollLeft].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from right to left. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping left with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided.   ¿,,ÄÜ¿,0  ¿,=¿,L   ¿,∂Å`¿-˛Å'/// The handler for [SemanticsAction.dismiss].
///
/// This is a request to dismiss the currently focused node.
///
/// TalkBack users on Android can trigger this action in the local context
/// menu, and VoiceOver users on iOS can trigger this action with a standard
/// gesture or menu option.   ¿.5}¿.9  ¿.C¿.R   ¿.∂Ç|¿1Ç3/// The handler for [SemanticsAction.scrollRight].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from left to right. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping right with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided.   ¿1UÄâ¿1Y  ¿1g¿1v   ¿1‚Çk¿43Ç(/// The handler for [SemanticsAction.scrollUp].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from bottom to top. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping up with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided.   ¿4mÄÄ¿4q  ¿4|¿4ã   ¿4ÒÇv¿7IÇ//// The handler for [SemanticsAction.scrollDown].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from top to bottom. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping down with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided.   ¿7âÄÜ¿7ç  ¿7ö¿7©   ¿8ÇV¿:OÇ/// The handler for [SemanticsAction.increase].
///
/// This is a request to increase the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// If [this.value] is set, [increasedValue] must also be provided and
/// [onIncrease] must ensure that [this.value] will be set to
/// [increasedValue].
///
/// VoiceOver users on iOS can trigger this action by swiping up with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume up button.   ¿:âÄÄ¿:ç  ¿:ò¿:ß   ¿;ÇZ¿=MÇ/// The handler for [SemanticsAction.decrease].
///
/// This is a request to decrease the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// If [this.value] is set, [decreasedValue] must also be provided and
/// [onDecrease] must ensure that [this.value] will be set to
/// [decreasedValue].
///
/// VoiceOver users on iOS can trigger this action by swiping down with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume down button.   ¿=áÄÄ¿=ã  ¿=ñ¿=•   ¿>Å¿?ÄÌ/// The handler for [SemanticsAction.copy].
///
/// This is a request to copy the current selection to the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example.   ¿?Et¿?I  ¿?P¿?_   ¿?ΩÅ-¿@⁄Ä¸/// The handler for [SemanticsAction.cut].
///
/// This is a request to cut the current selection and place it in the
/// clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example.   ¿Aq¿A	  ¿A¿A   ¿AzÅ ¿BÜÄÌ/// The handler for [SemanticsAction.paste].
///
/// This is a request to paste the current content of the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example.   ¿B∑w¿Bª  ¿B√¿B“   ¿C2ÅÎ¿D˚Å§/// The handler for [SemanticsAction.showOnScreen].
///
/// A request to fully show the semantics node on screen. For example, this
/// action might be send to a node in a scrollable list that is partially off
/// screen to bring it on screen.
///
/// For elements in a scrollable list the framework provides a default
/// implementation for this action and it is not advised to provide a
/// custom one via this setter.   ¿EAÄå¿EE  ¿ET¿Ec   ¿E—Åî¿G#Å,/// The handler for [SemanticsAction.moveCursorForwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field forward by one character.
///
/// TalkBack users can trigger this by pressing the volume up key while the
/// input focus is in a text field.   ¿GûÅ1¿G¢  ¿G¡¿G’   ¿H”Åö¿J)Å0/// The handler for [SemanticsAction.moveCursorBackwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one character.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field.   ¿JßÅ4¿J´  ¿JÀ¿Jﬂ   ¿KﬂÅÉ¿M*Å%/// The handler for [SemanticsAction.moveCursorForwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one word.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field.   ¿MñÅ'¿Mö  ¿M¥¿M»   ¿N¡ÅÜ¿PÅ&/// The handler for [SemanticsAction.moveCursorBackwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one word.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field.   ¿P|Å*¿PÄ  ¿Põ¿PØ   ¿Q™Å•¿S-Å[/// The handler for [SemanticsAction.setSelection].
///
/// This handler is invoked when the user either wants to change the currently
/// selected text in a text field or change the position of the cursor.
///
/// TalkBack users can trigger this handler by selecting "Move cursor to
/// beginning/end" or "Select all" from the local context menu.   ¿SzÅ˛¿S~  ¿Sç¿S£   ¿U|ÅL¿V∞Å/// The handler for [SemanticsAction.setText].
///
/// This handler is invoked when the user wants to replace the current text in
/// the text field with a new text.
///
/// Voice access users can trigger this handler by speaking "type <text>" to
/// their Android devices.   ¿VÈÅ¿VÌ  ¿V˜¿W   ¿W¯Éº¿[xÉK/// The handler for [SemanticsAction.didGainAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler gains
/// the accessibility focus. The accessibility focus is the
/// green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidLoseAccessibilityFocus], which is invoked when the accessibility
///    focus is removed from the node.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus.   ¿[ÂÄ≥¿[È  ¿\¿\   ¿\úÉÆ¿`É=/// The handler for [SemanticsAction.didLoseAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler
/// loses the accessibility focus. The accessibility focus is
/// the green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidGainAccessibilityFocus], which is invoked when the node gains
///    accessibility focus.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus.   ¿`{Ä≥¿`  ¿`õ¿`™   ¿a2ÇÁ¿c›Çj/// A delegate that decides how to handle [SemanticsConfiguration]s produced
/// in the widget subtree.
///
/// The [SemanticsConfiguration]s are produced by rendering objects in the
/// subtree and want to merge up to their parent. This delegate can decide
/// which of these should be merged together to form sibling SemanticsNodes and
/// which of them should be merged upwards into the parent SemanticsNode.
///
/// The input list of [SemanticsConfiguration]s can be empty if the rendering
/// object of this semantics configuration is a leaf node or child rendering
/// objects do not contribute to the semantics.   ¿dbÅ¿df  ¿dÇ+¿d©   ¿f*Çb¿hxÇ!/// Determines the position of this node among its siblings in the traversal
/// sort order.
///
/// This is used to describe the order in which the semantic node should be
/// traversed by the accessibility services on the platform (e.g. VoiceOver
/// on iOS and TalkBack on Android).
///
/// Whether this sort key has an effect on the [SemanticsNode] sort order is
/// subject to how this configuration is used. For example, the [absorb]
/// method may decide to not use this key when it combines multiple
/// [SemanticsConfiguration] objects.   ¿h≠y¿h±  ¿hπ¿hÃ   ¿i*Åî¿jûÅ^/// The index of this node within the parent's list of semantic children.
///
/// This includes all semantic nodes, not just those currently in the
/// child list. For example, if a scrollable has five children but the first
/// two are not visible (and thus not included in the list of children), then
/// the index of the last node will still be 4.   ¿jÿ]¿j‹  ¿jÍ
¿j   ¿k9Ä⁄¿kÌÄ¢/// The total number of scrollable children that contribute to semantics.
///
/// If the number of children are unknown or unbounded, this value will be
/// null.   ¿l0Äú¿l4  ¿lE
¿lK   ¿l–ÄÄ¿m4V/// The index of the first visible scrollable child that contributes to
/// semantics.   ¿mhÄç¿ml  ¿mx
¿m~   ¿m˘Äí¿nib/// The id of the platform view, whose semantics nodes will be added as
/// children to this node.   ¿n¶Äñ¿n™  ¿nπ
¿nø   ¿o@Å{¿pôÅ?/// The maximum number of characters that can be entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [isTextField] is true. Defaults to null,
/// which means no limit is imposed on the text field.   ¿p÷Äñ¿p⁄  ¿pÈ
¿pÔ   ¿qpÅk¿r±Å'/// The current number of characters that have been entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [isTextField] is true. Must be set when
/// [maxValueLength] is set.   ¿r˙Ä¢¿r˛  ¿s
¿s   ¿s†Ç¿u`Å¶/// Whether the semantic information provided by the owning [RenderObject] and
/// all of its descendants should be treated as one logical entity.
///
/// If set to true, the descendants of the owning [RenderObject]'s
/// [SemanticsNode] will merge their semantic information into the
/// [SemanticsNode] representing the owning [RenderObject].
///
/// Setting this to true requires that [isSemanticBoundary] is also true.   ¿uÿÄ°¿u‹  ¿u¸
¿v   ¿v}Å∫¿xÅN/// The handlers for each supported [CustomSemanticsAction].
///
/// Whenever a custom accessibility action is added to a node, the action
/// [SemanticsAction.customAction] is automatically added. A handler is
/// created which uses the passed argument to lookup the custom action
/// handler from this map and invoke it, if present.   ¿x®Å¿x¨  ¿x√.¿xÌ   ¿zÙÅW¿|*Å/// A textual description of the owning [RenderObject].
///
/// Setting this attribute will override the [attributedLabel].
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [attributedLabel], which is the [AttributedString] of this property.   ¿|Nk¿|R  ¿|X¿|`   ¿|ΩÇ†¿9ÇJ/// A textual description of the owning [RenderObject] in [AttributedString]
/// format.
///
/// On iOS this is used for the `accessibilityAttributedLabel` property
/// defined in the `UIAccessibility` Protocol. On Android it is concatenated
/// together with [attributedValue] and [attributedHint] in the following
/// order: [attributedValue], [attributedLabel], [attributedHint]. The
/// concatenated value is then used as the `Text` description.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [label], which is the raw text of this property.   ¿úÄÅ¿†  ¿∞ ¿¬   ¿Ä!Çï¿ÇïÇN/// A textual description for the current value of the owning [RenderObject].
///
/// Setting this attribute will override the [attributedValue].
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [attributedValue], which is the [AttributedString] of this property.
///  * [increasedValue] and [attributedIncreasedValue], which describe what
///    [value] will be after performing [SemanticsAction.increase].
///  * [decreasedValue] and [attributedDecreasedValue], which describe what
///    [value] will be after performing [SemanticsAction.decrease].   ¿Çπk¿ÇΩ  ¿Ç√¿ÇÀ   ¿É(É∂¿Ü∫ÉX/// A textual description for the current value of the owning [RenderObject]
/// in [AttributedString] format.
///
/// On iOS this is used for the `accessibilityAttributedValue` property
/// defined in the `UIAccessibility` Protocol. On Android it is concatenated
/// together with [attributedLabel] and [attributedHint] in the following
/// order: [attributedValue], [attributedLabel], [attributedHint]. The
/// concatenated value is then used as the `Text` description.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [value], which is the raw text of this property.
///  * [attributedIncreasedValue], which describes what [value] will be after
///    performing [SemanticsAction.increase].
///  * [attributedDecreasedValue], which describes what [value] will be after
///    performing [SemanticsAction.decrease].   ¿áÄÅ¿á!  ¿á1 ¿áC   ¿á¢Çn¿â›Ç/// The value that [value] will have after performing a
/// [SemanticsAction.increase] action.
///
/// Setting this attribute will override the [attributedIncreasedValue].
///
/// One of the [attributedIncreasedValue] or [increasedValue] must be set if
/// a handler for [SemanticsAction.increase] is provided and one of the
/// [value] or [attributedValue] is set.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [attributedIncreasedValue], which is the [AttributedString] of this property.   ¿äÄè¿ä  ¿ä&¿ä.   ¿ä¶Ç3¿å£Åœ/// The value that [value] will have after performing a
/// [SemanticsAction.increase] action in [AttributedString] format.
///
/// One of the [attributedIncreasedValue] or [increasedValue] must be set if
/// a handler for [SemanticsAction.increase] is provided and one of the
/// [value] or [attributedValue] is set.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [increasedValue], which is the raw text of this property.   ¿ç!Ä•¿ç%  ¿ç>)¿çP   ¿ç ÇX¿èÔÇ/// The value that [value] will have after performing a
/// [SemanticsAction.decrease] action.
///
/// Setting this attribute will override the [attributedDecreasedValue].
///
/// One of the [attributedDecreasedValue] or [decreasedValue] must be set if
/// a handler for [SemanticsAction.decrease] is provided and one of the
/// [value] or [attributedValue] is set.
///
/// The reading direction is given by [textDirection].
///
///  * [attributedDecreasedValue], which is the [AttributedString] of this property.   ¿ê%Äè¿ê)  ¿ê8¿ê@   ¿ê∏Ç3¿íµÅœ/// The value that [value] will have after performing a
/// [SemanticsAction.decrease] action in [AttributedString] format.
///
/// One of the [attributedDecreasedValue] or [decreasedValue] must be set if
/// a handler for [SemanticsAction.decrease] is provided and one of the
/// [value] or [attributedValue] is set.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [decreasedValue], which is the raw text of this property.   ¿ì3Ä•¿ì7  ¿ìP)¿ìb   ¿ì‹Åg¿ï$Å*/// A brief description of the result of performing an action on this node.
///
/// Setting this attribute will override the [attributedHint].
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [attributedHint], which is the [AttributedString] of this property.   ¿ïFg¿ïJ  ¿ïO¿ïW   ¿ï±Ç±¿ò@Ç]/// A brief description of the result of performing an action on this node in
/// [AttributedString] format.
///
/// On iOS this is used for the `accessibilityAttributedHint` property
/// defined in the `UIAccessibility` Protocol. On Android it is concatenated
/// together with [attributedLabel] and [attributedValue] in the following
/// order: [attributedValue], [attributedLabel], [attributedHint]. The
/// concatenated value is then used as the `Text` description.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [hint], which is the raw text of this property.   ¿ò†}¿ò§  ¿ò≥¿ò≈   ¿ô!Äì¿ô†m/// A textual description of the widget's tooltip.
///
/// The reading direction is given by [textDirection].   ¿ôœW¿ô”  ¿ô€¿ô„   ¿ö*Äñ¿ö†U/// Provides hint values which override the default hints on supported
/// platforms.   ¿öÌÄù¿öÒ  ¿öˇ¿õ   ¿õéÄí¿új/// The elevation in z-direction at which the owning [RenderObject] is
/// located relative to its parent.   ¿ú>Ä§¿úB  ¿úL¿úT   ¿úÊÅC¿ûÅ/// The extend that the owning [RenderObject] occupies in z-direction starting
/// at [elevation].
///
/// It's extremely rare to set this value directly. Instead, it is calculated
/// implicitly when other [SemanticsConfiguration]s are merged into this one
/// via [absorb].   ¿ûGÄ§¿ûK  ¿ûU¿û]   ¿ûÔÅ¿ü…Äƒ/// Whether the semantics node is the root of a subtree for which values
/// should be announced.
///
/// See also:
///
///  * [SemanticsFlag.scopesRoute], for a full description of route scoping.   ¿üˇQ¿†  ¿†
¿†   ¿†TÄ„¿°Äû/// Whether the semantics node contains the label of a route.
///
/// See also:
///
///  * [SemanticsFlag.namesRoute], for a full description of route naming.   ¿°:O¿°>  ¿°I
¿°O   ¿°çj¿°Ã3/// Whether the semantics node represents an image.   ¿°˙I¿°˛  ¿¢
¿¢   ¿¢GÉa¿•uÉ/// Whether the semantics node is a live region.
///
/// A live region indicates that updates to semantics node are important.
/// Platforms may use this information to make polite announcements to the
/// user to inform them of updates to this node.
///
/// An example of a live region is a [SnackBar] widget. On Android and iOS,
/// live region causes a polite announcement to be generated automatically,
/// even if the widget does not have accessibility focus. This announcement
/// may not be spoken if the OS accessibility services are already
/// announcing something else, such as reading the label of a focused widget
/// or providing a system announcement.
///
/// See also:
///
///  * [SemanticsFlag.isLiveRegion], the semantics flag that this setting controls.   ¿•´Q¿•Ø  ¿•∫
¿•¿   ¿¶ Äß¿¶áo/// The reading direction for the text in [label], [value], [hint],
/// [increasedValue], and [decreasedValue].   ¿¶Àw¿¶œ  ¿¶›¿¶Ì   ¿ßFÅµ¿® Ån/// Whether the owning [RenderObject] is selected (true) or not (false).
///
/// This is different from having accessibility focus. The element that is
/// accessibility focused may or may not be selected; e.g. a [ListTile] can have
/// accessibility focus but have its [ListTile.selected] property set to false,
/// in which case it will not be flagged as selected.   ¿®˛O¿©  ¿©
¿©   ¿©QÉ<¿¨-Ç≥/// Whether the owning [RenderObject] is currently enabled.
///
/// A disabled object does not respond to user interactions. Only objects that
/// usually respond to user interactions, but which currently do not (like a
/// disabled button) should be marked as disabled.
///
/// The setter should not be called for objects (like static text) that never
/// respond to user interactions.
///
/// The getter will return null if the owning [RenderObject] doesn't support
/// the concept of being enabled/disabled.
///
/// This property does not control whether semantics are enabled. If you wish to
/// disable semantics for a particular widget, you should use an [ExcludeSemantics]
/// widget.   ¿¨êÄÇ¿¨î  ¿¨û¿¨•   ¿≠Ç&¿Æ‹Å©/// If this node has Boolean state that can be controlled by the user, whether
/// that state is checked or unchecked, corresponding to true and false,
/// respectively.
///
/// Do not call the setter for this field if the owning [RenderObject] doesn't
/// have checked/unchecked state that can be controlled by the user.
///
/// The getter returns null if the owning [RenderObject] does not have
/// checked/unchecked state.   ¿Ø?Ä∫¿ØC  ¿ØM¿ØT   ¿Ø˝Åˆ¿±ÉÅk/// If this node has tristate that can be controlled by the user, whether
/// that state is in its mixed state.
///
/// Do not call the setter for this field if the owning [RenderObject] doesn't
/// have checked/unchecked state that can be controlled by the user.
///
/// The getter returns null if the owning [RenderObject] does not have
/// mixed checked state.   ¿±ˆÄ¬¿±˙  ¿≤¿≤   ¿≤ºÅˇ¿¥[ÅÑ/// If this node has Boolean state that can be controlled by the user, whether
/// that state is on or off, corresponding to true and false, respectively.
///
/// Do not call the setter for this field if the owning [RenderObject] doesn't
/// have on/off state that can be controlled by the user.
///
/// The getter returns null if the owning [RenderObject] does not have
/// on/off state.   ¿¥æÄÇ¿¥¬  ¿¥Ã¿¥”   ¿µDÅ{¿∂nÅ/// Whether the owning RenderObject corresponds to UI that allows the user to
/// pick one of several mutually exclusive options.
///
/// For example, a [Radio] button is in a mutually exclusive group because
/// only one radio button in that group can be marked as [isChecked].   ¿∂¬o¿∂∆  ¿∂·
¿∂Á   ¿∑5~¿∑Ä?/// Whether the owning [RenderObject] can hold the input focus.   ¿∑∂Q¿∑∫  ¿∑∆
¿∑Ã   ¿∏ÄÅ¿∏]F/// Whether the owning [RenderObject] currently holds the input focus.   ¿∏èM¿∏ì  ¿∏ù
¿∏£   ¿∏‡ÄÅ¿π4H/// Whether the owning [RenderObject] is a button (true) or not (false).   ¿πdK¿πh  ¿πq
¿πw   ¿π≥{¿∫F/// Whether the owning [RenderObject] is a link (true) or not (false).   ¿∫1G¿∫5  ¿∫<
¿∫B   ¿∫|ÄÅ¿∫–H/// Whether the owning [RenderObject] is a header (true) or not (false).   ¿ª K¿ª  ¿ª
¿ª   ¿ªOÄÅ¿ª£H/// Whether the owning [RenderObject] is a slider (true) or not (false).   ¿ª”K¿ª◊  ¿ª‡
¿ªÊ   ¿º"Äï¿ºÄE/// Whether the owning [RenderObject] is a keyboard key (true) or not   ¿º∫U¿ºæ  ¿ºÃ
¿º“   ¿ΩÉn¿¿TÉ/// Whether the owning [RenderObject] is considered hidden.
///
/// Hidden elements are currently not visible on screen. They may be covered
/// by other elements or positioned outside of the visible area of a viewport.
///
/// Hidden elements cannot gain accessibility focus though regular touch. The
/// only way they can be focused is by moving the focus to them via linear
/// navigation.
///
/// Platforms are free to completely ignore hidden elements and new platforms
/// are encouraged to do so.
///
/// Instead of marking an element as hidden it should usually be excluded from
/// the semantics tree altogether. Hidden elements are only included in the
/// semantics tree to work around platform limitations and they are mainly
/// used to implement accessibility scrolling on iOS.   ¿¿ÑK¿¿à  ¿¿ë
¿¿ó   ¿¿”u¿¡6/// Whether the owning [RenderObject] is a text field.   ¿¡KQ¿¡O  ¿¡[
¿¡a   ¿¡†Ä®¿¬g/// Whether the owning [RenderObject] is read only.
///
/// Only applicable when [isTextField] is true.   ¿¬KO¿¬O  ¿¬Z
¿¬`   ¿¬ûÅT¿√¡Å/// Whether [this.value] should be obscured.
///
/// This option is usually set in combination with [isTextField] to indicate
/// that the text field contains a password (or other sensitive information).
/// Doing so instructs screen readers to not read out [this.value].   ¿√ıO¿√˘  ¿ƒ
¿ƒ
   ¿ƒHÄı¿≈
Ä∞/// Whether the text field is multiline.
///
/// This option is usually set in combination with [isTextField] to indicate
/// that the text field is configured to be multiline.   ¿≈@Q¿≈D  ¿≈P
¿≈V   ¿≈ïÅÈ¿«9Åå/// Whether the platform can scroll the semantics node when the user attempts
/// to move focus to an offscreen child.
///
/// For example, a [ListView] widget has implicit scrolling so that users can
/// easily move to the next visible set of children. A [TabBar] widget does
/// not have implicit scrolling, so that users can navigate into the tab
/// body when reaching the end of the tab bar.   ¿«Åc¿«Ö  ¿«ö
¿«†   ¿«ËÄµ¿»}}/// The currently selected text (or the position of the cursor) within
/// [this.value] if this node represents a text field.   ¿»¡ÄÇ¿»≈  ¿»”¿»„   ¿…GÅﬁ¿ÀÅõ/// Indicates the current scrolling position in logical pixels if the node is
/// scrollable.
///
/// The properties [scrollExtentMin] and [scrollExtentMax] indicate the valid
/// in-range values for this property. The value for [scrollPosition] may
/// (temporarily) be outside that range, e.g. during an overscroll.
///
/// See also:
///
///  * [ScrollPosition.pixels], from where this value is usually taken.   ¿ÀC}¿ÀG  ¿ÀV¿À_   ¿ÀƒÅA¿Ã·Å /// Indicates the maximum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.maxScrollExtent], from where this value is usually taken.   ¿Õ$¿Õ(  ¿Õ8¿ÕA   ¿ÕßÅA¿ŒƒÅ /// Indicates the minimum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.minScrollExtent], from where this value is usually taken.   ¿œ¿œ  ¿œ¿œ$   ¿œïÅ¿–åÄÃ/// The set of tags that this configuration wants to add to all child
/// [SemanticsNode]s.
///
/// See also:
///
///  * [addTagForChildren] to add a tag and for more information about their
///    usage.   ¿Å;¿¨ÄÉ/// Adds an `action` to the semantics tree.
///
/// The provided `handler` is called to respond to the user triggered
/// `action`. ¿∑¿»  ¿œ¿Á   ¿ ZÅm¿! Ä∂/// Adds an `action` to the semantics tree, whose `handler` does not expect
/// any arguments.
///
/// The provided `handler` is called to respond to the user triggered
/// `action`. ¿!7¿!H  ¿!O¿!]   ¿erÄ¥¿eÈZ/// Returns the action handler registered for [action] or null if none was
/// registered. ¿e˙¿f   ¿y¿Å0¿y≈  ¿yﬁ¿yÁ   ¿–¥Äª¿— b/// Whether this configuration will tag the child semantics nodes with a
/// given [SemanticsTag]. ¿—1¿—?   ¿—õÉ¿‘/Çp/// Specifies a [SemanticsTag] that this configuration wants to apply to all
/// child [SemanticsNode]s.
///
/// The tag is added to all [SemanticsNode] that pass through the
/// [RenderObject] owning this configuration while looking to be attached to a
/// parent [SemanticsNode].
///
/// Tags are used to communicate to a parent [SemanticsNode] that a child
/// [SemanticsNode] was passed through a particular [RenderObject]. The parent
/// can use this information to determine the shape of the semantics tree.
///
/// See also:
///
///  * [RenderViewport.excludeFromScrolling] for an example of
///    how tags are used. ¿‘A¿‘O   ¿‘ÿÄÆ¿‘›  ¿‘Ê¿‘ı  ¿‘˙
¿’    ¿’ä@¿’è  ¿’ò¿’ß   ¿’ÙÉÕ¿÷ÒÄÌ/// Whether this configuration is compatible with the provided `other`
/// configuration.
///
/// Two configurations are said to be compatible if they can be added to the
/// same [SemanticsNode] without losing any semantics information. ¿◊¿◊   ¿Ÿ≈ä…¿€˘Ç/// Absorb the semantic information from `child` into this configuration.
///
/// This adds the semantic information of both configurations and saves the
/// result in this configuration.
///
/// The [RenderObject] owning the `child` configuration must be a descendant
/// of the [RenderObject] that owns this configuration.
///
/// Only configurations that have [explicitChildNodes] set to false can
/// absorb other configurations and it is recommended to only absorb compatible
/// configurations as determined by [isCompatibleWith]. ¿‹ ¿‹   ¿‰íÜ,¿‰‹0/// Returns an exact copy of this configuration.    ¿ùä^¿ÛMÇ†/// Base class for all sort keys for [SemanticsProperties.sortKey] accessibility
/// traversal order sorting.
///
/// Sort keys are sorted by [name], then by the comparison that the subclass
/// implements. If [SemanticsProperties.sortKey] is specified, sort keys within
/// the same semantic group must all be of the same type.
///
/// Keys with no [name] are compared to other keys with no [name], and will
/// be traversed before those with a [name].
///
/// If no sort key is applied to a semantics node, then it will be ordered using
/// a platform dependent default algorithm.
///
/// See also:
///
///  * [OrdinalSortKey] for a sort key that sorts using an ordinal. ¿ÛûÄΩ ¿Ù=¿ÙMÄî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.¿ÙO	¿ÙU   ¿Ù_Å?¿ıöÅ/// An optional name that will group this sort key with other sort keys of the
/// same [name].
///
/// Sort keys must have the same `runtimeType` when compared.
///
/// Keys with no [name] are compared to other keys with no [name], and will
/// be traversed before those with a [name].  ¿ı£Ç∂¿ı≥  ¿ıΩ¿ıœ  ¿ı£¿ı§¿¯]Å’¿˙ÅÖ/// The implementation of [compareTo].
///
/// The argument is guaranteed to be of the same type as this object and have
/// the same [name].
///
/// The method should return a negative number if this object comes earlier in
/// the sort order than the argument; and a positive number if it comes later
/// in the sort order. Returning zero causes the system to use default sort
/// order. ¿˙ ¿˙,  ¿˘ı¿˘ˆ¿˙6Ä√¿˙G  ¿˙[&¿˙x  ¿˙6¿˙7 ¿˙˝áq¿˛SÉO/// A [SemanticsSortKey] that sorts based on the `double` value it is
/// given.
///
/// The [OrdinalSortKey] compares itself with other [OrdinalSortKey]s
/// to sort based on the order it is given.
///
/// [OrdinalSortKey]s are sorted by the optional [name], then by their [order].
/// If [SemanticsProperties.sortKey] is a [OrdinalSortKey], then all the other
/// specified sort keys in the same semantics group must also be
/// [OrdinalSortKey]s.
///
/// Keys with no [name] are compared to other keys with no [name], and will
/// be traversed before those with a [name].
///
/// The ordinal value [order] is typically a whole number, though it can be
/// fractional, e.g. in order to fit between two other consecutive whole
/// numbers. The value must be finite (it cannot be [double.nan],
/// [double.infinity], or [double.negativeInfinity]). ¿˛Å& ¿ˇ¿ˇ*Äê/// Creates a const semantics sort key that uses a [double] as its key value.
///
/// The [order] must be a finite number, and must not be null.¿ˇ0
¿ˇ6  ¿ˇB
¿ˇI  ¿ˇU¿ˇ[¿ˇ{¿ˇb¿ˇ\¿ˇd¿ˇj¿ˇk¿ˇÖ¿ˇã¿ˇ£¿ˇí¿ˇå¿ˇî¿ˇö¿ˇõ¿ˇ©Åa¿ÅB/// Determines the placement of this key in a sequence of keys that defines
/// the order in which this node is traversed by the platform's accessibility
/// services.
///
/// Lower values will be traversed first. Keys with the same [name] will be
/// grouped together and sorted by name first, and then sorted by [order].  ¿Äî¿  ¿)¿9  ¿¿¿ßÄ≈¿∏  ¿Ã&¿È  ¿ß¿®  ¿Í¬ÇJ¿Î'_/// Used by [debugDumpSemanticsTree] to specify the order in which child nodes
/// are printed.  ¿ÎCÅ¿ÏEÄ˜/// Print nodes in inverse hit test order.
///
/// In inverse hit test order, the last child of a [SemanticsNode] will be
/// asked first if it wants to respond to a user's interaction, followed by
/// the second last, etc. until a taker is found. ¿ÏXÄ±¿Ï˚Äö/// Print nodes in semantic traversal order.
///
/// This is the order in which a user would navigate the UI using the "next"
/// and "previous" gestures.      ¿ ˝¥Ä©¿ ˛\/// In tests use this function to reset the counter used to generate
/// [SemanticsNode.id].   ¿‰ïÅC¿‰›@/// Converts `point` to the `node`'s parent's coordinate system. ¿‰˜¿Â  ¿Â¿Â   ¿Â⁄á¿ÁÓÅˇ/// Sorts `children` using the default sorting algorithm, and returns them as a
/// new list.
///
/// The algorithm first breaks up children into groups such that no two nodes
/// from different groups overlap vertically. These groups are sorted vertically
/// according to their [_SemanticsSortGroup.startOffset].
///
/// Within each group, the nodes are sorted using
/// [_SemanticsSortGroup.sortedWithinVerticalGroup].
///
/// For an illustration of the algorithm see http://bit.ly/flutter-default-traversal. ¿Ë¿Ë  ¿Ë$¿Ë3   ¿ÌÉç¿Ì  ¿Ì;.¿ÌV  ¿Ìm/¿Ìà  ¿Ì†)¿Ìπ  ¿ÌÕ*¿ÌÊ    ÑJÄ„ÑÙÄ°/// Signature for a function that is called for each [SemanticsNode].
///
/// Return false to stop visiting nodes.
///
/// Used by [SemanticsNode.visitChildren].  ÖÖ(   Ö/ÅÜÄ€/// Signature for [SemanticsAction]s that move the cursor.
///
/// If `extendSelection` is set to true the cursor movement should extend the
/// current selection or (if nothing is currently selected) start a selection.  Ü5Ü;   ÜMÄ–Ü‡Ää/// Signature for the [SemanticsAction.setSelection] handlers to change the
/// text selection (or re-position the cursor) to `selection`.  áá   áÄ§áóo/// Signature for the [SemanticsAction.setText] handlers to replace the
/// current text with the input `text`.  á∂áæ   á≈Ä∞à@r/// Signature for a handler of a [SemanticsAction].
///
/// Returned by [SemanticsConfiguration.getActionHandler].  àgàp   àwÄ‘âÄà/// Signature for a function that receives a semantics update and returns no result.
///
/// Used by [SemanticsOwner.onSemanticsUpdate].  â0âD   âMÇƒã†ÇJ/// Signature for the [SemanticsConfiguration.childConfigurationsDelegate].
///
/// The input list contains all [SemanticsConfiguration]s that rendering
/// children want to merge upward. One can tag a render child with a
/// [SemanticsTag] and look up its [SemanticsConfiguration]s through
/// [SemanticsConfiguration.tagsChildrenWith].
///
/// The return value is the arrangement of these configs, including which
/// configs continue to merge upward and which configs form sibling merge group.
///
/// Use [ChildSemanticsConfigurationsResultBuilder] to generate the return
/// value.  ãÛ     åÄÜå åhå6åEåFå_å`åjåyåzåìåî  ìá <ÄÜÄ§Ä•Ä¡ÄŸÅ=Å>ÅkÅïÅ·Ç	Ç;Ç<ÇiÇàÇâÇ˚Ç¸ÉõÉ÷ÑÑÑIÑJÑêÑîÑΩÑ¡ÑÏÖ.Ö/ÖjÖnÖºÜÜLÜMÜôÜÿááágáèáƒá≈á˘á˝à8àvàwàÃà–â âLâMâôâùâÊä+äpäüä£äÌã>ãBãçãòåååfåõåúåΩå¡ç çMçôçùçÎé8éFéJéòéÊè4èCèXèxè~èŒêênêê†ê°êﬁê‰ë*ë?ë@ëLëòëöëõë÷ëıë˘íFítíÀí‹í‡ì)ìTì£ì§ìÙîîîgî±îÛï!ï"ïqïõï°ïÍñ#ñoñ∏ñæóó_ó¨ó˝òJòÉò¬òƒò≈ôô#ô'ô`ôùôÏö&öXöïöƒö≈õõtõuõ≈õ—õ◊úú\ú©ú™úÌùùù_ù∑û!û"ûpûüûÆü ü}üçü∞ü˝†J†n†y†Å†î†û†Ó†Ú†Ù†ı°%°)°k°≥°˚¢C¢í¢·¢Ô¢Û£B£v£z£…£‹£‡§(§S§W§e§i§∫§≈§„•••N•ä•••∏•Õ•Œ¶¶,¶2¶i¶€¶ıß	ß
ßHß_ß`ßúß≤ß≥ßÌ®®®®S®T®`®É®Ø®√®…®Û©©1©T©X©Y©e©{©ÿ©‹©›™&™?™Y™≥´	´
´9´t´î´Æ´»´Â¨¨¨¨#¨$¨S¨á¨†¨§¨¶¨ß¨ﬂ¨Í≠≠&≠,≠w≠á≠ç≠◊≠Ê≠˙ÆÆ>ÆvÆâÆ«ÆŸØØAØâØñØ†ØµØ¡Ø¬Ø˙∞∞∞<∞B∞Ñ∞Æ∞Ø∞Ú∞¯±I±í± ±‰±¯±˛≤≤1≤7≤8≤]≤ë≤Á≥≥6≥x≥¶≥◊¥¥¥b¥ê¥ò¥û¥·¥Â¥Êµ2µ>µaµçµ≤µ‘∂∂∂∂+∂b∂c∂o∂Ö∂Ê∂Í∂Ï∂Ì∑7∑u∑ƒ∏
∏∏M∏i∏Ä∏ì∏ß∏«∏ﬂ∏ππππ[πñπúπ¡π›πﬁπÍ∫]∫^∫j∫±∫ ∫ﬂ∫Âªª-ªaªúª«ªÕªÚº
ºº}ºÅºÉºÑººº¿ΩΩ]Ω≠ΩøΩ√æææ6æ]æcæ±æ∑øøø-øHøkøéø∫øÊ¿ @¿ @#¿ @D¿ @\¿ @y¿ @ñ¿ @∑¿ @÷¿ @˙¿ A¿ A?¿ Ab¿ AÑ¿ A¶¿ AÃ¿ A€¿ AÔ¿ B¿ Bï¿ C6¿ C◊¿ Dì¿ EO¿ EÌ¿ EÓ¿ F-¿ F@¿ FA¿ FÇ¿ Fó¿ Fò¿ F◊¿ F›¿ G¿ G¿ GV¿ GÑ¿ GÖ¿ G∆¿ GÁ¿ GÌ¿ H&¿ H,¿ He¿ Hè¿ Hê¿ Hœ¿ H’¿ I¿ I¿ IN¿ I|¿ I}¿ Iæ¿ Iﬂ¿ IÂ¿ J¿ J$¿ J]¿ Já¿ Jà¿ Jƒ¿ JÌ¿ JÛ¿ K,¿ K2¿ Ku¿ Kµ¿ K∂¿ KÚ¿ L8¿ L>¿ Lw¿ L}¿ Lø¿ LÚ¿ LÛ¿ M/¿ MX¿ M^¿ Mó¿ Mù¿ M‡¿ N ¿ N!¿ N]¿ N£¿ N©¿ N‚¿ NË¿ O*¿ O]¿ O^¿ O¨¿ O≤¿ OÎ¿ OÒ¿ P*¿ PV¿ PW¿ P§¿ P»¿ PŒ¿ Q¿ Q¿ QE¿ Qn¿ Qo¿ Q§¿ Q™¿ Q„¿ Q˚¿ Q¸¿ R:¿ Rp¿ Rñ¿ Ró¿ RË¿ S¿ S:¿ S;¿ Sá¿ Sç¿ S⁄¿ SÊ¿ T¿ T¿ TL¿ Tf¿ Tg¿ T∑¿ T…¿ Tœ¿ U¿ Uk¿ U±¿ U∑¿ U«¿ UÕ¿ V¿ V7¿ V8¿ Vá¿ Vô¿ Vü¿ V⁄¿ V‡¿ V¿ Vˆ¿ WI¿ Wj¿ Wk¿ W∫¿ WÃ¿ W“¿ X¿ X¿ X#¿ X)¿ X|¿ Xù¿ Xû¿ XË¿ Y¿ Y¿ YY¿ Y£¿ Y∏¿ Yæ¿ YŒ¿ Y‘¿ Z¿ ZN¿ Zk¿ Zl¿ Z∏¿ Z ¿ Z–¿ [¿ [1¿ [7¿ [á¿ […¿ [Ê¿ [Á¿ \6¿ \H¿ \N¿ \õ¿ \Ø¿ \µ¿ ]¿ ]1¿ ]R¿ ]S¿ ]í¿ ]•¿ ]¶¿ ]‚¿ ^¿ ^¿ ^^¿ ^d¿ ^´¿ ^¸¿ _¿ _'¿ _(¿ _p¿ _v¿ _Ü¿ _å¿ _‹¿ _˛¿ `¿ `¿ `_¿ `e¿ `u¿ `{¿ `«¿ `·¿ `‚¿ a-¿ aL¿ aR¿ aÖ¿ aã¿ aõ¿ a°¿ aÈ¿ b¿ b¿ bF¿ bá¿ bà¿ bª¿ c¿ c¿ c¿ cY¿ cZ¿ cf¿ c´¿ c÷¿ d$¿ dà¿ d◊¿ e&¿ eW¿ eö¿ e≈¿ e‹¿ e„¿ f4¿ få¿ fù¿ fÙ¿ ga¿ gb¿ gë¿ gŒ¿ gı¿ h
¿ h¿ hd¿ h¨¿ hÙ¿ iN¿ i®¿ iÓ¿ j8¿ jù¿ j»¿ k4¿ k:¿ kë¿ kË¿ lG¿ l†¿ lÒ¿ mM¿ mß¿ n¿ n¿ n¿ n¿ n7¿ nY¿ ny¿ nù¿ n—¿ o¿ oK¿ oë¿ o√¿ oÁ¿ p¿ p5¿ p\¿ pí¿ pæ¿ pÓ¿ q ¿ qT¿ qà¿ q∫¿ qÏ¿ r&¿ rN¿ rv¿ rû¿ rˆ¿ r˙¿ r˚¿ s¿ s*¿ s5¿ sB¿ sW¿ sl¿ sä¿ s®¿ sº¿ s…¿ s‹¿ sÊ¿ s¿ t¿ t¿ t*¿ t>¿ tS¿ th¿ t|¿ tê¿ t°¿ tª¿ tÃ¿ t›¿ tÓ¿ uI¿ uP¿ uU¿ uV¿ uõ¿ uƒ¿ u◊¿ u›¿ v¿ v/¿ vE¿ vM¿ v{¿ vû¿ v∂¿ væ¿ v»¿ v€¿ v·¿ vÛ¿ v˜¿ v˘¿ v˙¿ wI¿ wj¿ wz¿ wî¿ wÆ¿ wÃ¿ w“¿ w”¿ wˇ¿ x ¿ x¿ xj¿ xl¿ xm¿ x¥¿ x√¿ x«¿ xÙ¿ xˇ¿ y9¿ yc¿ yÑ¿ yò¿ y≤¿ y“¿ y¯¿ y˘¿ z¿ z%¿ zW¿ z]¿ z§¿ z—¿ z◊¿ zˇ¿ {¿ {5¿ {6¿ {c¿ {i¿ {õ¿ {°¿ {Î¿ |%¿ |+¿ |]¿ |y¿ |ö¿ |õ¿ |Õ¿ }¿ }¿ }!¿ }`¿ }a¿ }m¿ }ê¿ }º¿ }–¿ }÷¿ ~¿ ~)¿ ~^¿ ~b¿ ~c¿ ~o¿ ~¥¿ ~ﬂ¿ /¿ ã¿ è¿ ë¿ í¿ ·¿ ˆ¿ ˙¿ ÄJ¿ Ä^¿ Äi¿ Ä†¿ Ä≈¿ Ä„¿ Äı¿ Å¿ Å¿ Å*¿ Å<¿ ÅM¿ Å\¿ Åm¿ ÅÅ¿ Åí¿ Å®¿ Åª¿ Åœ¿ Å·¿ Ç¿ Ç¿ Ç(¿ Ç<¿ ÇR¿ Çg¿ Çw¿ Çå¿ Ç•¿ Ç¬¿ Ç“¿ ÇÏ¿ Ç¸¿ É¿ É/¿ ÉR¿ Ék¿ Éé¿ Éù¿ ÉØ¿ É»¿ É‡¿ É¯¿ Ñ
¿ Ñ#¿ Ñ3¿ ÑI¿ Ñ`¿ Ñx¿ Ñç¿ Ñ§¿ Ñπ¿ ÑŒ¿ Ñﬂ¿ ÑÔ¿ Ö¿ Ö*¿ ÖT¿ Öx¿ Öù¿ Ö∂¿ Ö ¿ Ö¿ Ü¿ Ü*¿ ÜK¿ Üø¿ á3¿ áÀ¿ àc¿ à”¿ à‘¿ â$¿ âK¿ âQ¿ âü¿ âÍ¿ ä¿ ä3¿ ä4¿ äy¿ äæ¿ äŒ¿ ä‘¿ ã¿ ãX¿ ãz¿ ãÄ¿ ãΩ¿ ã‘¿ ã’¿ å¿ å^¿ åò¿ åû¿ å‹¿ ç¿ çQ¿ ça¿ çg¿ ç¶¿ çª¿ çº¿ é¿ éG¿ éW¿ é]¿ éö¿ é±¿ é≤¿ è¿ èI¿ èO¿ èü¿ èƒ¿ è‹¿ è›¿ ê!¿ ê'¿ êt¿ êÜ¿ êú¿ êù¿ êﬂ¿ êÂ¿ ë5¿ ë¿ ëç¿ ë°¿ ë¢¿ ëÊ¿ ëÏ¿ í;¿ íâ¿ íÆ¿ íƒ¿ í≈¿ ì¿ ì¿ ì]¿ ìo¿ ìà¿ ìâ¿ ìÕ¿ ì”¿ î¿ î3¿ îI¿ îJ¿ îî¿ îØ¿ î∞¿ îÌ¿ îÛ¿ ï#¿ ï)¿ ïl¿ ïÑ¿ ïÖ¿ ï∆¿ ïÃ¿ ñ¿ ñ¿ ñk¿ ñµ¿ ó¿ óE¿ ó^¿ ó_¿ ó†¿ ó¶¿ ó˜¿ ò7¿ ò=¿ òè¿ òŸ¿ ô*¿ ôi¿ ôÄ¿ ôÅ¿ ôŒ¿ ô‘¿ ö$¿ öe¿ öç¿ öé¿ ö»¿ öŒ¿ õ¿ õn¿ õt¿ õƒ¿ ú¿ ú#¿ ú)¿ úy¿ úò¿ úû¿ úÔ¿ ù=¿ ùä¿ ù¬¿ ùÿ¿ ùŸ¿ û¿ û¿ ûc¿ û≥¿ û¯¿ ü¿ ü¿ ü_¿ ün¿ üt¿ üæ¿ ü¯¿ ü˛¿ †3¿ †L¿ †M¿ †ö¿ †»¿ †Œ¿ †ˇ¿ °M¿ °É¿ °â¿ °ô¿ °ü¿ °Î¿ ¢¿ ¢"¿ ¢#¿ ¢p¿ ¢v¿ ¢Ü¿ ¢å¿ ¢€¿ ¢ı¿ ¢ˆ¿ £/¿ £5¿ £E¿ £K¿ £ë¿ £¶¿ £ß¿ £Ô¿ £ı¿ §A¿ §é¿ §¡¿ §«¿ •¿ •c¿ •±¿ •ˆ¿ ¶E¿ ¶o¿ ¶u¿ ¶Ö¿ ¶ã¿ ¶‹¿ ß3¿ ßM¿ ßN¿ ßö¿ ß¨¿ ß≤¿ ßˇ¿ ®¿ ®¿ ®c¿ ®ú¿ ®π¿ ®∫¿ ©	¿ ©¿ ©!¿ ©n¿ ©Ç¿ ©à¿ ©—¿ ©¿ ™¿ ™¿ ™F¿ ™L¿ ™õ¿ ™‘¿ ™⁄¿ ´)¿ ´=¿ ´C¿ ´S¿ ´Y¿ ´™¿ ´Œ¿ ¨¿ ¨4¿ ¨5¿ ¨à¿ ¨é¿ ¨ÿ¿ ≠"¿ ≠(¿ ≠w¿ ≠ã¿ ≠ë¿ ≠°¿ ≠ß¿ ≠˜¿ Æ&¿ Æd¿ Æè¿ Æê¿ Æ—¿ Æ◊¿ Ø&¿ Ø_¿ Øe¿ Ø¥¿ Ø»¿ ØŒ¿ Øﬁ¿ Ø‰¿ ∞5¿ ∞Y¿ ∞®¿ ∞ø¿ ∞¿¿ ±¿ ±&¿ ±,¿ ±v¿ ±¿¿ ±∆¿ ≤¿ ≤)¿ ≤/¿ ≤?¿ ≤E¿ ≤ï¿ ≤ƒ¿ ≥¿ ≥-¿ ≥.¿ ≥t¿ ≥ø¿ ≥≈¿ ¥¿ ¥[¿ ¥s¿ ¥y¿ ¥≤¿ ¥Ó¿ ¥Ù¿ µ¿ µ
¿ µY¿ µà¿ µ÷¿ µÈ¿ ∂	¿ ∂
¿ ∂[¿ ∂®¿ ∂Æ¿ ∂ˇ¿ ∑I¿ ∑q¿ ∑w¿ ∑∞¿ ∑Ï¿ ∑Ú¿ ∏¿ ∏¿ ∏X¿ ∏ê¿ ∏◊¿ π¿ π¿ πR¿ πù¿ π£¿ πÓ¿ ∫9¿ ∫Q¿ ∫W¿ ∫ê¿ ∫Ã¿ ∫“¿ ∫‚¿ ∫Ë¿ ª7¿ ªf¿ ª¥¿ ª«¿ ªÁ¿ ªË¿ º9¿ ºÜ¿ ºå¿ º›¿ Ω'¿ ΩO¿ ΩU¿ Ωé¿ Ω÷¿ Ω‹¿ ΩÏ¿ ΩÚ¿ æB¿ æz¿ æ¡¿ æı¿ æˆ¿ øF¿ ø[¿ øa¿ øØ¿ øË¿ øÓ¿ ¿;¿ ¿O¿ ¿U¿ ¿e¿ ¿k¿ ¿ª¿ ¿ﬂ¿ ¡-¿ ¡C¿ ¡D¿ ¡ï¿ ¡»¿ ¡Œ¿ ¬¿ ¬a¿ ¬g¿ ¬¥¿ ¬»¿ ¬Œ¿ ¬ﬁ¿ ¬‰¿ √3¿ √b¿ √ü¿ √…¿ √ ¿ ƒ¿ ƒ¿ ƒ_¿ ƒô¿ ƒÃ¿ ƒ“¿ ≈¿ ≈^¿ ≈w¿ ≈x¿ ≈¡¿ ≈“¿ ≈ÿ¿ ∆$¿ ∆s¿ ∆™¿ ∆∞¿ ∆ˇ¿ «.¿ «/¿ «v¿ «ö¿ «†¿ «–¿ «ˆ¿ «˜¿ »F¿ »X¿ »^¿ »¨¿ »˙¿ …!¿ …D¿ …E¿ …ç¿ …ì¿ …ﬁ¿  -¿  N¿  T¿  û¿  Ô¿ À8¿ À>¿ ÀN¿ ÀT¿ À§¿ À¬¿ ÀË¿ ÀÈ¿ Ã¿ Ã¿ Ãl¿ Ãº¿ Ã ¿ Ã–¿ Õ¿ Õe¿ Õk¿ Õ∏¿ Œ¿ ŒX¿ Œí¿ ŒØ¿ Œ∞¿ Œ„¿ ŒÈ¿ œ9¿ œt¿ œz¿ œ»¿ –¿ –)¿ –/¿ –|¿ –Õ¿ —¿ —k¿ —x¿ —õ¿ —ú¿ —–¿ —÷¿ “%¿ “s¿ “í¿ “ò¿ “Ë¿ ”4¿ ”¿ ”Œ¿ ”·¿ ‘¿ ‘¿ ‘;¿ ‘A¿ ‘ê¿ ‘ﬁ¿ ‘˝¿ ’¿ ’T¿ ’†¿ ’Ì¿ ÷=¿ ÷P¿ ÷u¿ ÷v¿ ÷®¿ ÷Æ¿ ÷˝¿ ◊K¿ ◊h¿ ◊n¿ ◊º¿ ÿ¿ ÿS¿ ÿ¢¿ ÿµ¿ ÿ◊¿ ÿÿ¿ Ÿ¿ Ÿ¿ Ÿa¿ ŸØ¿ ŸÃ¿ Ÿ“¿ ⁄"¿ ⁄n¿ ⁄ª¿ €¿ €¿ €B¿ €C¿ €u¿ €{¿ €»¿ ‹¿ ‹¿ ‹X¿ ‹•¿ ‹´¿ ‹˜¿ ›G¿ ›_¿ ›Å¿ ›Ç¿ ›¥¿ ›∫¿ ﬁ¿ ﬁK¿ ﬁQ¿ ﬁó¿ ﬁ‰¿ ﬁÍ¿ ﬂ8¿ ﬂà¿ ﬂ¢¿ ﬂƒ¿ ﬂ≈¿ ﬂÛ¿ ﬂ˘¿ ‡A¿ ‡G¿ ‡ñ¿ ‡ø¿ ‡›¿ ‡ﬁ¿ ·¿ ·¿ ·Z¿ ·k¿ ·q¿ ·¿¿ ·È¿ ‚¿ ‚¿ ‚6¿ ‚<¿ ‚É¿ ‚â¿ ‚ÿ¿ „¿ „ ¿ „!¿ „g¿ „m¿ „∑¿ „‚¿ „Ë¿ ‰6¿ ‰\¿ ‰ó¿ ‰ò¿ ‰ﬂ¿ ‰Â¿ Â/¿ Â[¿ Âa¿ Â±¿ Â◊¿ Ê¿ Ê¿ ÊU¿ Ê[¿ Ê•¿ ÊÃ¿ Ê“¿ Á"¿ ÁH¿ Á~¿ Á¿ Á¡¿ Á«¿ Ë¿ Ë8¿ Ë>¿ Ëé¿ Ë¥¿ ËÎ¿ ËÏ¿ È"¿ È(¿ Èy¿ È√¿ È…¿ Í¿ ÍV¿ ÍÉ¿ ÍÑ¿ Íµ¿ Íª¿ Î¿ Î2¿ Î8¿ Îá¿ Î§¿ Î«¿ Î»¿ Ï¿ Ï¿ Ï_¿ Ïù¿ ÏÂ¿ Ì/¿ ÌY¿ Ì_¿ Ì∞¿ Ó¿ ÓO¿ ÓU¿ Óe¿ Ók¿ Óª¿ Ó‰¿ Ô6¿ Ôi¿ Ôj¿ Ô≠¿ Ô≥¿ Ô˚¿ ;¿ á¿ —¿ ˚¿ Ò¿ ÒR¿ Ò£¿ ÒÒ¿ Ò˜¿ Ú¿ Ú¿ ÚZ¿ Úx¿ Ú ¿ Ú˝¿ Ú˛¿ Û/¿ Û5¿ Ût¿ Ûz¿ Û«¿ Ù¿ Ù4¿ ÙU¿ ÙV¿ Ù•¿ Ù´¿ Ùı¿ ıD¿ ıí¿ ı„¿ ıÈ¿ ı˘¿ ıˇ¿ ˆG¿ ˆë¿ ˆí¿ ˆû¿ ˆ„¿ ˜¿ ˜e¿ ˜∏¿ ¯¿ ¯Y¿ ¯ø¿ ˘¿ ˘m¿ ˘æ¿ ˙6¿ ˙á¿ ˙ˇ¿ ˚E¿ ˚©¿ ˚·¿ ¸F¿ ¸©¿ ˝¿ ˝"¿ ˝#¿ ˝/¿ ˝±¿ ˝≥¿ ˝¥¿ ˝˘¿ ˛¿ ˛7¿ ˛\¿ ˛^¿ ˛_¿ ˛é¿ ˛í¿ ˛‚¿ ˇ)¿ ˇv¿ ˇì¿ ˇ∆¿ ˇÂ¿ ˇÎ¿ ;¿ M¿ _¿ m¿ ç¿ ¨¿ —¿ “¿¿#¿Z¿q¿¿ü¿¬¿“¿¯¿¿¿¿¿W¿\¿ø¿!¿R¿ô¿ö¿º¿‹¿0¿L¿P¿Q¿ì¿ô¿È¿
¿¿¿H¿N¿ó¿Á¿¿¿c¿Ø¿È¿˛¿	¿
¿/¿0¿>¿?¿ô¿ü¿Ê¿7¿F¿n¿Ö¿ß¿ﬂ¿	1¿	E¿	K¿	O¿	P¿	è¿	©¿	√¿	‹¿
/¿
I¿
^¿
r¿
x¿
|¿
}¿
≈¿
À¿¿0¿6¿Ü¿÷¿&¿t¿£¿©¿¿,¿2¿n¿Ω¿Œ¿Ô¿¿5¿;¿å¿†¿¶¿ˆ¿E¿î¿‘¿⁄¿¿%¿o¿å¿ç¿“¿ÿ¿"¿l¿¥¿˛¿N¿[¿a¿Æ¿ˆ¿¸¿¿¿V¿u¿v¿¬¿»¿¿_¿Ø¿·¿˜¿¯¿¿#¿r¿¿¿¿"¿(¿u¿ƒ¿Â¿$¿%¿2¿3¿Ç¿∏¿‹¿¿+¿9¿?¿`¿r¿v¿w¿≈¿À¿¿d¿ü¿¬¿˛¿%¿O¿z¿à¿é¿≤¿ƒ¿»¿…¿¿¿k¿õ¿°¿±¿∑¿’¿ ¿Y¿Z¿∂¿¿_¿`¿a¿o¿p¿∫¿‹¿›¿,¿{¿é¿¡¿¬¿˝¿C¿S¿Ç¿Ã¿ ¿ >¿ ë¿ ∫¿ »¿ Ÿ¿!¿![¿!ä¿!Ω¿!Õ¿",¿"∞¿#:¿#H¿#T¿#^¿#á¿#¡¿$8¿$¥¿$‰¿%¿%¿%¿%#¿%ã¿%å¿%–¿%—¿%ˆ¿&'¿&L¿&T¿&†¿&≥¿&Ω¿&Õ¿'¿'E¿'n¿'í¿'•¿'Ø¿'∞¿'Ë¿(¿(;¿(W¿(_¿(e¿(ö¿)¿)!¿)'¿)C¿)`¿)ñ¿)±¿)◊¿*¿*T¿*s¿*¿*õ¿*•¿*≠¿*≥¿*Ë¿+
¿+.¿+z¿+√¿,	¿,Q¿,â¿,¥¿,æ¿,ﬂ¿,˚¿-¿-¿-#¿-N¿-Ö¿-§¿-ÿ¿.¿.)¿.:¿.D¿.L¿.R¿.o¿.Ñ¿.ò¿.û¿.¢¿.£¿.ﬁ¿/¿/.¿//¿/[¿/õ¿/ú¿/Œ¿/‘¿0%¿0q¿0Ü¿0ª¿0ÿ¿1¿1-¿1?¿1I¿1Q¿1W¿1[¿1\¿1ä¿1ê¿1ﬂ¿2(¿2V¿2è¿2¨¿2‚¿3&¿3>¿3H¿3P¿3V¿3g¿3k¿3l¿3†¿3¶¿3Û¿4¿44¿45¿4¿4Ö¿4∫¿4¿¿4ˆ¿5¿5¿5I¿5q¿5ã¿5å¿5∂¿5º¿6¿6¿67¿6I¿6J¿6v¿6ò¿6∫¿6€¿6˚¿7¿7¿7¿7"¿7I¿7M¿7N¿7x¿7õ¿7´¿7Ã¿7¿8¿8¿8^¿8q¿8{¿8ï¿8©¿8∆¿8Ã¿8Ê¿8Í¿8Î¿9¿97¿9_¿9y¿9ç¿9£¿9©¿9≠¿9Æ¿9„¿9¯¿:¿::¿:N¿:y¿: ¿;¿;,¿;2¿;O¿;v¿;à¿;û¿;≤¿;∏¿;’¿<¿<(¿<0¿<6¿<:¿<;¿<]¿<r¿<Ñ¿<†¿<À¿<˛¿=¿=A¿=T¿=ê¿=≠¿=„¿>0¿>`¿>Ñ¿>û¿>®¿>∞¿>∂¿>˙¿?;¿?]¿?o¿?s¿?t¿?ä¿?ã¿?¢¿?∏¿? ¿?ÿ¿?ﬁ¿?Ò¿@¿@:¿@^¿@d¿@h¿@i¿@ª¿@Ò¿A%¿AO¿Ay¿AØ¿A˜¿B?¿Be¿Bà¿B∫¿B·¿C¿CI¿CÄ¿C∑¿CÍ¿D¿DN¿DÉ¿D¿¿E¿EY¿E]¿E^¿Ey¿Ez¿EÃ¿F8¿F9¿F±¿FÊ¿FÁ¿G¿G!¿Gq¿Gí¿G≠¿GÆ¿G‹¿H&¿H'¿HL¿HM¿Hå¿HÃ¿HÕ¿H˜¿H˝¿I6¿I<¿Iv¿I•¿I¶¿IÌ¿IÛ¿J,¿J2¿Jk¿Jß¿JÏ¿JÌ¿K,¿K2¿Kk¿Kq¿K´¿K⁄¿K€¿L¿L=¿LC¿L|¿LÇ¿Lª¿L˜¿M<¿M=¿Mé¿M®¿MÆ¿M¸¿N¿N ¿NY¿N_¿N¢¿N„¿N‰¿O3¿OÅ¿Oá¿O’¿OÛ¿O˘¿P2¿P8¿Pz¿P»¿Q¿Q ¿Qq¿Qã¿Që¿Qﬂ¿Q˝¿R¿R<¿RB¿RÖ¿R∆¿R«¿S¿Sd¿Sj¿S∏¿S÷¿S‹¿T¿T¿T]¿T´¿U¿U¿UQ¿UW¿Uê¿Uñ¿Uœ¿U¸¿U˝¿VJ¿Vn¿Vt¿V≠¿V≥¿VÎ¿W%¿Wh¿Wi¿Wû¿W§¿W›¿Wˇ¿X*¿X+¿X|¿Xü¿X•¿XÌ¿Y=¿Yf¿Yl¿Y|¿YÇ¿YÀ¿Z¿ZX¿Z~¿Z≠¿ZÆ¿Z¸¿[¿[L¿[ô¿[Ë¿\1¿\Å¿\ ¿\–¿\Ê¿]2¿]Z¿]`¿]∞¿]ı¿^¿^!¿^q¿^Ú¿^¯¿_H¿_ï¿_‚¿`¿`¿`.¿`K¿`e¿`â¿`¥¿`’¿`Ò¿a¿a:¿aY¿a}¿aå¿aô¿a§¿a¨¿a∂¿a»¿aŒ¿aﬁ¿a‰¿b.¿b~¿b§¿b”¿b‘¿c¿c.¿cm¿có¿cò¿cË¿d ¿d6¿du¿dv¿d≈¿d◊¿d›¿e+¿ey¿e†¿eÕ¿eÎ¿eÏ¿f=¿fi¿fü¿f¿¿f¡¿g¿g.¿gW¿gm¿gn¿g∫¿g¿¿h¿h¿hK¿he¿hf¿h¨¿h‘¿hÈ¿hÍ¿i:¿iL¿iR¿i¢¿iÓ¿j4¿j:¿jJ¿jP¿jö¿jÀ¿jÊ¿jÁ¿k6¿kH¿kN¿kâ¿kè¿kü¿k•¿k¯¿l+¿lG¿lH¿ló¿l©¿lØ¿lÍ¿l¿m ¿m¿mX¿mã¿mß¿m®¿mÚ¿n¿n¿nc¿n≠¿n¬¿n»¿nÿ¿nﬁ¿o¿oX¿oÜ¿oû¿oü¿oÎ¿o˝¿p¿pP¿pd¿pj¿p∫¿p¸¿q*¿qB¿qC¿qí¿q§¿q™¿q˜¿r¿r¿r`¿rà¿ræ¿r⁄¿r€¿s-¿s.¿s~¿s¿sŒ¿t¿tC¿tI¿tñ¿tƒ¿t ¿u¿ui¿u}¿u™¿u‡¿uÁ¿v¿vB¿vV¿v\¿v]¿vi¿v‹¿w%¿w,¿w-¿w\¿wã¿wÃ¿x¿x:¿xY¿xÑ¿xß¿x ¿xÊ¿y¿y0¿yÅ¿yÏ¿z¿zD¿zk¿zô¿z…¿z˘¿{H¿{y¿{†¿{ ¿{¯¿|&¿|\¿|ó¿|Â¿|Ê¿|Ú¿}Q¿}–¿}◊¿}„¿~B¿~¡¿~»¿~Ã¿~Õ¿~Œ¿¿¿]¿©¿‹¿Ä¿Ä¿Äe¿Ä†¿Ä¬¿Ä˚¿Å4¿Å¿Å ¿Ç¿Ç ¿ÇS¿Ç™¿Ç›¿É¿É1¿É_¿Éè¿Éø¿ÉÍ¿Ñ¿ÑH¿Ñq¿Ñî¿ÑÀ¿Ö¿Ök¿Öq¿Öí¿Ö¿¿Ü¿Ü@¿Üg¿Ür¿Ü≈¿ÜÕ¿á¿áV¿áá¿á¥¿áø¿à¿à¿à ¿à!¿àL¿à{¿à§¿à¬¿àÛ¿àÙ¿â#¿âR¿âá¿â≤¿â„¿ä¿äI¿äz¿ä´¿ä‰¿ã¿ãC¿ãM¿ãÇ¿ã«¿ã—¿å¿åK¿åU¿år¿åï¿åü¿å¿¿åÎ¿ç¿ç¿çr¿ç«¿ç—¿ç˚¿é2¿éã¿éø¿éÍ¿é˘¿èP¿è\¿èô¿èÚ¿ê,¿ê]¿êl¿ê√¿êœ¿êŸ¿ë¿ë=¿ëi¿ë°¿ë‘¿ëﬂ¿í¿íA¿ím¿í§¿í◊¿í‚¿í„¿ì/¿ì0¿ìE¿ìO¿ìU¿ìV¿ìp¿ìÑ¿ìÿ¿î ¿î(¿îb¿îú¿î¬¿î⁄¿î˛¿ï¿ï,¿ïH¿ïd¿ï|¿ï†¿ï ¿ïÍ¿ñ¿ñ8¿ñ`¿ñÜ¿ñ¨¿ñ⁄¿ó%¿ó,¿ó0¿ó1¿óa¿óà¿óå¿óç¿ó«¿ò¿ò]¿ò^¿ò¿¿ò‘¿ô¿ô5¿ôa¿ôú¿ôœ¿ö ¿ö¿ö=¿öã¿ö√¿öÛ¿õ/¿õ7¿õà¿õò¿õŒ¿ú¿úJ¿úR¿úX¿úÅ¿úø¿ù¿ùZ¿ù£¿ùÚ¿ù˙¿û ¿û¿û&¿û?¿û\¿ûs¿ûù¿û’¿ûˇ¿ü7¿üs¿üΩ¿ü˘¿†C¿†k¿†°¿†æ¿†Á¿°B¿°°¿°“¿¢¿¢<¿¢n¿¢ô¿¢“¿£¿£H¿£â¿£™¿£À¿§¿§;¿§ì¿§ö¿§Æ¿§≤¿§≥¿•¿•7¿•r¿•ò¿•Ÿ¿¶¿¶2¿¶8¿¶9¿¶j¿¶î¿¶¿¶˝¿ß?¿ßi¿ßo¿ßp¿ßø¿®¿®[¿®¢¿®¿©7¿©Z¿©±¿©ı¿™,¿™M¿™Ü¿™ò¿™‹¿´¿´Z¿´†¿´¿¨¿¨3¿¨O¿¨Y¿¨Ö¿¨†¿¨®¿¨©¿¨—¿¨Ê¿≠ ¿≠¿≠&¿≠,¿≠-¿≠y¿≠ï¿≠¥¿≠Ã¿≠“¿≠˙¿≠˚¿Æ¿Æa¿Ær¿Æv¿Æw¿Æº¿Æ¬¿Ø¿Ø\¿ØÖ¿Øö¿Ø®¿ØÆ¿ØÓ¿ØÚ¿ØÛ¿∞*¿∞C¿∞R¿∞ê¿∞£¿∞≠¿∞¿¿∞ƒ¿∞≈¿∞—¿± ¿±!¿±-¿±r¿±ù¿±∏¿± ¿≤¿≤ä¿≤™¿≤∞¿≥;¿≥¶¿¥0¿¥ê¿¥™¿µ¿µ¿µp¿µã¿µ¶¿µÏ¿∂9¿∂º¿∂Ù¿∂¸¿∑f¿∑l¿∑·¿∏â¿∏◊¿π¿π,¿π}¿π‰¿∫v¿∫√¿ª¿ªÖ¿ªŒ¿º¿ºr¿ºÕ¿Ω¿Ω_¿Ω≈¿æ(¿æT¿æ√¿æ…¿ø ¿øw¿ø÷¿¿/¿¿Ä¿¿‹¿¡6¿¡í¿¡·¿¬0¿¬4¿¬5¿¬}¿¬É¿¬”¿√¿√¿√'¿√F¿√d¿√ö¿√Î¿√Ú¿ƒã¿ƒè¿ƒê¿ƒú¿ƒ¬¿ƒ‘¿≈¿≈d¿≈k¿≈î¿≈¶¿≈π¿≈Õ¿≈Î¿≈Ú¿≈ˆ¿≈˜¿∆¿∆Ñ¿∆¥¿«¿«)¿«-¿«.¿«}¿«“¿«Ô¿»¿»¿»¿»6¿»i¿»Ñ¿»∑¿»„¿»È¿»Ì¿»Ô¿»¿…:¿…x¿…|¿…Ã¿ ¿ r¿ ¬¿À¿À>¿ÀK¿Àl¿ÀÜ¿Àû¿Àæ¿Àø¿Ã¿Ã.¿Ã4¿ÃT¿ÃZ¿ÃÆ¿Õ ¿ÕP¿Õd¿ÕÄ¿ÕÅ¿ÕÀ¿ÕÌ¿Œ¿Œ¿Œ,¿ŒH¿ŒI¿ŒU¿Œw¿Œ¢¿Œ¶¿Œ®¿Œ©¿Œ¯¿œ.¿œ2¿œ{¿œ¬¿œ⁄¿œ˘¿–¿– ¿–!¿–k¿–ç¿–ì¿–ﬂ¿—¿— ¿—!¿—F¿—G¿—y¿—∞¿—±¿—Ω¿—Í¿“¿“#¿“$¿“t¿“z¿“»¿“¯¿”,¿”[¿”ä¿”ÿ¿‘¿‘(¿‘E¿‘ç¿‘¢¿‘¨¿‘∆¿‘‰¿’0¿’E¿’O¿’U¿’g¿’h¿’≤¿’“¿’Â¿÷¿÷.¿÷B¿÷i¿÷ç¿÷µ¿÷¿¿÷‰¿÷Û¿◊¿◊¿◊'¿◊M¿◊c¿◊k¿◊q¿◊é¿◊è¿◊Ω¿◊˙¿ÿ ¿ÿ¿ÿ¿ÿd¿ÿu¿ÿy¿ÿz¿ÿ∆¿ÿÃ¿Ÿ¿Ÿ<¿ŸB¿Ÿê¿Ÿ›¿⁄-¿⁄T¿⁄Z¿⁄•¿⁄ı¿€C¿€í¿€æ¿€È¿‹¿‹,¿‹@¿‹F¿‹ä¿‹∏¿‹Ê¿›¿›T¿›à¿›“¿ﬁ¿ﬁC¿ﬁW¿ﬁa¿ﬁb¿ﬁø¿ﬁ˜¿ﬂ+¿ﬂc¿ﬂÆ¿ﬂÛ¿‡>¿‡â¿‡ª¿‡„¿‡Ì¿‡ı¿‡˚¿‡¸¿·%¿·N¿·≥¿·ˇ¿‚K¿‚é¿‚≠¿‚À¿‚”¿„¿„¿„¿„(¿„M¿„]¿„e¿„¿„¢¿„æ¿„∆¿„ﬂ¿„Â¿„Ê¿‰0¿‰é¿‰í¿‰î¿‰ï¿‰÷¿Â¿Â;¿ÂM¿ÂQ¿Âå¿Â≤¿Â◊¿ÂŸ¿Â⁄¿Ê*¿Ê8¿Ê<¿Êä¿Ê€¿Á¿Á¿ÁK¿ÁÄ¿ÁÑ¿Á⁄¿ËC¿Ëp¿Ë†¿Ë¡¿È¿ÈA¿ÈY¿Èt¿È∫¿ÈÕ¿È’¿ÈÌ¿Í	¿ÍS¿Íf¿Ín¿Ír¿ÍÇ¿ÍÉ¿Íœ¿ÍÌ¿Í˛¿Î%¿ÎC¿ÎU¿Îz¿Îú¿Î¬¿ÎÀ¿ÎÌ¿Î˙¿Ï¿Ï¿Ï(¿ÏJ¿Ï^¿Ïd¿Ïh¿ÏÅ¿ÏÇ¿Ïö¿ÏË¿Ï˜¿Ï˘¿Ï˙¿ÌA¿Ìv¿Ìz¿Ìƒ¿Ì»¿Ó¿Ó_¿Ó§¿Óª¿Ó”¿ÓÂ¿Ô¿Ô¿Ô¿ÔA¿Ô]¿Ô^¿Ôù¿Ô£¿Ô‚¿ÔÙ¿¿¿e¿r¿à¿â¿ï¿¡¿ı¿Ò¿Ò#¿ÒR¿ÒV¿ÒX¿ÒY¿Ò£¿Òæ¿Ò¬¿Ú¿Ú^¿Úä¿Ú∏¿Û¿Û¿ÛD¿ÛJ¿ÛK¿Ûù¿ÛÏ¿Ù¿Ù
¿ÙZ¿ÙÆ¿Ù“¿ı¿ıA¿ıÇ¿ı¡¿ı¬¿ıı¿ı˚¿ˆ/¿ˆd¿ˆe¿ˆq¿ˆÑ¿ˆù¿ˆ±¿ˆÕ¿ˆ‚¿ˆÊ¿ˆÁ¿˜¿˜<¿˜[¿˜i¿˜o¿˜¶¿˜Ê¿¯¿¯ë¿¯¨¿¯ ¿˘¿˘K¿˘Ö¿˘¢¿˙¿˙/¿˙~¿˙‹¿˚%¿˚w¿˚«¿˚”¿˚›¿˚Â¿˚Î¿¸;¿¸£¿¸ÿ¿˝5¿˝w¿˝º¿˛¿˛C¿˛g¿˛®¿˛Î¿ˇ1¿ˇu¿ˇä¿ˇ¥¿ˇÚ¿ˇ˙¿  ¿ ¿ T¿ ´¿+¿1¿Y¿p¿t¿u¿—¿˘¿V¿å¿∫¿”¿¿¿5¿?¿E¿Ö¿ò¿û¿√¿«¿»¿¿¿k¿ç¿ì¿‡¿¸¿E¿û¿π¿Œ¿‹¿‚¿„¿¿o¿ì¿ô¿ù¿û¿¿?¿q¿™¿ø¿«¿¿¿6¿I¿O¿¿ú¿—¿	 ¿	¿	2¿	<¿	Q¿	[¿	Ç¿	à¿	§¿	Ë¿
X¿
w¿
ë¿
õ¿
£¿
©¿
À¿
œ¿
–¿"¿(¿w¿ô¿ü¿Ï¿¿\¿è¿ß¿µ¿ª¿&¿A¿V¿\¿`¿a¿m¿ú¿û¿ü¿·¿ı¿˘¿C¿W¿v¿w¿ó¿ò¿Ê¿¿¿V¿•¿Ò¿
¿¿^¿®¿’¿€¿(¿^¿Ç¿©¿‡¿¿¿¿U¿[¿£¿¿<¿B¿è¿œ¿¿*¿0¿~¿Õ¿˜¿¿¿o¿æ¿Ò¿˜¿D¿í¿∆¿¿b¿ì¿ô¿Ê¿5¿X¿Y¿®¿ˆ¿¿¿[¿ß¿ˆ¿!¿'¿w¿≈¿¿¿b¿ù¿Ÿ¿⁄¿Ù¿.¿N¿O¿z¿Ä¿Œ¿ˇ¿1¿S¿T¿†¿÷¿‹¿Ï¿Ú¿¿Ü¿á¿˛¿¿¿G¿M¿ï¿•¿Ò¿ ¿ 5¿ S¿ W¿ X¿ ¶¿ ª¿ ¡¿!	¿!¿!g¿!è¿!´¿!º¿!ƒ¿!»¿!…¿!ˆ¿!¸¿"L¿"ú¿"™¿"∞¿"¸¿#C¿#I¿#î¿#‚¿$3¿$Å¿$—¿%"¿%m¿%ª¿&¿&T¿&î¿&π¿&—¿&Ù¿'-¿'A¿'E¿'F¿'y¿'¿'œ¿(
¿(¿(\¿(´¿(Ω¿(Ó¿)¿)5¿)t¿)é¿)í¿)ì¿)«¿)Õ¿*¿*j¿*â¿*è¿*ﬂ¿++¿+v¿+≈¿+ÿ¿,¿,*¿,T¿,î¿,Ø¿,≥¿,¥¿,Â¿,Î¿-*¿-0¿-}¿-Ã¿-Í¿.¿.3¿.Z¿.ó¿.Ø¿.≥¿.¥¿.È¿.Ô¿/>¿/å¿/´¿/±¿0¿0N¿0õ¿0Î¿0˛¿13¿1S¿1~¿1ø¿1€¿1ﬂ¿1‡¿2¿2¿2g¿2µ¿2“¿2ÿ¿3&¿3r¿3Ω¿4¿4¿4N¿4k¿4ì¿4—¿4Í¿4Ó¿4Ô¿5#¿5)¿5x¿5∆¿5„¿5È¿69¿6Ö¿6“¿7"¿75¿7h¿7á¿7±¿7Ò¿8¿8¿8¿8C¿8I¿8ñ¿8⁄¿8‡¿9)¿9i¿9Å¿9á¿9”¿:#¿:;¿:j¿:á¿:Ø¿:Ì¿;¿;
¿;¿;=¿;C¿;ê¿;‘¿;⁄¿<#¿<c¿<{¿<Å¿<œ¿=¿=9¿=h¿=Ö¿=≠¿=Î¿>¿>¿>	¿>7¿>=¿>Ö¿>ã¿>⁄¿?¿?*¿?C¿?g¿?°¿?∂¿?∫¿?ª¿?Ë¿?Ó¿@7¿@H¿@N¿@ù¿@∆¿@Î¿A¿A&¿A_¿As¿Aw¿Ax¿Aß¿A≠¿AÙ¿A˙¿BI¿Br¿Bõ¿Bµ¿B⁄¿C¿C+¿C/¿C0¿Cf¿Cl¿C∫¿D
¿D.¿D4¿D}¿D≈¿DÁ¿E¿E?¿Ek¿E≠¿E ¿EŒ¿Eœ¿F¿F¿Fe¿Fê¿Fñ¿F‰¿G
¿Gf¿Gú¿G›¿G¯¿HF¿Hx¿Hó¿Hü¿HÃ¿H–¿H—¿I¿I¿Ih¿Iî¿Iö¿IÍ¿J¿Jn¿J•¿JÁ¿K¿KQ¿KÉ¿K¢¿K™¿Kÿ¿K‹¿K›¿L¿L$¿Ln¿Lï¿Lõ¿LÎ¿M¿Mc¿Mî¿M–¿MÎ¿N4¿Nf¿NÖ¿Nç¿N∫¿Næ¿Nø¿O¿O¿OQ¿Ox¿O~¿OŒ¿OÙ¿PH¿Pz¿P∑¿P“¿Q¿QN¿Qm¿Qu¿Q£¿Qß¿Q®¿Qﬁ¿Q‰¿R5¿R¿RÖ¿R–¿S¿SP¿Sx¿S´¿S∆¿T¿T/¿Té¿T÷¿TÚ¿U¿UF¿UP¿UX¿Uu¿Uy¿Uz¿U´¿U±¿V¿V(¿V.¿V}¿Vö¿V…¿VÁ¿W¿W+¿Wd¿Wí¿WΩ¿W—¿WŸ¿WÒ¿Wı¿Wˆ¿X9¿X?¿Xç¿XÀ¿Y¿Y]¿Yá¿Yç¿Yﬁ¿Z/¿Z}¿ZÉ¿Zì¿Zô¿ZÈ¿[¿[d¿[µ¿[„¿\¿\k¿\ï¿\ô¿\ö¿\›¿\„¿]+¿]k¿]∑¿^¿^+¿^1¿^Ç¿^”¿_!¿_'¿_7¿_=¿_ä¿_®¿_˙¿`K¿`y¿`≤¿a¿a+¿a/¿a0¿a¿aú¿a¢¿aÔ¿b<¿bé¿b⁄¿b‡¿c0¿c¿c±¿d¿d`¿d±¿dÃ¿dˆ¿e?¿ek¿eo¿ep¿eΩ¿eœ¿f'¿f(¿fw¿fâ¿fè¿f›¿g+¿gR¿gX¿gß¿gÚ¿h8¿h`¿hç¿h´¿h‘¿hÔ¿i¿i#¿i'¿i(¿it¿iz¿i¬¿j¿ja¿jì¿jø¿j÷¿j¯¿k¿k2¿k6¿k7¿kÉ¿kâ¿k÷¿k‚¿l¿l.¿lS¿lx¿lÜ¿lå¿l´¿l…¿lÕ¿lŒ¿m¿m)¿mQ¿mf¿mÜ¿m¶¿m¥¿m∫¿m‘¿mÚ¿mˆ¿m˜¿nA¿n^¿nå¿n§¿n«¿nÍ¿n¯¿n˛¿o¿o9¿o=¿o>¿oä¿oú¿o¢¿oÔ¿p¿p	¿pU¿pé¿pº¿p‘¿p˜¿q¿q(¿q.¿qK¿qi¿qm¿qn¿qΩ¿qœ¿q’¿r"¿r6¿r<¿rá¿r¶¿r‹¿r¯¿s¿sF¿sT¿sZ¿s{¿sô¿sù¿sû¿sÔ¿t5¿t;¿tÄ¿t≈¿u¿u	¿uU¿u•¿u÷¿v
¿v*¿vX¿vv¿vz¿v{¿v∫¿v¿¿w¿wV¿wü¿w÷¿x8¿x¶¿xı¿y¿yM¿yr¿yπ¿yΩ¿yæ¿yÓ¿zG¿za¿zo¿zu¿zπ¿z’¿zÁ¿zÌ¿zÒ¿zÚ¿{,¿{2¿{t¿{z¿{≥¿{π¿{…¿{œ¿|¿|L¿|h¿|ò¿|∂¿|∫¿|ª¿}
¿}¿}¿}h¿}∑¿~¿~L¿~ç¿~ì¿~Ã¿~“¿~‚¿~Ë¿"¿^¿ö¿‘¿¸¿Ä¿Ä¿Ä¿Äo¿Äu¿Ä∑¿ÄΩ¿Äˆ¿Ä¸¿Å¿Å¿Å`¿ÅÆ¿ÅÙ¿ÇB¿Çà¿Ç∑¿Ç”¿É¿É!¿É%¿É&¿Éu¿Éô¿Éü¿ÉÈ¿Ñ8¿ÑÑ¿ÑÕ¿Ö¿Ö¿ÖM¿ÖS¿Öc¿Öi¿Ö£¿ÖÛ¿Ü#¿Üs¿Ü£¿Üﬂ¿á¿áU¿á}¿áõ¿áü¿á†¿á⁄¿à¿à	¿àT¿àZ¿à©¿àÛ¿â¿â$¿â]¿âc¿âs¿ây¿â–¿ä¿ä?¿äÅ¿äü¿ä£¿ä§¿äﬁ¿ã$¿ã*¿ãy¿ã√¿ãÓ¿ãÙ¿å-¿å3¿åC¿åI¿åå¿å⁄¿ç¿çk¿ç•¿ç√¿ç«¿ç»¿é¿é+¿é1¿é|¿éÇ¿é—¿è¿èF¿èL¿èÖ¿èã¿è‚¿ê#¿êQ¿êì¿ê±¿êµ¿ê∂¿ê¿ë6¿ë<¿ëã¿ë’¿í ¿í¿í?¿íE¿íU¿í[¿íû¿íÏ¿ì1¿ì}¿ì∑¿ì’¿ìŸ¿ì⁄¿î(¿î.¿îo¿îu¿îÆ¿î¥¿îƒ¿î ¿ï¿ïD¿ï^¿ïå¿ï™¿ïÆ¿ïØ¿ïˇ¿ñ ¿ñ&¿ño¿ñæ¿ó¿óT¿óï¿óõ¿ó‘¿ó⁄¿óÍ¿ó¿ò)¿òc¿òû¿ò÷¿ò¸¿ô¿ô¿ô¿ôT¿ôZ¿ôì¿ôµ¿ôÕ¿ôÌ¿ö¿ö#¿ö'¿ö(¿öq¿öÇ¿ö¡¿öÎ¿õ ¿õ9¿õG¿õM¿õi¿õá¿õã¿õå¿õ’¿õ˚¿ú!¿ú<¿ú\¿úv¿úï¿ú£¿ú©¿ú¡¿úﬂ¿ú„¿ú‰¿ù5¿ùK¿ùQ¿ù°¿ù¿û¿û*¿ûE¿ûe¿û¿ûû¿û¨¿û≤¿û ¿ûË¿ûÏ¿ûÌ¿ü8¿üS¿üY¿üi¿üo¿üæ¿ü˝¿†¿†M¿†Q¿†R¿†í¿†ò¿†®¿†Æ¿†˚¿°8¿°W¿°Ü¿°ä¿°ã¿°¡¿°¯¿¢¿¢@¿¢D¿¢E¿¢x¿¢~¿¢ ¿£¿£J¿£P¿£û¿£Ï¿§:¿§¿§Œ¿§¯¿§˛¿•¿•¿•j¿•©¿•»¿•˘¿•˝¿•˛¿¶D¿¶r¿¶®¿¶…¿¶˝¿ß!¿ß?¿ßC¿ßD¿ßè¿ßï¿ß‚¿®5¿®á¿®ø¿®¸¿©¿©J¿©N¿©O¿©ç¿©ì¿©‰¿™3¿™h¿™n¿™æ¿™‚¿™Ë¿´7¿´d¿´j¿´Ω¿¨¿¨!¿¨é¿¨≠¿¨‡¿≠¿≠¿≠¿≠e¿≠∞¿≠ƒ¿≠ ¿Æ¿Æb¿Æh¿Æ±¿Æ–¿Ø=¿Ø\¿Øî¿Ø«¿Øˆ¿Ø˙¿Ø˚¿∞G¿∞o¿∞u¿∞∆¿±¿±¿±\¿±w¿±Ù¿≤¿≤K¿≤~¿≤µ¿≤π¿≤∫¿≥¿≥Y¿≥_¿≥∞¿≥Ï¿≥Ú¿¥;¿¥O¿¥º¿¥€¿µ¿µ=¿µA¿µB¿µí¿µ»¿µŒ¿∂¿∂c¿∂¿¿∂Ô¿∑.¿∑2¿∑3¿∑u¿∑¥¿∑‘¿∏¿∏¿∏	¿∏R¿∏ç¿∏´¿∏Ÿ¿∏›¿∏ﬁ¿π)¿πb¿π¿π¨¿π∞¿π±¿π˙¿∫/¿∫J¿∫u¿∫y¿∫z¿∫≈¿∫˛¿ª¿ªH¿ªL¿ªM¿ªò¿ª—¿ªÓ¿º¿º¿º ¿ºh¿ºu¿º∏¿º⁄¿Ω¿Ω¿Ω¿ΩO¿ΩU¿Ω§¿Ωı¿Ω˚¿æK¿æò¿æ™¿æ∞¿ø ¿ø¿ø%¿øv¿øƒ¿¿¿¿I¿¿Ç¿¿ü¿¿Ã¿¿–¿¿—¿¡
¿¡I¿¡i¿¡ô¿¡ù¿¡û¿¡‘¿¡⁄¿¬¿¬I¿¬h¿¬ó¿¬õ¿¬ú¿¬À¿¬—¿√ ¿√p¿√∂¿√Û¿ƒ¿ƒA¿ƒE¿ƒF¿ƒq¿ƒw¿ƒ∆¿ƒˇ¿≈>¿≈^¿≈é¿≈í¿≈ì¿≈„¿∆¿∆¿∆d¿∆≤¿∆˝¿«.¿«¿«®¿«·¿«Â¿«Ê¿»/¿»h¿»û¿»ø¿»Î¿…¿…"¿…@¿…D¿…E¿…ï¿…ß¿…≠¿…˝¿ I¿ è¿ ï¿ •¿ ´¿ ı¿À&¿ÀA¿Àg¿ÀÇ¿Àü¿ÀΩ¿À¡¿À¬¿Ã¿Ã#¿Ã)¿Ãd¿Ãj¿Ãz¿ÃÄ¿Ã”¿Õ¿Õ"¿ÕI¿Õd¿ÕÇ¿Õ†¿Õ§¿Õ•¿ÕÙ¿Œ¿Œ¿ŒG¿ŒM¿Œ]¿Œc¿Œ∂¿ŒÈ¿œ¿œ,¿œG¿œe¿œÉ¿œá¿œà¿œí¿œì¿œ€¿œÛ¿œ˘¿–	¿–¿–^¿–n¿–±¿–≤¿–˝¿—¿—p¿—q¿—ò¿—ô¿—Ë¿“¿“¿“P¿“°¿“ø¿“≈¿”¿”b¿”Ø¿”µ¿”≈¿”À¿‘¿‘(¿‘U¿‘Ä¿‘†¿‘§¿‘•¿‘√¿‘ƒ¿‘÷¿’¿’¿’5¿’B¿’_¿’e¿’É¿’á¿’à¿’À¿’Ã¿’Ò¿’Ú¿÷;¿÷P¿÷V¿÷•¿÷Í¿◊#¿◊l¿◊¿◊Ö¿◊ª¿◊œ¿◊’¿◊˝¿ÿ¿ÿ¿ÿ[¿ÿo¿ÿu¿ÿπ¿ÿÕ¿ÿ”¿Ÿ¿Ÿ3¿Ÿ9¿Ÿì¿Ÿß¿Ÿ≠¿Ÿæ¿Ÿ¬¿Ÿ√¿⁄¿⁄¿⁄c¿⁄á¿⁄ç¿⁄‹¿€¿€¿€f¿€∏¿€Ú¿‹ ¿‹A¿‹B¿‹e¿‹s¿‹y¿‹†¿‹Û¿›)¿›J¿›T¿›^¿›k¿›í¿›ò¿›Õ¿ﬁ¿ﬁ,¿ﬁY¿ﬁà¿ﬁπ¿ﬁÍ¿ﬂ¿ﬂC¿ﬂl¿ﬂü¿ﬂŒ¿ﬂ˝¿‡4¿‡5¿‡`¿‡Å¿‡±¿‡ﬂ¿·¿·<¿·k¿·r¿·õ¿·Ã¿·“¿‚¿‚G¿‚M¿‚¿‚¬¿‚»¿‚˜¿„$¿„L¿„Ä¿„Ø¿„∂¿„–¿„Ò¿„˜¿„¯¿‰D¿‰E¿‰ã¿‰è¿‰ê¿‰√¿‰Â¿Â	¿Â;¿Âk¿ÂÕ¿Â˚¿ÊG¿Êo¿Êã¿Ê∑¿Êı¿Á!¿Á_¿Áâ¿Á±¿ÁÕ¿ÁÌ¿Ë¿Ë%¿ËQ¿Ëy¿Ë£¿Ëœ¿Ë˚¿È#¿ÈJ¿Èn¿Èú¿È∆¿È¿Í"¿ÍD¿ÍÑ¿Íª¿Íø¿Í¡¿Í¬¿Î¿Î"¿ÎA¿În¿Ît¿Î¡¿Ï¿ÏC¿ÏU¿ÏV¿ÏÖ¿Ïã¿Ï⁄¿Ï˘¿Ì¿Ì¿Ì¿Ì9¿Ìk¿Ìû¿ÌÀ¿Ì˘¿Ì˛¿Ó,¿ÓM¿ÓQ¿Ó†¿Ó¬¿Ó‡¿ÔW¿Ôu¿ÔÏ¿ÔÚ¿Ôˆ¿#¿E¿I¿J¿ö¿ú¿ù¿Ó¿Ò¿Ò¿Ò\¿Ò¨¿ÒÊ¿ÒÍ¿Ú6¿Úc¿Úg¿Ú∏¿Ú‰¿ÚË¿Úˆ¿Ú˙¿Û>¿Ûú¿ÛÌ¿Ù5¿Ù\¿Ù]¿ÙÆ¿Ù¡¿Ù«¿ı¿ı¿ı[¿ıä¿ı†¿ı°¿ı≠¿ı◊¿ˆ¿ˆå¿ˆç¿ˆ‹¿ˆ˝¿˜¿˜:¿˜@¿˜A¿˜ì¿˜¢¿˜–¿˜·¿¯¿¯&¿¯,¿¯-¿¯V¿¯Z¿¯[¿¯Ñ¿¯ä¿¯⁄¿¯Ò¿¯˜¿˘H¿˘ò¿˘Ê¿˘Û¿˙ ¿˙3¿˙4¿˙@¿˙Ö¿˙∞¿˙ˆ¿˙˙¿˙¸¿˙˝¿˚C¿˚N¿˚R¿˚ò¿˚ƒ¿˚»¿¸¿¸g¿¸®¿¸ø¿¸√¿˝¿˝<¿˝@¿˝å¿˝’¿˛¿˛M¿˛}¿˛Õ¿˛”¿ˇ¿ˇ,¿ˇ>¿ˇN¿ˇ~¿ˇ¶¿ˇß¿ˇı¿ E¿ U¿ [¿ ©¿ ˆ¿¿¿¿A¿a¿q¿w¿†¿§¿•¿±¿ˆ¿!¿i¿m¿o    _kUnblockedUserActionsSemanticsTag"ChildSemanticsConfigurationsResult)ChildSemanticsConfigurationsResultBuilderCustomSemanticsActionAttributedStringAttributedStringPropertySemanticsData_SemanticsDiagnosticableNodeSemanticsHintOverridesSemanticsPropertiesdebugResetSemanticsIdCounterSemanticsNode_BoxEdge_SemanticsSortGroup_pointInParentCoordinates_childrenInDefaultOrder_TraversalSortNodeSemanticsOwnerSemanticsConfigurationDebugSemanticsDumpOrder_concatAttributedStringSemanticsSortKeyOrdinalSortKey ï)