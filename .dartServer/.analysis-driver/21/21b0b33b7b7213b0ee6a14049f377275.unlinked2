Å_layer
addToScenefindAnnotations_main_screenshotclipPath	clipRRectclipRectdrawArc	drawAtlas
drawCircle	drawColor
drawDRRect	drawImagedrawImageNinedrawImageRectdrawLinedrawOval	drawPaintdrawParagraphdrawPathdrawPicture
drawPoints	drawRRectdrawRawAtlasdrawRawPointsdrawRect
drawShadowdrawVerticesgetSaveCountrestorerotatesave	saveLayerscaleskew	transform	translatenoSuchMethodtargetcontainerLayerfoundTargetincludeInScreenshotincludeInRegularContextscreenshotOffset_data_screenshotCurrentLayer_screenshotRecorder_screenshotCanvas_multicastCanvascanvas_isScreenshotRecording_startRecordingScreenshotstopRecordingIfNeeded _stopRecordingScreenshotIfNeededappendLayercreateChildContext
paintChildtoImagenodechildren
childIndex_ref_valueidcountvalue_serializeRing_serializeRingIndexinstance	_instance!_debugServiceExtensionsRegistered	selectionselectionChangedCallback_groups_idToReferenceData_objectToId_nextId_pubRootDirectories_isLocalCreationCache_trackRebuildDirtyWidgets_trackRepaintWidgets!_registerServiceExtensionCallbackregisterServiceExtension_registerSignalServiceExtension$_registerObjectGroupServiceExtension_registerBoolServiceExtension_postExtensionStateChangedEvent _registerServiceExtensionWithArg _registerServiceExtensionVarArgsforceRebuild_consoleObjectGroup_errorsSinceReload_reportStructuredError_resetErrorCountisStructuredErrorsEnabledinitServiceExtensions_clearStatsdisposeAllGroupsresetAllStatedisposeGroup_decrementReferenceCounttoIdisWidgetTreeReadytoObjecttoObjectForSourceLocation	disposeIdsetPubRootDirectoriesresetPubRootDirectoriesaddPubRootDirectoriesremovePubRootDirectoriespubRootDirectoriessetSelectionByIdsetSelection_sendInspectEvent_devToolsInspectorUriForElementdevToolsInspectorUrigetParentChain_getParentChain_pathNodeToJson_getRawElementParentChain_getElementParentChain_getRenderObjectParentChain_nodeToJson_isValueCreatedByLocalProject_isLocalCreationLocationImpl_isLocalCreationLocation_safeJsonEncode_truncateNodes_nodesToJsongetProperties_getPropertiesgetChildren_getChildrengetChildrenSummaryTree_idToDiagnosticsNodeobjectToDiagnosticsNode_getChildrenSummaryTreegetChildrenDetailsSubtree_getChildrenDetailsSubtree_shouldShowInSummaryTree_getChildrenFiltered_filterChildrengetRootWidget_getRootWidgetgetRootWidgetSummaryTree_getRootWidgetSummaryTree%_getRootWidgetSummaryTreeWithPreviewsgetDetailsSubtree_getDetailsSubtreegetSelectedWidget
screenshot_getLayoutExplorerNode_setFlexFit_setFlexFactor_setFlexProperties_toEnumEntry_getSelectedWidget!_getSelectedWidgetDiagnosticsNodegetSelectedSummaryWidget!_getSelectedSummaryWidgetLocation"_getSelectedSummaryDiagnosticsNode_getSelectedSummaryWidgetisWidgetCreationTracked_widgetCreationTracked_frameStart_onFrameStart_onFrameEnd_postStatsEvent	postEventinspect_rebuildStats_repaintStats_onRebuildWidget_onPaintperformReassemblelocallocation_countreset	increment_statsactivenewLocationsaddresetCountsexportToJsoncreateElementchildselectButtonBuildercreateState_lastPointerLocationisSelectMode_ignorePointerKey_edgeHitMargin_selectionChangedCallback	initStatedispose_hitTestHelperhitTest
_inspectAt_handlePanDown_handlePanUpdate_handlePanEnd
_handleTap_handleEnableSelectbuild
candidates_candidatesindex_indexclearcurrent_currentcurrentElement_currentElement_computeCurrentcreateRenderObjectupdateRenderObject
_selectionsizedByParentalwaysNeedsCompositingcomputeDryLayoutpaintrect==hashCodeoverlayRectselectedtooltiptextDirectionrootRenderObject
_lastState_picture_textPainter_textPainterMaxWidth_buildPicture_paintDescription_isInInspectorRenderObjectTree	_locationfilelinecolumnname	toJsonMaptoStringservice	groupNamesummaryTreemaxDescendantsTruncatableNodeincludePropertiessubtreeDepthexpandPropertyValuesaddAdditionalPropertiesCallback_nodesCreatedByLocalProject_interactiveadditionalNodePropertiesdelegateForNodefilterChildrenfilterPropertiestruncateNodesListcopyWith_objects_primitives_isPrimitive[][]=remove6InspectorSelectButtonBuilder RegisterServiceExtensionCallback_ProxyLayer_MulticastCanvas_calculateSubtreeBoundsHelper_calculateSubtreeBounds_ScreenshotContainerLayer_ScreenshotData_ScreenshotPaintingContext_DiagnosticsPathNode_followDiagnosticableChain!InspectorSelectionChangedCallbackInspectorReferenceData_WidgetInspectorServiceWidgetInspectorService_LocationCount_ElementLocationStatsTracker_WidgetForTypeTestsWidgetInspector_WidgetInspectorStateInspectorSelection_InspectorOverlay_RenderInspectorOverlay_TransformedRect_InspectorOverlayRenderState_kMaxTooltipLines_kTooltipBackgroundColor"_kHighlightedRenderObjectFillColor$_kHighlightedRenderObjectBorderColor_InspectorOverlayLayer_kScreenEdgeMargin_kTooltipPadding_kInspectButtonMargin_kOffScreenMargin_messageStyle_HasCreationLocation	_Location_isDebugCreatordebugTransformDebugCreator_parseDiagnosticsNode_describeRelevantUserCodeDevToolsDeepLinkPropertydebugIsLocalCreationLocationdebugIsWidgetLocalCreation_describeCreationLocation_getObjectCreationLocation_getCreationLocation_locationToId
_locations_toLocationIdInspectorSerializationDelegate_WidgetFactorywidgetFactoryWeakMapÇOHashMapClipOpFlutterViewImageImageByteFormat	ParagraphPicturePictureRecorder	PointModeSceneBuilderVerticesselectButtonBuilderWidgetBuildContextVoidCallbackinitServiceExtensionsBindingBaseregisterServiceExtensionvoidStringServiceExtensionCallbackLayeroverride
addToScene	protectedboolObjectAnnotationResultOffsetfindAnnotations	onlyFirstCanvasmain
screenshotPathclipPathdoAntiAliasRRect	clipRRectRect	intersectclipRectclipOpdoublePaintdrawArcListRSTransformColor	BlendMode	drawAtlas
drawCircle	drawColor
drawDRRect	drawImagedrawImageNinedrawImageRectdrawLinedrawOval	drawPaintdrawParagraphdrawPathdrawPicture
drawPoints	drawRRectFloat32List	Int32ListdrawRawAtlasdrawRawPointsdrawRect
drawShadowdrawVerticesintgetSaveCountrestorerotatesave	saveLayerscalesyskewFloat64List	transform	translatedynamic
InvocationnoSuchMethodRenderObjectMatrix4MatrixUtilstransformRectsemanticBoundsvisitChildrencloneapplyPaintTransformchilddescribeApproximatePaintClipisFiniteisEmptyexpandToIncludeidentityOffsetLayeraddChildrenToSceneoffsetPaintingContextRepaintBoundaryContainerLayerscreenshotDatacontainerLayerestimatedBoundsPictureLayerincludeInScreenshotincludeInRegularContextcanvasappendstopRecordingIfNeededpictureendRecordingappendLayerremovefoundTargetcreateChildContext	identicaltargetscreenshotOffset
paintChild
pixelRatiodebugNeedsPaintwindowdevicePixelRatio
debugPaintdebugPaintSizeEnabledRenderRepaintBoundarytoImageFutureisRepaintBoundaryparent
debugLayerpaintBounds%debugInstrumentRepaintCompositedChildcustomContext
buildSceneDiagnosticsNodeDiagnosticableDiagnosticsTreeStylefirsttoDiagnosticsNodenamestyleilengthgetChildrenjvalueaddnodechildren
childIndexselectionChangedCallbackvisibleForTestingnumWeakReferenceFlutterfilled	_instance	selectionMapSet_isLocalCreationLocationJsonEncoder!_registerServiceExtensionCallbackcallbackFutureOrdisposeGroup
parametersAsyncValueGetterAsyncValueSettercontainsKeysetter_postExtensionStateChangedEventgetterregisterBoolServiceExtension	postEventWidgetsBindinginstancerootElement
buildOwner
reassemble
endOfFrameFlutterErrorDetails_nodeToJson	groupName_consoleObjectGroupsubtreeDepthincludePropertiesmaxDescendantsTruncatableNodeservice_errorsSinceReloadTextTreeRendererwrapWidthPropertiesFlutterError	wrapWidthmaxDescendentsTruncatableNoderendererror	trimRightsummaryfromEnvironmentdefaultValuekIsWebFlutterExceptionHandlerpresentErrorisStructuredErrorsEnabled_reportStructuredError!_debugServiceExtensionsRegisteredSchedulerBindingaddPersistentFrameCallback_onFrameStart_registerBoolServiceExtension WidgetInspectorServiceExtensionsstructuredErrorsshow
WidgetsApp debugShowWidgetInspectorOverrideforceRebuildisWidgetCreationTrackedtrackRebuildDirtyWidgets_trackRebuildDirtyWidgets_rebuildStatsresetCountsdebugOnRebuildDirtyWidget_onRebuildWidgettrackRepaintWidgets_trackRepaintWidgets_repaintStatsdebugOnProfilePaint_onPaintmarkNeedsPaintRendererBinding
renderView_registerSignalServiceExtensiondisposeAllGroups$_registerObjectGroupServiceExtensionisWidgetTreeReady _registerServiceExtensionWithArg	disposeIdobjectIdobjectGroup _registerServiceExtensionVarArgssetPubRootDirectoriesargsaddPubRootDirectoriesremovePubRootDirectoriesgetPubRootDirectoriespubRootDirectoriessetSelectionByIdgetParentChain_getParentChaingetProperties_getProperties_getChildrengetChildrenSummaryTree_getChildrenSummaryTreegetChildrenDetailsSubtree_getChildrenDetailsSubtreegetRootWidget_getRootWidgetgetRootWidgetSummaryTree_getRootWidgetSummaryTree$getRootWidgetSummaryTreeWithPreviews%_getRootWidgetSummaryTreeWithPreviewsgetDetailsSubtree_getDetailsSubtreeparsegetSelectedWidget_getSelectedWidgetgetSelectedSummaryWidget_getSelectedSummaryWidgettoObjectwidthheightmarginmaxPixelRatioByteData
toByteDataformatpngbase64encoderconvert	Uint8ListviewbuffergetLayoutExplorerNode_getLayoutExplorerNode
setFlexFit_setFlexFitsetFlexFactor_setFlexFactorsetFlexProperties_setFlexProperties_groupsclear_idToReferenceData_objectToId_nextIdmustCallSuperresetPubRootDirectoriesforEach_decrementReferenceCountcountidputIfAbsentdebugDidSendFirstFrameEvent	fromPartsErrorSummaryElementwidget
Deprecated_pubRootDirectories_isLocalCreationCachemapUri	directorypathtoListfromaddAll	removeAllsetSelectioncurrentElement_sendInspectEventcurrentschedulerPhaseSchedulerPhaseidlescheduleTaskPrioritytouchinspect!_getSelectedSummaryWidgetLocationfilelinecolumnstreamactiveDevToolsServerAddressconnectedVmServiceUritoIddevToolsInspectorUrireplacequeryParameterstoStringindexOf	substring_safeJsonEncode_getRenderObjectParentChain_getElementParentChainruntimeType_pathNodeToJson_nodesToJsondebugGetDiagnosticChainnumLocalParents_isValueCreatedByLocalProjecttakereversed_getRawElementParentChain	toJsonMapcontains
startsWith_isLocalCreationLocationImpljsonencode_serializeRing_serializeRingIndexIterableeverywhere
isNotEmpty
toJsonList_idToDiagnosticsNode_getChildrenFilteredobjectToDiagnosticsNodesummaryTreelevelDiagnosticLevel_filterChildren_shouldShowInSummaryTreeaddAdditionalPropertiesCallbackrenderObjectRenderParagraphtexttoPlainText
debugPrintattacheddebugNeedsLayoutPipelineOwnerownerdebugDoingLayoutflushLayoutflushCompositingBits
flushPaintinflatemin DiagnosticsSerializationDelegatedelegatecopyWithexpandPropertyValuesdebugCreatorDebugCreatorelementConstraintsconstraintsBoxConstraintsminWidth	minHeightmaxWidth	maxHeight	RenderBoxsize
ParentData
parentDataFlexParentDataflexfitFlexFittightBoxParentDatadxdy
RenderView_toEnumEntryvaluesmarkNeedsLayoutMainAxisAlignmentCrossAxisAlignment
RenderFlexmainAxisAlignmentcrossAxisAlignmententry	Exception!_getSelectedWidgetDiagnosticsNode"_getSelectedSummaryDiagnosticsNode	candidate_widgetCreationTrackedDuration_frameStartaddPostFrameCallback_onFrameEnd_postStatsEventexportToJsonRenderObjectElementvisitAncestorElementsancestorreportError	exceptionstacklibrarycontextErrorDescriptionperformReassemblereassembleApplication_clearStats_resetErrorCount	_locationlocationlocal	incrementresetstatinMicrosecondsUnimplementedErrorStatefulWidgetStateWidgetsBindingObserver	GlobalKey	initStatesetStatedispose	tryInverttransformPointdebugDescribeChildrenoffstagedeflatehitTestgetTransformToSizesorta	compareTobRenderIgnorePointercurrentContextfindRenderObject
candidatesDragDownDetailsglobalPositionDragUpdateDetailsDragEndDetailsViewofzerophysicalSizeStackGestureDetectoronTap	onPanDownonPanEndonPanUpdatebehaviorHitTestBehavioropaqueexcludeFromSemanticsIgnorePointerignoringkey
PositionedleftbottomdebugIsDefunctLeafRenderObjectWidget	constraininfiniteneedsCompositingaddLayeroverlayRectfromLTWHrootRenderObject	immutablerecthashTextDirectionselected
listEqualstooltiphashAllfromARGBTextPainteractivetoStringShorttextDirectionltr
addPicturetopPaintingStylefillcolorstrokestrokeWidthstoragetransformedRectcenterTextSpanmaxLinesellipsislayoutpositionDependentBox	childSizeverticalOffsetpreferBelow
fromPointsmax
addPolygonpaintRenderStack	lastChild	TextStylefontSizejoinDiagnosticsDebugCreatorpropertiesTransformersinitInstances
kDebugModeDiagnosticsStackTracescheduleMicrotaskinformationCollectormessageErrorSpacer_devToolsInspectorUriForElementDiagnosticsBlockDiagnosticsPropertydescriptioninfo
isFilteredfineallowTruncate_truncateNodesTarget
TargetKindmethodPaddingExpandoLayerCanvasOffsetLayerPaintingContextObjectWidgetInspectorServiceWidgetStatefulWidgetStateWidgetsBindingObserverLeafRenderObjectWidget	RenderBoxDiagnosticsProperty DiagnosticsSerializationDelegateÎ®r#ÁP…Eh¬€·2®    Ä¶  
dart:asyncÄ”ÄﬂHashMap Äª  dart:collection  Ä‚  dart:convert  Ä˘  Å	developerÅdart:developer  Å  Å1mathÅ4	dart:mathÅUÇ
ClipOpFlutterViewImageImageByteFormat	ParagraphPicturePictureRecorder	PointModeSceneBuilderVertices Å;  ÅKuiÅNdart:ui  Ç!  package:flutter/foundation.dart  ÇK  package:flutter/rendering.dart  Çt  package:flutter/scheduler.dart  Çù  package:meta/meta_meta.dart  Çƒ  app.dart  Ç◊  
basic.dart  ÇÏ  binding.dart  É  
debug.dart  É  framework.dart  É1  gesture_detector.dart  ÉQ  service_extensions.dart  És  	view.dart    	dart:core¿ ◊ ¿‚éÈ <ÄÜÄ§Ä•Ä∫Ä·Ä¯ÅÅ:ÅQÅZÅjÅÅéÅßÅ∫ÅÀÅ‰Å˜ÇÇÇ ÇJÇsÇúÇ¬Ç√Ç÷ÇÎÉÉÉ0ÉPÉrÉÜÉáÉ∂É·ÑGÑHÑòÑÆÑ≤Ñ˛ÖDÖÖóÖ≈Ö…Ö ÜÜÜOÜmÜèÜ´Ü¨Ü¬Ü√ÜœÜ¸áá á!á-á:ádáÑá†áΩáƒàààààbà≥à⁄âââ4âTâiâäâãâ°âΩâæâ ää8äräväwäÉä¿äˆã2ã6ã7ãCã•ãÈå3å7å8åDå£åÊç/ç3ç4ç@ç€é.éáéãéåéòé“é˙è(è,è-è9ènèïè¬è∆è«è”êê9êjênêoê{êµê€ëëëëëcëóë—ë’ë÷ë‚í*í[íííñíóí£íÿí˚ì$ì(ì)ì5ì_ìÄìßì´ì¨ì∏ìÿìÙîîîî'îeîëî√î«î»î‘î˛ïïFïJïKïWïÄï†ï∆ï ïÀï◊ñ%ñUñãñèñêñúñ…ñÏóóóó&ó¿òòxò|ò}òâòŸôôEôIôJôVôÄô°ô»ôÃôÕôŸö1ötöΩö¡ö¬öŒõõPõäõéõèõõõ≤õ˛úKúñú–úÒúıúˆùùù*ùEùIùJùVùvùëù≤ù∂ù∑ù√ù”ùÂù˝ûûûû<û`ûäûéûèûõû≈ûﬁû˝üüüü2üJühülümüyü°üøü„üÁüËüÙ††:†]†a†b†n†û†¬†∆†»†…°°c°d°í°»°ˇ¢L¢î¢±¢Ù£££#£d£j£k£££ˆ£¸§§§§§§\§ê§‘§÷§◊•'•x•Æ•∫•Á¶¶¶¶¶]¶o¶á¶õ¶µ¶Í¶Îßß.ß/ßgßãßåß€ß˜ß¯®8®>®ç®ú®¿®¡©©©\©•©µ©ª™
™™@™A™í™≥™”™Ï´´´:´^´b´d´e´£´ß´ˆ¨¨k¨ª≠≠W≠§≠∑≠ÚÆÆ=Æ`ÆçÆ¨Æ€Æ‹Æ˚Æ¸ØØ:ØeØÇØ®Ø©ØµØÀØ∞∞<∞D∞m∞¬∞œ∞¸±±±!±"±F±Ü±ñ±∑±Ë≤≤@≤O≤Ä≤≠≤ÿ≤‡≤Û≤˝≥≥!≥"≥G≥n≥ì≥–¥ ¥6¥q¥ö¥≈¥·µ	µµµ>µDµHµIµUµvµôµ¡µ≈µ∆µÚ∂∂#∂)∂z∂∆∂Í∑
∑'∑E∑I∑J∑V∑x∑°∑¡∑Ë∏∏_∏Ç∏ª∏√∏–∏¯ππHπ^πàπñπúπ†π°π≠π¸∫∫_∫ü∫⁄∫Áªª4ªUªtª}ªÉªáªàªîªÀºº-ºWºyºôº¿ºËºÓΩΩ1Ω[ΩÑΩäΩéΩèΩ‡ΩÊæ4æÖæææƒøøCøIøóø–¿ @ ¿ @o¿ @É¿ @â¿ @ÿ¿ A¿ Ad¿ A¥¿ AÔ¿ Aı¿ B¿ B¿ BZ¿ B™¿ BÔ¿ C?¿ Cb¿ CÅ¿ Cö¿ C∑¿ C‘¿ C€¿ D¿ D=¿ Dn¿ Dt¿ Dº¿ E¿ E:¿ En¿ Eä¿ Eë¿ Eí¿ E∆¿ F¿ Fe¿ Fû¿ FÍ¿ G	¿ G[¿ Gç¿ Gö¿ G“¿ H"¿ Hn¿ H´¿ Hƒ¿ H‰¿ HÌ¿ HÛ¿ HÙ¿ IB¿ Ix¿ I®¿ I‘¿ J%¿ JC¿ Jj¿ Jä¿ J±¿ J≤¿ J÷¿ J‚¿ K#¿ K5¿ K\¿ KÖ¿ Kç¿ Kì¿ Kî¿ Kﬁ¿ L+¿ Lp¿ LØ¿ L∞¿ L˛¿ M¿ M¿ M¿ MT¿ Ma¿ Me¿ M∂¿ Mˆ¿ N¿ NZ¿ N{¿ NÅ¿ N∫¿ N”¿ NÎ¿ O¿ O¿ O"¿ O#¿ Or¿ Oê¿ Oë¿ Oø¿ O≈¿ P¿ P_¿ PÆ¿ Pœ¿ P˜¿ P¯¿ Q-¿ Q3¿ Qf¿ Q¿ QÅ¿ QÇ¿ Q∫¿ Q⁄¿ QÍ¿ R	¿ R¿ RR¿ Ri¿ Rz¿ R~¿ R÷¿ S¿ S0¿ SM¿ Sí¿ S≈¿ Sˆ¿ T¿ T4¿ T[¿ Tw¿ Tï¿ TÆ¿ T∫¿ T÷¿ TÂ¿ TÌ¿ TÛ¿ U¿ U¿ Ug¿ Uv¿ Ux¿ Uy¿ U±¿ UË¿ V%¿ V&¿ Vr¿ Vñ¿ Vö¿ V–¿ V„¿ W¿ W9¿ Wl¿ W•¿ Wı¿ X4¿ XK¿ XY¿ X_¿ X`¿ Xä¿ Xé¿ Xè¿ XÆ¿ XØ¿ X¡¿ X¬¿ X˛¿ Y¿ Y¿ YL¿ Y]¿ Y^¿ Yo¿ YÖ¿ Yù¿ Y∏¿ Yæ¿ Y—¿ Y’¿ Y◊¿ Yÿ¿ Z¿ ZV¿ ZW¿ Zù¿ Z°¿ ZÒ¿ [I¿ [¥¿ [ˇ¿ \Ä¿ \Õ¿ ]¿ ]g¿ ]ù¿ ]°¿ ]Ó¿ ^4¿ ^É¿ ^—¿ _6¿ _q¿ _u¿ _™¿ _…¿ `¿ `V¿ `ù¿ `º¿ `Ω¿ `È¿ a$¿ ak¿ ax¿ a±¿ aÀ¿ aœ¿ a–¿ b	¿ b
¿ bY¿ bß¿ b∆¿ c¿ c¿ cL¿ cz¿ cÄ¿ cœ¿ d¿ dR¿ dë¿ dí¿ dﬁ¿ e)¿ e6¿ eö¿ eˇ¿ fH¿ f[¿ f\¿ f±¿ f÷¿ f◊¿ g	¿ gX¿ gY¿ gÉ¿ g®¿ g©¿ gÙ¿ h9¿ hc¿ hi¿ hµ¿ h¸¿ iG¿ iï¿ i‘¿ i·¿ j¿ j¿ jM¿ jT¿ j{¿ jö¿ j¥¿ jª¿ jø¿ j¿¿ k¿ kI¿ kr¿ kå¿ k¿¿ k«¿ kÂ¿ k˜¿ l0¿ ln¿ lw¿ l~¿ lÇ¿ lÉ¿ l»¿ m¿ mb¿ m•¿ mˆ¿ n ¿ nN¿ nh¿ nÆ¿ nµ¿ n”¿ nÂ¿ o¿ ov¿ o¿ oÜ¿ oä¿ oã¿ o–¿ p¿ p]¿ p°¿ pË¿ p¸¿ q¿ q=¿ q|¿ qÇ¿ q¿¿ q˚¿ r"¿ r<¿ rh¿ rî¿ rõ¿ rπ¿ rÀ¿ s¿ s5¿ ss¿ sí¿ s ¿ s‘¿ t$¿ t-¿ t4¿ t8¿ t9¿ t{¿ tÅ¿ t—¿ u¿ uB¿ uH¿ uä¿ uê¿ uﬁ¿ v¿ vI¿ vX¿ vÜ¿ vü¿ v”¿ vÎ¿ vÙ¿ v˚¿ vˇ¿ w ¿ wE¿ wñ¿ w„¿ x3¿ x]¿ xw¿ xœ¿ x÷¿ xÙ¿ y¿ y?¿ yv¿ yò¿ yÎ¿ yˆ¿ yˇ¿ z¿ z
¿ z¿ zP¿ zè¿ z∫¿ z‰¿ z˛¿ {C¿ {J¿ {h¿ {z¿ {≥¿ {·¿ {¯¿ |¿ |:¿ |h¿ |ë¿ |§¿ |∑¿ |√¿ |÷¿ |‡¿ }-¿ }[¿ }“¿ ~¿ ~¿ ~$¿ ~(¿ ~)¿ ~v¿ ~∆¿ ¿ 
¿ V¿ c¿ É¿ ø¿ Ê¿ Ä(¿ ÄI¿ ÄO¿ Äp¿ Ät¿ Äu¿ Ä≤¿ Ä≥¿ Ä—¿ Ä“¿ Å¿ ÅG¿ Åj¿ Åê¿ Å∏¿ Å—¿ ÅÚ¿ Ç¿ Ç3¿ Ç<¿ ÇD¿ ÇE¿ Ç~¿ Ç°¿ Ç⁄¿ É¿ É9¿ Éì¿ É†¿ É˚¿ Ñ¿ Ñ¿ Ñ¿ ÑJ¿ ÑN¿ ÑO¿ Ñã¿ Ñë¿ Ñ€¿ Ö)¿ ÖH¿ Öd¿ ÖÄ¿ ÖÑ¿ ÖÖ¿ Ö≤¿ Ö∏¿ Ü¿ ÜC¿ Üh¿ ÜØ¿ Üƒ¿ Üﬁ¿ ÜÓ¿ á1¿ áö¿ á≠¿ á∑¿ áÀ¿ áœ¿ á–¿ á˝¿ à¿ à¿ à¿ àâ¿ à”¿ àÙ¿ âV¿ â≠¿ âÆ¿ â’¿ ä¿ ä¿ ä_¿ äè¿ äü¿ äœ¿ ä‚¿ äÏ¿ äÌ¿ ã6¿ ã7¿ ãZ¿ ãû¿ ãÌ¿ å
¿ åh¿ åç¿ åñ¿ åù¿ åû¿ å¡¿ å˘¿ ç@¿ ç]¿ ç°¿ ç»¿ ç“¿ é¿ é.¿ é7¿ é>¿ é?¿ éd¿ éµ¿ éÀ¿ é¿ è>¿ èu¿ èö¿ èŒ¿ è‚¿ èÓ¿ ê¿ êB¿ êY¿ êê¿ ê ¿ ë¿ ë9¿ ë[¿ ëo¿ ëÇ¿ ë∞¿ ëƒ¿ ë–¿ ë€¿ ë‰¿ ëÂ¿ í
¿ íS¿ íÖ¿ í™¿ íŸ¿ íÌ¿ í˘¿ ì ¿ ìH¿ ì_¿ ìê¿ ìº¿ î¿ î+¿ îl¿ îô¿ î◊¿ îÂ¿ ï0¿ ïV¿ ïi¿ ïë¿ ïù¿ ï®¿ ï±¿ ï∑¿ ï∏¿ ï›¿ ñ!¿ ñ<¿ ñX¿ ñm¿ ñv¿ ñ}¿ ñß¿ ñÁ¿ ó¿ ó)¿ ó>¿ óG¿ óN¿ ós¿ ó∏¿ ó€¿ ó‚¿ ò¿ òE¿ òÑ¿ òÆ¿ ò√¿ òÃ¿ ò”¿ ò˘¿ ôB¿ ôn¿ ôì¿ ô®¿ ô±¿ ô∏¿ ôﬁ¿ ö'¿ öS¿ öx¿ öç¿ öñ¿ öù¿ ö√¿ õ¿ õ;¿ õc¿ õx¿ õÅ¿ õà¿ õ¶¿ õÔ¿ ú¿ ú¿ ú@¿ úÑ¿ ú¶¿ ú≠¿ ú”¿ ù¿ ù6¿ ù=¿ ùc¿ ù§¿ ùƒ¿ ùÀ¿ ùÒ¿ û0¿ ûN¿ ûU¿ ûV¿ û|¿ û∆¿ ûÔ¿ ûˆ¿ û˜¿ ü¿ üj¿ üñ¿ üù¿ üû¿ ü»¿ †	¿ †)¿ †0¿ †Z¿ †¶¿ †—¿ †ÿ¿ †ˆ¿ °N¿ °Ö¿ °å¿ °™¿ °Ô¿ ¢(¿ ¢_¿ ¢†¿ ¢¬¿ ¢Í¿ £	¿ £0¿ £p¿ £}¿ £à¿ £ë¿ £ò¿ £æ¿ §¿ §'¿ §.¿ §T¿ §†¿ §À¿ §“¿ §”¿ §¯¿ •C¿ •l¿ •s¿ •ë¿ •œ¿ ¶¿ ¶6¿ ¶g¿ ¶ô¿ ¶ö¿ ¶Ã¿ ¶Ú¿ ß'¿ ß^¿ ßì¿ ßÃ¿ ®¿ ®O¿ ®â¿ ®î¿ ®±¿ ®Â¿ ®Ô¿ ©I¿ ©J¿ ©k¿ ©π¿ ©ƒ¿ ©Õ¿ ©‘¿ ©Ú¿ ™;¿ ™c¿ ™j¿ ™à¿ ™∆¿ ™„¿ ™Í¿ ´¿ ´I¿ ´i¿ ´p¿ ´é¿ ´”¿ ´˜¿ ´˛¿ ¨¿ ¨¿ ¨¿ ¨;¿ ¨\¿ ¨`¿ ¨a¿ ¨ï¿ ¨õ¿ ¨Ï¿ ≠¿ ≠1¿ ≠>¿ ≠Z¿ ≠o¿ ≠è¿ ≠®¿ ≠π¿ ≠Ω¿ ≠æ¿ ≠Ê¿ ≠Ï¿ Æ/¿ ÆM¿ Æb¿ Æo¿ ÆÄ¿ Æô¿ Æ±¿ Æ»¿ ÆÁ¿ ÆÎ¿ ÆÏ¿ Ø¿ Ø#¿ Øl¿ Øï¿ Ø¢¿ Ø≈¿ ∞¿ ∞-¿ ∞;¿ ∞A¿ ∞s¿ ∞w¿ ∞x¿ ∞º¿ ∞÷¿ ∞¯¿ ±¿ ±E¿ ±`¿ ±Ö¿ ±ç¿ ±º¿ ±¬¿ ±∆¿ ±«¿ ≤¿ ≤B¿ ≤O¿ ≤Ç¿ ≤ú¿ ≤Ø¿ ≤µ¿ ≤∂¿ ≥2¿ ≥X¿ ≥Ç¿ ≥ò¿ ≥˚¿ ¥4¿ ¥U¿ ¥i¿ ¥â¿ ¥√¿ ¥Ò¿ µ¿ µ¿ µM¿ µs¿ µï¿ µù¿ µ£¿ µ≤¿ µ∂¿ µ∑¿ ∂¿ ∂C¿ ∂P¿ ∂Ç¿ ∂¬¿ ∂∆¿ ∂«¿ ∑¿ ∑¿ ∑Y¿ ∑©¿ ∑∑¿ ∑ƒ¿ ∑¸¿ ∏¿ ∏%¿ ∏+¿ ∏,¿ ∏m¿ ∏Ö¿ ∏‡¿ ∏Ê¿ ∏˝¿ π¿ π¿ πP¿ πf¿ πl¿ πΩ¿ ∫¿ ∫Y¿ ∫_¿ ∫≠¿ ∫Û¿ ª ¿ ªH¿ ªq¿ ªé¿ ª™¿ ª∞¿ ª√¿ ª«¿ ª»¿ º¿ º¿ º%¿ ºt¿ ºê¿ ºù¿ ºŒ¿ º‰¿ ºÚ¿ º¯¿ º˘¿ ΩC¿ Ωd¿ Ωæ¿ Ωƒ¿ æ¿ æ\¿ æb¿ æè¿ æì¿ æî¿ æ‚¿ æÒ¿ æ˜¿ øF¿ øç¿ ø¶¿ ø≥¿ ø¬¿ øÏ¿ ¿%¿ ¿)¿ ¿i¿ ¿ò¿ ¿ú¿ ¿ù¿ ¿È¿ ¡+¿ ¡1¿ ¡Ä¿ ¡«¿ ¡‡¿ ¡ı¿ ¬¿ ¬%¿ ¬K¿ ¬n¿ ¬r¿ ¬s¿ ¬ø¿ ¬Œ¿ ¬‘¿ √#¿ √j¿ √É¿ √ê¿ √–¿ ƒC¿ ƒD¿ ƒè¿ ƒ∂¿ ƒÁ¿ ƒÌ¿ ƒÓ¿ ≈¿ ≈B¿ ≈F¿ ≈G¿ ≈ì¿ ≈Ø¿ ≈µ¿ ∆¿ ∆K¿ ∆d¿ ∆q¿ ∆¥¿ ∆€¿ ∆È¿ ∆Ô¿ «b¿ «c¿ «∞¿ «‡¿ «·¿ »¿ »5¿ »9¿ »:¿ »Ü¿ »õ¿ »®¿ »Ω¿ »¿ …¿ …¿ …Y¿ …å¿ …î¿ …ò¿ …ô¿ …Ë¿  2¿  8¿  i¿  o¿  Ω¿ À¿ À¿ ÀM¿ À¿ ÀÉ¿ ÀÑ¿ À—¿ Ã	¿ Ã¿ Ã@¿ ÃF¿ Ãó¿ Ã›¿ ÃÍ¿ Õ'¿ Õ^¿ Õ}¿ ÕØ¿ Õ«¿ Õ—¿ Õ¸¿ Œ1¿ Œ@¿ Œk¿ ŒÉ¿ Œç¿ Œ¬¿ Œ¿ Œ¯¿ œ&¿ œu¿ œú¿ œ≠¿ œ˛¿ –.¿ –`¿ –á¿ –£¿ –∞¿ –∫¿ –¬¿ –’¿ –€¿ –Ì¿ –Ò¿ –Ú¿ —:¿ —d¿ —y¿ —z¿ —√¿ —ﬂ¿ —¿ “¿ “¿ “d¿ “ù¿ “‹¿ ”¿ ”¿ ”-¿ ”6¿ ”<¿ ”@¿ ”A¿ ”ì¿ ”–¿ ‘ ¿ ‘g¿ ‘â¿ ‘º¿ ‘ƒ¿ ‘ ¿ ‘€¿ ‘ﬂ¿ ‘‡¿ ’1¿ ’L¿ ’a¿ ’ñ¿ ’«¿ ’Ú¿ ’Û¿ ÷8¿ ÷b¿ ÷à¿ ÷Æ¿ ÷∑¿ ÷æ¿ ÷ø¿ ÷¯¿ ◊E¿ ◊ê¿ ◊Œ¿ ÿ¿ ÿG¿ ÿè¿ ÿﬁ¿ Ÿ¿ Ÿ+¿ Ÿs¿ Ÿä¿ ŸÕ¿ Ÿ—¿ Ÿ“¿ ⁄ ¿ ⁄i¿ ⁄o¿ ⁄º¿ ⁄˜¿ €¿ €;¿ €w¿ €{¿ €|¿ €º¿ €‰¿ ‹	¿ ‹*¿ ‹g¿ ‹ä¿ ‹¡¿ ‹Œ¿ ›T¿ ›Z¿ ›[¿ ›®¿ ›¥¿ ›ˇ¿ ﬁ¿ ﬁ¿ ﬁ¿ ﬁà¿ ﬁ§¿ ﬁ∑¿ ﬁΩ¿ ﬁ€¿ ﬂ¿ ﬂc¿ ﬂå¿ ﬂì¿ ﬂó¿ ﬂò¿ ﬂ¯¿ ‡8¿ ‡[¿ ‡ê¿ ‡ ¿ ‡¸¿ ·"¿ ·X¿ ·k¿ ·w¿ ·Å¿ ·â¿ ·è¿ ·∂¿ ·∫¿ ·ª¿ ‚.¿ ‚U¿ ‚°¿ ‚ ¿ ‚Œ¿ ‚œ¿ „9¿ „p¿ „ì¿ „≤¿ „‹¿ „‚¿ ‰"¿ ‰&¿ ‰'¿ ‰L¿ ‰g¿ ‰î¿ ‰ö¿ ‰¿¿ ‰ƒ¿ ‰≈¿ ‰˚¿ Â@¿ Âd¿ Âx¿ Â~¿ Â∫¿ Âæ¿ Âø¿ Â˘¿ Ê.¿ Ê/¿ ÊÅ¿ Ê®¿ Ê⁄¿ Á¿ ÁO¿ ÁU¿ Áê¿ Á∏¿ ÁÕ¿ Á’¿ Á€¿ ÁÌ¿ ÁÒ¿ ÁÚ¿ Ë,¿ Ëb¿ Ë§¿ Ë√¿ Ë›¿ Ë„¿ È&¿ ÈW¿ Èj¿ Èn¿ Èo¿ Èø¿ Í¿ ÍK¿ Íõ¿ Í´¿ Í∞¿ ÍÏ¿ Î)¿ ÎT¿ Îá¿ ÎΩ¿ Ï¿ Ï"¿ Ï&¿ Ï'¿ Ïî¿ Ï˘¿ Ì.¿ ÌÇ¿ Ìï¿ Ì∏¿ Ì”¿ Ì€¿ Ì·¿ Ó ¿ Ó$¿ Ó%¿ ÓP¿ Óq¿ Ó†¿ Ó∆¿ ÓÕ¿ Ô¿ Ô¿ Ô¿ Ôa¿ Ôì¿ Ô†¿ ÔÂ¿ /¿ 3¿ 4¿ Å¿ À¿ „¿ Ò¿ Ò¿ Òä¿ Òé¿ Òè¿ Ò‹¿ Ú¿ ÚQ¿ Úô¿ Úù¿ Úû¿ ÚÈ¿ Û<¿ Ûµ¿ Ù7¿ Ù;¿ Ù<¿ Ùâ¿ Ù◊¿ ı¿ ı¿ ıW¿ ı•¿ ıˆ¿ ˆD¿ ˆY¿ ˆ_¿ ˆo¿ ˆu¿ ˆ√¿ ˆ“¿ ˜ ¿ ˜s¿ ˜w¿ ˜x¿ ˜º¿ ˜Û¿ ¯¿ ¯#¿ ¯$¿ ¯a¿ ¯v¿ ¯∫¿ ¯ﬁ¿ ˘¿ ˘¿ ˘¿ ˘"¿ ˘#¿ ˘x¿ ˘¬¿ ˘⁄¿ ˘Û¿ ˘˘¿ ˘˙¿ ˙Ü¿ ˙›¿ ˙·¿ ˙‚¿ ˚/¿ ˚|¿ ˚†¿ ˚¶¿ ˚Ú¿ ¸*¿ ¸z¿ ¸œ¿ ¸”¿ ¸‘¿ ˝,¿ ˝v¿ ˝Ã¿ ˛^¿ ˛‡¿ ˛‰¿ ˛Â¿ ˇ¿ ˇL¿ ˇ_¿ ˇe¿ ˇã¿ ˇØ¿ ˇ¬¿ ˇ»¿ ¿ M¿ d¿ w¿ }¿ Æ¿ ≤¿ ≥¿ ·¿ ˚¿(¿.¿h¿l¿m¿ñ¿∑¿‰¿Í¿(¿Y¿ü¿Ø¿º¿¿˜¿¿¿¿[¿l¿ó¿Œ¿“¿”¿¿•¿©¿™¿Ù¿B¿x¿∫¿æ¿ø¿Ú¿
¿¿Ü¿û¿ﬁ¿¿"¿A¿\¿s¿Ω¿∆¿Õ¿—¿“¿”¿¿=¿C¿z¿æ¿œ¿	9¿	Ä¿	™¿	 ¿
¿
<¿
â¿
ï¿
ü¿
æ¿
«¿
Œ¿¿'¿/¿3¿4¿u¿¬¿˘¿ˇ¿N¿ú¿±¿∑¿«¿Õ¿¿7¿S¿p¿à¿¢¿©¿¿¿	¿5¿S¿j¿Ä¿Ü¿–¿Ë¿˚¿¿¿%¿K¿i¿ç¿Æ¿≈¿Œ¿’¿Ÿ¿⁄¿+¿8¿Ñ¿´¿È¿Ô¿0¿4¿5¿{¿û¿§¿ı¿D¿á¿¡¿¿_¿≠¿˝¿!¿.¿N¿d¿¿õ¿¥¿‘¿Ò¿˛¿7¿J¿P¿º¿ˆ¿	¿¿¿9¿p¿ó¿£¿ª¿‹¿Ù¿ı¿E¿ì¿„¿¸¿'¿<¿D¿J¿K¿ä¿£¿÷¿‹¿¸¿¿¿¿>¿S¿c¿á¿≠¿∂¿Ω¿æ¿Ì¿¿¿3¿Q¿X¿\¿]¿î¿∏¿æ¿ı¿:¿q¿©¿Û¿¿N¿h¿r¿x¿í¿û¿ƒ¿‚¿˝¿!¿8¿£¿œ¿*¿P¿}¿â¿ä¿Ú¿¿4¿]¿j¿±¿ ¿ )¿ *¿ l¿ Æ¿ Û¿!$¿!Z¿!°¿!Ã¿!˜¿"*¿"E¿"^¿"®¿"Ó¿#6¿#t¿#Ç¿#é¿#è¿#ü¿#—¿$
¿$R¿$°¿$›¿%¿%%¿%X¿%ï¿%‘¿&¿&T¿&ï¿&©¿&π¿&¸¿'
¿'"¿'c¿'ç¿'ô¿'ö¿'™¿'◊¿(¿(>¿({¿(∫¿(À¿(Ã¿)¿)D¿)Ö¿)±¿)Ì¿*%¿*^¿*ü¿*“¿+¿+¿+(¿+]¿+ñ¿+”¿,¿,#¿,1¿,I¿,j¿,v¿,ó¿,¢¿,´¿,≤¿,Û¿-¿-¿-¿-¿-e¿-é¿-√¿.¿.:¿.T¿.É¿.ª¿.Ù¿/¿/@¿/c¿/{¿/É¿/â¿/»¿/·¿/È¿/Ì¿/Ó¿0>¿0g¿0†¿0Ì¿1¿10¿1_¿1ó¿1–¿1˙¿2¿2?¿2W¿2_¿2e¿2§¿2º¿2ƒ¿2»¿2…¿2¸¿3 ¿3&¿3O¿3†¿3¿¿3Ë¿3Ô¿4!¿4K¿4l¿4ï¿4ú¿4≈¿4ﬂ¿5¿5F¿5h¿5û¿5÷¿5¯¿6¿61¿69¿6?¿6~¿6ñ¿6û¿6¢¿6£¿6€¿7¿7*¿7@¿7H¿7N¿7Å¿7Ö¿7Ü¿7‚¿7˙¿88¿8É¿8ä¿8é¿8è¿8„¿9E¿9|¿9ﬂ¿9„¿9‰¿:4¿:Ç¿:“¿:ﬁ¿;1¿;X¿;ñ¿;ú¿;‰¿;Ë¿;È¿<7¿<ô¿<ù¿<û¿<Û¿=¿=^¿=d¿=∆¿=˜¿>=¿>X¿>£¿>€¿>˝¿?¿?¿? ¿?<¿?B¿?•¿?©¿?™¿@¿@£¿@ß¿@®¿@È¿@Ô¿A<¿A_¿A≥¿A◊¿A€¿A‹¿A¸¿A˝¿B¿B¿BF¿Bc¿B§¿B®¿B©¿B“¿B˜¿C7¿C=¿C]¿Cù¿C£¿Cß¿C®¿C˜¿D2¿D6¿D7¿DÅ¿D∫¿D¿¿E¿E<¿EI¿E[¿Eq¿Eó¿E∏¿Eø¿E˛¿F¿F¿FM¿F{¿FÅ¿F—¿F˝¿G
¿G+¿GJ¿GN¿GO¿G§¿G˘¿G˙¿H5¿HU¿HY¿HZ¿Há¿Hë¿HÁ¿I¿Id¿I≠¿I˝¿J¿J/¿J7¿JY¿JZ¿Jß¿J‹¿K¿KD¿Kí¿K±¿K…¿K”¿K¯¿L¿L¿L¿L<¿L\¿Ly¿Lô¿L±¿L‡¿M'¿M2¿M;¿MA¿ME¿MF¿Mò¿M≈¿MÀ¿N ¿N+¿NH¿N[¿Ns¿Nw¿Ny¿Nz¿N¬¿N∆¿O¿O]¿Ot¿Oá¿O£¿Oπ¿O“¿Oÿ¿OŸ¿OÏ¿O¸¿O˝¿P9¿PM¿PN¿Pj¿Pk¿PÜ¿Pò¿Pô¿P∞¿P¡¿P—¿P’¿P÷¿PÒ¿Q¿Q¿Q¿Q¿Q¿Ql¿Q¶¿Q™¿Q˚¿RK¿Rú¿RË¿S¿S¿Sg¿S¥¿Sœ¿SÙ¿T¿T#¿Tk¿Tµ¿TÕ¿T“¿U¿U7¿Us¿Ut¿Uõ¿U’¿U÷¿V¿V¿Vl¿VÄ¿V¿¿V¡¿W¿WO¿Wm¿Wó¿W¬¿W–¿W÷¿X¿XX¿Xt¿XÇ¿Xà¿X¥¿Xµ¿Xœ¿Y¿YO¿YÖ¿Y©¿Y√¿YÀ¿YÈ¿Z¿Z¿Zm¿Zv¿Zè¿Z∞¿Z∏¿Z“¿Zﬂ¿Z˙¿[ ¿[¿[P¿[ù¿[Í¿\1¿\A¿\X¿\v¿\ë¿\ô¿\≤¿\∏¿\º¿\Ω¿\‰¿\˚¿]H¿]ò¿]›¿^'¿^t¿^¶¿^◊¿^Ï¿^Ú¿_¿_
¿_¿_Z¿_x¿_≤¿_˜¿`¿`6¿`S¿`s¿`y¿`z¿`≥¿`‡¿`¯¿`ˇ¿a ¿a:¿a]¿aì¿a›¿b¿bI¿bä¿b£¿bº¿b«¿c¿c¿cI¿cO¿cP¿cô¿cº¿d+¿dd¿dó¿dÍ¿e"¿e>¿e\¿e|¿eû¿e´¿e∂¿e∑¿e‡¿f¿fD¿ft¿f|¿f®¿fÆ¿fØ¿f¬¿f‹¿fÌ¿fÒ¿fÛ¿fÙ¿g¿g>¿g?¿gK¿gÑ¿gÜ¿gá¿g ¿gŒ¿h¿hf¿h∞¿h˙¿i¿i¿iG¿iK¿iõ¿iÈ¿j7¿jÇ¿j ¿jˆ¿j˙¿kE¿kê¿k·¿l.¿lv¿l•¿l„¿lÈ¿m¿m0¿m?¿mX¿m¿mÖ¿mÜ¿m∞¿m∆¿m«¿n¿n	¿nW¿n¿n∫¿nª¿n«¿o
¿o¿o¿oH¿oj¿ok¿oæ¿oø¿oﬂ¿o‡¿p¿p¿p6¿p<¿pã¿p“¿q¿q5¿q6¿qi¿qj¿q∂¿qÁ¿r¿r¿rT¿r`¿ru¿rå¿rç¿r≤¿r∆¿s¿s$¿s.¿s5¿sè¿sì¿sî¿s†¿s≥¿t¿t[¿ta¿tv¿tz¿t{¿tí¿tØ¿t–¿tÂ¿t˛¿u¿u¿u1¿ul¿uá¿uÿ¿u˚¿v¿v¿ve¿vf¿v±¿vÈ¿w ¿w`¿wê¿w¢¿w™¿wÔ¿x9¿x~¿xê¿xò¿xô¿x—¿y
¿yW¿yk¿ys¿yy¿yz¿y©¿y”¿yÂ¿z/¿zu¿zõ¿z‡¿z˛¿{¿{¿{¿{3¿{9¿{I¿{M¿{N¿{ù¿{∞¿{∂¿|¿|P¿|ú¿|∑¿|˙¿}7¿}q¿}r¿}»¿}˙¿~!¿~U¿~|¿~Ç¿~ÿ¿¿¿4¿;¿U¿Y¿Z¿¿ò¿¶¿¨¿≠¿Ä)¿Äc¿Ä™¿Ä´¿ÄΩ¿Ä‰¿ÄÏ¿Ä¿ÄÒ¿Å ¿ÅQ¿Åw¿Å{¿Å|¿ÅØ¿Å‡¿Ç¿Ç
¿Ç¿Ç:¿Çà¿Çÿ¿É(¿Éy¿ÉΩ¿ÉÔ¿Ñ_¿Ñí¿Ñ¶¿Ñ¡¿ÑÀ¿Ñ—¿Ñ’¿Ñ÷¿ÑÏ¿Ö¿Ö¿Ö¿ÖA¿Öj¿Ö∂¿Öº¿ÖŒ¿Ü¿ÜL¿Üj¿Ür¿Üz¿Ü~¿Ü¿Üû¿Ü∞¿ÜÀ¿Ü”¿Ü◊¿Üÿ¿Ü‰¿á¿áT¿áô¿á‡¿à¿à¿à7¿àZ¿à{¿à¢¿àÃ¿à¿â¿â0¿âR¿âq¿â|¿âÖ¿âƒ¿âÿ¿âˇ¿ä(¿ät¿ä¿äÆ¿ä∂¿ä∫¿äº¿äΩ¿äÎ¿ã¿ã?¿ãE¿ãÖ¿ãπ¿ãÓ¿å¿å4¿åD¿å[¿å_¿å`¿å¶¿å¡¿å”¿åÏ¿ç ¿ç¿ç¿ç¿ç>¿çO¿çs¿çÉ¿çö¿çû¿çü¿ç‚¿çË¿é,¿é2¿éb¿éõ¿éú¿é∂¿é€¿é¯¿è¿èY¿è_¿èc¿èd¿è¥¿è∫¿è˛¿ê¿ê4¿êT¿ê°¿ê•¿ê¶¿ê¬¿êÎ¿ë¿ë5¿ëL¿ëZ¿ë`¿ëÖ¿ë¶¿ë‘¿ë⁄¿ëﬁ¿ëﬂ¿ë˙¿í ¿íD¿íê¿íù¿í¥¿í“¿íÿ¿í‹¿í›¿ì*¿ì>¿ì{¿ì}¿ì~¿ì∑¿ì”¿ì¿ìˆ¿ì˜¿î¿î¿î*¿îo¿î©¿î≠¿îÆ¿î∫¿ï¿ï:¿ï>¿ï@¿ïA¿ïs¿ïô¿ïﬁ¿ï¸¿ï˝¿ñ/¿ñP¿ñ|¿ñõ¿ñµ¿ñª¿ñ—¿ñ’¿ñ÷¿ñ‚¿ó¿ó¿ó¿ó<¿ó=¿óI¿ó¿ó∞¿ó¥¿óµ¿ó¡¿ó¯¿ò¿òC¿òî¿ò∞¿òÒ¿ò˘¿ò˝¿òˇ¿ô ¿ô¿ô$¿ôd¿ôà¿ôª¿ôº¿ôœ¿ôÍ¿ôÎ¿ô˜¿ö¿öF¿öZ¿ö`¿öÖ¿ö£¿öÃ¿ö–¿ö—¿ö›¿õ¿õ¿õ¿õW¿õ[¿õ´¿õ¬¿õÕ¿õÚ¿ú¿ú8¿úT¿úr¿úç¿úÆ¿ú¥¿úµ¿úœ¿úÚ¿ù¿ù5¿ùZ¿ù[¿ùg¿ùä¿ù∂¿ù ¿ù–¿û¿û-¿ûS¿ûô¿ûæ¿û¬¿û√¿ûœ¿ü.¿ü0¿ü1¿üR¿üö¿üÔ¿†D¿†E¿†ê¿†«¿†À¿°¿°i¿°ñ¿°—¿°Ï¿¢¿¢(¿¢L¿¢S¿¢q¿¢Å¿¢õ¿¢Æ¿¢∏¿¢–¿£¿£¿£j¿£î¿£ü¿£©¿£Ø¿£≥¿£¥¿£‘¿£’¿§#¿§1¿§7¿§Ü¿§ß¿§¡¿§¬¿•¿•I¿•q¿•r¿•û¿•ü¿•»¿•‰¿•Â¿¶¿¶"¿¶#¿¶/¿¶B¿¶_¿¶x¿¶ç¿¶ë¿¶í¿¶û¿¶À¿¶Ë¿¶ˆ¿¶¸¿¶˝¿ß3¿ß4¿ßi¿ßw¿ß}¿ß~¿ß¬¿®¿®:¿®u¿®á¿®è¿®‘¿®⁄¿®€¿©(¿©H¿©Ü¿©¿¿©Ë¿™¿™¿™¿™-¿™G¿™n¿™t¿™£¿™ß¿™®¿™È¿´'¿´f¿´î¿´ﬁ¿´˛¿¨C¿¨D¿¨h¿¨ã¿¨ø¿¨¿¿¨Ê¿≠¿≠%¿≠[¿≠\¿≠à¿≠Õ¿≠ÿ¿≠Á¿Æ¿ÆJ¿Æ{¿Æé¿Æè¿Æ‡¿Ø*¿Øg¿ØÆ¿Øª¿ØÃ¿∞¿∞F¿∞[¿∞a¿∞b¿∞ô¿∞Œ¿∞’¿±¿±G¿±ï¿±ñ¿≤¿≤¿≤P¿≤h¿≤å¿≤ê¿≤ë¿≤´¿≤æ¿≤“¿≤Û¿≥¿≥!¿≥0¿≥E¿≥K¿≥^¿≥¥¿≥Ù¿¥U¿¥|¿¥õ¿¥æ¿¥Â¿µ ¿µ?¿µg¿µç¿µì¿µî¿∂ ¿∂3¿∂E¿∂c¿∂y¿∂ü¿∂π¿∂¿¿∂¡¿∂Ì¿∑¿∑:¿∑O¿∑f¿∑y¿∑Ω¿∑∆¿∑ﬂ¿∑Ê¿∑Á¿∏	¿∏A¿∏Z¿∏~¿∏Ñ¿∏Ö¿∏∏¿∏ˇ¿πP¿πy¿π£¿πÕ¿∫¿∫¿∫e¿∫ƒ¿∫⁄¿∫ﬁ¿∫ﬂ¿∫Î¿∫¯¿ª"¿ªB¿ª^¿ªs¿ªz¿ªå¿ªê¿ªë¿ªﬁ¿ªÍ¿º6¿ºÉ¿º¥¿º¿Ω¿Ω8¿Ωn¿Ωè¿ΩÃ¿Ω¯¿æ ¿æ ¿æ&¿æ8¿æ<¿æ>¿æ?¿æg¿æå¿æ∑¿æ∏¿ø¿ø(¿øN¿øO¿øz¿øñ¿ø®¿ø∑¿ø∫¿øª¿¿¿¿$¿¿(¿¿s¿¿ç¿¿≥¿¿œ¿¿—¿¿“¿¡ ¿¡4¿¡F¿¡Z¿¡r¿¡ä¿¡§¿¡‹¿¡Î¿¡Ò¿¡Ú¿¬¿¬(¿¬)¿¬D¿¬V¿¬W¿¬t¿¬à¿¬â¿¬Ã¿¬‚¿¬„¿√¿√A¿√U¿√i¿√Å¿√à¿√†¿√ª¿√¡¿√“¿√÷¿√◊¿√„¿√˘¿ƒ$¿ƒ<¿ƒT¿ƒZ¿ƒo¿ƒò¿ƒ¥¿ƒ∏¿ƒ∫¿ƒª¿≈
¿≈¿≈\¿≈`¿≈µ¿≈‹¿≈‡¿∆<¿∆ô¿∆Æ¿∆Œ¿∆“¿«¿«-¿«`¿«Ä¿«õ¿«®¿«Æ¿«≤¿«“¿»¿»A¿»~¿»ú¿»¢¿»√¿…¿…¿…-¿…H¿…W¿…q¿…y¿…¿…É¿…ù¿…Æ¿…∞¿…±¿…‹¿…‡¿ ¿ O¿ g¿ Ö¿ â¿ ™¿ ≤¿ ı¿À'¿Àd¿À¿Àö¿ÀŒ¿ÀË¿À˛¿Ã#¿ÃZ¿Ã‹¿ÃÁ¿ÃÒ¿Ã˘¿Õ¿Õ¿Õ¿Õ ¿ÕU¿Õh¿ÕÜ¿Õä¿ÕŒ¿ÕÏ¿Œ¿ŒH¿Œî¿Œ›¿ŒÊ¿Œ˚¿œ¿œ¿œ¿œ"¿œc¿œö¿œÌ¿–¿–
¿–¿–"¿–&¿–'¿–b¿–ä¿–⁄¿–ı¿—%¿—P¿—Q¿—°¿—Ò¿“7¿“V¿“É¿“÷¿”¿”;¿”ì¿”µ¿”¬¿”Ã¿”‘¿”’¿”˚¿‘¿‘N¿‘u¿‘‹¿‘È¿‘Ù¿’¿’l¿’v¿’ä¿’ê¿’°¿’•¿’∆¿’˘¿’˝¿÷¿÷¿÷¿÷?¿÷C¿÷è¿÷°¿÷•¿÷ﬁ¿◊#¿◊w¿◊}¿◊ ¿ÿ¿ÿm¿ÿs¿ÿ±¿ÿÏ¿Ÿ9¿Ÿ;¿Ÿ<¿Ÿf¿Ÿj¿Ÿ´¿ŸØ¿Ÿ˙¿Ÿ˛¿⁄?¿⁄[¿⁄é¿⁄¶¿⁄¥¿⁄Ú¿€¿€g¿€m¿€~¿€Ü¿€ò¿€ö¿€õ¿€À¿€œ¿‹ ¿‹]¿‹é¿‹–¿‹Ì¿›<¿›>¿›?¿›î¿›ò¿›¿¿›ƒ¿ﬁ¿ﬁ¿ﬁc¿ﬁñ¿ﬁ“¿ﬁÒ¿ﬁÛ¿ﬁÙ¿ﬂ+¿ﬂn¿ﬂp¿ﬂq¿ﬂµ¿ﬂπ¿‡¿‡¿‡X¿‡ä¿‡Ï¿·7¿·9¿·:¿·á¿·ƒ¿··¿‚¿‚Q¿‚R¿‚z¿‚ü¿‚≥¿‚¬¿‚∆¿‚‡¿‚¸¿„¿„)¿„+¿„,¿„u¿„û¿„±¿‰¿‰W¿‰|¿‰ü¿‰≥¿‰—¿‰˛¿Â$¿Â?¿Âc¿Â~¿Â®¿ÂÆ¿ÂØ¿Â˜¿Ê¿Ê ¿Êj¿Êâ¿Êè¿Ê›¿Á%¿Á@¿ÁA¿Áê¿Á™¿Á´¿ÁÌ¿Ë¿Ë¿Ë%¿ËE¿ËF¿ËR¿Ël¿Ëm¿Ëy¿Ëú¿Ëù¿ËÂ¿ËÎ¿È=¿Èâ¿È≈¿Í>¿Í?¿Íê¿Íë¿Íø¿Í¿¿ÍÃ¿Î¿ÎQ¿Îw¿Îè¿Î ¿Î–¿ÎÁ¿Ï¿Ï¿ÏV¿Ïz¿Ï∏¿Ï˘¿Ì>¿Ìm¿Ìù¿Ì•¿Ì´¿Ìﬁ¿Ó7¿Ó=¿ÓP¿ÓT¿ÓU¿Óa¿Ó¨¿ÓÒ¿Ô:¿ÔÉ¿Ôœ¿¿k¿û¿Æ¿≤¿≥¿ø¿Ò¿ÒM¿ÒQ¿ÒR¿Ò^¿ÒΩ¿Ú¿ÚA¿Ú•¿Ú∂¿Ú∫¿Úª¿Ú«¿Û(¿ÛV¿Ûv¿ÛÆ¿Û˙¿Ù ¿Ù¿Ù¿Ù¿Ù#¿Ùõ¿Ù∆¿Ù‚¿ı¿ıF¿ıï¿ıÃ¿ˆ¿ˆ*¿ˆr¿ˆy¿ˆ}¿ˆ¿ˆÄ¿ˆ©¿ˆ¿¿ˆ⁄¿ˆ‹¿ˆ›¿˜*¿˜H¿˜L¿˜ö¿˜„¿¯,¿¯x¿¯≈¿¯œ¿¯”¿˘ ¿˘g¿˘∂¿˙¿˙¿˙¿˙k¿˙π¿˙„¿˙Á¿˚4¿˚D¿˚H¿˚é¿˚í¿˚¶¿˚™¿˚ˆ¿¸ ¿¸$¿¸0¿¸Z¿¸o¿¸¢¿¸Ÿ¿¸·¿¸Á¿¸Ô¿¸Û¿˝;¿˝Ö¿˝√¿˝«¿˝”¿˝˛¿˛¿˛H¿˛P¿˛T¿˛d¿˛h¿˛v¿˛z¿ˇ¿ˇT¿ˇú¿ˇπ¿ˇË¿ ¿  ¿ P¿ c¿ y¿ ©¿ ™¿ Ã¿ ˆ¿ ˜¿¿`¿d¿e¿¥¿–¿÷¿¿¿;¿Z¿g¿ä¿ê¿î¿ï¿»¿Ì¿
¿*¿7¿U¿[¿_¿`¿ö¿Ø¿Ã¿Ú¿ˇ¿.¿J¿_¿e¿i¿j¿ê¿°¿√¿‹¿‡¿‚    Ä•  Ä∫ Ä”ÄﬂÄ·  Ä¯Å ÅÅ5 Å:ÅOÅUÇÇ   ÇJ  Çs  Çú  Ç√  Ç÷  ÇÎ  É  É  É0  ÉP  Ér    Ö ÇOÜsÄ¢/// A layer that mimics the behavior of another layer.
///
/// A proxy layer is used for cases where a layer needs to be placed into
/// multiple trees of layers. Üë ÜëÜú ÜùÜ£   ÜÆÜ∫   Ü≈ZÜ÷  Ü·ÜÚ  Ü≈Ü∆á#ÄÙáA áQáQáhá}  áàáê  á§á≥  á#á$á/á0 àò¨à‡Äæ/// A [Canvas] that multicasts all method calls to a main canvas and a
/// secondary screenshot canvas so that a screenshot can be recorded at the same
/// time as performing a normal paint. âÄÇ ââ ââ/  â8âI  âaâ[âcâ|âpâ~âçâö  â£â∞   "â¿Äµâ—  â⁄	â‡  âÁâÌ  â¿â¡â˙äyÄºää  äîäõ  ä£ä©  äyäzä∂ã9Ä˝ãJ  ãS	ãY  ã`&ãk  ãàãé  ã9ã:ãsãuãvã|ã}ãõå:Ä¯åK  åS	åY  å^åf  åqåy  åÑåä  åîåõ  å:å;ç6ÅTçG  çQç[  çaçt  ççã  çëçü  ç¶ç≤  çºç√  çÃç”  ç6ç7ééÄùéü  é™é≤  é¥éº  é√é   éééèè/Äñè@  èJèQ  èWèb  è/è0è…Ä§è⁄  èÂèÏ  èÚè˘  èˇê  è…è êqÄôêÇ  êåêñ  êúê§  ê¶ê≠  êqêrëÄ∆ë  ë-ë7  ë=ëC  ëJëP  ëTë[  ëëëÿÄΩëÈ  ë˜í  íí  íí  íí"  ëÿëŸíôÄéí™  í≥	íª  íæ	í∆  í…í–  íôíöì+ì<  ìE	ìK  ìPìW  ì+ì,ìÆkìø  ì…ì–  ìÆìØîÄ©î.  î<îJ  îTî\  îîî î€  î‰	îÍ  îÔîˆ  î îÀïM|ï^  ïjïv  ïMïNïÕÄ¡ïﬁ  ïÈï˜  ññ  ññ  ïÕïŒñíÄÜñ£  ñ≠ñ¥  ñ∫ñ¡  ñíñìóÅ_ó-  ó:óD  óJóW  óeór  óxóÑ  óãóó  ó°ó®  ó±ó∏  óóòÄ…òê  òûò¨  ò∂ò√  ò ò—  òòÄôLô]  ôf	ôl  ôqôx  ôLôMôœÄÒô‡  ôÎ	ôÒ  ôˆô˝  öö  öö  ôœô–öƒÄ…ö’  ö‚öÔ  ö¯õ  õõ  öƒö≈õëÅcõ°   õëõíú¯Pù	   ú¯ú˘ùLiù]  ùdùl  ùLùMùπGù    ùπù∫ûÄâû  ûû&  û-û4  ûûûëoû¢  û®	û∞  ûµ
ûæ  ûëûíügü  ü	ü"  ü%	ü-  üüüowüÄ  üäüó  üoüpüÍvü˚  †	†  †	†  üÍüÎ†da†x  †Ö†ë  †d†e §◊Å6•~Ä†/// A layer that omits its own offset when adding children to the scene so that
/// screenshots render to the scene in the local coordinate system of the layer.    •∞[•¡  •Ã•›  •∞•± ¶ÖT¶u_/// Data shared between nested [_ScreenshotPaintingContext] objects recording
/// a screenshot. ¶â` ¶â¶ò ¶ü¶Æ  ¶À¶º¶Õ¶Ê¶Á¶Ì?ß&#/// Target to take a screenshot of. ß1Xß{5/// Root of the layer tree containing the screenshot. ßégß‚L/// Whether the screenshot target has already been found in the render tree.ßß˙Äƒ®£Äõ/// Whether paint operations should record to the screenshot.
///
/// At least one of [includeInScreenshot] and [includeInRegularContext] must
/// be true.®π®√Å{™ ÅG/// Whether paint operations should record to the regular context.
///
/// This should only be set to false before paint operations that should only
/// apply to the screenshot such rendering debug information about the
/// [target].
///
/// At least one of [includeInScreenshot] and [includeInRegularContext] must
/// be true.™:™CÄŒ™¿m/// Offset of the screenshot corresponding to the offset [target] was given as
/// part of the regular paint.   ´M´  ´)´1     ´e°û≠ΩÇQ/// A place to paint to build screenshots of [RenderObject]s.
///
/// Requires that the render objects have already painted successfully as part
/// of the regular rendering pipeline.
/// This painting context behaves the same as standard [PaintingContext] with
/// instrumentation added to compute a screenshot of a specified [RenderObject]
/// added. To correctly mimic the behavior of the regular rendering pipeline, the
/// full subtree of the first [RepaintBoundary] ancestor of the specified
/// [RenderObject] will also be rendered rather than just the subtree of the
/// render object. ≠ÙÄÊ ≠ÙÆ Æ&Æ.  ÆAÆP  Æd'Æ~  ÆöÆîÆúÆ≥Æ∏ÆÿÆπÆ…ÆﬁÆÙ  Ø%Ø!  Ø<'ØP  ØgØo  ØÑ"Øñ  Ø´ÅuØ¬   Ø´Ø¨±$Å¸±-    ≥$Ç#≥)    µKyµ\   µKµLµ»ÅÄµÕ    ∑LÇS∑]  ∑i∑p  ∑L∑Mπ£Å„πø  π“π‚  πÌπÛ  π£π§ªäÇªõ  ª¶ª¥  ª∫ª¬  ªäªãΩëèp¿ CYÖy/// Captures an image of the current state of [renderObject] and its children.
///
/// The returned [ui.Image] has uncompressed raw RGBA bytes, will be offset
/// by the top-left corner of [renderBounds], and have dimensions equal to the
/// size of [renderBounds] multiplied by [pixelRatio].
///
/// To use [toImage], the render object must have gone through the paint phase
/// (i.e. [debugNeedsPaint] must be false).
///
/// The [pixelRatio] describes the scale between the logical pixels and the
/// size of the output image. It is independent of the
/// [window.devicePixelRatio] for the device, so specifying 1.0 (the default)
/// will give you a 1:1 mapping between logical pixels and the output pixels
/// in the image.
///
/// The [debugPaint] argument specifies whether the image should include the
/// output of [RenderObject.debugPaint] for [renderObject] with
/// [debugPaintSizeEnabled] set to true. Debug paint information is not
/// included for the children of [renderObject] so that it is clear precisely
/// which object the debug paint information references.
///
/// See also:
///
///  * [RenderRepaintBoundary.toImage] for a similar API for [RenderObject]s
///    that are repaint boundaries that can be used outside of the inspector.
///  * [OffsetLayer.toImage] for a similar API at the layer level.
///  * [dart:ui.Scene.toImage] for more information about the image returned. ¿ Cf¿ Ct  ¿ CÖ¿ Cã  ¿ Cû¿ C¶  ¿ Cª¿ C¡  ¿ C≤¿ CÕ ¿ MÑ{¿ M¸Ä/// A class describing a step along a path through a tree of [DiagnosticsNode]
/// objects.
///
/// This class is used to bundle all data required to display the tree with just
/// the nodes along a path expanded into a single JSON payload. ¿ NÅ ¿ Nº¿ N–Äû/// Creates a full description of a step in a path through a tree of
/// [DiagnosticsNode] objects.
///
/// The [node] and [child] arguments must not be null.¿ N◊¿ NÊ  ¿ NÔ¿ N˛  ¿ O¿ O   ¿ O%i¿ OäL/// Node at the point in the path this [_DiagnosticsPathNode] is describing. ¿ OìÅb¿ PÌÅ1/// Children of the [node] being described.
///
/// This value is cached instead of relying on `node.getChildren()` as that
/// method call might create new [DiagnosticsNode] objects for each child
/// and we would prefer to use the identical [DiagnosticsNode] for each time
/// a node exists in the path. ¿ P˙ÄÉ¿ Qsg/// Index of the child that the path continues on.
///
/// Equal to null if the path does not continue.    ¿ V&É∞¿ VÈÄ©/// Structure to help reference count Dart objects referenced by a GUI tool
/// using [WidgetInspectorService].
///
/// Does not hold the object from garbage collection. ¿ WÅâ ¿ W;¿ WQ4/// Creates an instance of [InspectorReferenceData].¿ WR¿ WZ  ¿ Wa¿ Wg   ¿ Xë¿ X®  ¿ X±¿ Xπ  ¿ XƒK¿ Y9/// The id of the object in the widget inspector records. ¿ YG¿ YR7/// The number of times the object has been referenced.¿ YZ¿ Y`t¿ Y}/// The value.    ¿ V–¿ V—¿NzÇü¿OcÄ‚/// Accumulator for a count associated with a specific source location.
///
/// The accumulator stores whether the source location is [local] and what its
/// [id] for efficiency encoding terse JSON payloads describing counts. ¿Ova ¿Ov¿OÑ ¿Oã¿Oö  ¿Oß¿O∂  ¿OΩ¿OÃ   ¿O€¿O¯/// Location id. ¿OˇL¿PF9/// Whether the location is local to the current project. ¿PP¿P`  ¿Pà¿På ¿Pï¿Pm¿Pu    ¿Põ9¿P∑/// Reset the count.   ¿Pÿ?¿P¯/// Increment the count.    ¿Qï◊¿S’Ç≥/// A stat tracker that aggregates a performance metric for [Element] objects at
/// the granularity of creation locations in source code.
///
/// This class is optimized to minimize the size of the JSON payloads describing
/// the aggregate statistics, for stable memory usage, and low CPU usage at the
/// expense of somewhat higher overall memory usage. Stable memory usage is more
/// important than peak memory usage to avoid the false impression that the
/// user's app is leaking memory each frame.
///
/// The number of unique widget creation locations tends to be at most in the
/// low thousands for regular flutter apps so the peak memory usage for this
/// class is not an issue.  ¿U98¿UU ¿Uo¿Up¿U^¿Un¿U_¿Um¿Uv]¿U∏$/// Locations with a non-zero count.¿U—¿U“¿U¡¿U–¿U¬¿UÿÄÊ¿VùÄ°/// Locations that were added since stats were last exported.
///
/// Only locations local to the current project are included as a performance
/// optimization.¿Vº¿VΩ¿V¨¿Vª¿V≠ ¿V√Ö¯¿WVÄâ/// Increments the count associated with the creation location of [element] if
/// the creation location is local to the current project. ¿WZ¿Wc   ¿\øÇJ¿\Î$/// Clear all aggregated statistics.   ¿_á„¿_èh/// Exports the current counts and then resets the stats to prepare to track
/// the next frame of data. ¿_ú¿_¶    ¿fÙÄë¿f˙  ¿g! ¿g'¿g:     ¿gAB¿gU   ¿gA¿gB ¿gááÑ¿l|ÑÓ/// A widget that enables inspecting the child widget's structure.
///
/// Select a location on your device or emulator and view what widgets and
/// render object that best matches the location. An outline of the selected
/// widget and terse summary information is shown on device with detailed
/// information is shown in the observatory or in IntelliJ when using the
/// Flutter Plugin.
///
/// The inspector has a select mode and a view mode.
///
/// In the select mode, tapping the device selects the widget that best matches
/// the location of the touch and switches to view mode. Dragging a finger on
/// the device selects the widget under the drag location but does not switch
/// modes. Touching the very edge of the bounding box of a widget triggers
/// selecting the widget even if another widget that also overlaps that
/// location would otherwise have priority.
///
/// In the view mode, the previously selected widget is outlined, however,
/// touching the device has the same effect it would have if the inspector
/// wasn't present. This allows interacting with the application and viewing how
/// the selected widget changes position. Clicking on the select icon in the
/// bottom left corner of the application switches back to select mode. ¿lßÄ› ¿m¿m-j/// Creates a widget that enables inspection for the child.
///
/// The [child] argument must not be null.¿m4	¿m;  ¿mC¿mR  ¿m\!¿mk   ¿mà<¿mø'/// The widget that is being inspected. ¿m…ÄÔ¿n•ÄØ/// A builder that is called to create the select button.
///
/// The `onPressed` callback passed as an argument to the builder should be
/// hooked up to the returned widget.  ¿nΩL¿n‡   ¿nΩ¿næ ¿oõÆ¿o  ¿omP ¿om¿oÇ  ¿oë¿oá¿oì¿o©¿o™¿o≤¿o≥¿o¡¿o…  ¿o‚"¿o˚  ¿p	Å*¿q Å/// Whether the inspector is in select mode.
///
/// In select mode, pointer interactions trigger widget selection instead of
/// normal interactions. Otherwise the previously selected widget is
/// highlighted but the application can be interacted with normally.¿q/¿q8/¿qH ¿q\¿qe¿qf¿qlÄ•¿q˝x/// Distance from the edge of the bounding box for an element to consider
/// as selecting the edge of the bounding box.¿r¿r<¿r9   ¿rVÅ<¿rg   ¿rV¿rW¿sñÄ„¿sß   ¿sñ¿só¿t}Üœ¿tÇ  ¿tñ¿t™  ¿t≥¿t«  ¿t‘¿t‹  ¿tÈ¿t˜  ¿u¿u   ¿{PÑ¿|ÃÅZ/// Returns the list of render objects located at the given position ordered
/// by priority.
///
/// All render objects that are not offstage that match the location are
/// included in the list of matches. Priority is given to matches that occur
/// on the edge of a render object's bounding box and to matches found by
/// [RenderBox.hitTest]. ¿|‘¿|‹  ¿|Â¿|Û   ¿\Åì¿a  ¿l¿t   ¿ÄÛÄá¿Ä¯  ¿Å¿Å   ¿Å~Äã¿ÅÉ  ¿Åî¿Åß   ¿ÇÇ«¿Ç  ¿Ç ¿Ç0   ¿ÑÿÅ•¿Ñ›    ¿ÜÅU¿ÜÜ    ¿Ü⁄Éﬂ¿ÜÌ  ¿ÜÛ¿á  ¿Ü⁄¿Ü€ ¿äΩàø¿äÒ-/// Mutable selection state of the inspector.  ¿ãª1¿ãŒ ¿ãÍ¿ãÎ¿ã‹¿ãÈ¿ã›¿å√¿å« ¿å–¿éû¿é¨  ¿ê®¿ê±  	¿ãÄ∞¿ãûx/// Render objects that are candidates to be selected.
///
/// Tools may wish to iterate through the list of candidates.   ¿ãn¿ãÙ  ¿ãˇ¿å   ¿åb^¿å∞C/// Index within the list of candidates that is currently selected.   ¿å’E¿åŸ  ¿åﬂ	¿å‰   ¿ç°Ä˘¿évÄ∏/// Selected render object typically from the [candidates] list.
///
/// Setting [candidates] or calling [clear] resets the selection.
///
/// Returns null if the selection is invalid.   ¿é∏Ä™¿éº  ¿éƒ¿é”   ¿èfÅ>¿êCÄ≈/// Selected [Element] consistent with the [current] selected [RenderObject].
///
/// Setting [candidates] or calling [clear] resets the selection.
///
/// Returns null if the selection is invalid.   ¿êƒÅ¿ê»  ¿ê◊¿ê·   ¿íﬂÄõ¿ìI\/// Whether the selected render object is attached to the tree or has gone
/// out of scope.   ¿ç¿çE/// Set the selection to empty.   ¿ë·Ä˙¿ëÊ     ¿ì~Å¡¿ìÑ  ¿ìπ< ¿ìø¿ì– ¿ì◊¿ìÊ   ¿ì˘"¿î   ¿î Äå¿îD  ¿îW¿îe  ¿î ¿î!¿î∞Äç¿î¡  ¿î‘¿î‚  ¿îÍ$¿ï  ¿î∞¿î± ¿ïAÉΩ¿ïG  ¿ïuÄÜ ¿ïõ¿ï≤#/// The arguments must not be null.¿ïµ%¿ï“  ¿ïÔ¿ï‰¿ïÒ¿ñ1¿ñD  ¿ïˇ/¿ñ    ¿ñRÄÇ¿ñV  ¿ñ`¿ñt   ¿ñÿ+¿ñÌ   ¿ñÿ¿ñŸ¿ó4¿ó   ¿ó¿ó¿ó?t¿óP  ¿óa¿óq  ¿ó?¿ó@¿ó∑ÅE¿ó»  ¿óŒ¿óﬂ  ¿óÁ¿óÔ  ¿ó∑¿ó∏ ¿ô Ç¿ô  ¿ô&Äî ¿ô&¿ô6 ¿ô7¿ôE  ¿ôL¿ô[  ¿ôo¿ôj¿ôq¿ôw¿ôx¿ôò¿ôé¿ôö¿ô†¿ô°¿ôØ¿ô∏¿ô∞¿ôæ¿ô…  ¿ô—¿ôﬂ  ¿ö”=¿öÁ   ¿ö”¿ö‘¿ôÌÄ‚¿ö  ¿ö
¿ö  ¿ôÌ¿ôÓ¿ô ¿ô¿õÑ¿õ”Ä≠/// State describing how the inspector overlay should be rendered.
///
/// The equality operator can be used to determine whether the overlay needs to
/// be rendered again. ¿õÙÄø ¿õ˙¿ú ¿ú¿ú,  ¿ú<¿úK  ¿úX¿úg  ¿úv¿úÖ  ¿úë¿ú†   ¿ú∑¿ú¬  ¿ú—¿úË  ¿úÙ'¿ù  ¿ù¿ù,  ¿ù7!¿ùK  ¿û≈h¿ûŸ   ¿û≈¿û∆¿ù]Åd¿ùw  ¿ùz¿ùÇ  ¿ù]¿ù^¿õ¬¿õ√¿†Eù¯¿°oÅ#/// A layer that outlines the selected [RenderObject] and candidate render
/// objects that also match the last pointer location.
///
/// This approach is horrific for performance and is only used here because this
/// is limited to debug mode. Do not duplicate the logic in production code. ¿°òÇ ¿°”¿°È8/// Creates a layer that displays the inspector overlay.¿°¿°ˇ  ¿¢¿¢  ¿¢,¿¢;   ¿£∂¿£…  ¿£◊ÄË¿§¥Ä«/// The rectangle in this layer's coordinate system that the overlay should
/// occupy.
///
/// The scene must be explicitly recomposited after this property is changed
/// (as described at [Layer]). ¿§ƒÄ´¿•_ÄÇ/// Widget inspector root render object. The selection overlay will be painted
/// with transforms relative to this render object. ¿•t(¿•í  ¿•°A¿•⁄&/// Picture generated from _lastState. ¿•Á¿•Ù  ¿¶¿¶   ¿¶%k¿¶6   ¿¶%¿¶&¿¶îÑ¿¶•  ¿¶∞¿¶¡  ¿¶î¿¶ï¿™™áÂ¿™µ  ¿™√"¿™·   ¿≤ìàJ¿≤ò  ¿≤Ø¿≤∑  ¿≤¬¿≤   ¿≤÷¿≤Â  ¿≤˜¿≤ˇ  ¿≥
¿≥  ¿≥%	¿≥+  ¿≥4¿≥:   ¿∫·ÄÆ¿∫ˇ ¿ª¿ª¿ª&¿ª;  ¿ªF¿ªN  ¿ªb¿ªi  ¿∫·¿∫‚¿∫Ì¿∫Ó¿ªìÇ®¿ºªÅ/// Return whether or not a render object belongs to this inspector widget
/// tree.
/// The inspector selection is static, so if there are multiple inspector
/// overlays in the same app (i.e. an storyboard), a selected or candidate
/// render object may not belong to this tree. ¿º⁄¿ºË    ¿øªÅ¿¿úÄ∑/// Interface for classes that track the source code location the their
/// constructor was called from.
///
/// {@macro flutter.widgets.WidgetInspectorService.getChildrenSummaryTree}   ¿¿µ¿¿ƒ      ¿¿“ÉÁ¿¡:a/// A tuple with file, line, and column number, for displaying human-readable
/// file locations. ¿¡HÄ® ¿¡N¿¡W ¿¡^¿¡m  ¿¡v¿¡Ö  ¿¡é¿¡ù  ¿¡‡	¿¡Ê   ¿¡Ù2¿¬"/// File path of the location. ¿¬+)¿¬P/// 1-based line number. ¿¬Y-¿¬Ä/// 1-based column number. ¿¬ãU¿¬‹@/// Optional name of the parameter or function at this location.  ¿¬ÂÄ¿¬˙    ¿√ŸÄﬁ¿√Ï   ¿√Ÿ¿√⁄ ¿÷É*¿÷‰ÄÕ/// Debugging message for DevTools deep links.
///
/// The [value] for this property is a string representation of the Flutter
/// DevTools url.
///
/// Properties `description` and `url` must not be null. ¿◊%Ç ¿ÿ≥¿ÿÀÅ/// Creates a diagnostics property that displays a deep link to Flutter DevTools.
///
/// The [value] of this property will return a map of data for the Flutter
/// DevTools deep link, including the full `url`, the Flutter DevTools `screenId`,
/// and the `objectId` in Flutter DevTools that this diagnostic references.
///
/// The `description` and `url` arguments must not be null.¿ÿÃ¿ÿ‘  ¿ÿ‡
¿ÿË  ¿ÿÚ¿ÿ˜¿Ÿ6¿ÿ¯¿ÿ¸¿Ÿ¿Ÿ¿Ÿ¿Ÿ ¿Ÿ¿Ÿ"¿Ÿ1¿Ÿ2    ¿„,ìR¿„∑q/// A delegate that configures how a hierarchy of [DiagnosticsNode]s are
/// serialized by the Flutter Inspector. ¿‰Åß ¿‰~¿‰ús/// Creates an [InspectorSerializationDelegate] that serialize [DiagnosticsNode]
/// for Flutter Inspector service.¿‰£¿‰©  ¿‰∑¿‰Ω  ¿‰’'¿‰€  ¿Â ¿Â  ¿Â(¿Â.  ¿ÂC¿ÂI  ¿Âg¿Âv  ¿ÂÇ$¿Âà  ¿‰ ¿‰˙¿‰˚¿Â¿Â<¿Â\	¿Â±l¿ÊE/// Service used by GUI tools to interact with the [WidgetInspector]. ¿Ê"Å¿Á5Ä˙/// Optional [groupName] parameter which indicates that the json should
/// contain live object ids.
///
/// Object ids returned as part of the json will remain live at least until
/// [WidgetInspectorService.disposeGroup()] is called on [groupName]. ¿ÁCe¿ÁùL/// Whether the tree should only include nodes created by the local project. ¿Á≠i¿Á˘?/// Maximum descendants of [DiagnosticsNode] before truncating. ¿Ë(¿Ë2 ¿Ë¿Ë¿ËH"¿Ë^ ¿ËH¿ËI¿Ëo+¿ËÜ ¿Ëo¿Ëp¿ËüÅù¿ÍÅ/// Callback to add additional experimental serialization properties.
///
/// This callback can be used to customize the serialization of DiagnosticsNode
/// objects for experimental features in widget inspector clients such as
/// [Dart DevTools](https://github.com/flutter/devtools). ¿ÍAM¿Í] ¿Íå¿Íç¿Í{¿Íã¿Í|¿Íì+¿Íú    ¿Í¬Éë¿Í„  ¿Í¸¿Î  ¿Í¬¿Í√¿ÓWÇZ¿ÓÑ  ¿Óî¿Ó•  ¿ÓW¿ÓX¿µÄõ¿◊  ¿Ê¿˝  ¿Ò¿Ò  ¿µ¿∂¿ÒTÅe¿Òv  ¿Òá¿Òû  ¿Ò§¿Òµ  ¿ÒT¿ÒU¿ÚΩÅX¿Úﬂ  ¿ÚÒ¿Û  ¿Û¿Û   ¿ÚΩ¿Úæ¿ÙÇc¿ÙF  ¿ÙP¿ÙV  ¿Ùc¿Ùj  ¿Ù|¿ÙÉ  ¿Ù¿Ù¿„û¿„ü¿ˆÄ[¿ˆØ  ¿ˆ¬ ¿ˆ»¿ˆ÷      ¿ˆÄ¿ˆÅ¿ˆá¿ˆß¿ˆî¿ˆ¶¿ˆà¿ˆì¿ˆâ¿ˆï¿ˆü¿ˆ†¿  Ñ¡¿ i//// Does not hold keys from garbage collection.¿ q¿ q¿ t¿ t ¿ {,¿ ã ¿ ñ¿ ù¿ §¿ û¿ •¿ ¶¿ ¨H¿ ﬁ/// Strings, numbers, booleans.¿ Ú¿ Û¿ Ï¿ Ò¿ Ì¿  ¿ ˘j¿ ˛  ¿¿   ¿gÅ,¿Äó/// Returns the value for the given [key] or null if [key] is not in the map
/// or garbage collected.
///
/// Does not support records to act as keys. ¿¿   ¿óÄ«¿ÿ0/// Associates the [key] with the given [value]. ¿‹¿ﬂ  ¿„¿Ê   ¿bÅ¿ü7/// Removes the value for the given [key] from the map. ¿¶¿©   ¿ls¿ó#/// Removes all pairs from the map.   ¿ P¿ Q¿ ZC¿ Z      †…ÉL†Œ  †Ï†˙  °°
   §Äæ§aD/// Calculate bounds for a render object and all of its descendants. §y§á   ¿ QÇÉı¿ Qû  ¿ Qº¿ Q“  ¿ Q‹¿ QÂ  ¿ QÏ¿ R   ¿ƒªN¿ƒ¿  ¿ƒ–¿ƒ·   ¿≈Ñ§¿∆VÅ0/// Transformer to parse and gather information about [DiagnosticsDebugCreator].
///
/// This function will be registered to [FlutterErrorDetails.propertiesTransformers]
/// in [WidgetsBinding.initInstances].
///
/// This is meant to be called only in debug mode. In other modes, it yields an empty list. ¿∆q$¿∆å   ¿…±Ém¿ 8l/// Transform the input [DiagnosticsNode].
///
/// Return null if input [DiagnosticsNode] is not applicable. ¿ Q¿ b  ¿ i¿ x   ¿Õ àÓ¿Õ:  ¿ÕW¿Õ`  ¿Õj¿Õy   ¿Ÿ<Ç]¿⁄`Å/// Returns if an object is user created.
///
/// This always returns false if it is not called in debug mode.
///
/// {@macro flutter.widgets.WidgetInspectorService.getChildrenSummaryTree}
///
/// Currently is local creation locations are only available for
/// [Widget] and [Element]. ¿⁄}¿⁄Ö   ¿€õÅ¢¿‹bÄ¡/// Returns true if a [Widget] is user created.
///
/// This is a faster variant of `debugIsLocalCreationLocation` that is available
/// in debug and profile builds but only works for [Widget]. ¿‹}¿‹Ö   ¿›?Å≥¿ﬁkÅ#/// Returns the creation location of an object in String format if one is available.
///
/// ex: "file:///path/to/main.dart:4:3"
///
/// {@macro flutter.widgets.WidgetInspectorService.getChildrenSummaryTree}
///
/// Currently creation locations are only available for [Widget] and [Element]. ¿ﬁÖ¿ﬁç   ¿ﬁÙ{¿ﬁˇ  ¿ﬂ¿ﬂ"   ¿ﬂqÅ«¿‡cÄÊ/// Returns the creation location of an object if one is available.
///
/// {@macro flutter.widgets.WidgetInspectorService.getChildrenSummaryTree}
///
/// Currently creation locations are only available for [Widget] and [Element]. ¿‡x¿‡Å   ¿‚RÄÿ¿‚V  ¿‚d¿‚o    ÉáÄøÉÈY/// Signature for the builder callback used by
/// [WidgetInspector.selectButtonBuilder].  ÑÑ&  Ñ.Ñ<   ÑHÅÄÖLÄ˚/// Signature for a method that registers the service extension `callback` with
/// the given `name`.
///
/// Used as argument to [WidgetInspectorService.initServiceExtensions]. The
/// [BindingBase.registerServiceExtension] implements this signature.  ÖÅÖí  Öô*Öº   ¿ UyÄ´¿ Un/// Signature for the selection change callback used by
/// [WidgetInspectorService.selectionChangedCallback].    ¿ ZW¿ Ù!¿ _∞ÖR/// Service used by GUI tools to interact with the [WidgetInspector].
///
/// Calls to this object are typically made from GUI tools such as the [Flutter
/// IntelliJ Plugin](https://github.com/flutter/flutter-intellij/blob/master/README.md)
/// using the [Dart VM Service](https://github.com/dart-lang/sdk/blob/main/runtime/vm/service/service.md).
/// This class uses its own object id and manages object lifecycles itself
/// instead of depending on the [object ids](https://github.com/dart-lang/sdk/blob/main/runtime/vm/service/service.md#getobject)
/// specified by the VM Service Protocol because the VM Service Protocol ids
/// expire unpredictably. Object references are tracked in groups so that tools
/// that clients can use dereference all objects in a group with a single
/// operation making it easier to avoid memory leaks.
///
/// All methods in this class are appropriate to invoke from debugging tools
/// using the VM service protocol to evaluate Dart expressions of the
/// form `WidgetInspectorService.instance.methodName(arg1, arg2, ...)`. If you
/// make changes to any instance method of this class you need to verify that
/// the [Flutter IntelliJ Plugin](https://github.com/flutter/flutter-intellij/blob/master/README.md)
/// widget inspector support still works with the changes.
///
/// All methods returning String values return JSON.  ¿ _ÀÄ–¿ `lÄà/// Ring of cached JSON values to prevent JSON from being garbage
/// collected before it can be requested over the VM service protocol.¿ `}¿ `Å¿ `â¿ `Ç¿ `à¿ `ä¿ `ã¿ `ë¿ `ö¿ `í¿ `ñ¿ `ü¿ `£ ¿ `π¿ a&C¿ aD ¿ aP¿ ag¿ ah¿ a“5¿ aﬁ ¿ b¿ bÄı¿ b·Äµ/// Ground truth tracking what object(s) are currently selected used by both
/// GUI tools such as the Flutter IntelliJ Plugin and the [WidgetInspector]
/// displayed on the device.¿ bÌ¿ bˇ¿ c ¿ cÅâ¿ dwÅA/// Callback typically registered by the [WidgetInspector] to receive
/// notifications when [selection] changes.
///
/// The Flutter IntelliJ Plugin does not need to listen for this event as it
/// instead listens for `dart:developer` `inspect` events which also trigger
/// when the inspection target changes on device. ¿ dîÅ¿ egÄù/// The VM service protocol does not keep alive object references so this
/// class needs to manually manage groups of objects that should be kept
/// alive.	¿ eñ¿ eó¿ eq¿ eï¿ er¿ ez¿ e}¿ eî¿ e~¿ eúa¿ e∆ ¿ e˚¿ e¸¿ e€¿ e˙¿ e‹¿ e‰¿ fE¿ f ¿ f-¿ f4¿ fC¿ f5¿ f=¿ fD¿ fE¿ fJ¿ fN ¿ fX¿ f^v¿ f¡R/// The pubRootDirectories that are currently configured for the widget inspector. ¿ fŸ}¿ g'//// Memoization for [_isLocalCreationLocation].¿ g?¿ gF¿ gS¿ gG¿ gO¿ gT¿ gU¿ g[&¿ g` ¿ g|¿ gÖ!¿ gä ¿ g°¿ g´G¿ g—  ¿ Äw9¿ Äã ¿ Ä°¿ Äµ¿ Äπ ¿ ÄŒ¿Aﬁ¿A‰  ¿Aˇ¿B  ¿GQQ¿Gt ¿GÑ¿G†¿G°¿G¶Q¿G… ¿GŸ¿Gı¿Gˆ¿ `ød¿ a)/// The current [WidgetInspectorService].   ¿ ama¿ aÖ  ¿ aé¿ a¶  ¿ am¿ anW¿ gˆÇ»¿ iËÅœ/// Registers a service extension method with the given name (full
/// name "ext.flutter.inspector.name").
///
/// The given callback is called when the extension method is called. The
/// callback must return a value that can be converted to JSON using
/// `json.encode()` (see [JsonEncoder]). The return value is stored as a
/// property named `result` in the JSON. In case of failure, the failure is
/// reported to the remote caller and is dumped to the logs. ¿ j¿ j  ¿ j!*¿ jD  ¿ i÷¿ i◊¿ j¬Åø¿ kPÄÑ/// Registers a service extension method with the given name (full
/// name "ext.flutter.inspector.name"), which takes no arguments. ¿ kv¿ ká  ¿ kê.¿ k∑   ¿ lÖÉ¿ n'Åê/// Registers a service extension method with the given name (full
/// name "ext.flutter.inspector.name"), which takes a single optional argument
/// "objectGroup" specifying what group is used to manage lifetimes of
/// object references in the returned JSON (see [disposeGroup]).
/// If "objectGroup" is omitted, the returned JSON will not include any object
/// references to avoid leaking memory. ¿ nR¿ nc  ¿ nl@¿ n•   ¿ oçÑ™¿ rÇW/// Registers a service extension method with the given name (full
/// name "ext.flutter.inspector.name"), which takes a single argument
/// "enabled" which can have the value "true" or the value "false"
/// or can be omitted to read the current value. (Any value other
/// than "true" is considered equivalent to "false". Other arguments
/// are ignored.)
///
/// Calls the `getter` callback to obtain the value when
/// responding to the service extension method being called.
///
/// Calls the `setter` callback with the new value when the
/// service extension method is called with a new value. ¿ r&¿ r7  ¿ r@&¿ ra  ¿ rl&¿ rç   ¿ t;Ç√¿ vÅ∂/// Sends an event when a service extension's state is changed.
///
/// Clients should listen for this event to stay aware of the current service
/// extension state. Any service extension that manages a state should call
/// this method on state change.
///
/// `value` reflects the newly updated service extension value.
///
/// This will be called automatically for service extensions registered via
/// [registerBoolServiceExtension]. ¿ v+¿ v3  ¿ v8¿ vA   ¿ wÉ¿ x:Å*/// Registers a service extension method with the given name (full
/// name "ext.flutter.inspector.name") which takes an optional parameter named
/// "arg" and a required parameter named "objectGroup" used to control the
/// lifetimes of object references in the returned JSON (see [disposeGroup]). ¿ xa¿ xr  ¿ x{R¿ x∆   ¿ zÑ¿ z¡Ä®/// Registers a service extension method with the given name (full
/// name "ext.flutter.inspector.name"), that takes arguments
/// "arg0", "arg1", "arg2", ..., "argn". ¿ zË¿ z˘  ¿ {?¿ {:   ¿ ~+ÇH¿ rÅ"/// Cause the entire tree to be rebuilt. This is used by development tools
/// when the application code has changed and is being hot-reloaded, to cause
/// the widget tree to pick up any changed implementations.
///
/// This is expensive and should not be called except during development.  ¿ X¿ Y¿ Ä‘Éy¿ ÄŸ  ¿ Ä¿ Å   ¿ ÑQÅ2¿ ÖOÄÓ/// Resets the count of errors since the last hot reload.
///
/// This data is sent to clients as part of the 'Flutter.Error' service
/// protocol event. Clients may choose to display errors received after the
/// first error differently.   ¿ ÖáÇG¿ ÜJÄµ/// Whether structured errors are enabled.
///
/// Structured errors provide semantic information that can be used by IDEs
/// to enhance the display of errors with rich formatting.   ¿ á“§/¿ à˚Å/// Called to register service extensions.
///
/// See also:
///
///  * <https://github.com/dart-lang/sdk/blob/main/runtime/vm/service/service.md#rpcs-requests-and-responses>
///  * [BindingBase.initServiceExtensions], which explains when service
///    extensions can be used. ¿ âA¿ â3   ¿ ¨Z¿ ¨
    ¿ ¨cÅY¿ ≠EÄ≤/// Clear all InspectorService object references.
///
/// Use this method only for testing to ensure that object references from one
/// test case do not impact other test cases.  ¿ ≠¿ ≠¿ ≠3¿ ≠4¿ ≠¿Å*¿ ÆáÄÜ/// Reset all InspectorService state.
///
/// Use this method only for testing to write hermetic tests for
/// WidgetInspectorService.  ¿ ÆO¿ ÆP¿ Æd¿ Æe¿ Æq¿ Ær¿ ÆÓÅà¿ Ø©Ä†/// Free all references to objects in a group.
///
/// Objects and their associated ids in the group may be kept alive by
/// references from a different group. ¿ Ø∂¿ Øæ  ¿ Øó¿ Øò¿ ∞zÅK¿ ∞  ¿ ∞ò ¿ ∞∞   ¿ ±…ÉÏ¿ ≤Yv/// Returns a unique id for [object] that will remain live at least until
/// [disposeGroup] is called on [groupName]. ¿ ≤^¿ ≤g  ¿ ≤n¿ ≤v  ¿ ≤D¿ ≤E¿ µπÅ¿ ∂WÄá/// Returns whether the application has rendered its first frame and it is
/// appropriate to display the Widget tree in the inspector. ¿ ∂k¿ ∂t  ¿ ∂E¿ ∂F¿ ∂…Ç7¿ ∑ŒÄÂ/// Returns the Dart object associated with a reference id.
///
/// The `groupName` parameter is not required by is added to regularize the
/// API surface of the methods in this class called from the Flutter IntelliJ
/// Plugin. ¿ ∑◊
¿ ∑‡  ¿ ∑Â¿ ∑Ó  ¿ ∑π¿ ∑∫¿ πÇ¬¿ ª
Åﬁ/// Returns the object to introspect to determine the source location of an
/// object's class.
///
/// The Dart object for the id is returned for all cases but [Element] objects
/// where the [Widget] configuring the [Element] is returned instead as the
/// class of the [Widget] is more relevant than the class of the [Element].
///
/// The `groupName` parameter is not required by is added to regularize the
/// API surface of methods called from the Flutter IntelliJ Plugin. ¿ ª$	¿ ª,  ¿ ª1¿ ª:  ¿ ∫ı¿ ∫ˆ¿ ª Ç»¿ º§ÄΩ/// Remove the object with the specified `id` from the specified object
/// group.
///
/// If the object exists in other groups it will remain alive and the object
/// id will remain valid. ¿ ºÆ
¿ º∑  ¿ º∫¿ º¬  ¿ ºí¿ ºì¿ æñÇ¿ ¿0Å/// Set the list of directories that should be considered part of the local
/// project.
///
/// The local project directories are used to distinguish widgets created by
/// the local project from widgets created from inside the framework
/// or other packages. ¿ ¿F¿ ¿T  ¿ ø®¿ ø©¿ øµ¿ ø∂¿ ø¿¿ ¿'¿ ø∆¿ ø¿ ¿üÅ“¿ ¬	Å6/// Resets the list of directories, that should be considered part of the
/// local project, to the value passed in [pubRootDirectories].
///
/// The local project directories are used to distinguish widgets created by
/// the local project from widgets created from inside the framework
/// or other packages.  ¿ ¡‚¿ ¡„¿ ¡˜¿ ¡¯¿ ¬uÇ–¿ √óÅ/// Add a list of directories that should be considered part of the local
/// project.
///
/// The local project directories are used to distinguish widgets created by
/// the local project from widgets created from inside the framework
/// or other packages. ¿ √≠¿ √ª  ¿ √Ö¿ √Ü¿ ≈IÇÔ¿ ∆xÅ/// Remove a list of directories that should no longer be considered part
/// of the local project.
///
/// The local project directories are used to distinguish widgets created by
/// the local project from widgets created from inside the framework
/// or other packages. ¿ ∆ë¿ ∆ü  ¿ ∆f¿ ∆g¿ »<Å[¿ »‹\/// Returns the list of directories that should be considered part of the
/// local project. ¿ »Ù¿ …	  ¿ »ù¿ »û¿ »™¿ »´¿ …õÅÁ¿ ÀÅ[/// Set the [WidgetInspector] selection to the object matching the specified
/// id if the object is valid object to set as the inspector selection.
///
/// Returns true if the selection was changed.
///
/// The `groupName` parameter is not required by is added to regularize the
/// API surface of methods called from the Flutter IntelliJ Plugin. ¿ À(
¿ À1  ¿ À6¿ À?  ¿ À¿ À¿ ÀÜÖj¿ ÃÒÅJ/// Set the [WidgetInspector] selection to the specified `object` if it is
/// a valid object to set as the inspector selection.
///
/// Returns true if the selection was changed.
///
/// The `groupName` parameter is not needed but is specified to regularize the
/// API surface of methods called from the Flutter IntelliJ Plugin. ¿ Ã˛¿ Õ  ¿ Õ¿ Õ  ¿ Ãﬂ¿ Ã‡¿ –ÙÇK¿ —AE/// Notify attached tools to navigate to an object's source location. ¿ —S¿ —\   ¿ ”CÅõ¿ ”ùO/// Returns a DevTools uri linking to a specific element on the inspector page. ¿ ”Ω¿ ”∆   ¿ ‘‚ÑÓ¿ ’jg/// Returns the DevTools inspector uri for the given vm service connection and
/// inspector reference. ¿ ’¿ ’á  ¿ ’N¿ ’O¿ Ÿ‘Å¶¿ €Å/// Returns JSON representing the chain of [DiagnosticsNode] instances from
/// root of the tree to the [Element] or [RenderObject] matching `id`.
///
/// The JSON contains all information required to display a tree view with
/// all nodes other than nodes along the path collapsed. ¿ €	¿ €$  ¿ €'¿ €/  ¿ ⁄˘¿ ⁄˙¿ €~Çï¿ €å  ¿ €ú
¿ €•  ¿ €®¿ €∞   ¿ ﬁÅ¿ ﬁ-  ¿ ﬁ=¿ ﬁT  ¿ ﬁ]'¿ ﬁ}   ¿ ﬂöÇ¿ ﬂ®  ¿ ﬂ¬¿ ﬂÀ  ¿ ﬂ’¿ ﬂ‰   ¿ ·ΩÅ¿ ·ÿ  ¿ ·Ô¿ ·¯  ¿ ‚ ¿ ‚  ¿ ‚¿ ‚   ¿ ‚—ÅT¿ ‚Ì  ¿ „	¿ „  ¿ „%¿ „-   ¿ ‰)Äö¿ ‰?  ¿ ‰P¿ ‰b  ¿ ‰k'¿ ‰ã   ¿ ‰«Äˆ¿ ‰Ã  ¿ ‰Í¿ ‰Û   ¿ Â¡Ç/¿ Â∆  ¿ Â„¿ ÂÎ   ¿ ÁÙÅy¿ Ë37/// Memoized version of [_isLocalCreationLocationImpl]. ¿ ËL¿ ËT   ¿ ÈqÇ¥¿ Î2Å1/// Wrapper around `json.encode` that uses a ring of cached values to prevent
/// the Dart garbage collector from collecting objects between when
/// the value is returned over the VM service protocol and when the
/// separate observatory protocol command has to be used to retrieve its full
/// contents. ¿ ÎB¿ ÎK   ¿ Ï)Å˙¿ Ï?  ¿ ÏN¿ Ïi  ¿ Ïo!¿ Ït   ¿ Ó'ÄÈ¿ ÓB  ¿ ÓT¿ Ók  ¿ Óu'¿ Óï  ¿ Ó§ ¿ Óø   ¿ ÔÅ¿ Ô©|/// Returns a JSON representation of the properties of the [DiagnosticsNode]
/// object that `diagnosticsNodeId` references. ¿ Ô∑¿ Ôø  ¿ Ô—¿ ÔŸ  ¿ Ôï¿ Ôñ¿ 6ÅW¿ D  ¿ S¿ \  ¿ m¿ u   ¿ ÒëÅ¿ Úz/// Returns a JSON representation of the children of the [DiagnosticsNode]
/// object that `diagnosticsNodeId` references. ¿ Ú#¿ Ú+  ¿ Ú=¿ ÚE   ¿ Ú†Åö¿ Ú≠  ¿ Ú∫¿ Ú√  ¿ Ú’¿ Ú›   ¿ Ù>É8¿ ˆ€Çy/// Returns a JSON representation of the children of the [DiagnosticsNode]
/// object that `diagnosticsNodeId` references only including children that
/// were created directly by user code.
///
/// {@template flutter.widgets.WidgetInspectorService.getChildrenSummaryTree}
/// Requires [Widget] creation locations which are only available for debug
/// mode builds when the `--track-widget-creation` flag is enabled on the call
/// to the `flutter` tool. This flag is enabled by default in debug builds.
/// {@endtemplate}
///
/// See also:
///
///  * [isWidgetCreationTracked] which indicates whether this method can be
///    used. ¿ ˆÚ¿ ˆ˙  ¿ ˜¿ ˜   ¿ ˜zÄ®¿ ˜ã  ¿ ˜†¿ ˜©   ¿ ¯&Ä˚¿ ¯ê:/// If possible, returns [DiagnosticsNode] for the object. ¿ ¯®¿ ¯±  ¿ ¯c¿ ¯d¿ ˘%Åª¿ ˘2  ¿ ˘J¿ ˘S  ¿ ˘d¿ ˘l   ¿ ˙‰ÅÓ¿ ¸3Å;/// Returns a JSON representation of the children of the [DiagnosticsNode]
/// object that [diagnosticableId] references providing information needed
/// for the details subtree view.
///
/// The details subtree shows properties inline and includes all children
/// rather than a filtered set of important children. ¿ ¸M¿ ¸U  ¿ ¸f¿ ¸n   ¿ ¸÷Ç¿ ¸„  ¿ ¸˛¿ ˝  ¿ ˝¿ ˝    ¿ ˛ÁÅ ¿ ˛Ï  ¿ ˇ¿ ˇ   ¿ µÄ∂¿ À  ¿ Â¿ ˆ  ¿ ˇ'¿   ¿oÅ†¿Ö  ¿ö¿±  ¿ª'¿€   ¿Äæ¿uV/// Returns a JSON representation of the [DiagnosticsNode] for the root
/// [Element]. ¿É¿ã   ¿’Ä”¿Î  ¿˙¿   ¿¨Å¿KÄì/// Returns a JSON representation of the [DiagnosticsNode] for the root
/// [Element] showing only nodes that should be included in a summary tree. ¿d¿l   ¿¡Ç¿◊  ¿ˆ¿˛  ¿o¿_   ¿’É]¿Ú  ¿¿2   ¿6Ç—¿@ÅÍ/// Returns a JSON representation of the subtree rooted at the
/// [DiagnosticsNode] object that `diagnosticsNodeId` references providing
/// information needed for the details subtree view.
///
/// The number of levels of the subtree that should be returned is specified
/// by the [subtreeDepth] parameter. This value defaults to 2 for backwards
/// compatibility.
///
/// See also:
///
///  * [getChildrenDetailsSubtree], a method to get children of a node
///    in the details subtree. ¿W¿_  ¿t¿|  ¿å¿ë  ¿ü¿ÅÕ¿!  ¿9¿B  ¿W¿`  ¿n¿s   ¿‹ÅW¿AN/// Returns a [DiagnosticsNode] representing the currently selected [Element]. ¿S¿\  ¿p¿x  ¿-¿.¿7â$¿BÇ”/// Captures an image of the current state of an [object] that is a
/// [RenderObject] or [Element].
///
/// The returned [ui.Image] has uncompressed raw RGBA bytes and will be scaled
/// to be at most [width] pixels wide and [height] pixels tall. The returned
/// image will never have a scale between logical pixels and the
/// size of the output image larger than maxPixelRatio.
/// [margin] indicates the number of pixels relative to the un-scaled size of
/// the [object] to include as a margin to include around the bounds of the
/// [object] in the screenshot. Including a margin can be useful to capture
/// areas that are slightly outside of the normal bounds of an object such as
/// some debug paint information. ¿R¿[  ¿h¿y  ¿É¿î  ¿ü¿ß  ¿∏¿¿  ¿ÿ¿ﬁ  ¿#¿$¿Ø¿œ¿Í¿_í∑¿|  ¿ò¿≠   ¿-Ç“¿-7  ¿-C¿-X   ¿/Ç◊¿0  ¿0¿01   ¿2ÀÉ÷¿2Ë  ¿3 ¿3   ¿6•Äﬂ¿6ß ¿6¥¿6¥¿6∑¿6¿  ¿6Ã¿6‘   ¿7àÅ¿7û  ¿7±¿7∫  ¿7Œ¿7÷   ¿8ëÅQ¿8¢  ¿8ƒ¿8Õ   ¿9ÊÇ¿:ÁÄÒ/// Returns a [DiagnosticsNode] representing the currently selected [Element]
/// if the selected [Element] should be shown in the summary tree otherwise
/// returns the first ancestor of the selected [Element] shown in the summary
/// tree. ¿; ¿;	  ¿;¿;%   ¿;ÎÄ±¿;ˆ  ¿<¿<!   ¿<†É¿<±  ¿<‘¿<›   ¿?¨Ä˙¿?¬  ¿?‹¿?Â  ¿?˘¿@   ¿@™Å0¿ACÄç/// Returns whether [Widget] creation locations are available.
///
/// {@macro flutter.widgets.WidgetInspectorService.getChildrenSummaryTree}   ¿BÄä¿B"  ¿B0¿B:   ¿B´Ä˚¿B∞  ¿Bº¿B∆   ¿C™Äã¿CØ  ¿Cø¿C«  ¿C—"¿CÔ   ¿D9Å»¿EPÄ˙/// All events dispatched by a [WidgetInspectorService] use this method
/// instead of calling [developer.postEvent] directly.
///
/// This allows tests for [WidgetInspectorService] to track which events were
/// dispatched by overriding this method. ¿E_¿Eg  ¿Eu¿Eã  ¿Eõ¿E£  ¿E>¿E?¿E´¿FÅH¿GÄÔ/// All events dispatched by a [WidgetInspectorService] use this method
/// instead of calling [developer.inspect].
///
/// This allows tests for [WidgetInspectorService] to track which events were
/// dispatched by overriding this method. ¿G¿G"  ¿Fˇ¿G ¿G¸\¿H  ¿H¿H  ¿H#¿H)   ¿H\ÑË¿Ha  ¿Hj¿Hx   ¿MHÅ.¿N2Ä⁄/// This method is called by [WidgetsBinding.performReassemble] to flush caches
/// of obsolete values after a hot reload.
///
/// Do not call this method directly. Instead, use
/// [BindingBase.reassembleApplication].    ¿ü1¿ü; ¿üO¿üRF¿ü^ 	¿üy¿ü~¿ü¿üá¿üó¿üà¿üç¿üë¿üï¿üöS¿ü¶ 	¿üÀ¿ü–¿ü—¿üŸ¿üÏ¿ü⁄¿üﬂ¿ü‰¿üÈ¿üÔS¿ü˚ 	¿†"¿†'¿†(¿†0¿†A¿†1¿†6¿†:¿†>¿æ?&¿æL ¿æa¿æg#¿æt ¿æá¿æå)¿æô ¿æ±¿æ∏Äî¿ø5o/// Interpret pointer up events within with this margin as indicating the
/// pointer is moving off the device.¿øI¿øOi¿ø_ ¿øo¿øx¿ø∑¿øÅ¿ø|¿øÉ¿øà¿øì¿øâ¿ø†¿øò¿ø¢¿ø∞¿ø™¿ø≤¿··<¿·˚ ¿‚¿‚¿‚¿‚¿‚¿‚¿‚0¿‚5 ¿‚M¿‚N¿‚B¿‚L¿‚C¿ˆ›â@¿ˇ˝à&/// Annotation which marks a function as a widget factory for the purpose of
/// widget creation tracking.
///
/// When widget creation tracking is enabled, the framework tracks the source
/// code location of the constructor call for each widget instance. This
/// information is used by the DevTools to provide an improved developer
/// experience. For example, it allows the Flutter inspector to present the
/// widget tree in a manner similar to how the UI was defined in your source
/// code.
///
/// [Widget] constructors are automatically instrumented to track the source
/// code location of constructor calls. However, there are cases where
/// a function acts as a sort of a constructor for a widget and a call to such
/// a function should be considered as the creation location for the returned
/// widget instance.
///
/// Annotating a function with this annotation marks the function as a widget
/// factory. The framework will then instrument that function in the same way
/// as it does for [Widget] constructors.
///
/// Tracking will not work correctly if the function has optional positional
/// parameters.
///
/// Currently this annotation is only supported on extension methods.
///
/// {@tool snippet}
///
/// This example shows how to use the [widgetFactory] annotation to mark an
/// extension method as a widget factory:
///
/// ```dart
/// extension PaddingModifier on Widget {
///   @widgetFactory
///   Widget padding(EdgeInsetsGeometry padding) {
///     return Padding(padding: padding, child: this);
///   }
/// }
/// ```
///
/// When using the above extension method, the framework will track the
/// creation location of the [Padding] widget instance as the source code
/// location where the `padding` extension method was called:
///
/// ```dart
/// // continuing from previous example...
/// const Text('Hello World!')
///     .padding(const EdgeInsets.all(8));
/// ```
///
/// {@end-tool}
///
/// See also:
///
/// * the documentation for [Track widget creation](https://docs.flutter.dev/development/tools/devtools/inspector#track-widget-creation).¿ ¿ ¿   éÈ <ÄÜÄ§Ä•Ä∫Ä·Ä¯ÅÅ:ÅQÅZÅjÅÅéÅßÅ∫ÅÀÅ‰Å˜ÇÇÇ ÇJÇsÇúÇ¬Ç√Ç÷ÇÎÉÉÉ0ÉPÉrÉÜÉáÉ∂É·ÑGÑHÑòÑÆÑ≤Ñ˛ÖDÖÖóÖ≈Ö…Ö ÜÜÜOÜmÜèÜ´Ü¨Ü¬Ü√ÜœÜ¸áá á!á-á:ádáÑá†áΩáƒàààààbà≥à⁄âââ4âTâiâäâãâ°âΩâæâ ää8äräväwäÉä¿äˆã2ã6ã7ãCã•ãÈå3å7å8åDå£åÊç/ç3ç4ç@ç€é.éáéãéåéòé“é˙è(è,è-è9ènèïè¬è∆è«è”êê9êjênêoê{êµê€ëëëëëcëóë—ë’ë÷ë‚í*í[íííñíóí£íÿí˚ì$ì(ì)ì5ì_ìÄìßì´ì¨ì∏ìÿìÙîîîî'îeîëî√î«î»î‘î˛ïïFïJïKïWïÄï†ï∆ï ïÀï◊ñ%ñUñãñèñêñúñ…ñÏóóóó&ó¿òòxò|ò}òâòŸôôEôIôJôVôÄô°ô»ôÃôÕôŸö1ötöΩö¡ö¬öŒõõPõäõéõèõõõ≤õ˛úKúñú–úÒúıúˆùùù*ùEùIùJùVùvùëù≤ù∂ù∑ù√ù”ùÂù˝ûûûû<û`ûäûéûèûõû≈ûﬁû˝üüüü2üJühülümüyü°üøü„üÁüËüÙ††:†]†a†b†n†û†¬†∆†»†…°°c°d°í°»°ˇ¢L¢î¢±¢Ù£££#£d£j£k£££ˆ£¸§§§§§§\§ê§‘§÷§◊•'•x•Æ•∫•Á¶¶¶¶¶]¶o¶á¶õ¶µ¶Í¶Îßß.ß/ßgßãßåß€ß˜ß¯®8®>®ç®ú®¿®¡©©©\©•©µ©ª™
™™@™A™í™≥™”™Ï´´´:´^´b´d´e´£´ß´ˆ¨¨k¨ª≠≠W≠§≠∑≠ÚÆÆ=Æ`ÆçÆ¨Æ€Æ‹Æ˚Æ¸ØØ:ØeØÇØ®Ø©ØµØÀØ∞∞<∞D∞m∞¬∞œ∞¸±±±!±"±F±Ü±ñ±∑±Ë≤≤@≤O≤Ä≤≠≤ÿ≤‡≤Û≤˝≥≥!≥"≥G≥n≥ì≥–¥ ¥6¥q¥ö¥≈¥·µ	µµµ>µDµHµIµUµvµôµ¡µ≈µ∆µÚ∂∂#∂)∂z∂∆∂Í∑
∑'∑E∑I∑J∑V∑x∑°∑¡∑Ë∏∏_∏Ç∏ª∏√∏–∏¯ππHπ^πàπñπúπ†π°π≠π¸∫∫_∫ü∫⁄∫Áªª4ªUªtª}ªÉªáªàªîªÀºº-ºWºyºôº¿ºËºÓΩΩ1Ω[ΩÑΩäΩéΩèΩ‡ΩÊæ4æÖæææƒøøCøIøóø–¿ @ ¿ @o¿ @É¿ @â¿ @ÿ¿ A¿ Ad¿ A¥¿ AÔ¿ Aı¿ B¿ B¿ BZ¿ B™¿ BÔ¿ C?¿ Cb¿ CÅ¿ Cö¿ C∑¿ C‘¿ C€¿ D¿ D=¿ Dn¿ Dt¿ Dº¿ E¿ E:¿ En¿ Eä¿ Eë¿ Eí¿ E∆¿ F¿ Fe¿ Fû¿ FÍ¿ G	¿ G[¿ Gç¿ Gö¿ G“¿ H"¿ Hn¿ H´¿ Hƒ¿ H‰¿ HÌ¿ HÛ¿ HÙ¿ IB¿ Ix¿ I®¿ I‘¿ J%¿ JC¿ Jj¿ Jä¿ J±¿ J≤¿ J÷¿ J‚¿ K#¿ K5¿ K\¿ KÖ¿ Kç¿ Kì¿ Kî¿ Kﬁ¿ L+¿ Lp¿ LØ¿ L∞¿ L˛¿ M¿ M¿ M¿ MT¿ Ma¿ Me¿ M∂¿ Mˆ¿ N¿ NZ¿ N{¿ NÅ¿ N∫¿ N”¿ NÎ¿ O¿ O¿ O"¿ O#¿ Or¿ Oê¿ Oë¿ Oø¿ O≈¿ P¿ P_¿ PÆ¿ Pœ¿ P˜¿ P¯¿ Q-¿ Q3¿ Qf¿ Q¿ QÅ¿ QÇ¿ Q∫¿ Q⁄¿ QÍ¿ R	¿ R¿ RR¿ Ri¿ Rz¿ R~¿ R÷¿ S¿ S0¿ SM¿ Sí¿ S≈¿ Sˆ¿ T¿ T4¿ T[¿ Tw¿ Tï¿ TÆ¿ T∫¿ T÷¿ TÂ¿ TÌ¿ TÛ¿ U¿ U¿ Ug¿ Uv¿ Ux¿ Uy¿ U±¿ UË¿ V%¿ V&¿ Vr¿ Vñ¿ Vö¿ V–¿ V„¿ W¿ W9¿ Wl¿ W•¿ Wı¿ X4¿ XK¿ XY¿ X_¿ X`¿ Xä¿ Xé¿ Xè¿ XÆ¿ XØ¿ X¡¿ X¬¿ X˛¿ Y¿ Y¿ YL¿ Y]¿ Y^¿ Yo¿ YÖ¿ Yù¿ Y∏¿ Yæ¿ Y—¿ Y’¿ Y◊¿ Yÿ¿ Z¿ ZV¿ ZW¿ Zù¿ Z°¿ ZÒ¿ [I¿ [¥¿ [ˇ¿ \Ä¿ \Õ¿ ]¿ ]g¿ ]ù¿ ]°¿ ]Ó¿ ^4¿ ^É¿ ^—¿ _6¿ _q¿ _u¿ _™¿ _…¿ `¿ `V¿ `ù¿ `º¿ `Ω¿ `È¿ a$¿ ak¿ ax¿ a±¿ aÀ¿ aœ¿ a–¿ b	¿ b
¿ bY¿ bß¿ b∆¿ c¿ c¿ cL¿ cz¿ cÄ¿ cœ¿ d¿ dR¿ dë¿ dí¿ dﬁ¿ e)¿ e6¿ eö¿ eˇ¿ fH¿ f[¿ f\¿ f±¿ f÷¿ f◊¿ g	¿ gX¿ gY¿ gÉ¿ g®¿ g©¿ gÙ¿ h9¿ hc¿ hi¿ hµ¿ h¸¿ iG¿ iï¿ i‘¿ i·¿ j¿ j¿ jM¿ jT¿ j{¿ jö¿ j¥¿ jª¿ jø¿ j¿¿ k¿ kI¿ kr¿ kå¿ k¿¿ k«¿ kÂ¿ k˜¿ l0¿ ln¿ lw¿ l~¿ lÇ¿ lÉ¿ l»¿ m¿ mb¿ m•¿ mˆ¿ n ¿ nN¿ nh¿ nÆ¿ nµ¿ n”¿ nÂ¿ o¿ ov¿ o¿ oÜ¿ oä¿ oã¿ o–¿ p¿ p]¿ p°¿ pË¿ p¸¿ q¿ q=¿ q|¿ qÇ¿ q¿¿ q˚¿ r"¿ r<¿ rh¿ rî¿ rõ¿ rπ¿ rÀ¿ s¿ s5¿ ss¿ sí¿ s ¿ s‘¿ t$¿ t-¿ t4¿ t8¿ t9¿ t{¿ tÅ¿ t—¿ u¿ uB¿ uH¿ uä¿ uê¿ uﬁ¿ v¿ vI¿ vX¿ vÜ¿ vü¿ v”¿ vÎ¿ vÙ¿ v˚¿ vˇ¿ w ¿ wE¿ wñ¿ w„¿ x3¿ x]¿ xw¿ xœ¿ x÷¿ xÙ¿ y¿ y?¿ yv¿ yò¿ yÎ¿ yˆ¿ yˇ¿ z¿ z
¿ z¿ zP¿ zè¿ z∫¿ z‰¿ z˛¿ {C¿ {J¿ {h¿ {z¿ {≥¿ {·¿ {¯¿ |¿ |:¿ |h¿ |ë¿ |§¿ |∑¿ |√¿ |÷¿ |‡¿ }-¿ }[¿ }“¿ ~¿ ~¿ ~$¿ ~(¿ ~)¿ ~v¿ ~∆¿ ¿ 
¿ V¿ c¿ É¿ ø¿ Ê¿ Ä(¿ ÄI¿ ÄO¿ Äp¿ Ät¿ Äu¿ Ä≤¿ Ä≥¿ Ä—¿ Ä“¿ Å¿ ÅG¿ Åj¿ Åê¿ Å∏¿ Å—¿ ÅÚ¿ Ç¿ Ç3¿ Ç<¿ ÇD¿ ÇE¿ Ç~¿ Ç°¿ Ç⁄¿ É¿ É9¿ Éì¿ É†¿ É˚¿ Ñ¿ Ñ¿ Ñ¿ ÑJ¿ ÑN¿ ÑO¿ Ñã¿ Ñë¿ Ñ€¿ Ö)¿ ÖH¿ Öd¿ ÖÄ¿ ÖÑ¿ ÖÖ¿ Ö≤¿ Ö∏¿ Ü¿ ÜC¿ Üh¿ ÜØ¿ Üƒ¿ Üﬁ¿ ÜÓ¿ á1¿ áö¿ á≠¿ á∑¿ áÀ¿ áœ¿ á–¿ á˝¿ à¿ à¿ à¿ àâ¿ à”¿ àÙ¿ âV¿ â≠¿ âÆ¿ â’¿ ä¿ ä¿ ä_¿ äè¿ äü¿ äœ¿ ä‚¿ äÏ¿ äÌ¿ ã6¿ ã7¿ ãZ¿ ãû¿ ãÌ¿ å
¿ åh¿ åç¿ åñ¿ åù¿ åû¿ å¡¿ å˘¿ ç@¿ ç]¿ ç°¿ ç»¿ ç“¿ é¿ é.¿ é7¿ é>¿ é?¿ éd¿ éµ¿ éÀ¿ é¿ è>¿ èu¿ èö¿ èŒ¿ è‚¿ èÓ¿ ê¿ êB¿ êY¿ êê¿ ê ¿ ë¿ ë9¿ ë[¿ ëo¿ ëÇ¿ ë∞¿ ëƒ¿ ë–¿ ë€¿ ë‰¿ ëÂ¿ í
¿ íS¿ íÖ¿ í™¿ íŸ¿ íÌ¿ í˘¿ ì ¿ ìH¿ ì_¿ ìê¿ ìº¿ î¿ î+¿ îl¿ îô¿ î◊¿ îÂ¿ ï0¿ ïV¿ ïi¿ ïë¿ ïù¿ ï®¿ ï±¿ ï∑¿ ï∏¿ ï›¿ ñ!¿ ñ<¿ ñX¿ ñm¿ ñv¿ ñ}¿ ñß¿ ñÁ¿ ó¿ ó)¿ ó>¿ óG¿ óN¿ ós¿ ó∏¿ ó€¿ ó‚¿ ò¿ òE¿ òÑ¿ òÆ¿ ò√¿ òÃ¿ ò”¿ ò˘¿ ôB¿ ôn¿ ôì¿ ô®¿ ô±¿ ô∏¿ ôﬁ¿ ö'¿ öS¿ öx¿ öç¿ öñ¿ öù¿ ö√¿ õ¿ õ;¿ õc¿ õx¿ õÅ¿ õà¿ õ¶¿ õÔ¿ ú¿ ú¿ ú@¿ úÑ¿ ú¶¿ ú≠¿ ú”¿ ù¿ ù6¿ ù=¿ ùc¿ ù§¿ ùƒ¿ ùÀ¿ ùÒ¿ û0¿ ûN¿ ûU¿ ûV¿ û|¿ û∆¿ ûÔ¿ ûˆ¿ û˜¿ ü¿ üj¿ üñ¿ üù¿ üû¿ ü»¿ †	¿ †)¿ †0¿ †Z¿ †¶¿ †—¿ †ÿ¿ †ˆ¿ °N¿ °Ö¿ °å¿ °™¿ °Ô¿ ¢(¿ ¢_¿ ¢†¿ ¢¬¿ ¢Í¿ £	¿ £0¿ £p¿ £}¿ £à¿ £ë¿ £ò¿ £æ¿ §¿ §'¿ §.¿ §T¿ §†¿ §À¿ §“¿ §”¿ §¯¿ •C¿ •l¿ •s¿ •ë¿ •œ¿ ¶¿ ¶6¿ ¶g¿ ¶ô¿ ¶ö¿ ¶Ã¿ ¶Ú¿ ß'¿ ß^¿ ßì¿ ßÃ¿ ®¿ ®O¿ ®â¿ ®î¿ ®±¿ ®Â¿ ®Ô¿ ©I¿ ©J¿ ©k¿ ©π¿ ©ƒ¿ ©Õ¿ ©‘¿ ©Ú¿ ™;¿ ™c¿ ™j¿ ™à¿ ™∆¿ ™„¿ ™Í¿ ´¿ ´I¿ ´i¿ ´p¿ ´é¿ ´”¿ ´˜¿ ´˛¿ ¨¿ ¨¿ ¨¿ ¨;¿ ¨\¿ ¨`¿ ¨a¿ ¨ï¿ ¨õ¿ ¨Ï¿ ≠¿ ≠1¿ ≠>¿ ≠Z¿ ≠o¿ ≠è¿ ≠®¿ ≠π¿ ≠Ω¿ ≠æ¿ ≠Ê¿ ≠Ï¿ Æ/¿ ÆM¿ Æb¿ Æo¿ ÆÄ¿ Æô¿ Æ±¿ Æ»¿ ÆÁ¿ ÆÎ¿ ÆÏ¿ Ø¿ Ø#¿ Øl¿ Øï¿ Ø¢¿ Ø≈¿ ∞¿ ∞-¿ ∞;¿ ∞A¿ ∞s¿ ∞w¿ ∞x¿ ∞º¿ ∞÷¿ ∞¯¿ ±¿ ±E¿ ±`¿ ±Ö¿ ±ç¿ ±º¿ ±¬¿ ±∆¿ ±«¿ ≤¿ ≤B¿ ≤O¿ ≤Ç¿ ≤ú¿ ≤Ø¿ ≤µ¿ ≤∂¿ ≥2¿ ≥X¿ ≥Ç¿ ≥ò¿ ≥˚¿ ¥4¿ ¥U¿ ¥i¿ ¥â¿ ¥√¿ ¥Ò¿ µ¿ µ¿ µM¿ µs¿ µï¿ µù¿ µ£¿ µ≤¿ µ∂¿ µ∑¿ ∂¿ ∂C¿ ∂P¿ ∂Ç¿ ∂¬¿ ∂∆¿ ∂«¿ ∑¿ ∑¿ ∑Y¿ ∑©¿ ∑∑¿ ∑ƒ¿ ∑¸¿ ∏¿ ∏%¿ ∏+¿ ∏,¿ ∏m¿ ∏Ö¿ ∏‡¿ ∏Ê¿ ∏˝¿ π¿ π¿ πP¿ πf¿ πl¿ πΩ¿ ∫¿ ∫Y¿ ∫_¿ ∫≠¿ ∫Û¿ ª ¿ ªH¿ ªq¿ ªé¿ ª™¿ ª∞¿ ª√¿ ª«¿ ª»¿ º¿ º¿ º%¿ ºt¿ ºê¿ ºù¿ ºŒ¿ º‰¿ ºÚ¿ º¯¿ º˘¿ ΩC¿ Ωd¿ Ωæ¿ Ωƒ¿ æ¿ æ\¿ æb¿ æè¿ æì¿ æî¿ æ‚¿ æÒ¿ æ˜¿ øF¿ øç¿ ø¶¿ ø≥¿ ø¬¿ øÏ¿ ¿%¿ ¿)¿ ¿i¿ ¿ò¿ ¿ú¿ ¿ù¿ ¿È¿ ¡+¿ ¡1¿ ¡Ä¿ ¡«¿ ¡‡¿ ¡ı¿ ¬¿ ¬%¿ ¬K¿ ¬n¿ ¬r¿ ¬s¿ ¬ø¿ ¬Œ¿ ¬‘¿ √#¿ √j¿ √É¿ √ê¿ √–¿ ƒC¿ ƒD¿ ƒè¿ ƒ∂¿ ƒÁ¿ ƒÌ¿ ƒÓ¿ ≈¿ ≈B¿ ≈F¿ ≈G¿ ≈ì¿ ≈Ø¿ ≈µ¿ ∆¿ ∆K¿ ∆d¿ ∆q¿ ∆¥¿ ∆€¿ ∆È¿ ∆Ô¿ «b¿ «c¿ «∞¿ «‡¿ «·¿ »¿ »5¿ »9¿ »:¿ »Ü¿ »õ¿ »®¿ »Ω¿ »¿ …¿ …¿ …Y¿ …å¿ …î¿ …ò¿ …ô¿ …Ë¿  2¿  8¿  i¿  o¿  Ω¿ À¿ À¿ ÀM¿ À¿ ÀÉ¿ ÀÑ¿ À—¿ Ã	¿ Ã¿ Ã@¿ ÃF¿ Ãó¿ Ã›¿ ÃÍ¿ Õ'¿ Õ^¿ Õ}¿ ÕØ¿ Õ«¿ Õ—¿ Õ¸¿ Œ1¿ Œ@¿ Œk¿ ŒÉ¿ Œç¿ Œ¬¿ Œ¿ Œ¯¿ œ&¿ œu¿ œú¿ œ≠¿ œ˛¿ –.¿ –`¿ –á¿ –£¿ –∞¿ –∫¿ –¬¿ –’¿ –€¿ –Ì¿ –Ò¿ –Ú¿ —:¿ —d¿ —y¿ —z¿ —√¿ —ﬂ¿ —¿ “¿ “¿ “d¿ “ù¿ “‹¿ ”¿ ”¿ ”-¿ ”6¿ ”<¿ ”@¿ ”A¿ ”ì¿ ”–¿ ‘ ¿ ‘g¿ ‘â¿ ‘º¿ ‘ƒ¿ ‘ ¿ ‘€¿ ‘ﬂ¿ ‘‡¿ ’1¿ ’L¿ ’a¿ ’ñ¿ ’«¿ ’Ú¿ ’Û¿ ÷8¿ ÷b¿ ÷à¿ ÷Æ¿ ÷∑¿ ÷æ¿ ÷ø¿ ÷¯¿ ◊E¿ ◊ê¿ ◊Œ¿ ÿ¿ ÿG¿ ÿè¿ ÿﬁ¿ Ÿ¿ Ÿ+¿ Ÿs¿ Ÿä¿ ŸÕ¿ Ÿ—¿ Ÿ“¿ ⁄ ¿ ⁄i¿ ⁄o¿ ⁄º¿ ⁄˜¿ €¿ €;¿ €w¿ €{¿ €|¿ €º¿ €‰¿ ‹	¿ ‹*¿ ‹g¿ ‹ä¿ ‹¡¿ ‹Œ¿ ›T¿ ›Z¿ ›[¿ ›®¿ ›¥¿ ›ˇ¿ ﬁ¿ ﬁ¿ ﬁ¿ ﬁà¿ ﬁ§¿ ﬁ∑¿ ﬁΩ¿ ﬁ€¿ ﬂ¿ ﬂc¿ ﬂå¿ ﬂì¿ ﬂó¿ ﬂò¿ ﬂ¯¿ ‡8¿ ‡[¿ ‡ê¿ ‡ ¿ ‡¸¿ ·"¿ ·X¿ ·k¿ ·w¿ ·Å¿ ·â¿ ·è¿ ·∂¿ ·∫¿ ·ª¿ ‚.¿ ‚U¿ ‚°¿ ‚ ¿ ‚Œ¿ ‚œ¿ „9¿ „p¿ „ì¿ „≤¿ „‹¿ „‚¿ ‰"¿ ‰&¿ ‰'¿ ‰L¿ ‰g¿ ‰î¿ ‰ö¿ ‰¿¿ ‰ƒ¿ ‰≈¿ ‰˚¿ Â@¿ Âd¿ Âx¿ Â~¿ Â∫¿ Âæ¿ Âø¿ Â˘¿ Ê.¿ Ê/¿ ÊÅ¿ Ê®¿ Ê⁄¿ Á¿ ÁO¿ ÁU¿ Áê¿ Á∏¿ ÁÕ¿ Á’¿ Á€¿ ÁÌ¿ ÁÒ¿ ÁÚ¿ Ë,¿ Ëb¿ Ë§¿ Ë√¿ Ë›¿ Ë„¿ È&¿ ÈW¿ Èj¿ Èn¿ Èo¿ Èø¿ Í¿ ÍK¿ Íõ¿ Í´¿ Í∞¿ ÍÏ¿ Î)¿ ÎT¿ Îá¿ ÎΩ¿ Ï¿ Ï"¿ Ï&¿ Ï'¿ Ïî¿ Ï˘¿ Ì.¿ ÌÇ¿ Ìï¿ Ì∏¿ Ì”¿ Ì€¿ Ì·¿ Ó ¿ Ó$¿ Ó%¿ ÓP¿ Óq¿ Ó†¿ Ó∆¿ ÓÕ¿ Ô¿ Ô¿ Ô¿ Ôa¿ Ôì¿ Ô†¿ ÔÂ¿ /¿ 3¿ 4¿ Å¿ À¿ „¿ Ò¿ Ò¿ Òä¿ Òé¿ Òè¿ Ò‹¿ Ú¿ ÚQ¿ Úô¿ Úù¿ Úû¿ ÚÈ¿ Û<¿ Ûµ¿ Ù7¿ Ù;¿ Ù<¿ Ùâ¿ Ù◊¿ ı¿ ı¿ ıW¿ ı•¿ ıˆ¿ ˆD¿ ˆY¿ ˆ_¿ ˆo¿ ˆu¿ ˆ√¿ ˆ“¿ ˜ ¿ ˜s¿ ˜w¿ ˜x¿ ˜º¿ ˜Û¿ ¯¿ ¯#¿ ¯$¿ ¯a¿ ¯v¿ ¯∫¿ ¯ﬁ¿ ˘¿ ˘¿ ˘¿ ˘"¿ ˘#¿ ˘x¿ ˘¬¿ ˘⁄¿ ˘Û¿ ˘˘¿ ˘˙¿ ˙Ü¿ ˙›¿ ˙·¿ ˙‚¿ ˚/¿ ˚|¿ ˚†¿ ˚¶¿ ˚Ú¿ ¸*¿ ¸z¿ ¸œ¿ ¸”¿ ¸‘¿ ˝,¿ ˝v¿ ˝Ã¿ ˛^¿ ˛‡¿ ˛‰¿ ˛Â¿ ˇ¿ ˇL¿ ˇ_¿ ˇe¿ ˇã¿ ˇØ¿ ˇ¬¿ ˇ»¿ ¿ M¿ d¿ w¿ }¿ Æ¿ ≤¿ ≥¿ ·¿ ˚¿(¿.¿h¿l¿m¿ñ¿∑¿‰¿Í¿(¿Y¿ü¿Ø¿º¿¿˜¿¿¿¿[¿l¿ó¿Œ¿“¿”¿¿•¿©¿™¿Ù¿B¿x¿∫¿æ¿ø¿Ú¿
¿¿Ü¿û¿ﬁ¿¿"¿A¿\¿s¿Ω¿∆¿Õ¿—¿“¿”¿¿=¿C¿z¿æ¿œ¿	9¿	Ä¿	™¿	 ¿
¿
<¿
â¿
ï¿
ü¿
æ¿
«¿
Œ¿¿'¿/¿3¿4¿u¿¬¿˘¿ˇ¿N¿ú¿±¿∑¿«¿Õ¿¿7¿S¿p¿à¿¢¿©¿¿¿	¿5¿S¿j¿Ä¿Ü¿–¿Ë¿˚¿¿¿%¿K¿i¿ç¿Æ¿≈¿Œ¿’¿Ÿ¿⁄¿+¿8¿Ñ¿´¿È¿Ô¿0¿4¿5¿{¿û¿§¿ı¿D¿á¿¡¿¿_¿≠¿˝¿!¿.¿N¿d¿¿õ¿¥¿‘¿Ò¿˛¿7¿J¿P¿º¿ˆ¿	¿¿¿9¿p¿ó¿£¿ª¿‹¿Ù¿ı¿E¿ì¿„¿¸¿'¿<¿D¿J¿K¿ä¿£¿÷¿‹¿¸¿¿¿¿>¿S¿c¿á¿≠¿∂¿Ω¿æ¿Ì¿¿¿3¿Q¿X¿\¿]¿î¿∏¿æ¿ı¿:¿q¿©¿Û¿¿N¿h¿r¿x¿í¿û¿ƒ¿‚¿˝¿!¿8¿£¿œ¿*¿P¿}¿â¿ä¿Ú¿¿4¿]¿j¿±¿ ¿ )¿ *¿ l¿ Æ¿ Û¿!$¿!Z¿!°¿!Ã¿!˜¿"*¿"E¿"^¿"®¿"Ó¿#6¿#t¿#Ç¿#é¿#è¿#ü¿#—¿$
¿$R¿$°¿$›¿%¿%%¿%X¿%ï¿%‘¿&¿&T¿&ï¿&©¿&π¿&¸¿'
¿'"¿'c¿'ç¿'ô¿'ö¿'™¿'◊¿(¿(>¿({¿(∫¿(À¿(Ã¿)¿)D¿)Ö¿)±¿)Ì¿*%¿*^¿*ü¿*“¿+¿+¿+(¿+]¿+ñ¿+”¿,¿,#¿,1¿,I¿,j¿,v¿,ó¿,¢¿,´¿,≤¿,Û¿-¿-¿-¿-¿-e¿-é¿-√¿.¿.:¿.T¿.É¿.ª¿.Ù¿/¿/@¿/c¿/{¿/É¿/â¿/»¿/·¿/È¿/Ì¿/Ó¿0>¿0g¿0†¿0Ì¿1¿10¿1_¿1ó¿1–¿1˙¿2¿2?¿2W¿2_¿2e¿2§¿2º¿2ƒ¿2»¿2…¿2¸¿3 ¿3&¿3O¿3†¿3¿¿3Ë¿3Ô¿4!¿4K¿4l¿4ï¿4ú¿4≈¿4ﬂ¿5¿5F¿5h¿5û¿5÷¿5¯¿6¿61¿69¿6?¿6~¿6ñ¿6û¿6¢¿6£¿6€¿7¿7*¿7@¿7H¿7N¿7Å¿7Ö¿7Ü¿7‚¿7˙¿88¿8É¿8ä¿8é¿8è¿8„¿9E¿9|¿9ﬂ¿9„¿9‰¿:4¿:Ç¿:“¿:ﬁ¿;1¿;X¿;ñ¿;ú¿;‰¿;Ë¿;È¿<7¿<ô¿<ù¿<û¿<Û¿=¿=^¿=d¿=∆¿=˜¿>=¿>X¿>£¿>€¿>˝¿?¿?¿? ¿?<¿?B¿?•¿?©¿?™¿@¿@£¿@ß¿@®¿@È¿@Ô¿A<¿A_¿A≥¿A◊¿A€¿A‹¿A¸¿A˝¿B¿B¿BF¿Bc¿B§¿B®¿B©¿B“¿B˜¿C7¿C=¿C]¿Cù¿C£¿Cß¿C®¿C˜¿D2¿D6¿D7¿DÅ¿D∫¿D¿¿E¿E<¿EI¿E[¿Eq¿Eó¿E∏¿Eø¿E˛¿F¿F¿FM¿F{¿FÅ¿F—¿F˝¿G
¿G+¿GJ¿GN¿GO¿G§¿G˘¿G˙¿H5¿HU¿HY¿HZ¿Há¿Hë¿HÁ¿I¿Id¿I≠¿I˝¿J¿J/¿J7¿JY¿JZ¿Jß¿J‹¿K¿KD¿Kí¿K±¿K…¿K”¿K¯¿L¿L¿L¿L<¿L\¿Ly¿Lô¿L±¿L‡¿M'¿M2¿M;¿MA¿ME¿MF¿Mò¿M≈¿MÀ¿N ¿N+¿NH¿N[¿Ns¿Nw¿Ny¿Nz¿N¬¿N∆¿O¿O]¿Ot¿Oá¿O£¿Oπ¿O“¿Oÿ¿OŸ¿OÏ¿O¸¿O˝¿P9¿PM¿PN¿Pj¿Pk¿PÜ¿Pò¿Pô¿P∞¿P¡¿P—¿P’¿P÷¿PÒ¿Q¿Q¿Q¿Q¿Q¿Ql¿Q¶¿Q™¿Q˚¿RK¿Rú¿RË¿S¿S¿Sg¿S¥¿Sœ¿SÙ¿T¿T#¿Tk¿Tµ¿TÕ¿T“¿U¿U7¿Us¿Ut¿Uõ¿U’¿U÷¿V¿V¿Vl¿VÄ¿V¿¿V¡¿W¿WO¿Wm¿Wó¿W¬¿W–¿W÷¿X¿XX¿Xt¿XÇ¿Xà¿X¥¿Xµ¿Xœ¿Y¿YO¿YÖ¿Y©¿Y√¿YÀ¿YÈ¿Z¿Z¿Zm¿Zv¿Zè¿Z∞¿Z∏¿Z“¿Zﬂ¿Z˙¿[ ¿[¿[P¿[ù¿[Í¿\1¿\A¿\X¿\v¿\ë¿\ô¿\≤¿\∏¿\º¿\Ω¿\‰¿\˚¿]H¿]ò¿]›¿^'¿^t¿^¶¿^◊¿^Ï¿^Ú¿_¿_
¿_¿_Z¿_x¿_≤¿_˜¿`¿`6¿`S¿`s¿`y¿`z¿`≥¿`‡¿`¯¿`ˇ¿a ¿a:¿a]¿aì¿a›¿b¿bI¿bä¿b£¿bº¿b«¿c¿c¿cI¿cO¿cP¿cô¿cº¿d+¿dd¿dó¿dÍ¿e"¿e>¿e\¿e|¿eû¿e´¿e∂¿e∑¿e‡¿f¿fD¿ft¿f|¿f®¿fÆ¿fØ¿f¬¿f‹¿fÌ¿fÒ¿fÛ¿fÙ¿g¿g>¿g?¿gK¿gÑ¿gÜ¿gá¿g ¿gŒ¿h¿hf¿h∞¿h˙¿i¿i¿iG¿iK¿iõ¿iÈ¿j7¿jÇ¿j ¿jˆ¿j˙¿kE¿kê¿k·¿l.¿lv¿l•¿l„¿lÈ¿m¿m0¿m?¿mX¿m¿mÖ¿mÜ¿m∞¿m∆¿m«¿n¿n	¿nW¿n¿n∫¿nª¿n«¿o
¿o¿o¿oH¿oj¿ok¿oæ¿oø¿oﬂ¿o‡¿p¿p¿p6¿p<¿pã¿p“¿q¿q5¿q6¿qi¿qj¿q∂¿qÁ¿r¿r¿rT¿r`¿ru¿rå¿rç¿r≤¿r∆¿s¿s$¿s.¿s5¿sè¿sì¿sî¿s†¿s≥¿t¿t[¿ta¿tv¿tz¿t{¿tí¿tØ¿t–¿tÂ¿t˛¿u¿u¿u1¿ul¿uá¿uÿ¿u˚¿v¿v¿ve¿vf¿v±¿vÈ¿w ¿w`¿wê¿w¢¿w™¿wÔ¿x9¿x~¿xê¿xò¿xô¿x—¿y
¿yW¿yk¿ys¿yy¿yz¿y©¿y”¿yÂ¿z/¿zu¿zõ¿z‡¿z˛¿{¿{¿{¿{3¿{9¿{I¿{M¿{N¿{ù¿{∞¿{∂¿|¿|P¿|ú¿|∑¿|˙¿}7¿}q¿}r¿}»¿}˙¿~!¿~U¿~|¿~Ç¿~ÿ¿¿¿4¿;¿U¿Y¿Z¿¿ò¿¶¿¨¿≠¿Ä)¿Äc¿Ä™¿Ä´¿ÄΩ¿Ä‰¿ÄÏ¿Ä¿ÄÒ¿Å ¿ÅQ¿Åw¿Å{¿Å|¿ÅØ¿Å‡¿Ç¿Ç
¿Ç¿Ç:¿Çà¿Çÿ¿É(¿Éy¿ÉΩ¿ÉÔ¿Ñ_¿Ñí¿Ñ¶¿Ñ¡¿ÑÀ¿Ñ—¿Ñ’¿Ñ÷¿ÑÏ¿Ö¿Ö¿Ö¿ÖA¿Öj¿Ö∂¿Öº¿ÖŒ¿Ü¿ÜL¿Üj¿Ür¿Üz¿Ü~¿Ü¿Üû¿Ü∞¿ÜÀ¿Ü”¿Ü◊¿Üÿ¿Ü‰¿á¿áT¿áô¿á‡¿à¿à¿à7¿àZ¿à{¿à¢¿àÃ¿à¿â¿â0¿âR¿âq¿â|¿âÖ¿âƒ¿âÿ¿âˇ¿ä(¿ät¿ä¿äÆ¿ä∂¿ä∫¿äº¿äΩ¿äÎ¿ã¿ã?¿ãE¿ãÖ¿ãπ¿ãÓ¿å¿å4¿åD¿å[¿å_¿å`¿å¶¿å¡¿å”¿åÏ¿ç ¿ç¿ç¿ç¿ç>¿çO¿çs¿çÉ¿çö¿çû¿çü¿ç‚¿çË¿é,¿é2¿éb¿éõ¿éú¿é∂¿é€¿é¯¿è¿èY¿è_¿èc¿èd¿è¥¿è∫¿è˛¿ê¿ê4¿êT¿ê°¿ê•¿ê¶¿ê¬¿êÎ¿ë¿ë5¿ëL¿ëZ¿ë`¿ëÖ¿ë¶¿ë‘¿ë⁄¿ëﬁ¿ëﬂ¿ë˙¿í ¿íD¿íê¿íù¿í¥¿í“¿íÿ¿í‹¿í›¿ì*¿ì>¿ì{¿ì}¿ì~¿ì∑¿ì”¿ì¿ìˆ¿ì˜¿î¿î¿î*¿îo¿î©¿î≠¿îÆ¿î∫¿ï¿ï:¿ï>¿ï@¿ïA¿ïs¿ïô¿ïﬁ¿ï¸¿ï˝¿ñ/¿ñP¿ñ|¿ñõ¿ñµ¿ñª¿ñ—¿ñ’¿ñ÷¿ñ‚¿ó¿ó¿ó¿ó<¿ó=¿óI¿ó¿ó∞¿ó¥¿óµ¿ó¡¿ó¯¿ò¿òC¿òî¿ò∞¿òÒ¿ò˘¿ò˝¿òˇ¿ô ¿ô¿ô$¿ôd¿ôà¿ôª¿ôº¿ôœ¿ôÍ¿ôÎ¿ô˜¿ö¿öF¿öZ¿ö`¿öÖ¿ö£¿öÃ¿ö–¿ö—¿ö›¿õ¿õ¿õ¿õW¿õ[¿õ´¿õ¬¿õÕ¿õÚ¿ú¿ú8¿úT¿úr¿úç¿úÆ¿ú¥¿úµ¿úœ¿úÚ¿ù¿ù5¿ùZ¿ù[¿ùg¿ùä¿ù∂¿ù ¿ù–¿û¿û-¿ûS¿ûô¿ûæ¿û¬¿û√¿ûœ¿ü.¿ü0¿ü1¿üR¿üö¿üÔ¿†D¿†E¿†ê¿†«¿†À¿°¿°i¿°ñ¿°—¿°Ï¿¢¿¢(¿¢L¿¢S¿¢q¿¢Å¿¢õ¿¢Æ¿¢∏¿¢–¿£¿£¿£j¿£î¿£ü¿£©¿£Ø¿£≥¿£¥¿£‘¿£’¿§#¿§1¿§7¿§Ü¿§ß¿§¡¿§¬¿•¿•I¿•q¿•r¿•û¿•ü¿•»¿•‰¿•Â¿¶¿¶"¿¶#¿¶/¿¶B¿¶_¿¶x¿¶ç¿¶ë¿¶í¿¶û¿¶À¿¶Ë¿¶ˆ¿¶¸¿¶˝¿ß3¿ß4¿ßi¿ßw¿ß}¿ß~¿ß¬¿®¿®:¿®u¿®á¿®è¿®‘¿®⁄¿®€¿©(¿©H¿©Ü¿©¿¿©Ë¿™¿™¿™¿™-¿™G¿™n¿™t¿™£¿™ß¿™®¿™È¿´'¿´f¿´î¿´ﬁ¿´˛¿¨C¿¨D¿¨h¿¨ã¿¨ø¿¨¿¿¨Ê¿≠¿≠%¿≠[¿≠\¿≠à¿≠Õ¿≠ÿ¿≠Á¿Æ¿ÆJ¿Æ{¿Æé¿Æè¿Æ‡¿Ø*¿Øg¿ØÆ¿Øª¿ØÃ¿∞¿∞F¿∞[¿∞a¿∞b¿∞ô¿∞Œ¿∞’¿±¿±G¿±ï¿±ñ¿≤¿≤¿≤P¿≤h¿≤å¿≤ê¿≤ë¿≤´¿≤æ¿≤“¿≤Û¿≥¿≥!¿≥0¿≥E¿≥K¿≥^¿≥¥¿≥Ù¿¥U¿¥|¿¥õ¿¥æ¿¥Â¿µ ¿µ?¿µg¿µç¿µì¿µî¿∂ ¿∂3¿∂E¿∂c¿∂y¿∂ü¿∂π¿∂¿¿∂¡¿∂Ì¿∑¿∑:¿∑O¿∑f¿∑y¿∑Ω¿∑∆¿∑ﬂ¿∑Ê¿∑Á¿∏	¿∏A¿∏Z¿∏~¿∏Ñ¿∏Ö¿∏∏¿∏ˇ¿πP¿πy¿π£¿πÕ¿∫¿∫¿∫e¿∫ƒ¿∫⁄¿∫ﬁ¿∫ﬂ¿∫Î¿∫¯¿ª"¿ªB¿ª^¿ªs¿ªz¿ªå¿ªê¿ªë¿ªﬁ¿ªÍ¿º6¿ºÉ¿º¥¿º¿Ω¿Ω8¿Ωn¿Ωè¿ΩÃ¿Ω¯¿æ ¿æ ¿æ&¿æ8¿æ<¿æ>¿æ?¿æg¿æå¿æ∑¿æ∏¿ø¿ø(¿øN¿øO¿øz¿øñ¿ø®¿ø∑¿ø∫¿øª¿¿¿¿$¿¿(¿¿s¿¿ç¿¿≥¿¿œ¿¿—¿¿“¿¡ ¿¡4¿¡F¿¡Z¿¡r¿¡ä¿¡§¿¡‹¿¡Î¿¡Ò¿¡Ú¿¬¿¬(¿¬)¿¬D¿¬V¿¬W¿¬t¿¬à¿¬â¿¬Ã¿¬‚¿¬„¿√¿√A¿√U¿√i¿√Å¿√à¿√†¿√ª¿√¡¿√“¿√÷¿√◊¿√„¿√˘¿ƒ$¿ƒ<¿ƒT¿ƒZ¿ƒo¿ƒò¿ƒ¥¿ƒ∏¿ƒ∫¿ƒª¿≈
¿≈¿≈\¿≈`¿≈µ¿≈‹¿≈‡¿∆<¿∆ô¿∆Æ¿∆Œ¿∆“¿«¿«-¿«`¿«Ä¿«õ¿«®¿«Æ¿«≤¿«“¿»¿»A¿»~¿»ú¿»¢¿»√¿…¿…¿…-¿…H¿…W¿…q¿…y¿…¿…É¿…ù¿…Æ¿…∞¿…±¿…‹¿…‡¿ ¿ O¿ g¿ Ö¿ â¿ ™¿ ≤¿ ı¿À'¿Àd¿À¿Àö¿ÀŒ¿ÀË¿À˛¿Ã#¿ÃZ¿Ã‹¿ÃÁ¿ÃÒ¿Ã˘¿Õ¿Õ¿Õ¿Õ ¿ÕU¿Õh¿ÕÜ¿Õä¿ÕŒ¿ÕÏ¿Œ¿ŒH¿Œî¿Œ›¿ŒÊ¿Œ˚¿œ¿œ¿œ¿œ"¿œc¿œö¿œÌ¿–¿–
¿–¿–"¿–&¿–'¿–b¿–ä¿–⁄¿–ı¿—%¿—P¿—Q¿—°¿—Ò¿“7¿“V¿“É¿“÷¿”¿”;¿”ì¿”µ¿”¬¿”Ã¿”‘¿”’¿”˚¿‘¿‘N¿‘u¿‘‹¿‘È¿‘Ù¿’¿’l¿’v¿’ä¿’ê¿’°¿’•¿’∆¿’˘¿’˝¿÷¿÷¿÷¿÷?¿÷C¿÷è¿÷°¿÷•¿÷ﬁ¿◊#¿◊w¿◊}¿◊ ¿ÿ¿ÿm¿ÿs¿ÿ±¿ÿÏ¿Ÿ9¿Ÿ;¿Ÿ<¿Ÿf¿Ÿj¿Ÿ´¿ŸØ¿Ÿ˙¿Ÿ˛¿⁄?¿⁄[¿⁄é¿⁄¶¿⁄¥¿⁄Ú¿€¿€g¿€m¿€~¿€Ü¿€ò¿€ö¿€õ¿€À¿€œ¿‹ ¿‹]¿‹é¿‹–¿‹Ì¿›<¿›>¿›?¿›î¿›ò¿›¿¿›ƒ¿ﬁ¿ﬁ¿ﬁc¿ﬁñ¿ﬁ“¿ﬁÒ¿ﬁÛ¿ﬁÙ¿ﬂ+¿ﬂn¿ﬂp¿ﬂq¿ﬂµ¿ﬂπ¿‡¿‡¿‡X¿‡ä¿‡Ï¿·7¿·9¿·:¿·á¿·ƒ¿··¿‚¿‚Q¿‚R¿‚z¿‚ü¿‚≥¿‚¬¿‚∆¿‚‡¿‚¸¿„¿„)¿„+¿„,¿„u¿„û¿„±¿‰¿‰W¿‰|¿‰ü¿‰≥¿‰—¿‰˛¿Â$¿Â?¿Âc¿Â~¿Â®¿ÂÆ¿ÂØ¿Â˜¿Ê¿Ê ¿Êj¿Êâ¿Êè¿Ê›¿Á%¿Á@¿ÁA¿Áê¿Á™¿Á´¿ÁÌ¿Ë¿Ë¿Ë%¿ËE¿ËF¿ËR¿Ël¿Ëm¿Ëy¿Ëú¿Ëù¿ËÂ¿ËÎ¿È=¿Èâ¿È≈¿Í>¿Í?¿Íê¿Íë¿Íø¿Í¿¿ÍÃ¿Î¿ÎQ¿Îw¿Îè¿Î ¿Î–¿ÎÁ¿Ï¿Ï¿ÏV¿Ïz¿Ï∏¿Ï˘¿Ì>¿Ìm¿Ìù¿Ì•¿Ì´¿Ìﬁ¿Ó7¿Ó=¿ÓP¿ÓT¿ÓU¿Óa¿Ó¨¿ÓÒ¿Ô:¿ÔÉ¿Ôœ¿¿k¿û¿Æ¿≤¿≥¿ø¿Ò¿ÒM¿ÒQ¿ÒR¿Ò^¿ÒΩ¿Ú¿ÚA¿Ú•¿Ú∂¿Ú∫¿Úª¿Ú«¿Û(¿ÛV¿Ûv¿ÛÆ¿Û˙¿Ù ¿Ù¿Ù¿Ù¿Ù#¿Ùõ¿Ù∆¿Ù‚¿ı¿ıF¿ıï¿ıÃ¿ˆ¿ˆ*¿ˆr¿ˆy¿ˆ}¿ˆ¿ˆÄ¿ˆ©¿ˆ¿¿ˆ⁄¿ˆ‹¿ˆ›¿˜*¿˜H¿˜L¿˜ö¿˜„¿¯,¿¯x¿¯≈¿¯œ¿¯”¿˘ ¿˘g¿˘∂¿˙¿˙¿˙¿˙k¿˙π¿˙„¿˙Á¿˚4¿˚D¿˚H¿˚é¿˚í¿˚¶¿˚™¿˚ˆ¿¸ ¿¸$¿¸0¿¸Z¿¸o¿¸¢¿¸Ÿ¿¸·¿¸Á¿¸Ô¿¸Û¿˝;¿˝Ö¿˝√¿˝«¿˝”¿˝˛¿˛¿˛H¿˛P¿˛T¿˛d¿˛h¿˛v¿˛z¿ˇ¿ˇT¿ˇú¿ˇπ¿ˇË¿ ¿  ¿ P¿ c¿ y¿ ©¿ ™¿ Ã¿ ˆ¿ ˜¿¿`¿d¿e¿¥¿–¿÷¿¿¿;¿Z¿g¿ä¿ê¿î¿ï¿»¿Ì¿
¿*¿7¿U¿[¿_¿`¿ö¿Ø¿Ã¿Ú¿ˇ¿.¿J¿_¿e¿i¿j¿ê¿°¿√¿‹¿‡¿‚    2_ProxyLayer_MulticastCanvas_calculateSubtreeBoundsHelper_calculateSubtreeBounds_ScreenshotContainerLayer_ScreenshotData_ScreenshotPaintingContext_DiagnosticsPathNode_followDiagnosticableChainInspectorReferenceDataWidgetInspectorService_LocationCount_ElementLocationStatsTracker_WidgetForTypeTestsWidgetInspector_WidgetInspectorStateInspectorSelection_InspectorOverlay_RenderInspectorOverlay_TransformedRect_InspectorOverlayRenderState_kMaxTooltipLines_kTooltipBackgroundColor"_kHighlightedRenderObjectFillColor$_kHighlightedRenderObjectBorderColor_InspectorOverlayLayer_kScreenEdgeMargin_kTooltipPadding_kInspectButtonMargin_kOffScreenMargin_messageStyle_HasCreationLocation	_Location_isDebugCreatordebugTransformDebugCreator_parseDiagnosticsNode_describeRelevantUserCodeDevToolsDeepLinkPropertydebugIsLocalCreationLocationdebugIsWidgetLocalCreation_describeCreationLocation_getObjectCreationLocation_getCreationLocation_locationToId
_locations_toLocationIdInspectorSerializationDelegate_WidgetFactorywidgetFactoryWeakMap ñW