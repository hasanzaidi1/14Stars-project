}index==hashCodeoffset_offsetspandetachtoStringsetupParentData_layoutChildlayoutInlineChildrenpositionInlineChildrendefaultApplyPaintTransformpaintInlineChildrenhitTestInlineChildren_placeholderCharacter_textPainter_cachedAttributedLabels_cachedCombinedSemanticsInfostext
selections_lastSelectableFragments	registrar
_registrar%_updateSelectionRegistrarSubscription%_removeSelectionRegistrarSubscription_getSelectableFragments_disposeSelectableFragmentsmarkNeedsLayoutdispose	textAligntextDirectionsoftWrap	_softWrapoverflow	_overflowtextScaleFactormaxLineslocale
strutStyletextWidthBasistextHeightBehaviorselectionColor_selectionColor_getOffsetForPosition_computeLineMetricscomputeMinIntrinsicWidthcomputeMaxIntrinsicWidth_computeIntrinsicHeightcomputeMinIntrinsicHeightcomputeMaxIntrinsicHeightcomputeDistanceToActualBaseline$_canComputeDryLayoutForInlineWidgets_canComputeIntrinsicsCached_canComputeIntrinsicshitTestSelfhitTestChildren_needsClipping_overflowShaderdebugHasOverflowShader_layoutTextsystemFontsDidChange_placeholderDimensions_layoutTextWithConstraintscomputeDryLayoutperformLayoutapplyPaintTransformpaintgetOffsetForCaretgetFullHeightForCaretgetBoxesForSelectiongetPositionForOffsetgetWordBoundary_getLineAtOffset_getTextPositionAbove_getTextPositionBelow_getTextPositionVerticaltextSize_semanticsInfodescribeSemanticsConfiguration%_childSemanticsConfigurationsDelegate!_createSemanticsConfigForTextInfo_cachedChildNodesassembleSemanticsNode_createShowOnScreenForclearSemanticsdebugDescribeChildrendebugFillPropertiesrange	paragraphfullText_textSelectionStart_textSelectionEnd_startHandleLayerLink_endHandleLayerLinkvalue_selectionGeometry_updateSelectionGeometry_getSelectionGeometrydispatchSelectionEventgetSelectedContent_didChangeSelection_updateSelectionEdge_clampTextPosition_setSelectionPosition_handleClearSelection_handleSelectAll_handleSelectWord#_handleDirectionallyExtendSelection _handleGranularlyExtendSelection"_moveBeyondTextBoundaryAtDirection_moveToTextBoundaryAtDirection_handleVerticalMovement!_positionIsWithinCurrentSelection_compareTextPositionsgetTransformToParagraphgetTransformTopushHandleLayers_rect_cachedRectdidChangeParagraphLayoutsizegetLineAtOffsetgetTextPositionAbovegetTextPositionBelow
_kEllipsis PlaceholderSpanIndexSemanticsTagTextParentData%RenderInlineChildrenContainerDefaultsRenderParagraph_SelectableFragmentÅúBoxHeightStyleBoxWidthStyleGradientLineMetricsPlaceholderAlignmentShaderTextBoxTextHeightBehaviorStringRichText	immutableSemanticsTagintoverrideboolObjectindexhashRenderEditable
WidgetSpan
ParentDataContainerParentDataMixin	RenderBoxOffsetPlaceholderSpanParentDataWidgetvoiddetachContainerRenderObjectMixinlayoutInlineChildrenTextPainterpositionInlineChildrenapplyPaintTransformdefaultApplyPaintTransformpaintInlineChildrenpainthitTestInlineChildrenhitTestChildrenextractFromInlineSpan
InlineSpan
parentDataPlaceholderDimensionsdoubleChildLayouterspanemptysizeBoxConstraintsmaxWidth	alignmentbaselinebaselineOffsetaboveBaselinebelowBaselinebottommiddletopgetDistanceToBaselinesetPlaceholderDimensions	protectedList
firstChildchild
childAfter_layoutChild
childCountinlinePlaceholderBoxeslength_offsetboxleftoffsetMatrix4setZero	translatedxdyPaintingContext
paintChildBoxHitTestResultaddWithPaintOffsetpositionhitTesttransformed"RelayoutWhenSystemFontsChangeMixin	TextAlignstartTextDirectionTextOverflowclipLocale
StrutStyleTextWidthBasisparentColorSelectionRegistrardebugAssertIsValidtext	textAligntextDirectiontextScaleFactormaxLinesellipsislocale
strutStyletextWidthBasistextHeightBehavioraddAllchildren	registrarfromCharCodeplaceholderCodeUnitAttributedStringInlineSpanSemanticsInformation	compareToRenderComparison	identicalmetadatamarkNeedsSemanticsUpdatemarkNeedsPaintlayoutvisibleForTestingTextSelectionfragment_textSelectionStart_textSelectionEndadd
baseOffsetextentOffsetforEachremovetoPlainTextincludeSemanticsLabelsindexOf	paragraphrange	TextRangeendfullTextdisposeelementdidChangeParagraphLayoutmarkNeedsLayoutjustifyltrrtlanyvaluehasSelectionTextPositionRectzerocomputeLineMetricsinfinitySizegetMinIntrinsicWidthminIntrinsicWidthgetMaxIntrinsicWidthmaxIntrinsicWidthChildLayoutHelperdryLayoutChildminWidthheightTextBaselinedebugNeedsLayoutconstraintscomputeDistanceToActualBaseline
alphabeticvisitChildrenRenderObjectdebugCheckingIntrinsicsgetPositionForOffsetgetSpanForPositionHitTestTargetHitTestEntrysystemFontsDidChangedebugCannotComputeDryLayoutreason	constrainlayoutChilddidExceedMaxLineswidthvisiblefadeTextSpanstylefadeSizePainterlineardebugRepaintTextRainbowEnabledPaintcolordebugCurrentRepaintColortoColorcanvasdrawRect	saveLayersaveclipRect	blendMode	BlendModemodulateshaderrestoregetOffsetForCaretgetFullHeightForCaretboxHeightStyleboxWidthStyletightgetBoxesForSelectiongetWordBoundarygetLineBoundarypreferredLineHeight_combineSemanticsInfoSemanticsConfigurationdescribeSemanticsConfigurationgetSemanticsInformationinfo
recognizerisPlaceholderexplicitChildNodesisSemanticBoundarychildConfigurationsDelegateStringBufferStringAttributesemanticsLabelstringAttributesinfoAttributecopywritetoString
attributesattributedLabel"ChildSemanticsConfigurationsResult)ChildSemanticsConfigurationsResultBuildercombineSemanticsInfomarkAsMergeUptagsChildrenWithbuildrequiresOwnNodeLinkedHashMapKeySemanticsNodeIterable
isNotEmpty	elementAtisTaggedisEmptyfirsttoRect	directionskipexpandToIncludetextBoxfromLTWHmaxmin	maxHeightfromLTRBfloorToDoublerightceilToDoublesortKeyOrdinalSortKeyGestureRecognizerTapGestureRecognizeronTapisLinkDoubleTapGestureRecognizeronDoubleTapLongPressGestureRecognizeronLongPressruntimeTypeparentPaintClipRect	intersectisHiddenkeys	UniqueKeykeyshowOnScreen
updateWithconfigrectchildrenInInversePaintOrderVoidCallback
descendantclearSemanticsDiagnosticsNodetoDiagnosticsNodenameDiagnosticsTreeStyle
transitionDiagnosticPropertiesBuilderdebugFillPropertiesEnumPropertyFlagPropertyifTrueifFalseshowNameDoublePropertydefaultValueDiagnosticsPropertyIntPropertyifNullPlaceHolderSpan
SelectableChangeNotifierTextLayoutMetricsisValidisCollapsedisNormalized	LayerLinkSelectionGeometrynotifyListenersstatusSelectionStatusnone
hasContent_getOffsetForPositioninvertstartSelectionPointSelectionPointlocalPositionMatrixUtilstransformPoint
lineHeight_textPainter
handleTypeTextSelectionHandleTypeendSelectionPointselectionRects	collapseduncollapsedSelectionResultSelectionEventtypeSelectionEventTypestartEdgeUpdateendEdgeUpdateSelectionEdgeUpdateEvent
edgeUpdateglobalPositionisEndclear	selectAll
selectWordSelectWordSelectionEventgranularlyExtendSelectionGranularlyExtendSelectionEventforwardgranularitydirectionallyExtendSelection!DirectionallyExtendSelectionEventSelectedContent	plainText	substringgetTransformToSelectionUtilsgetResultBasedOnRectadjustDragOffsetnextpreviousaffinityTextAffinity
downstreamupstreamglobalToLocalSelectionExtendDirectionpreviousLinebackwardnextLineisNaNMapEntrytargetedEdge(horizontalBaselineInParagraphCoordinatesbelow
moveResult edgeOffsetInParagraphCoordinates$baselineOffsetInParagraphCoordinatesTextGranularity	character
textInsideCharacterBoundarywordTextBoundarywordBoundariesmoveByWordBoundarytextBoundarylineLineBoundarydocumentDocumentBoundarygetTrailingTextBoundaryAtgetLeadingTextBoundaryAtcharacterBoundary_computeLineMetricslineMetrics
lineNumbertranslationValuesmultiplyattached
fromPointsselectionColorPaintingStylefillshift	pushLayerLeaderLayerlink_getLineAtOffsetclamp_getTextPositionAbove_getTextPositionBelow
SemanticsTag
ParentDataContainerParentDataMixin	RenderBoxContainerRenderObjectMixin%RenderInlineChildrenContainerDefaults"RelayoutWhenSystemFontsChangeMixin
SelectableChangeNotifierTextLayoutMetrics¶$ÄÅ39üV±˙Yò ¢    Ä¶  dart:collection  Ä¿  Ä“mathÄ’	dart:mathÄÚÅfBoxHeightStyleBoxWidthStyleGradientLineMetricsPlaceholderAlignmentShaderTextBoxTextHeightBehavior Ä‹  ÄÏuiÄÔdart:ui  Åj  package:flutter/foundation.dart  Åî  package:flutter/gestures.dart  Åº  package:flutter/semantics.dart  ÅÂ  package:flutter/services.dart  Ç  box.dart  Ç!  
debug.dart  Ç6  
layer.dart  ÇK  layout_helper.dart  Çh  object.dart  Ç~  selection.dart    	dart:core¿ L√ ¿[á( <ÄÜÄ§Ä•ÄøÄ€ÅhÅiÅìÅªÅ‰ÇÇÇ Ç5ÇJÇgÇ}ÇñÇóÇªÇºÉÉ(É,É{ÉöÉ•É„ÑÑÑmÑÜÑÑÒÖÖ!Ö"Ö.ÖQÖÜÖßÖ´Ö¨Ö∏ÜÜÜÜRÜÑÜ◊á'á-á~áÃá„ààààWà]à´à÷àÔàà¸âââ3âGâKâLâXâ∑âπâ∫ääQäëäïä‰ã4ãÑãûã¢ã–ã‘å%åtå≈ççNçRçüç∂ç∫ç¸é!é%éyé}é–éÁéÎé˘é˝èIèyèÎè˜ê!êPê{êÅêÖêÜêÒë<ëoëâë°ë≈ë‰í,íQítí®í›ìì@ìnì§îîîîîîmîõî°îÚï:ï@ïãïŸïﬂïÔïıñDññåñÌóóeóôó†ó§ó•óÙòòò]ò™ò˚ô?ôEôUô[ô©ô…ô÷öö1ö[övöÊöˆö˛õOõâõ™õ∞õÃúúBúcúiúmúnúæúŸúﬂù)ùuùÇù ûûMûgûÇûèû¿û∆û ûÀûÎûÒü@üSü`ü•ü»ü‰†6†p†ë†°†©†‡°°°°°<°B°ë°§°±°˙¢¢9¢ã¢≈¢Ê¢¸££8£U£q£‚£Î£˛§§§<§B§T§X§Z§[§í•B•k•q•Ω•Ò•˜¶G¶{¶†¶À¶ıßß>ß`ßsßáß£ßﬁ®®,®G®j®î®≈®‚®ˇ©(©K©`©©¶©—©Ó™8™Q™r™õ™Ã™◊™Ì´´´´z´ú´ù´–´—¨¨¨4¨a¨Ä¨≥¨⁄¨Í≠≠3≠a≠Ö≠®≠À≠ÛÆÆMÆgÆãÆØÆ“ÆÚØØHØtØèØ¿ØÁ∞∞∞"∞#∞S∞Y∞ß∞∂∞À∞Ú±±D±J±Ö±—≤≤3≤ã≤†≤π≤˜≥4≥@≥K≥S≥Y≥m≥q≥r≥ø¥¥+¥b¥c¥∞¥„µµ2µQµ_µeµíµµµÕµ˙µ˛µˇ∂0∂N∂\∂b∂û∂÷∂⁄∂€∑∑N∑\∑b∑ù∑°∑¢∑⁄∏(∏n∏Å∏®∏Èπππ>πHπ¡π÷πﬁππˆ∫	∫∫∫5∫a∫o∫u∫¡∫€∫·ªª
ªªª2ªûªªªøª¿ªÃªﬂººYºéº≥ºœº‰ºËºÈΩΩQΩtΩüΩ≠Ω≥Ω◊ΩÌΩÒΩÚæææaæ¢æ®æˆøEøìø‹¿ @,¿ @<¿ @B¿ @_¿ @°¿ @Ã¿ @˚¿ A	¿ A¿ A7¿ AN¿ AR¿ AS¿ Aå¿ Aí¿ A‹¿ A˛¿ B¿ BQ¿ B`¿ BÇ¿ Bî¿ B±¿ Bœ¿ B›¿ B„¿ B˙¿ C¿ C¿ C¿ CC¿ Cm¿ Cá¿ C¨¿ C ¿ Cÿ¿ Cﬁ¿ Cı¿ DE¿ D\¿ D`¿ Da¿ Dô¿ Dü¿ D¿ E¿ EM¿ Es¿ E§¿ E≤¿ E∏¿ E‚¿ E˛¿ F¿ F¿ F¿ Ff¿ F±¿ FÈ¿ G¿ Gd¿ Gp¿ Gç¿ Gµ¿ Gﬂ¿ GÌ¿ GÛ¿ H¿ H2¿ HI¿ HM¿ HN¿ Hê¿ H¨¿ H≤¿ H˛¿ IH¿ Iì¿ I–¿ I˝¿ J¿ J8¿ J`¿ Jn¿ Jt¿ Jï¿ J±¿ J»¿ JÃ¿ JÕ¿ K¿ K=¿ KZ¿ KÄ¿ K¨¿ K∫¿ K¿¿ KÂ¿ L¿ L¿ L¿ L¿ LX¿ Lú¿ L…¿ L˘¿ M¿ M¿ M6¿ MR¿ Mi¿ Mm¿ Mn¿ Mò¿ MÏ¿ N%¿ NY¿ Ng¿ Nm¿ Nö¿ N∂¿ NÕ¿ N—¿ N“¿ O¿ O¿ OW¿ Oá¿ O°¿ O∆¿ OÍ¿ O¯¿ O˛¿ P¿ På¿ P§¿ P™¿ PÆ¿ PØ¿ PÁ¿ QN¿ QR¿ QS¿ QÇ¿ Q∞¿ Q¥¿ Qµ¿ Q¡¿ QÙ¿ R¿ R*¿ R0¿ Rp¿ Rá¿ Rˆ¿ R˛¿ S0¿ S[¿ S_¿ S`¿ Sl¿ Sü¿ S√¿ S’¿ S€¿ T¿ T2¿ Tv¿ T≈¿ U4¿ U<¿ Un¿ Uô¿ Uù¿ Uû¿ Uœ¿ UÛ¿ V¿ V¿ Vu¿ V®¿ V»¿ VÃ¿ VÕ¿ VŸ¿ W¿ W7¿ W;¿ W<¿ WH¿ W{¿ W¶¿ W™¿ W´¿ W∑¿ W˘¿ X¿ XF¿ Xs¿ Xæ¿ Y¿ YS¿ Y†¿ YÊ¿ Z ¿ Zr¿ Zv¿ Zw¿ Z«¿ Z⁄¿ [
¿ [K¿ [ë¿ [®¿ [⁄¿ \¿ \K¿ \|¿ \¥¿ \€¿ ]¿ ]5¿ ]>¿ ]F¿ ]J¿ ]K¿ ]p¿ ]Ø¿ ]Û¿ ^¿ ^)¿ ^é¿ ^ö¿ ^◊¿ _"¿ _x¿ _Å¿ _ô¿ _ù¿ _û¿ _™¿ _◊¿ _ÿ¿ _‰¿ `4¿ `á¿ `’¿ `ˆ¿ a¿ a/¿ a5¿ ai¿ am¿ an¿ aç¿ a´¿ a¨¿ a˚¿ b	¿ b¿ bJ¿ b_¿ bù¿ bû¿ bÒ¿ c>¿ cW¿ cq¿ c¨¿ c≥¿ c∑¿ c∏¿ cƒ¿ c‰¿ d¿ d*¿ d.¿ d/¿ d{¿ dÄ¿ dœ¿ e¿ ef¿ eù¿ eû¿ eﬁ¿ f!¿ fr¿ fv¿ fw¿ fÉ¿ fπ¿ f›¿ g¿ gY¿ gc¿ g{¿ gÅ¿ g˙¿ hK¿ hÄ¿ hÑ¿ hÖ¿ hë¿ h™¿ h„¿ iK¿ ix¿ i∫¿ iª¿ j¿ jX¿ j¢¿ jÌ¿ k1¿ k^¿ k•¿ k—¿ k“¿ l-¿ ll¿ lª¿ m
¿ mY¿ m¶¿ mÈ¿ n3¿ nP¿ nk¿ né¿ n∞¿ n“¿ nÚ¿ o¿ o7¿ oY¿ oy¿ oö¿ o’¿ p"¿ pL¿ pz¿ pñ¿ p≠¿ pœ¿ pˆ¿ q¿ qA¿ q`¿ qì¿ qπ¿ qﬂ¿ r¿ r*¿ r\¿ rÇ¿ r¶¿ rÔ¿ r˛¿ s¿ sA¿ sé¿ s¿¿ sÊ¿ t
¿ tS¿ tb¿ tn¿ tì¿ tõ¿ t®¿ t∆¿ t‰¿ tÍ¿ tÓ¿ tÔ¿ t˚¿ u<¿ un¿ ur¿ us¿ u¿ u∂¿ v ¿ vM¿ võ¿ v”¿ v⁄¿ w#¿ wF¿ wM¿ wô¿ w∞¿ w›¿ wﬁ¿ wÓ¿ x¿ x>¿ xv¿ x≠¿ xµ¿ x»¿ x“¿ x”¿ xÌ¿ y¿ y;¿ yâ¿ y∆¿ y˘¿ z¿ z'¿ z/¿ zV¿ z\¿ z]¿ zâ¿ z◊¿ { ¿ {¿ {¿ {¿ {?¿ {@¿ {j¿ {k¿ {Ö¿ {™¿ {‚¿ |¿ |1¿ |W¿ |ì¿ |õ¿ |ª¿ |¡¿ |≈¿ |∆¿ |¸¿ }¿ }#¿ }l¿ }ã¿ }∏¿ }˝¿ ~¿ ~¿ ~D¿ ~J¿ ~k¿ ~§¿ ~√¿ ~¿ 4¿ 8¿ 9¿ w¿ }¿ Ã¿ Ä¿ ÄZ¿ Är¿ Äx¿ Ä«¿ Å¿ ÅN¿ ÅT¿ Åu¿ Å{¿ Åã¿ Åë¿ Åﬂ¿ Å˛¿ Ç'¿ ÇF¿ ÇÜ¿ Ç√¿ Ç ¿ ÇÈ¿ É¿ ÉD¿ ÉU¿ É{¿ Éü¿ É¶¿ É™¿ É´¿ ÉÚ¿ É¯¿ Ñ¿ ÑN¿ Ñm¿ Ñö¿ Ñ–¿ Ñ‘¿ Ñ’¿ Ö"¿ Ös¿ Ö¡¿ ÖÈ¿ ÖÔ¿ Ü>¿ Ü|¿ ÜÇ¿ Ü£¿ Üÿ¿ Ü˜¿ á$¿ áW¿ á[¿ á\¿ áª¿ áº¿ á˙¿ àE¿ àé¿ àÃ¿ â¿ â¿ â¿ âN¿ âò¿ â·¿ ä¿ ä]¿ äa¿ äb¿ ä∫¿ ã¿ ãc¿ ã®¿ ã¨¿ ã≠¿ ã›¿ ã„¿ å4¿ åÑ¿ å™¿ å∞¿ å˚¿ ç¿ ç"¿ ç8¿ çW¿ çu¿ çy¿ çz¿ çª¿ çˆ¿ é.¿ é/¿ é;¿ éÇ¿ é¥¿ éÈ¿ è¿ èH¿ èë¿ è∂¿ è·¿ è¿ è¯¿ êW¿ ê]¿ ê^¿ êÑ¿ ê¨¿ ê‘¿ ë¿ ëX¿ ëe¿ ëí¿ ë∆¿ ëﬁ¿ í$¿ íq¿ í≤¿ ì¿ ìB¿ ì^¿ ìÄ¿ ì¢¿ ìŸ¿ î¿ î¿ î0¿ î?¿ îK¿ îj¿ îå¿ îñ¿ ï	¿ ï¿ ïM¿ ïy¿ ï¿ ïÉ¿ ïÑ¿ ï¸¿ ñg¿ ñÖ¿ ñ§¿ ñÀ¿ ñ˝¿ óJ¿ ó¢¿ ó¬¿ óÊ¿ òS¿ ò}¿ òá¿ òÿ¿ ô¿ ôÜ¿ ô»¿ ôÍ¿ ôÙ¿ ö¿ ö"¿ ö?¿ öG¿ öM¿ öN¿ öx¿ öò¿ õ¿ õ¿ õ#¿ õ'¿ õ(¿ õû¿ õ≈¿ ú(¿ úX¿ úï¿ úñ¿ ú¡¿ ú’¿ ù¿ ù¿ ùG¿ ùq¿ ù£¿ ù“¿ ù€¿ û¿ û¿ û/¿ ûU¿ ûÄ¿ ûÑ¿ ûÖ¿ û—¿ ü ¿ ü_¿ üâ¿ ü¡¿ ü¬¿ üŒ¿ †B¿ †Ñ¿ †√¿ †˜¿ °¿ °'¿ °:¿ °X¿ °p¿ °ì¿ °Ù¿ ¢A¿ ¢ô¿ ¢Œ¿ ¢È¿ £¿ £"¿ £C¿ £D¿ £d¿ £≤¿ £˘¿ §(¿ §ñ¿ §‡¿ •2¿ •¿ •™¿ •“¿ •ﬁ¿ •˘¿ ¶¿ ¶'¿ ¶F¿ ¶U¿ ¶ñ¿ ¶ﬁ¿ ¶˚¿ ß¿ ß¿ ßC¿ ßu¿ ßØ¿ ßË¿ ®¿ ®"¿ ®e¿ ®©¿ ®«¿ ®Î¿ ©¿ ©D¿ ©|¿ ©á¿ ©’¿ ™&¿ ™K¿ ™v¿ ™†¿ ™À¿ ™˜¿ ´¿ ´P¿ ´Ä¿ ´≠¿ ¨"¿ ¨a¿ ¨É¿ ¨∑¿ ¨„¿ ≠¿ ≠D¿ ≠R¿ ≠ì¿ ≠≈¿ Æ¿ Æ,¿ Æ:¿ Æ{¿ Æ≠¿ ÆÔ¿ Æ˝¿ Ø¿ ØZ¿ Øf¿ Øp¿ Ø†¿ ØÛ¿ ∞A¿ ∞K¿ ∞v¿ ∞¨¿ ∞¸¿ ±¿ ±:¿ ±^¿ ±t¿ ±´¿ ±∏¿ ±¬¿ ±”¿ ≤¿ ≤!¿ ≤R¿ ≤u¿ ≤}¿ ≤É¿ ≤¡¿ ≤Ï¿ ≥¿ ≥¿ ≥/¿ ≥~¿ ≥Ç¿ ≥É¿ ≥µ¿ ≥≈¿ ¥ ¿ ¥7¿ ¥>¿ ¥B¿ ¥C¿ ¥O¿ ¥i¿ ¥Ö¿ ¥£¿ ¥ß¿ ¥®¿ ¥¥¿ ¥Ê¿ µ¿ µ"¿ µ8¿ µh¿ µq¿ µx¿ µ|¿ µ}¿ µâ¿ µŒ¿ µ˘¿ ∂>¿ ∂è¿ ∂£¿ ∂∑¿ ∂À¿ ∂‰¿ ∑¿ ∑M¿ ∑e¿ ∑n¿ ∑u¿ ∑ª¿ ∑œ¿ ∑Â¿ ∏ ¿ ∏¿ ∏4¿ ∏=¿ ∏D¿ ∏X¿ ∏{¿ ∏ç¿ ∏ù¿ ∏π¿ ∏¬¿ ∏…¿ π¿ π¿ π¿ π¿ πM¿ πQ¿ π†¿ πÊ¿ ∫6¿ ∫Å¿ ∫ë¿ ∫Í¿ ª¿ ª¿ ª;¿ ªT¿ ªü¿ ª—¿ ª’¿ ª÷¿ ªÔ¿ º¿ º+¿ º,¿ ºQ¿ ºt¿ ºu¿ ºô¿ ºª¿ ºº¿ º»¿ º˝¿ Ω*¿ ΩN¿ Ωé¿ Ω∏¿ Ω∆¿ ΩÃ¿ ΩÔ¿ æ¿ æ
¿ æ¿ æ9¿ æ}¿ æ£¿ æ…¿ æ„¿ æÏ¿ æÚ¿ æÛ¿ ø/¿ øg¿ ø¢¿ ¿¿ ¿p¿ ¿ö¿ ¿Á¿ ¡B¿ ¡ò¿ ¡À¿ ¡Ì¿ ¬¿ ¬¿ ¬F¿ ¬ï¿ ¬¡¿ ¬«¿ ¬Â¿ √¿ √Ñ¿ √ƒ¿ ƒ#¿ ƒ,¿ ƒU¿ ƒ«¿ ≈¿ ≈g¿ ≈p¿ ≈ñ¿ ≈›¿ ∆¿ ∆(¿ ∆@¿ ∆G¿ ∆K¿ ∆L¿ ∆X¿ ∆ô¿ ∆¿¿ «¿ «H¿ «b¿ «ë¿ «æ¿ »¿ »ì¿ »∏¿ »‚¿ …¿ …0¿ …Z¿ …±¿ …¿  )¿  õ¿  Œ¿  ˚¿ À&¿ ÀW¿ Àb¿ Àû¿ Ã¿ ÃO¿ Ãz¿ Ã®¿ Ã⁄¿ ÃÂ¿ ÃÎ¿ ÃÏ¿ Õ%¿ ÕZ¿ Õw¿ Õ}¿ Õê¿ Õî¿ Õï¿ Õ°¿ ÕÀ¿ Œ¿ Œ"¿ Œ(¿ ŒÄ¿ Œ÷¿ ŒÚ¿ œ#¿ œ*¿ œ.¿ œ/¿ œN¿ œn¿ œé¿ œí¿ œì¿ œÍ¿ –¿ –W¿ –o¿ –«¿ –‡¿ —(¿ —.¿ —q¿ —~¿ —ì¿ —Ω¿ —ƒ¿ —≈¿ “+¿ “^¿ “Ü¿ “©¿ “Ø¿ “Ÿ¿ ” ¿ ”¿ ”V¿ ”¶¿ ”¯¿ ‘¿ ‘X¿ ‘\¿ ‘]¿ ‘ò¿ ‘¬¿ ‘È¿ ’C¿ ’í¿ ’ò¿ ’¡¿ ’Ò¿ ’˜¿ ÷¿ ÷¿ ÷¿ ÷_¿ ÷p¿ ÷î¿ ÷°¿ ÷«¿ ÷Õ¿ ÷—¿ ÷“¿ ÷˛¿ ◊¿ ◊<¿ ◊]¿ ◊a¿ ◊b¿ ◊â¿ ◊∆¿ ÿ ¿ ÿA¿ ÿE¿ ÿF¿ ÿÉ¿ ÿÓ¿ Ÿ%¿ ŸG¿ ŸM¿ Ÿç¿ Ÿ¨¿ ŸÍ¿ ⁄¿ ⁄R¿ ⁄u¿ ⁄{¿ ⁄À¿ ⁄Î¿ €+¿ €H¿ €c¿ €â¿ €ƒ¿ €—¿ ‹¿ ‹N¿ ‹T¿ ‹u¿ ‹í¿ ‹≤¿ ‹∂¿ ‹∑¿ ›<¿ ›z¿ ›ü¿ ›π¿ ›Ì¿ ﬁ¿ ﬁH¿ ﬁx¿ ﬁß¿ ﬁŒ¿ ﬁ÷¿ ﬁ‹¿ ﬂW¿ ﬂä¿ ﬂÆ¿ ﬂ–¿ ﬂË¿ ‡¿ ‡H¿ ‡í¿ ‡Ú¿ ·N¿ ·f¿ ·∫¿ ·˙¿ ‚¿ ‚+¿ ‚N¿ ‚{¿ ‚©¿ ‚Ù¿ „"¿ „p¿ „£¿ ‰¿ ‰j¿ ‰Æ¿ ‰ÿ¿ Â!¿ ÂÅ¿ Âå¿ ÂË¿ Ê¿ Ê¿ Ê(¿ ÊO¿ Ê\¿ ÊÖ¿ Êã¿ Êû¿ Ê¢¿ Ê£¿ Á¿ Á4¿ Á`¿ Á¨¿ Á€¿ Ë7¿ Ëp¿ Ëì¿ Ëô¿ Ë’¿ Ë¸¿ È¿ È$¿ ÈH¿ Èc¿ Èâ¿ È¡¿ Í+¿ ÍQ¿ Ír¿ Í÷¿ Î5¿ Î[¿ Î|¿ Î›¿ Ï¿ Ï(¿ Ï`¿ Ï…¿ Ì¿ Ì,¿ Ìp¿ Ìù¿ ÌÆ¿ Ì÷¿ Ì‡¿ ÌÊ¿ ÌÁ¿ Ì˚¿ Ó"¿ Ó/¿ ÓX¿ Ó^¿ Óq¿ Óu¿ Óv¿ Ó«¿ Ô¿ Ôc¿ Ô}¿ ÔÏ¿ ¿ V¿ §¿ –¿ ‘¿ ’¿ Ò$¿ Òt¿ Ò£¿ Ú¿ Ú+¿ ÚF¿ Úb¿ ÚÑ¿ ÚÆ¿ Ú“¿ Û¿ Û¿ Û]¿ Û}¿ Ûä¿ ÛÈ¿ Û¯¿ Ù¿ Ù>¿ ÙD¿ Ùc¿ Ù¨¿ Ù˜¿ ı ¿ ı$¿ ı%¿ ı—¿ ˆ¿ ˆe¿ ˆç¿ ˆ√¿ ˆÒ¿ ˜¿ ˜.¿ ˜6¿ ˜<¿ ˜`¿ ˜î¿ ˜Í¿ ¯¿ ¯N¿ ¯[¿ ¯†¿ ¯»¿ ˘:¿ ˘C¿ ˘I¿ ˘k¿ ˘ò¿ ˘¡¿ ˘Û¿ ˙¿ ˙%¿ ˙I¿ ˙O¿ ˙Ñ¿ ˙æ¿ ˚¿ ˚¿ ˚¿ ˚T¿ ˚a¿ ˚g¿ ˚ü¿ ˚·¿ ¸%¿ ¸9¿ ¸?¿ ¸c¿ ¸á¿ ¸©¿ ¸¯¿ ˝#¿ ˝J¿ ˝W¿ ˝Ä¿ ˝©¿ ˝Ø¿ ˛"¿ ˛&¿ ˛'¿ ˛J¿ ˛P¿ ˛•¿ ˛√¿ ˇ¿ ˇM¿ ˇ]¿ ˇñ¿ ˇß¿ ˇ‰¿ ˇÙ¿ ¿ C¿ I¿ M¿ N¿ t¿ ∂¿ ∫¿ ª¿ «¿ ˙¿N¿R¿S¿_¿ß¿∆¿¿,¿2¿b¿ç¿Ø¿µ¿·¿¿*¿0¿4¿5¿H¿g¿©¿Ú¿˚¿¿E¿Ö¿«¿—¿Ô¿˛¿`¿“¿⁄¿‡¿˘¿˝¿¿¿7¿O¿S¿T¿`¿r¿â¿ç¿é¿≈¿	¿¿¿I¿~¿Ø¿‡¿È¿¿9¿f¿∑¿ÿ¿	¿	¿	#¿	\¿	™¿	√¿	ÿ¿
 ¿
l¿
w¿
≠¿
¬¿
À¿
—¿¿4¿I¿o¿Ÿ¿‰¿¿/¿8¿>¿B¿C¿O¿à¿…¿%¿}¿Ω¿¡¿¬¿Œ¿¿U¿Y¿Z¿f¿£¿Ì¿Ò¿Ú¿˛¿Y¿[    Ä•  ÄøÄ÷ Ä€ÄÄÚÅfÅi  Åì  Åª  Å‰  Ç  Ç   Ç5  ÇJ  Çg  Ç}    ÇºÉIÉ´Ä›/// Used by the [RenderParagraph] to map its rendering children to their
/// corresponding semantics nodes.
///
/// The [RichText] uses this to tag the relation between its placeholder spans
/// and their semantics nodes. ÉÂÅ
 ÑéÑÆÄö/// Creates a semantics tag with the input `index`.
///
/// Different [PlaceholderSpanIndexSemanticsTag]s with the same `index` are
/// consider the same.ÑØ
Ñµ  ÑΩÑ¬ÑÌÑ√ÑÂÑÊÑÎÑÛ,Ö/// The index of this tag. ÖÆUÖ¬   ÖÆÖØÖ$ÄÜÖ>  ÖAÖI  Ö$Ö%ÉöÉõÜÉ±Üä|/// Parent data used by [RenderParagraph] and [RenderEditable] to annotate
/// inline contents (such as [WidgetSpan]s) with.  àà  àÄ”àÈÄµ/// The [PlaceholderSpan] associated with this render child.
///
/// This field is usually set by a [ParentDataWidget], and is typically not
/// null when `performLayout` is called. ÜŸÅ*áÒÅ/// The offset at which to paint the child in the parent's coordinate system.
///
/// A `null` value indicates this inline widget is not laid out. For instance,
/// when the inline widget has never been laid out, or the inline widget is
/// ellipsized away.   àÚXâ   àÚàÛâNhâa   âNâO §[¿ îø§ò6/// A render object that displays a paragraph of text. •DÖÃ ¶}¶åÅ*/// Creates a paragraph render object.
///
/// The [text], [textAlign], [textDirection], [overflow], [softWrap], and
/// [textScaleFactor] arguments must not be null.
///
/// The [maxLines] property may be null (and indeed defaults to null), but if
/// it is not null, it must be greater than zero.¶ç¶ô  ¶§%¶Ø  ¶œ$¶Á  ¶˘¶ˇ  ß)ß!  ßBßJ  ßdßj  ßwßÄ  ßãßò  ßß5ß∑  ß‚)ß˙  ®®#  ®0®8  ®K®`  Q¶∫¶√¶ƒß	ß+ß7ß8ß[ß«ß’ß÷®q®w®ë®x®|®}®è®ê®õ®°®¬®≥®´®¢®Æ®ø®∂®¡®÷®Ã®ÿ®Û®È®ı©©©©<©/©>©I™”©X©T©Z©r©i©t©ï©à©ó©æ©Ø©¿©‚©⁄©‰©ˇ©˜™#™0™
™™™™™%™2™G™A™I™d™Z™f™â™{™ã™∂™§™∏´d´( ´@´F´G´S´w´T´c´d´|´é  ´ü/´∑  ´”C´˘  ¥-3¥H  ¥Â¥˘  ¿ BÑ¿ Bâ  ¿ Co¿ C|  ¿ Oâ¿ Oê  ¿ ]M!¿ ]S  ¿ ap¿ au ¿ aÜ¿ aè¿ aö  ¿ eh3¿ eÖ  ¿ ç|Ä∞¿ éw/// Collected during [describeSemanticsConfiguration], used by
/// [assembleSemanticsNode] and [_combineSemanticsInfo]. ¿ üã4¿ üÆ  ¨E¨E/// The text to display.   ¨cÉæ¨g  ¨l¨x   ∞%ÉK∞ÂÄä/// The ongoing selections in this paragraph.
///
/// The selection does not include selections in [PlaceholderSpan] if there
/// are any.  ∞∏∞π¥e}¥ J/// The [SelectionRegistrar] this paragraph will be, or is, registered to.   µÄˆµ  µµ*   ºÎeΩ,0/// How the text should be aligned horizontally.   ΩSÄùΩW  ΩaΩl   ΩÙÇ¨¿ @sÇR/// The directionality of the text.
///
/// This decides how the [TextAlign.start], [TextAlign.end], and
/// [TextAlign.justify] values of [textAlign] are interpreted.
///
/// This is also used to disambiguate how to render bidirectional text. For
/// example, if the [text] is an English phrase followed by a Hebrew phrase,
/// in a [TextDirection.ltr] context the English phrase will be on the left
/// and the Hebrew phrase to its right, while in a [TextDirection.rtl]
/// context, the English phrase will be on the right and the Hebrew phrase on
/// its left.
///
/// This must not be null.   ¿ @£ÄÆ¿ @ß  ¿ @µ¿ @ƒ   ¿ AUÅ,¿ BkÄ˛/// Whether the text should break at soft line breaks.
///
/// If false, the glyphs in the text will be positioned as if there was
/// unlimited horizontal space.
///
/// If [softWrap] is false, [overflow] and [textAlign] may have unexpected
/// effects.   ¿ Bñ~¿ Bö  ¿ B£
¿ B©   ¿ CT¿ CV*/// How visual overflow should be handled.   ¿ CâÄ÷¿ Cç  ¿ Cñ¿ C§   ¿ DcÄÈ¿ EÄ•/// The number of font pixels for each logical pixel.
///
/// For example, if the text scale factor is 1.5, text will be 50% larger than
/// the specified font size.   ¿ EOÄ…¿ ES  ¿ Ec¿ Ek   ¿ FÄ˙¿ FÙÄ»/// An optional maximum number of lines for the text to span, wrapping if
/// necessary. If the text exceeds the given number of lines, it will be
/// truncated according to [overflow] and [softWrap].   ¿ GÅ3¿ GvT/// The value may be null. If it is not null, then it must be greater than
/// zero. ¿ G
¿ GÖ   ¿ HPÅ¨¿ IﬁÅu/// Used by this paragraph's internal [TextPainter] to select a
/// locale-specific font.
///
/// In some cases, the same Unicode character may be rendered differently
/// depending on the locale. For example, the 'È™®' character is rendered
/// differently in the Chinese and Japanese locales. In these cases, the
/// [locale] may be used to select a locale-specific font.   ¿ IˇÄÃ¿ J /// The value may be null. ¿ J'¿ J0   ¿ Jœm¿ K4/// {@macro flutter.painting.textPainter.strutStyle}   ¿ K?Ä‹¿ K`/// The value may be null. ¿ Kk¿ Kx   ¿ L|¿ Lm8/// {@macro flutter.painting.textPainter.textWidthBasis}   ¿ LûÄŒ¿ L¢  ¿ L±¿ L¡   ¿ Mp{¿ Mµ'/// {@macro dart.ui.textHeightBehavior}   ¿ MÓÄ‚¿ MÚ  ¿ N¿ N   ¿ N‘Ä≤¿ Od~/// The color to use when painting the selection.
///
/// Ignored if the text is not selectable (e.g. if [registrar] is null).   ¿ O£Å
¿ Oß  ¿ O∂¿ Oæ   ¿ aÆÄÓ¿ bjÄï/// Whether this paragraph currently has a [dart:ui.Shader] for its overflow
/// effect.
///
/// Used to test this object. Not for use in production.  ¿ bL¿ bM¿ ãØÅ…¿ ç-Åb/// Returns the size of the text as laid out.
///
/// This can differ from [size] if the text overflowed or if the [constraints]
/// provided by the parent [RenderObject] forced the layout to be bigger than
/// necessary for the given [text].
///
/// This returns the [TextPainter.size] of the underlying [TextPainter].
///
/// Valid only after [layout].   *∂Äÿ∂    ∂›Ä√∂‚    ∑§Çh∑æ    ∫Ä˘∫    ªÄ±ª   ªªª¬Å%ª”   ª¬ª√¿ P±Ä†¿ P∏  ¿ PŒ¿ P‹   ¿ QU^¿ Qj    ¿ Q∑Åß¿ Q   ¿ Q„¿ QÎ  ¿ Q∑¿ Q∏¿ SbÇ:¿ Su  ¿ Sé¿ Sñ  ¿ Sb¿ Sc¿ U†Å+¿ Uß  ¿ Uø¿ U«   ¿ Vœk¿ V‚  ¿ V¸¿ W  ¿ Vœ¿ V–¿ W>k¿ WQ  ¿ Wk¿ Ws  ¿ W>¿ W?¿ W≠Ç»¿ W¿  ¿ W‡¿ WÓ  ¿ W≠¿ WÆ¿ ZyÇ–¿ Z·^/// Whether all inline widget children of this [RenderBox] support dry layout
/// calculation.   ¿ ^
Åí¿ ^    ¿ _†6¿ _±  ¿ _Ω¿ _≈  ¿ _†¿ _°¿ _⁄Åí¿ _Î  ¿ _˚¿ `  ¿ `¿ `'  ¿ _⁄¿ _€¿ b†Å¿ b•  ¿ b≥¿ bª  ¿ b !¿ b“  ¿ b≈¿ b‹¿ b‚¿ b„¿ c∫s¿ cÀ   ¿ c∫¿ cª¿ e†Ä’¿ e•  ¿ e¿¿ e–   ¿ fyÇ
¿ fä  ¿ fõ¿ f´  ¿ fy¿ fz¿ háåf¿ hò   ¿ há¿ hà¿ tÒÄÄ¿ u  ¿ u¿ u!  ¿ u'¿ u0  ¿ tÒ¿ tÚ¿ uuáO¿ uÜ  ¿ uå¿ uù  ¿ u•¿ u≠  ¿ uu¿ uv¿ |»Å8¿ },V/// Returns the offset at which to paint the caret.
///
/// Valid only after [layout]. ¿ }>¿ }L  ¿ }U¿ }[   ¿ ~Å3¿ ~ub/// {@macro flutter.painting.textPainter.getFullHeightForCaret}
///
/// Valid only after [layout]. ¿ ~ã¿ ~ô   ¿ ;Ñn¿ ÇÇ¢/// Returns a list of rects that bound the given selection.
///
/// The [boxHeightStyle] and [boxWidthStyle] arguments may be used to select
/// the shape of the [TextBox]es. These properties default to
/// [ui.BoxHeightStyle.tight] and [ui.BoxWidthStyle.tight] respectively and
/// must not be null.
///
/// A given selection might have more than one rect if the [RenderParagraph]
/// contains multiple [InlineSpan]s or bidirectional text, because logically
/// contiguous text might not be visually contiguous.
///
/// Valid only after [layout].
///
/// See also:
///
///  * [TextPainter.getBoxesForSelection], the method in TextPainter to get
///    the equivalent boxes. ¿ Ç+¿ Ç:  ¿ ÇJ:¿ Ç]  ¿ Çä7¿ Çú  
¿ Çm¿ Ço¿ Çp¿ Ç~¿ Ç¿ Ç´¿ Ç≠¿ ÇÆ¿ Çª¿ Çº¿ É≠Å&¿ Ñ(g/// Returns the position within the text for the given pixel offset.
///
/// Valid only after [layout]. ¿ Ñ=¿ ÑE   ¿ Ñ◊ÇÉ¿ ÜØÅª/// Returns the text range of the word at the given offset. Characters not
/// part of a word, such as spaces, symbols, and punctuation, have word breaks
/// on both sides. In such cases, this method will return a text range that
/// contains the given text position.
///
/// Word boundaries are defined more precisely in Unicode Standard Annex #29
/// <http://www.unicode.org/reports/tr29/#Word_Boundaries>.
///
/// Valid only after [layout]. ¿ Üø¿ ÜÕ   ¿ á^\¿ áh  ¿ áy¿ áá   ¿ áæÅP¿ áÀ  ¿ á·¿ áÔ   ¿ âÅN¿ â  ¿ â5¿ âC   ¿ ädÅG¿ äq  ¿ ää¿ äò  ¿ ä°¿ ä©   ¿ é1áQ¿ éB  ¿ éa¿ éy  ¿ é1¿ é2¿ ïÜÖ†¿ ï©  ¿ ïœ)¿ ïÌ   ¿ õ*ÉY¿ õA  ¿ õc'¿ õÉ  ¿ õå¿ õë   ¿ üƒìΩ¿ ü’  ¿ üÎ¿ ü˙  ¿ üˇ¿ †  ¿ † ¿ †7  ¿ üƒ¿ ü≈¿ ≥ÖÄº¿ ≥ì  ¿ ≥™¿ ≥Ø   ¿ ¥Ea¿ ¥V   ¿ ¥E¿ ¥F¿ ¥™Ä—¿ ¥Ã   ¿ ¥™¿ ¥´¿ µÉô¿ µê  ¿ µ§&¿ µ¡  ¿ µ¿ µÄ ¿ π¿ V>¿ ∫óÅt/// A continuous, selectable piece of paragraph.
///
/// Since the selections in [PlaceHolderSpan] are handled independently in its
/// subtree, a selection in [RenderParagraph] can't continue across a
/// [PlaceHolderSpan]. The [RenderParagraph] splits itself on [PlaceHolderSpan]
/// to create multiple `_SelectableFragment`s so that they can be selected
/// separately. ¿ ∫ÏÄË ¿ ∫Ï¿ ∫ˇ ¿ ª¿ ª  ¿ ª#¿ ª2  ¿ ª?¿ ªN  ¿ ª[¿ ªa¿ ªõ¿ ªÜ¿ ªp¿ ªb¿ ªg¿ ªh¿ ªs¿ ªt¿ ªy¿ ªz¿ ªâ¿ ªé¿ ªè	¿ ªÿ¿ ªË  ¿ ªÒ¿ º  ¿ º¿ º!  ¿ º.!¿ º<  ¿ ºS¿ ºa  ¿ ºw ¿ ºÇ  ¿ ºõ¿ º¶  ¿ ºˇ)¿ Ω  ¿ˇ¿  ¿ ºæ>¿ º‡   ¿ ºæ¿ ºø¿7Ç≈¿@    ¿V6¿k   ¿V¿W¿ Ω,Ä›¿ Ω1    ¿ æà=¿ æ    ¿ ∆NáE¿ ∆j  ¿ ∆Å¿ ∆ë  ¿ ∆N¿ ∆O¿ ÕóÅñ¿ Õ¥   ¿ Õó¿ Õò¿ œ1`¿ œ6    ¿ œïÑ∆¿ œ•  ¿ œ∫¿ œ¬  ¿ œ“¿ œ·   ¿ ‘_Å∞¿ ‘l  ¿ ‘¿ ‘ç   ¿ ÷ÄΩ¿ ÷  ¿ ÷.¿ ÷=  ¿ ÷G¿ ÷V   ¿ ÷‘Äå¿ ÷‰    ¿ ◊dÄ‡¿ ◊t    ¿ ÿHÑm¿ ÿX  ¿ ÿj¿ ÿr   ¿ ‹πâË¿ ‹…  ¿ ‹Ì¿ ‹ı  ¿ ›¿ ›  ¿ ›!¿ ›1   ¿ Ê•áœ¿ Êµ  ¿ Ê÷¿ Ê‹  ¿ Ê‰¿ ÊÍ  ¿ ÊÛ¿ Á   ¿ ÔÅT¿ Ôå  ¿ ÔØ¿ ÔΩ  ¿ Ô¡¿ Ô«  ¿ Ôœ¿ Ô›   ¿ Ò•É~¿ Ò≤  ¿ Ò—¿ Òﬂ  ¿ Ò„¿ ÒÈ  ¿ ÒÒ¿ Òˇ   ¿ ı'Ö„¿ ıO  ¿ ıg¿ ıu  ¿ ı8¿ ıê  ¿ ıπ¿ ı»   ¿ ˚É¿ ˚¶Ää/// Whether the given text position is contained in current selection
/// range.
///
/// The parameter `start` must be smaller than `end`. ¿ ˚»¿ ˚÷   ¿ ˛)Ç#¿ ˛–Äì/// Compares two text positions.
///
/// Returns 1 if `position` < `otherPosition`, -1 if `position` > `otherPosition`,
/// or 0 if they are equal. ¿ ˛Ê¿ ˛Ù  ¿ ˛˝¿ ˇ   ¿ Pi¿ X    ¿ ΩÄî¿ —  ¿ ‡¿ Ô  ¿ Ω¿ æ¿UÅﬁ¿f  ¿w¿É  ¿è¿õ  ¿U¿V¿=¿    ¿êÖ±¿ï  ¿õ¿¨  ¿¥¿º   ¿EÅ{¿_  ¿o¿}  ¿E¿F¿ƒÄî¿›  ¿Ú¿   ¿ƒ¿≈¿\Äî¿u  ¿ä¿ò  ¿\¿]¿Ùd¿
  ¿¿(  ¿Ù¿ı        â∫öüèÖæ/// A mixin that provides useful default behaviors for text [RenderBox]es
/// ([RenderParagraph] and [RenderEditable] for example) with inline content
/// children managed by the [ContainerRenderObjectMixin] mixin.
///
/// This mixin assumes every child managed by the [ContainerRenderObjectMixin]
/// mixin corresponds to a [PlaceholderSpan], and they are organized in logical
/// order of the text (the order each [PlaceholderSpan] is encountered when the
/// user reads the text).
///
/// To use this mixin in a [RenderBox] class:
///
///  * Call [layoutInlineChildren] in the `performLayout` and `computeDryLayout`
///    implementation, and during intrinsic size calculations, to get the size
///    information of the inline widgets as a `List` of `PlaceholderDimensions`.
///    Determine the positioning of the inline widgets (which is usually done by
///    a [TextPainter] using its line break algorithm).
///
///  * Call [positionInlineChildren] with the positioning information of the
///    inline widgets.
///
///  * Implement [RenderBox.applyPaintTransform], optionally with
///    [defaultApplyPaintTransform].
///
///  * Call [paintInlineChildren] in [RenderBox.paint] to paint the inline widgets.
///
///  * Call [hitTestInlineChildren] in [RenderBox.hitTestChildren] to hit test the
///    inline widgets.
///
/// See also:
///
///  * [WidgetSpan.extractFromInlineSpan], a helper function for extracting
///    [WidgetSpan]s from an [InlineSpan] tree.    èÌÄóè˛  êê  èÌèÓêàÉîê•  ê≤êΩ  ê√êÀ  ê‘ê„   î ÉÉñ™ÇF/// Computes the layout for every inline child using the given `layoutChild`
/// function and the `maxWidth` constraint.
///
/// Returns a list of [PlaceholderDimensions], representing the layout results
/// for each child managed by the [ContainerRenderObjectMixin] mixin.
///
/// Since this method does not impose a maximum height constraint on the
/// inline children, some children may become taller than this [RenderBox].
///
/// See also:
///
///  * [TextPainter.setPlaceholderDimensions], the method that usually takes
///    the layout results from this method as the input. ñøñ«  ñ–ñﬂ  ñÅñÇóßÑ≈ô›Ç/// Positions each inline child according to the coordinates provided in the
/// `boxes` list.
///
/// The `boxes` list must be in logical order, which is the order each child
/// is encountered when the user reads the text. Usually the length of the
/// list equals [childCount], but it can be less than that, when some children
/// are ommitted due to ellipsing. It never exceeds [childCount].
///
/// See also:
///
///  * [TextPainter.inlinePlaceholderBoxes], the method that can be used to
///    get the input `boxes`. ôÙö  ôÀôÃúpÇYùâÄ¸/// Applies the transform that would be applied when painting the given child
/// to the given matrix.
///
/// Render children whose [TextParentData.offset] is null zeros out the
/// `transform` to indicate they're invisible thus should not be painted. ù§ùØ  ùµùæ  ùwùxûÕÇ=üg/// Paints each inline child.
///
/// Render children whose [TextParentData.offset] is null will be skipped by
/// this method. ü{üå  üîüú  üUüV°ÉI°∏Äè/// Performs a hit test on each inline child.
///
/// Render children whose [TextParentData.offset] is null will be skipped by
/// this method. °Œ°‡  °Á°Ô  °¶°ß Çó"Ç§ Ç±  á( <ÄÜÄ§Ä•ÄøÄ€ÅhÅiÅìÅªÅ‰ÇÇÇ Ç5ÇJÇgÇ}ÇñÇóÇªÇºÉÉ(É,É{ÉöÉ•É„ÑÑÑmÑÜÑÑÒÖÖ!Ö"Ö.ÖQÖÜÖßÖ´Ö¨Ö∏ÜÜÜÜRÜÑÜ◊á'á-á~áÃá„ààààWà]à´à÷àÔàà¸âââ3âGâKâLâXâ∑âπâ∫ääQäëäïä‰ã4ãÑãûã¢ã–ã‘å%åtå≈ççNçRçüç∂ç∫ç¸é!é%éyé}é–éÁéÎé˘é˝èIèyèÎè˜ê!êPê{êÅêÖêÜêÒë<ëoëâë°ë≈ë‰í,íQítí®í›ìì@ìnì§îîîîîîmîõî°îÚï:ï@ïãïŸïﬂïÔïıñDññåñÌóóeóôó†ó§ó•óÙòòò]ò™ò˚ô?ôEôUô[ô©ô…ô÷öö1ö[övöÊöˆö˛õOõâõ™õ∞õÃúúBúcúiúmúnúæúŸúﬂù)ùuùÇù ûûMûgûÇûèû¿û∆û ûÀûÎûÒü@üSü`ü•ü»ü‰†6†p†ë†°†©†‡°°°°°<°B°ë°§°±°˙¢¢9¢ã¢≈¢Ê¢¸££8£U£q£‚£Î£˛§§§<§B§T§X§Z§[§í•B•k•q•Ω•Ò•˜¶G¶{¶†¶À¶ıßß>ß`ßsßáß£ßﬁ®®,®G®j®î®≈®‚®ˇ©(©K©`©©¶©—©Ó™8™Q™r™õ™Ã™◊™Ì´´´´z´ú´ù´–´—¨¨¨4¨a¨Ä¨≥¨⁄¨Í≠≠3≠a≠Ö≠®≠À≠ÛÆÆMÆgÆãÆØÆ“ÆÚØØHØtØèØ¿ØÁ∞∞∞"∞#∞S∞Y∞ß∞∂∞À∞Ú±±D±J±Ö±—≤≤3≤ã≤†≤π≤˜≥4≥@≥K≥S≥Y≥m≥q≥r≥ø¥¥+¥b¥c¥∞¥„µµ2µQµ_µeµíµµµÕµ˙µ˛µˇ∂0∂N∂\∂b∂û∂÷∂⁄∂€∑∑N∑\∑b∑ù∑°∑¢∑⁄∏(∏n∏Å∏®∏Èπππ>πHπ¡π÷πﬁππˆ∫	∫∫∫5∫a∫o∫u∫¡∫€∫·ªª
ªªª2ªûªªªøª¿ªÃªﬂººYºéº≥ºœº‰ºËºÈΩΩQΩtΩüΩ≠Ω≥Ω◊ΩÌΩÒΩÚæææaæ¢æ®æˆøEøìø‹¿ @,¿ @<¿ @B¿ @_¿ @°¿ @Ã¿ @˚¿ A	¿ A¿ A7¿ AN¿ AR¿ AS¿ Aå¿ Aí¿ A‹¿ A˛¿ B¿ BQ¿ B`¿ BÇ¿ Bî¿ B±¿ Bœ¿ B›¿ B„¿ B˙¿ C¿ C¿ C¿ CC¿ Cm¿ Cá¿ C¨¿ C ¿ Cÿ¿ Cﬁ¿ Cı¿ DE¿ D\¿ D`¿ Da¿ Dô¿ Dü¿ D¿ E¿ EM¿ Es¿ E§¿ E≤¿ E∏¿ E‚¿ E˛¿ F¿ F¿ F¿ Ff¿ F±¿ FÈ¿ G¿ Gd¿ Gp¿ Gç¿ Gµ¿ Gﬂ¿ GÌ¿ GÛ¿ H¿ H2¿ HI¿ HM¿ HN¿ Hê¿ H¨¿ H≤¿ H˛¿ IH¿ Iì¿ I–¿ I˝¿ J¿ J8¿ J`¿ Jn¿ Jt¿ Jï¿ J±¿ J»¿ JÃ¿ JÕ¿ K¿ K=¿ KZ¿ KÄ¿ K¨¿ K∫¿ K¿¿ KÂ¿ L¿ L¿ L¿ L¿ LX¿ Lú¿ L…¿ L˘¿ M¿ M¿ M6¿ MR¿ Mi¿ Mm¿ Mn¿ Mò¿ MÏ¿ N%¿ NY¿ Ng¿ Nm¿ Nö¿ N∂¿ NÕ¿ N—¿ N“¿ O¿ O¿ OW¿ Oá¿ O°¿ O∆¿ OÍ¿ O¯¿ O˛¿ P¿ På¿ P§¿ P™¿ PÆ¿ PØ¿ PÁ¿ QN¿ QR¿ QS¿ QÇ¿ Q∞¿ Q¥¿ Qµ¿ Q¡¿ QÙ¿ R¿ R*¿ R0¿ Rp¿ Rá¿ Rˆ¿ R˛¿ S0¿ S[¿ S_¿ S`¿ Sl¿ Sü¿ S√¿ S’¿ S€¿ T¿ T2¿ Tv¿ T≈¿ U4¿ U<¿ Un¿ Uô¿ Uù¿ Uû¿ Uœ¿ UÛ¿ V¿ V¿ Vu¿ V®¿ V»¿ VÃ¿ VÕ¿ VŸ¿ W¿ W7¿ W;¿ W<¿ WH¿ W{¿ W¶¿ W™¿ W´¿ W∑¿ W˘¿ X¿ XF¿ Xs¿ Xæ¿ Y¿ YS¿ Y†¿ YÊ¿ Z ¿ Zr¿ Zv¿ Zw¿ Z«¿ Z⁄¿ [
¿ [K¿ [ë¿ [®¿ [⁄¿ \¿ \K¿ \|¿ \¥¿ \€¿ ]¿ ]5¿ ]>¿ ]F¿ ]J¿ ]K¿ ]p¿ ]Ø¿ ]Û¿ ^¿ ^)¿ ^é¿ ^ö¿ ^◊¿ _"¿ _x¿ _Å¿ _ô¿ _ù¿ _û¿ _™¿ _◊¿ _ÿ¿ _‰¿ `4¿ `á¿ `’¿ `ˆ¿ a¿ a/¿ a5¿ ai¿ am¿ an¿ aç¿ a´¿ a¨¿ a˚¿ b	¿ b¿ bJ¿ b_¿ bù¿ bû¿ bÒ¿ c>¿ cW¿ cq¿ c¨¿ c≥¿ c∑¿ c∏¿ cƒ¿ c‰¿ d¿ d*¿ d.¿ d/¿ d{¿ dÄ¿ dœ¿ e¿ ef¿ eù¿ eû¿ eﬁ¿ f!¿ fr¿ fv¿ fw¿ fÉ¿ fπ¿ f›¿ g¿ gY¿ gc¿ g{¿ gÅ¿ g˙¿ hK¿ hÄ¿ hÑ¿ hÖ¿ hë¿ h™¿ h„¿ iK¿ ix¿ i∫¿ iª¿ j¿ jX¿ j¢¿ jÌ¿ k1¿ k^¿ k•¿ k—¿ k“¿ l-¿ ll¿ lª¿ m
¿ mY¿ m¶¿ mÈ¿ n3¿ nP¿ nk¿ né¿ n∞¿ n“¿ nÚ¿ o¿ o7¿ oY¿ oy¿ oö¿ o’¿ p"¿ pL¿ pz¿ pñ¿ p≠¿ pœ¿ pˆ¿ q¿ qA¿ q`¿ qì¿ qπ¿ qﬂ¿ r¿ r*¿ r\¿ rÇ¿ r¶¿ rÔ¿ r˛¿ s¿ sA¿ sé¿ s¿¿ sÊ¿ t
¿ tS¿ tb¿ tn¿ tì¿ tõ¿ t®¿ t∆¿ t‰¿ tÍ¿ tÓ¿ tÔ¿ t˚¿ u<¿ un¿ ur¿ us¿ u¿ u∂¿ v ¿ vM¿ võ¿ v”¿ v⁄¿ w#¿ wF¿ wM¿ wô¿ w∞¿ w›¿ wﬁ¿ wÓ¿ x¿ x>¿ xv¿ x≠¿ xµ¿ x»¿ x“¿ x”¿ xÌ¿ y¿ y;¿ yâ¿ y∆¿ y˘¿ z¿ z'¿ z/¿ zV¿ z\¿ z]¿ zâ¿ z◊¿ { ¿ {¿ {¿ {¿ {?¿ {@¿ {j¿ {k¿ {Ö¿ {™¿ {‚¿ |¿ |1¿ |W¿ |ì¿ |õ¿ |ª¿ |¡¿ |≈¿ |∆¿ |¸¿ }¿ }#¿ }l¿ }ã¿ }∏¿ }˝¿ ~¿ ~¿ ~D¿ ~J¿ ~k¿ ~§¿ ~√¿ ~¿ 4¿ 8¿ 9¿ w¿ }¿ Ã¿ Ä¿ ÄZ¿ Är¿ Äx¿ Ä«¿ Å¿ ÅN¿ ÅT¿ Åu¿ Å{¿ Åã¿ Åë¿ Åﬂ¿ Å˛¿ Ç'¿ ÇF¿ ÇÜ¿ Ç√¿ Ç ¿ ÇÈ¿ É¿ ÉD¿ ÉU¿ É{¿ Éü¿ É¶¿ É™¿ É´¿ ÉÚ¿ É¯¿ Ñ¿ ÑN¿ Ñm¿ Ñö¿ Ñ–¿ Ñ‘¿ Ñ’¿ Ö"¿ Ös¿ Ö¡¿ ÖÈ¿ ÖÔ¿ Ü>¿ Ü|¿ ÜÇ¿ Ü£¿ Üÿ¿ Ü˜¿ á$¿ áW¿ á[¿ á\¿ áª¿ áº¿ á˙¿ àE¿ àé¿ àÃ¿ â¿ â¿ â¿ âN¿ âò¿ â·¿ ä¿ ä]¿ äa¿ äb¿ ä∫¿ ã¿ ãc¿ ã®¿ ã¨¿ ã≠¿ ã›¿ ã„¿ å4¿ åÑ¿ å™¿ å∞¿ å˚¿ ç¿ ç"¿ ç8¿ çW¿ çu¿ çy¿ çz¿ çª¿ çˆ¿ é.¿ é/¿ é;¿ éÇ¿ é¥¿ éÈ¿ è¿ èH¿ èë¿ è∂¿ è·¿ è¿ è¯¿ êW¿ ê]¿ ê^¿ êÑ¿ ê¨¿ ê‘¿ ë¿ ëX¿ ëe¿ ëí¿ ë∆¿ ëﬁ¿ í$¿ íq¿ í≤¿ ì¿ ìB¿ ì^¿ ìÄ¿ ì¢¿ ìŸ¿ î¿ î¿ î0¿ î?¿ îK¿ îj¿ îå¿ îñ¿ ï	¿ ï¿ ïM¿ ïy¿ ï¿ ïÉ¿ ïÑ¿ ï¸¿ ñg¿ ñÖ¿ ñ§¿ ñÀ¿ ñ˝¿ óJ¿ ó¢¿ ó¬¿ óÊ¿ òS¿ ò}¿ òá¿ òÿ¿ ô¿ ôÜ¿ ô»¿ ôÍ¿ ôÙ¿ ö¿ ö"¿ ö?¿ öG¿ öM¿ öN¿ öx¿ öò¿ õ¿ õ¿ õ#¿ õ'¿ õ(¿ õû¿ õ≈¿ ú(¿ úX¿ úï¿ úñ¿ ú¡¿ ú’¿ ù¿ ù¿ ùG¿ ùq¿ ù£¿ ù“¿ ù€¿ û¿ û¿ û/¿ ûU¿ ûÄ¿ ûÑ¿ ûÖ¿ û—¿ ü ¿ ü_¿ üâ¿ ü¡¿ ü¬¿ üŒ¿ †B¿ †Ñ¿ †√¿ †˜¿ °¿ °'¿ °:¿ °X¿ °p¿ °ì¿ °Ù¿ ¢A¿ ¢ô¿ ¢Œ¿ ¢È¿ £¿ £"¿ £C¿ £D¿ £d¿ £≤¿ £˘¿ §(¿ §ñ¿ §‡¿ •2¿ •¿ •™¿ •“¿ •ﬁ¿ •˘¿ ¶¿ ¶'¿ ¶F¿ ¶U¿ ¶ñ¿ ¶ﬁ¿ ¶˚¿ ß¿ ß¿ ßC¿ ßu¿ ßØ¿ ßË¿ ®¿ ®"¿ ®e¿ ®©¿ ®«¿ ®Î¿ ©¿ ©D¿ ©|¿ ©á¿ ©’¿ ™&¿ ™K¿ ™v¿ ™†¿ ™À¿ ™˜¿ ´¿ ´P¿ ´Ä¿ ´≠¿ ¨"¿ ¨a¿ ¨É¿ ¨∑¿ ¨„¿ ≠¿ ≠D¿ ≠R¿ ≠ì¿ ≠≈¿ Æ¿ Æ,¿ Æ:¿ Æ{¿ Æ≠¿ ÆÔ¿ Æ˝¿ Ø¿ ØZ¿ Øf¿ Øp¿ Ø†¿ ØÛ¿ ∞A¿ ∞K¿ ∞v¿ ∞¨¿ ∞¸¿ ±¿ ±:¿ ±^¿ ±t¿ ±´¿ ±∏¿ ±¬¿ ±”¿ ≤¿ ≤!¿ ≤R¿ ≤u¿ ≤}¿ ≤É¿ ≤¡¿ ≤Ï¿ ≥¿ ≥¿ ≥/¿ ≥~¿ ≥Ç¿ ≥É¿ ≥µ¿ ≥≈¿ ¥ ¿ ¥7¿ ¥>¿ ¥B¿ ¥C¿ ¥O¿ ¥i¿ ¥Ö¿ ¥£¿ ¥ß¿ ¥®¿ ¥¥¿ ¥Ê¿ µ¿ µ"¿ µ8¿ µh¿ µq¿ µx¿ µ|¿ µ}¿ µâ¿ µŒ¿ µ˘¿ ∂>¿ ∂è¿ ∂£¿ ∂∑¿ ∂À¿ ∂‰¿ ∑¿ ∑M¿ ∑e¿ ∑n¿ ∑u¿ ∑ª¿ ∑œ¿ ∑Â¿ ∏ ¿ ∏¿ ∏4¿ ∏=¿ ∏D¿ ∏X¿ ∏{¿ ∏ç¿ ∏ù¿ ∏π¿ ∏¬¿ ∏…¿ π¿ π¿ π¿ π¿ πM¿ πQ¿ π†¿ πÊ¿ ∫6¿ ∫Å¿ ∫ë¿ ∫Í¿ ª¿ ª¿ ª;¿ ªT¿ ªü¿ ª—¿ ª’¿ ª÷¿ ªÔ¿ º¿ º+¿ º,¿ ºQ¿ ºt¿ ºu¿ ºô¿ ºª¿ ºº¿ º»¿ º˝¿ Ω*¿ ΩN¿ Ωé¿ Ω∏¿ Ω∆¿ ΩÃ¿ ΩÔ¿ æ¿ æ
¿ æ¿ æ9¿ æ}¿ æ£¿ æ…¿ æ„¿ æÏ¿ æÚ¿ æÛ¿ ø/¿ øg¿ ø¢¿ ¿¿ ¿p¿ ¿ö¿ ¿Á¿ ¡B¿ ¡ò¿ ¡À¿ ¡Ì¿ ¬¿ ¬¿ ¬F¿ ¬ï¿ ¬¡¿ ¬«¿ ¬Â¿ √¿ √Ñ¿ √ƒ¿ ƒ#¿ ƒ,¿ ƒU¿ ƒ«¿ ≈¿ ≈g¿ ≈p¿ ≈ñ¿ ≈›¿ ∆¿ ∆(¿ ∆@¿ ∆G¿ ∆K¿ ∆L¿ ∆X¿ ∆ô¿ ∆¿¿ «¿ «H¿ «b¿ «ë¿ «æ¿ »¿ »ì¿ »∏¿ »‚¿ …¿ …0¿ …Z¿ …±¿ …¿  )¿  õ¿  Œ¿  ˚¿ À&¿ ÀW¿ Àb¿ Àû¿ Ã¿ ÃO¿ Ãz¿ Ã®¿ Ã⁄¿ ÃÂ¿ ÃÎ¿ ÃÏ¿ Õ%¿ ÕZ¿ Õw¿ Õ}¿ Õê¿ Õî¿ Õï¿ Õ°¿ ÕÀ¿ Œ¿ Œ"¿ Œ(¿ ŒÄ¿ Œ÷¿ ŒÚ¿ œ#¿ œ*¿ œ.¿ œ/¿ œN¿ œn¿ œé¿ œí¿ œì¿ œÍ¿ –¿ –W¿ –o¿ –«¿ –‡¿ —(¿ —.¿ —q¿ —~¿ —ì¿ —Ω¿ —ƒ¿ —≈¿ “+¿ “^¿ “Ü¿ “©¿ “Ø¿ “Ÿ¿ ” ¿ ”¿ ”V¿ ”¶¿ ”¯¿ ‘¿ ‘X¿ ‘\¿ ‘]¿ ‘ò¿ ‘¬¿ ‘È¿ ’C¿ ’í¿ ’ò¿ ’¡¿ ’Ò¿ ’˜¿ ÷¿ ÷¿ ÷¿ ÷_¿ ÷p¿ ÷î¿ ÷°¿ ÷«¿ ÷Õ¿ ÷—¿ ÷“¿ ÷˛¿ ◊¿ ◊<¿ ◊]¿ ◊a¿ ◊b¿ ◊â¿ ◊∆¿ ÿ ¿ ÿA¿ ÿE¿ ÿF¿ ÿÉ¿ ÿÓ¿ Ÿ%¿ ŸG¿ ŸM¿ Ÿç¿ Ÿ¨¿ ŸÍ¿ ⁄¿ ⁄R¿ ⁄u¿ ⁄{¿ ⁄À¿ ⁄Î¿ €+¿ €H¿ €c¿ €â¿ €ƒ¿ €—¿ ‹¿ ‹N¿ ‹T¿ ‹u¿ ‹í¿ ‹≤¿ ‹∂¿ ‹∑¿ ›<¿ ›z¿ ›ü¿ ›π¿ ›Ì¿ ﬁ¿ ﬁH¿ ﬁx¿ ﬁß¿ ﬁŒ¿ ﬁ÷¿ ﬁ‹¿ ﬂW¿ ﬂä¿ ﬂÆ¿ ﬂ–¿ ﬂË¿ ‡¿ ‡H¿ ‡í¿ ‡Ú¿ ·N¿ ·f¿ ·∫¿ ·˙¿ ‚¿ ‚+¿ ‚N¿ ‚{¿ ‚©¿ ‚Ù¿ „"¿ „p¿ „£¿ ‰¿ ‰j¿ ‰Æ¿ ‰ÿ¿ Â!¿ ÂÅ¿ Âå¿ ÂË¿ Ê¿ Ê¿ Ê(¿ ÊO¿ Ê\¿ ÊÖ¿ Êã¿ Êû¿ Ê¢¿ Ê£¿ Á¿ Á4¿ Á`¿ Á¨¿ Á€¿ Ë7¿ Ëp¿ Ëì¿ Ëô¿ Ë’¿ Ë¸¿ È¿ È$¿ ÈH¿ Èc¿ Èâ¿ È¡¿ Í+¿ ÍQ¿ Ír¿ Í÷¿ Î5¿ Î[¿ Î|¿ Î›¿ Ï¿ Ï(¿ Ï`¿ Ï…¿ Ì¿ Ì,¿ Ìp¿ Ìù¿ ÌÆ¿ Ì÷¿ Ì‡¿ ÌÊ¿ ÌÁ¿ Ì˚¿ Ó"¿ Ó/¿ ÓX¿ Ó^¿ Óq¿ Óu¿ Óv¿ Ó«¿ Ô¿ Ôc¿ Ô}¿ ÔÏ¿ ¿ V¿ §¿ –¿ ‘¿ ’¿ Ò$¿ Òt¿ Ò£¿ Ú¿ Ú+¿ ÚF¿ Úb¿ ÚÑ¿ ÚÆ¿ Ú“¿ Û¿ Û¿ Û]¿ Û}¿ Ûä¿ ÛÈ¿ Û¯¿ Ù¿ Ù>¿ ÙD¿ Ùc¿ Ù¨¿ Ù˜¿ ı ¿ ı$¿ ı%¿ ı—¿ ˆ¿ ˆe¿ ˆç¿ ˆ√¿ ˆÒ¿ ˜¿ ˜.¿ ˜6¿ ˜<¿ ˜`¿ ˜î¿ ˜Í¿ ¯¿ ¯N¿ ¯[¿ ¯†¿ ¯»¿ ˘:¿ ˘C¿ ˘I¿ ˘k¿ ˘ò¿ ˘¡¿ ˘Û¿ ˙¿ ˙%¿ ˙I¿ ˙O¿ ˙Ñ¿ ˙æ¿ ˚¿ ˚¿ ˚¿ ˚T¿ ˚a¿ ˚g¿ ˚ü¿ ˚·¿ ¸%¿ ¸9¿ ¸?¿ ¸c¿ ¸á¿ ¸©¿ ¸¯¿ ˝#¿ ˝J¿ ˝W¿ ˝Ä¿ ˝©¿ ˝Ø¿ ˛"¿ ˛&¿ ˛'¿ ˛J¿ ˛P¿ ˛•¿ ˛√¿ ˇ¿ ˇM¿ ˇ]¿ ˇñ¿ ˇß¿ ˇ‰¿ ˇÙ¿ ¿ C¿ I¿ M¿ N¿ t¿ ∂¿ ∫¿ ª¿ «¿ ˙¿N¿R¿S¿_¿ß¿∆¿¿,¿2¿b¿ç¿Ø¿µ¿·¿¿*¿0¿4¿5¿H¿g¿©¿Ú¿˚¿¿E¿Ö¿«¿—¿Ô¿˛¿`¿“¿⁄¿‡¿˘¿˝¿¿¿7¿O¿S¿T¿`¿r¿â¿ç¿é¿≈¿	¿¿¿I¿~¿Ø¿‡¿È¿¿9¿f¿∑¿ÿ¿	¿	¿	#¿	\¿	™¿	√¿	ÿ¿
 ¿
l¿
w¿
≠¿
¬¿
À¿
—¿¿4¿I¿o¿Ÿ¿‰¿¿/¿8¿>¿B¿C¿O¿à¿…¿%¿}¿Ω¿¡¿¬¿Œ¿¿U¿Y¿Z¿f¿£¿Ì¿Ò¿Ú¿˛¿Y¿[    
_kEllipsis PlaceholderSpanIndexSemanticsTagTextParentData%RenderInlineChildrenContainerDefaultsRenderParagraph_SelectableFragment óz