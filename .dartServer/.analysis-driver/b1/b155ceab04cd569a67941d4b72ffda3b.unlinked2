ÅAcompositeCallbackenabledcreateRenderObjectupdateRenderObject_cancelCallback_enabledpainttextvaluebuildTextSpan	selectionclearclearComposingisSelectionWithinTextBounds _isSelectionWithinComposingRangeemptycopycutpaste	selectAllonContentInsertedallowedMimeTypesiOSBlinkingCaretKeyFramestimemaxDuration
_keyFramesdxisDone_lastKeyFrameIndexx
controller	focusNodeobscuringCharacterobscureTexttextHeightBehaviortextWidthBasisreadOnly	forceLinetoolbarOptionsshowSelectionHandles
showCursorautocorrectsmartDashesTypesmartQuotesTypeenableSuggestionsstyleundoController
strutStyle_strutStyle	textAligntextDirectiontextCapitalizationlocaletextScaleFactorcursorColorautocorrectionTextRectColorbackgroundCursorColormaxLinesminLinesexpands	autofocusselectionColorselectionControlskeyboardTypetextInputAction	onChangedonEditingCompleteonSubmittedonAppPrivateCommandonSelectionChangedonSelectionHandleTappedonTapOutsideinputFormattersmouseCursorrendererIgnoresPointercursorWidthcursorHeightcursorRadiuscursorOpacityAnimatescursorOffsetpaintCursorAboveTextselectionHeightStyleselectionWidthStylekeyboardAppearancescrollPaddingenableInteractiveSelectiondebugDeterministicCursordragStartBehaviorscrollControllerscrollPhysicsscribbleEnabledselectionEnabledautofillHintsautofillClientclipBehaviorrestorationIdscrollBehaviorenableIMEPersonalizedLearningcontentInsertionConfigurationcontextMenuBuilderspellCheckConfigurationmagnifierConfiguration_userSelectionEnabledgetEditableButtonItems_inferKeyboardTypecreateStatedebugFillProperties_cursorTimer_cursorBlinkOpacityController$_backingCursorBlinkOpacityController_iosBlinkCursorSimulation_cursorVisibilityNotifier_editableKeyclipboardStatus_liveTextInputStatus_textInputConnection_hasInputConnection_selectionOverlay_scrollableKey_internalScrollController_scrollController_toolbarLayerLink_startHandleLayerLink_endHandleLayerLink_didAutoFocus_currentAutofillScopecurrentAutofillScope_effectiveAutofillClient_spellCheckConfiguration_stylespellCheckEnabledspellCheckResults_spellCheckResultsReceived_shouldCreateInputConnection_floatingCursorResetTime_floatingCursorResetController_lastOrientationwantKeepAlive_cursorColor
cutEnabledcopyEnabledpasteEnabledselectAllEnabledliveTextInputEnabled_onChangedClipboardStatus_onChangedLiveTextInputStatus%_textEditingValueforTextLayoutMetricscopySelectioncutSelection	pasteText_startLiveTextInputfindSuggestionSpanAtCursorIndex_inferSpellCheckConfigurationbuttonItemsForToolbarOptions_getGlyphHeightscontextMenuAnchorscontextMenuButtonItems	initState_tickersEnableddidChangeDependenciesdidUpdateWidgetdispose _lastKnownRemoteTextEditingValuecurrentTextEditingValueupdateEditingValue_checkNeedsAdjustAffinityperformActionperformPrivateCommandinsertContent_startCaretRect_lastTextPosition_pointOffsetOrigin_lastBoundedOffset_floatingCursorOffsetupdateFloatingCursor_onFloatingCursorResetTick_finalizeEditing_batchEditDepthbeginBatchEditendBatchEdit!_updateRemoteEditingValueIfNeeded_value	_hasFocus_isMultiline_getOffsetToRevealCaret_needsAutofill_openInputConnection_closeInputConnectionIfNeeded#_openOrCloseInputConnectionIfNeeded_restartConnectionScheduled_scheduleRestartConnection_restartConnectionIfNeededdidChangeInputControlconnectionClosed_nextFocusChangeIsInternal_flagInternalFocus_unflagInternalFocusrequestKeyboard(_updateOrDisposeSelectionOverlayIfNeeded_onEditableScroll_createSelectionOverlay_handleSelectionChanged_caretAnimationDuration_caretAnimationCurve_showCaretOnScreenScheduled_scheduleShowCaretOnScreen_lastBottomViewInsetdidChangeMetrics_performSpellCheck_formatAndSetValue_bringIntoViewBySelectionState_onCursorColorTick_showBlinkingCursorcursorCurrentlyVisiblecursorBlinkIntervalselectionOverlay_obscureShowCharTicksPending_obscureLatestCharIndex_startCursorBlink_onCursorTick_stopCursorBlink_startOrStopCursorTimerIfNeeded_didChangeTextEditingValue_handleFocusChanged_adjustedSelectionWhenFocused_compositeCallback_updateSizeAndTransform#_schedulePeriodicPostFrameCallbacks_scribbleCacheKey_updateSelectionRects_updateComposingRectIfNeeded_updateCaretRectIfNeeded_textDirectionrenderEditabletextEditingValue_devicePixelRatiouserUpdateTextEditingValuebringIntoViewshowToolbarhideToolbartoggleToolbar showSpellCheckSuggestionsToolbarshowMagnifierhideMagnifier_placeholderLocationinsertTextPlaceholderremoveTextPlaceholderperformSelector
autofillIdtextInputConfigurationautofill_currentPromptRectRangeshowAutocorrectionPromptRect_semanticsOnCopy_semanticsOnCut_semanticsOnPaste_moveBeyondTextBoundary_moveToTextBoundary_characterBoundary_nextWordBoundary
_linebreak_paragraphBoundary_documentBoundary_makeOverridable_transposeCharacters_transposeCharactersAction_replaceText_replaceTextAction_scrollToDocumentBoundary_scroll_extendSelectionByPage_updateSelection_updateSelectionAction_verticalSelectionUpdateAction_hideToolbarIfVisible_defaultOnTapOutside_actionsbuild
inlineSpanstartHandleLayerLinkendHandleLayerLinkhasFocusoffsettextSelectionDelegatedevicePixelRatiopromptRectRangepromptRectColorstructStyleplaceholdersizecomparechildeditableKeyupdateSelectionRects_nextElementIdentifier_elementIdentifierelementIdentifieronScribbleFocusisInScribbleRectbounds_text_breaksSurrogatePairgetLeadingTextBoundaryAtgetTrailingTextBoundaryAtstategetTextBoundary_applyTextBoundaryinvokeisActionEnabledignoreNonCollapsedSelectionisExpandextentAtIndexapplyTextBoundaryNEWLINE_CODE_UNIT_isAtWordwrapUpstream_isAtWordwrapDownstream_verticalMovementRun_runSelection(stopCurrentVerticalRunIfSelectionChangesstartendSelectionChangedCallbackAppPrivateCommandCallbackEditableTextContextMenuBuilder_ApplyTextBoundary_kCursorBlinkHalfPeriod"_kObscureShowLatestCharCursorTicks!kDefaultContentInsertionMimeTypes_CompositionCallback_RenderCompositionCallbackTextEditingControllerToolbarOptionsContentInsertionConfiguration	_KeyFrame_DiscreteKeyFrameSimulationEditableTextEditableTextState	_Editable_ScribbleCacheKey_ScribbleFocusable_ScribbleFocusableState_ScribblePlaceholder_CodePointBoundary_DeleteTextAction_UpdateTextSelectionAction$_UpdateTextSelectionVerticallyAction_SelectAllAction_CopySelectionAction_GlyphHeightsÉQ	TextStyleCharacterRangeStringCharactersDragStartBehaviorKeyboardInsertedContentSelectionChangedCauseSmartDashesTypeSmartQuotesTypeTextEditingValueTextInputTypeTextSelectionvoidStringMapdynamic"SelectableRegionContextMenuBuilderSelectableRegionWidgetBuildContextTextPositionboolTextBoundaryDurationmillisecondsintListSingleChildRenderObjectWidgetCompositionCallbackoverrideRenderObjectupdateRenderObjectcompositeCallbackenabledRenderProxyBoxVoidCallbackcallmarkNeedsPaintPaintingContextOffsetaddCompositionCallbackpaintTextInputFormatterdispose	TextFieldValueNotifieremptytext	composingisValidisComposingRangeValidnotifyListenerscopyWith	selection	collapsedoffset	TextRangevalueTextSpanwithComposingstylemerge
decorationTextDecoration	underlinechildren
textBefore
textInside	textAfterFlutterErrorisCollapsedstartlengthend
DeprecatedreadOnlycontentInsertionConfiguration
isNotEmptyValueChangeddouble
Simulation_iOSBlinkingCaretKeyFrameslasttimei	TextInputTextInputActiondoneAutomaticKeepAliveClientMixinwantKeepAliveFormIntentActionActionsinvokemaybeInvoke	ShortcutsoverridableDeleteCharacterIntentDeleteToNextWordBoundaryIntentextentDeleteToLineBreakIntentbaseSelectAllTextIntent%DoNothingAndStopPropagationTextIntentReplaceTextIntentUpdateSelectionIntentCopySelectionTextIntentPasteTextIntentCupertinoTextFieldRenderEditableselectPosition
selectWordSemanticsServiceannounceStatefulWidget	multiline
StrutStyle	TextAlignTextWidthBasisparentTextCapitalizationnoneBoxHeightStyletightBoxWidthStyleall
BrightnesslightCliphardEdgeTextMagnifierConfigurationdisabledTextSelectionHandleControls	selectAllpastecopycutmisspelledTextStyleautofillHintsmaxLinesFilteringTextInputFormattersingleLineFormatterIterable	FocusNodeTextHeightBehaviorUndoHistoryControllerforceStrutHeightinheritFromTextStylefromTextStyleTextDirectionltrrtlDirectionalitylocaleLocaleMediaQueryDatatextScaleFactor
MediaQueryColorCupertinoThemeDataprimaryColorTextFormFieldExpandedSizedBoxDefaultSelectionStyleTextSelectionThemeDataselectionColorshowToolbar	ThemeDataplatformTextSelectionControlsaddListener
ListenableTextInputClientperformPrivateCommandTextFieldTapRegionunfocusPointerDownEvent	TapRegionTapRegionCallbackSystemMouseCursorsMouseCursorignorePointerpreferredLineHeightRadius
Scrollable
EdgeInsetsScrollController
controllerScrollPhysicsphysicsScrollBehaviorselectionEnabledAutofillClientAutofillScopeAutofillHintsnameemailemailAddressRestorationBucketRestorationScopeRestorableTextEditingControllerRestorationManager	ScrollbarScrollConfigurationonContentInsertedallowedMimeTypesAdaptiveTextSelectionToolbargetAdaptiveButtonsContextMenuButtonItemBrowserContextMenuSpellCheckServiceDefaultSpellCheckServiceSpellCheckConfigurationcontextMenuButtonItemsgetSelectableButtonItemsbuttonItemsClipboardStatusonPasteclipboardStatusunknownaddAllonCut	onPressedtypeContextMenuButtonTypeonCopyonSelectAllonLiveTextInputaddliveTextInputisEmptyfirstkIsWebdefaultTargetPlatformTargetPlatformiOSmacOSaddressCityaddressCityAndStateaddressStatecountryNamecreditCardNumbernumber
familyNamefullStreetAddress	givenNamejobTitlelocation
middleName
namePrefix
nameSuffixnewPasswordnewUsernamenicknameoneTimeCodeorganizationNamepassword
postalCodestreetAddressLine1streetAddressLine2sublocalitytelephoneNumberurlusernameiOSKeyboardTypeandroidfuchsialinuxwindowsstreetAddressbirthdaydatetimebirthdayDaybirthdayMonthbirthdayYearcountryCodecreditCardExpirationDatecreditCardExpirationDaycreditCardExpirationMonthcreditCardExpirationYearcreditCardFamilyNamecreditCardGivenNamecreditCardMiddleNamecreditCardNamecreditCardSecurityCodecreditCardTypegenderimpplanguagemiddleInitialphotopostalAddresspostalAddressExtendedpostalAddressExtendedPostalCodestreetAddressLevel1streetAddressLevel2streetAddressLevel3streetAddressLevel4streetAddressLine3phonetelephoneNumberAreaCodetelephoneNumberCountryCodetelephoneNumberDevicetelephoneNumberExtensiontelephoneNumberLocaltelephoneNumberLocalPrefixtelephoneNumberLocalSuffixtelephoneNumberNationaltransactionAmountnumberWithOptionsdecimaltransactionCurrencyDiagnosticPropertiesBuilderdebugFillPropertiesDiagnosticsPropertydefaultValueEnumPropertyDoublePropertyIntPropertyStateWidgetsBindingObserverTickerProviderStateMixinTextSelectionDelegateTimerAnimationControllervsynciOSBlinkingCaret	GlobalKeyClipboardStatusNotifierLiveTextLiveTextInputStatusNotifierTextInputConnectionattachedTextSelectionOverlaywidgetscrollController	LayerLinkAutofillGroupStateautofillClientvisibleForTestingspellCheckEnabledSpellCheckResultssuggestionSpansOrientation	focusNodehasFocuscursorColorwithOpacityselectionControlstoolbarOptionsobscureText	pasteableenableInteractiveSelectionLiveTextInputStatussetStatecurrentContext
StateError	ClipboardsetDataClipboardDatatoolbarupdateSchedulerBindinginstanceaddPostFrameCallbackmountedFuturegetData
kTextPlainmax
baseOffsetextentOffsetreplacedstartLiveTextInputSuggestionSpanSpellCheckSuggestionsToolbarrangefloorspellCheckServiceWidgetsBindingplatformDispatchernativeSpellCheckServiceDefinedreportErrorFlutterErrorDetails	exceptionlibrarystack
StackTracecurrent
InlineSpantoPlainText
charactersRectgetRectForComposingRangeheightTextSelectionToolbarAnchorslastSecondaryTapDownPositionprimaryAnchorTextSelectionPointgetEndpointsForSelectionfromSelection	renderBoxstartGlyphHeightendGlyphHeightselectionEndpointsgetEditableButtonItemsSelectableRegionState	initState
showCursorspellCheckConfigurationdidChangeDependencies
boldTextOfcontext
fontWeight
FontWeightboldAutofillGroupmaybeOf
unregisterregister	autofocushasSize
FocusScopeof
TickerModeorientationOfdidUpdateWidgetremoveListenerhandlesVisibleshowSelectionHandles
autofillIdupdateKeepAliveupdateConfigtextInputConfigurationsetStyle
fontFamilyfontSizetextDirection	textAligncanPastecancelremoveObserverFocusManagersetEditingStateaffinityscribbleInProgressscribble
forcePresskeyboardbrieflyShowPasswordresetCharTickswithAnimationnewlineshouldUnfocusgonextprevioussearchsendcontinueActionemergencyCalljoinrouteunspecifiedonAppPrivateCommandcontainsmimeTypeRawFloatingCursorPointstateFloatingCursorDragStateStartisAnimatingstopgetLocalRectForCaretcurrentTextPositioncentersetFloatingCursorUpdatecenteredPoint$calculateBoundedFloatingCursorOffsetrawCursorOffsetgetPositionForPointlocalToGlobalEnd	animateTodurationcurveCurves
decelerate
centerLeftisCompletedfromPosition
lerpDoubledxdyresetLerpValuepragmaonEditingCompleteErrorDescriptionclearComposing	nextFocuspreviousFocusonSubmittedRevealedOffsetpositionallowImplicitScrollingrectSizesizewidthclampDoublerightleft
fromCenterbottomtopminScrollExtentmaxScrollExtentshiftautofillConfigurationattachshowrequestAutofillcloseconsumeKeyboardTokenscheduleMicrotaskcurrentAutofillScopeTextInputControlhideconnectionClosedReceivedrequestFocusupdateForScrollcontextMenuBuilderdebugRequiredFortoolbarLayerLinkstartHandleLayerLinkendHandleLayerLinkrenderObjectselectionDelegatedragStartBehavioronSelectionHandleTappedmagnifierConfigurationisSelectionWithinTextBounds	doubleTapdrag	longPresstapshowHandlesonSelectionChangedCurvefastOutSlowInfindRenderObject
hasClientsscrollPaddinggetHandleSizekMinInteractiveDimensiongetHandleAnchorTextSelectionHandleTypeTextBoxgetBoxesForSelectiontoRectshowOnScreeninflateRectjumpToFlutterViewView
viewInsetsLocalizationsmaybeLocaleOffetchSpellCheckSuggestionsinputFormattersfold	formatterformatEditUpdatenewValueuserInteraction	onChangedisActivedebugDeterministicCursorcursorOpacityAnimatesanimateWithwhenCompleteperiodiczero(stopCurrentVerticalRunIfSelectionChangesaddObserverLayerElementdebugIsActiveMatrix4getTransformTosetEditableSizeAndTransformscribbleEnabledScrollDirectionuserScrollDirectionidle
inlineSpantextScaleFactorOftextHeightBehaviorDefaultTextHeightBehaviorstructStyle
strutStyleplaceholderRenderComparisonforcelayoutcompareindexSelectionRectincludeSemanticsLabelsmoveNextpaintBoundsbounds	directionsetSelectionRectssetComposingRectsetCaretRectdevicePixelRatioOfhideHandlestoolbarIsVisiblehideToolbar#spellCheckSuggestionsToolbarBuilder showSpellCheckSuggestionsToolbarmagnifierIsVisibleupdateMagnifiershowMagnifierhideMagnifierintentForMacOSSelectorprimaryFocushashCodeTextInputConfigurationtoListgrowableAutofillConfigurationuniqueIdentifiercurrentEditingValue	inputTypekeyboardTypeautocorrectsmartDashesTypesmartQuotesTypeenableSuggestions_userSelectionEnabledinputActiontextInputActiontextCapitalizationkeyboardAppearanceenableIMEPersonalizedLearningcanCopy
handleCopycanCut	handleCuthandlePastegetTrailingTextBoundaryAtgetLeadingTextBoundaryAtTextAffinityupstream
downstreamCharacterBoundarywordBoundariesmoveByWordBoundaryLineBoundaryParagraphBoundaryDocumentBoundarydefaultActionTransposeCharactersIntentatmoveBack
expandNextcurrentCharactersstringBeforestringAfterstringBeforeLengthCallbackActiononInvokecurrentTextEditingValuereplacementRangereplacementTextcauseScrollToDocumentBoundaryIntentforwardScrollIntentScrollIncrementTypepageScrollPositionScrollableStatecurrentStateScrollActiongetDirectionalIncrementpixelsExtendSelectionByPageIntentAxisDirectiondownupnewSelectionDirectionalCaretMovementIntentObjectDismissIntentonTapOutsidekindPointerDeviceKindtouchmousestylusinvertedStylustrackpadUnimplementedErrorTypeDoNothingActionconsumesKeyDirectionalFocusIntentDirectionalFocusActionforTextField ExtendSelectionByCharacterIntentignoreNonCollapsedSelection'ExtendSelectionToNextWordBoundaryIntent,ExtendSelectionToNextParagraphBoundaryIntent ExtendSelectionToLineBreakIntent-ExtendSelectionVerticallyToAdjacentLineIntent-ExtendSelectionVerticallyToAdjacentPageIntent;ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent'ExtendSelectionToDocumentBoundaryIntent6ExtendSelectionToNextWordBoundaryOrCaretLocationIntent ExpandSelectionToLineBreakIntentisExpand'ExpandSelectionToDocumentBoundaryIntentextentAtIndexintentdebugCheckHasMediaQuerybuildchild
debugLabelkReleaseModeMouseRegioncursormouseCursoractionsUndoHistoryonTriggeredshouldChangeUndoStackoldValueundoControllerFocusincludeSemanticskeyexcludeFromSemanticsaxisDirectionscrollPhysicsrestorationIdscrollBehavior
scrollbars
overscrollviewportBuilderViewportOffsetCompositedTransformTargetlink	SemanticseditableKeyupdateSelectionRectsbackgroundCursorColor	forceLineminLinesexpandsspellCheckToolbarIsVisiblemisspelledSelectionColortextWidthBasisobscuringCharacterrendererIgnoresPointercursorWidthcursorHeightcursorRadiuscursorOffsetselectionHeightStyleselectionWidthStylepaintCursorAboveTexttextSelectionDelegatedevicePixelRatiopromptRectRangepromptRectColorautocorrectionTextRectColorclipBehaviorSetreplaceRange	substringshrink&buildTextSpanWithSpellCheckSuggestionsbuildTextSpanMultiChildRenderObjectWidget
WidgetSpanextractFromInlineSpansetPromptRectRange	immutable	identical	compareToScribbleClienttoStringregisterScribbleElementunregisterScribbleElementselectPositionAtfromoverlaps	intersectHitTestResulthitTestInViewviewIdpathanyHitTestEntryentrytarget	RenderBoxMatrixUtilstransformRectfromLTWHTextPainterParagraphBuilderPlaceholderDimensionsdebugAssertIsValid	pushStylegetTextStyleaddPlaceholder	alignmentscalepoprunesisHighSurrogate
codeUnitAtisLowSurrogateDirectionalTextEditingIntentContextAction_value_characterBoundaryrenderEditablegetLineAtOffsettextEditingValuecollapseSelectioncontinuesAtWrapexpandToextendTocollapseAtReversalVerticalCaretMovementRun%_textEditingValueforTextLayoutMetricsstartVerticalCaretMovementmoveByOffsetmovePreviouscutSelectioncopySelectionSingleChildRenderObjectWidgetRenderProxyBoxValueNotifier
SimulationStatefulWidgetStateAutomaticKeepAliveClientMixinWidgetsBindingObserverTickerProviderStateMixinTextSelectionDelegateTextInputClientAutofillClientMultiChildRenderObjectWidgetScribbleClient
WidgetSpanTextBoundaryContextActionÉ$„é¨rEÅ@xó® ÜBÜ«KeyboardInsertedContentSelectionChangedCauseSmartDashesTypeSmartQuotesTypeTextEditingValueTextInputTypeTextSelection Üpackage:flutter/services.dart,  Ä¶  
dart:async  Äª  ÄÕmathÄ–	dart:mathÄÌÄ˚ 	TextStyle Ä◊  ÄÁuiÄÍdart:uiÅ*ÅOCharacterRangeStringCharacters Äˇ  "package:characters/characters.dart  ÅR  package:flutter/foundation.dartÅ¢Å∏DragStartBehavior Å|  package:flutter/gestures.dart  Åª  package:flutter/rendering.dart  Å‰  package:flutter/scheduler.dart  Ç  package:flutter/services.dart  Ç6  actions.dart  ÇM  autofill.dart  Çe  automatic_keep_alive.dart  Çâ  
basic.dart  Çû  binding.dart  Çµ  constants.dart  ÇŒ  context_menu_button_item.dart  Çˆ  
debug.dart  É  default_selection_style.dart  É2  #default_text_editing_shortcuts.dart  É`  focus_manager.dart  É}  focus_scope.dart  Éò  focus_traversal.dart  É∑  framework.dart  É–  localizations.dart  ÉÌ  magnifier.dart  Ñ  media_query.dart  Ñ!  scroll_configuration.dart  ÑE  scroll_controller.dart  Ñf  scroll_physics.dart  ÑÑ  scroll_position.dart  Ñ£  scrollable.dart  ÑΩ  scrollable_helpers.dart  Ñﬂ  shortcuts.dart  Ñ¯  spell_check.dart  Ö  tap_region.dart  Ö-  	text.dart  ÖA  text_editing_intents.dart  Öe  text_selection.dart  ÖÉ  #text_selection_toolbar_anchors.dart  Ö±  ticker_provider.dart  Ö–  undo_history.dart  ÖÏ  	view.dart  Ü   widget_span.dart    	dart:core¿ãﬂ ¿nïQ <ÄÜÄ§Ä•Ä∫Ä÷Ä˝Ä˛ÅQÅ{Å∫Å„ÇÇ4Ç5ÇLÇdÇàÇùÇ¥ÇÕÇıÉ
É1É_É|ÉóÉ∂ÉœÉÏÑÑ ÑDÑeÑÉÑ¢ÑºÑﬁÑ˜ÖÖ,Ö@ÖdÖÇÖ∞ÖœÖÎÖˇÜÜÜ…Ü Ü‚á ááánáìá¸á˝àJàõàúàËâââââeâÄâ∫â“â˘â¸â˝äJäÖä€ä‹ã#ãrãùã„ã‰å/åVåàåâå÷å⁄ç#çdçsçÇçëç°ç∞ç¿çœç“ç”éé}é¨é¬é√éœè	èLèPè\è∑èÏê%êfêäêéêêêëêÀëëë@ëaëbëÇëõë∫ë”ëËíí%íOígímíqírí~í∏íÀììì@ìDìFìGìtìxì∑îîUî£î∞î¥ï ïAïEïñï„ñ'ñ+ñyñ¬óó`ó©óıò@òòƒò»ôô7ô;ôâô”ôÁö3ö~ö¢ö¶õõõõ$õ(õyõ†õÍúú ùùGùMùöù®ù“û%û&ûÄûÜû ûÍü%ü3üÖü’†&†O†X†Ü†á†µ†÷°'°u°¬¢ ¢¢C¢è¢‹££ £<£Q£ç£Ø£∂£∫£ª£«££¸§A§í§‰•••.•2•3•g•m•æ•˛¶j¶¡ßßbßÆ®	®
®/®`®f®g®–©©'©;©W©ó©©© ™™™L™U™\™`™a™Ü™å™‹™˙´,´}´À¨¨V¨\¨ô¨‡≠-≠T≠Z≠®≠’ÆÆ9Æ|ÆÇÆ•Æ¯ØØ5ØÉØáØàØ®ØÆØ˘∞+∞1∞Ç∞–±!±_±p±√±«±»±˙≤ ≤N≤ô≤ß≤≠≤˛≥L≥ù≥€≥ı¥-¥1¥2¥v¥¥¥ˇµµµGµäµÁµÎµÌµÓ∂∂ ∂n∂ª∂œ∂”∑'∑z∑Ü∑ì∑∫∑Ò∑Û∏
∏C∏I∏å∏õ∏ƒ∏˝πππ1πGπ_π{πÅπÇπ¡π˘π˙∫(∫.∫Y∫l∫m∫ö∫†∫Ú∫¯ª#ª5ª6ªeªkªøª≈ªººº9º?ºjºÇºÑºÖº”º◊Ω&ΩsΩñΩöΩ®Ω¨ΩﬂææQæWæ¶æπæøæ˚øDøføãø øˆø˜¿ @J¿ @p¿ @v¿ @»¿ @Œ¿ @‰¿ @Í¿ A7¿ AJ¿ AP¿ A∏¿ A ¿ A–¿ A‡¿ AÊ¿ B0¿ Bq¿ Br¿ B√¿ C¿ C9¿ C?¿ Cè¿ C∫¿ C¿¿ D¿ D[¿ Dq¿ Dw¿ D°¿ Dß¿ DΩ¿ E¿ E¿ Ey¿ Eã¿ Eë¿ E°¿ Eß¿ EÒ¿ F¿ F-¿ F/¿ F0¿ Fr¿ FÑ¿ FÆ¿ FŸ¿ G!¿ GE¿ Gi¿ Gç¿ G±¿ G’¿ G˘¿ H¿ HA¿ He¿ Hâ¿ HÆ¿ H≥¿ H¥¿ Hı¿ I
¿ I ¿ I"¿ I#¿ IZ¿ IΩ¿ J ¿ J%¿ JX¿ Jj¿ J¶¿ J„¿ J˝¿ K	¿ K¿ K(¿ Kf¿ Kg¿ KÉ¿ KÑ¿ K®¿ K©¿ Kµ¿ K‘¿ K’¿ K·¿ L¿ L¿ La¿ L¿ LÄ¿ Lå¿ L¶¿ L–¿ L—¿ M ¿ Mj¿ Mé¿ M£¿ Mª¿ MÒ¿ N;¿ N]¿ Nt¿ Nô¿ N¶¿ NŒ¿ NÁ¿ NÌ¿ NÓ¿ O7¿ OÖ¿ OÆ¿ O‚¿ P¿ P:¿ PI¿ PQ¿ Pi¿ Po¿ Pp¿ Pñ¿ P«¿ PÀ¿ PÕ¿ PŒ¿ PÏ¿ P¿ Q@¿ Qà¿ Qœ¿ Q‚¿ QÊ¿ R¿ R¿ RU¿ R¶¿ R¿ RÙ¿ S9¿ S=¿ Sç¿ Sÿ¿ S‹¿ T¿ T#¿ T8¿ T<¿ Tá¿ T÷¿ Tı¿ T˘¿ UG¿ Ué¿ UŸ¿ V'¿ Vt¿ V¬¿ W¿ W\¿ WÇ¿ WÜ¿ WΩ¿ WŒ¿ W“¿ X#¿ X?¿ XC¿ Xè¿ X‹¿ Y¿ Y¿ YL¿ YP¿ Yù¿ Yﬂ¿ Y„¿ Z,¿ Z{¿ Zª¿ ZŒ¿ Z“¿ [ ¿ [p¿ [î¿ [ò¿ [“¿ [÷¿ \"¿ \o¿ \≥¿ ]¿ ]J¿ ]l¿ ]p¿ ]¿¿ ^¿ ^V¿ ^Ç¿ ^Ü¿ ^√¿ ^«¿ _¥¿ `_¿ a
¿ aÂ¿ b€¿ bﬂ¿ c6¿ c:¿ d$¿ e¿ f¿ g¿ hS¿ iR¿ j}¿ k®¿ lt¿ lx¿ l•¿ l©¿ mì¿ n}¿ o;¿ oÍ¿ q1¿ q⁄¿ r°¿ sh¿ t¿ tR¿ tV¿ tl¿ tp¿ t◊¿ u>¿ uŸ¿ v§¿ wR¿ w∏¿ xo¿ xs¿ xí¿ xñ¿ x„¿ y&¿ ys¿ y√¿ z¿ zE¿ z}¿ zÅ¿ z¿¿ zÎ¿ zÔ¿ {>¿ {â¿ {ç¿ {‘¿ |!¿ |T¿ |~¿ |ë¿ |ï¿ |–¿ }¿ }¿ }B¿ }F¿ }ê¿ }—¿ }Ò¿ }ı¿ ~;¿ ~à¿ ~”¿ ¿ h¿ Ø¿ ≥¿ ø¿ ·¿ Ä¿ ÄN¿ ÄV¿ Ä\¿ Äd¿ Äh¿ Ä{¿ Ä¿ Äç¿ Äë¿ Ä‡¿ Å¿ ÅJ¿ Åt¿ Åz¿ Å»¿ Ç¿ ÇX¿ Ç^¿ Ç≠¿ Ç˛¿ É;¿ ÉÜ¿ Éå¿ É€¿ Ñ¿ Ñ¿ Ñe¿ ÑÆ¿ Ñ˛¿ ÖI¿ Öô¿ Ö‡¿ Ü2¿ ÜC¿ ÜR¿ Üp¿ Üç¿ Ü®¿ ÜÀ¿ ÜÈ¿ á¿ á,¿ áR¿ áu¿ áé¿ á™¿ á…¿ áÚ¿ à¿ à0¿ àA¿ à[¿ àr¿ àÖ¿ àü¿ à∫¿ à◊¿ â¿ â$¿ â:¿ âa¿ âz¿ âñ¿ â∑¿ â—¿ ä¿ ä¿ ä8¿ äN¿ äl¿ äâ¿ ä´¿ ä¬¿ äÒ¿ ã¿ ã0¿ ãL¿ ãc¿ ãz¿ ã¢¿ ãπ¿ ã‡¿ å¿ åP¿ åÖ¿ åµ¿ åÎ¿ ç¿ ç,¿ çD¿ çj¿ ç{¿ ç¶¿ ç·¿ çÁ¿ é¿ é6¿ éO¿ év¿ éé¿ éß¿ é»¿ é˜¿ è¿ è<¿ è^¿ è•¿ èæ¿ èÌ¿ ê]¿ êÕ¿ ê˛¿ ë¿ ëZ¿ ëé¿ ëò¿ ëß¿ ë‰¿ í)¿ í3¿ íâ¿ íË¿ ìv¿ ìé¿ ì©¿ ì˛¿ î¿ îE¿ îs¿ îû¿ î∆¿ îÍ¿ ï¿ ï¿ ïL¿ ïw¿ ïü¿ ï¬¿ ïŸ¿ ñ¿ ñ2¿ ñU¿ ñw¿ ñü¿ ñ√¿ ñ›¿ ñÏ¿ ó¿ ój¿ ó©¿ ò¿ ò¿ ò?¿ ò´¿ ò“¿ òı¿ ô5¿ ôÜ¿ ôï¿ ô≥¿ ô‡¿ ô·¿ ö¿ ö1¿ ö2¿ öi¿ öÜ¿ öá¿ ö…¿ õ¿ õ¿ õ8¿ õ>¿ õq¿ õÜ¿ õ©¿ õ™¿ õÂ¿ ú(¿ ú.¿ úw¿ ú√¿ ù¿ ù&¿ ù,¿ ùU¿ ùj¿ ùÑ¿ ùÖ¿ ùØ¿ ùﬂ¿ ù‡¿ û¿ ûB¿ ûC¿ û{¿ û¢¿ û®¿ û‰¿ ü/¿ ü5¿ ü`¿ üu¿ üå¿ üç¿ ü€¿ ü·¿ †/¿ †`¿ †f¿ †ê¿ †ñ¿ †¶¿ †¨¿ †ı¿ °¿ °¿ °6¿ °<¿ °å¿ °€¿ ¢(¿ ¢P¿ ¢w¿ ¢x¿ ¢°¿ ¢ß¿ ¢Û¿ £C¿ £j¿ £p¿ £Ä¿ £Ü¿ £ ¿ £Ì¿ £Ó¿ §(¿ §F¿ §L¿ §û¿ §≥¿ §π¿ §…¿ §œ¿ •(¿ •A¿ •B¿ •}¿ ••¿ •´¿ •”¿ •Ë¿ ¶¿ ¶¿ ¶J¿ ¶s¿ ¶t¿ ¶ª¿ ¶‰¿ ¶Â¿ ß.¿ ßN¿ ßO¿ ßÇ¿ ßõ¿ ßú¿ ßÿ¿ ßﬁ¿ ®&¿ ®U¿ ®V¿ ®ê¿ ®ƒ¿ ® ¿ ©¿ ©T¿ ©ò¿ ©„¿ ™.¿ ™4¿ ™Ä¿ ™…¿ ´¿ ´$¿ ´*¿ ´u¿ ´∏¿ ´æ¿ ¨'¿ ¨{¿ ¨ê¿ ¨ñ¿ ¨Î¿ ≠;¿ ≠}¿ ≠õ¿ ≠∫¿ Æ ¿ Æ¿ Æ;¿ Æ?¿ Æ`¿ Æa¿ Æö¿ ÆÕ¿ Æ”¿ Ø¿ Ø ¿ Ø=¿ Ø>¿ Ø{¿ Ø°¿ Øß¿ ØÏ¿ ∞¿ ∞¿ ∞g¿ ∞¥¿ ±¿ ±K¿ ±õ¿ ±´¿ ±±¿ ±È¿ ±˛¿ ≤$¿ ≤%¿ ≤g¿ ≤Æ¿ ≤»¿ ≤Œ¿ ≥¿ ≥M¿ ≥S¿ ≥í¿ ≥ò¿ ≥®¿ ≥Æ¿ ¥ ¿ ¥¿ ¥¿ ¥J¿ ¥K¿ ¥ã¿ ¥√¿ ¥…¿ µ¿ µb¿ µh¿ µ†¿ µ∏¿ µπ¿ µ¯¿ ∂0¿ ∂6¿ ∂á¿ ∂¶¿ ∂¨¿ ∂˝¿ ∑>¿ ∑S¿ ∑t¿ ∑u¿ ∑¶¿ ∑¨¿ ∑¬¿ ∑›¿ ∑ﬁ¿ ∏¿ ∏"¿ ∏c¿ ∏≥¿ π¿ π¿ π ¿ π]¿ πc¿ π®¿ π‘¿ π’¿ ∫&¿ ∫Q¿ ∫W¿ ∫õ¿ ∫≤¿ ∫◊¿ ∫ÿ¿ ª¿ ª^¿ ªd¿ ª¥¿ ªÁ¿ ªÌ¿ º7¿ ºS¿ ºY¿ ºß¿ ºÓ¿ Ω?¿ Ωg¿ Ωm¿ Ωæ¿ æ¿ æ`¿ æú¿ æ¢¿ æÒ¿ ø>¿ øn¿ øt¿ ø¿¿ øŒ¿ øÊ¿ ø¿ øˆ¿ ¿E¿ ¿ï¿ ¿÷¿ ¿‰¿ ¡
¿ ¡¿ ¡¿ ¡e¿ ¡¶¿ ¡¥¿ ¡◊¿ ¡·¿ ¡Á¿ ¬6¿ ¬c¿ ¬q¿ ¬°¿ ¬´¿ ¬±¿ ¬¡¿ ¬«¿ √¿ √!¿ √r¿ √á¿ √û¿ √ü¿ √◊¿ ƒ'¿ ƒ-¿ ƒ}¿ ƒ∞¿ ƒ∂¿ ≈¿ ≈Z¿ ≈`¿ ≈∂¿ ≈º¿ ∆¿ ∆X¿ ∆j¿ ∆p¿ ∆¡¿ «¿ «0¿ «6¿ «ê¿ «·¿ «˚¿ »¿ »L¿ »p¿ »~¿ »õ¿ »•¿ »´¿ »˘¿ …J¿ …c¿ …q¿ …†¿ …™¿ …∞¿ …»¿ …Œ¿ …ﬁ¿ …‰¿  1¿  |¿  ò¿  ≠¿  ˛¿ À¿ À*¿ À+¿ Àb¿ Àß¿ À≠¿ ÀÙ¿ Ã0¿ Ã6¿ ÃÇ¿ Ã¶¿ Ã¨¿ Ã≈¿ ÃÀ¿ Õ¿ Õc¿ Õi¿ Õú¿ Õ™¿ Õ¿¿ Õ˘¿ Œ¿ Œ¿ Œ ¿ Œ6¿ Œ7¿ Œp¿ ŒΩ¿ ŒÃ¿ Œ“¿ œ"¿ œr¿ œx¿ œ°¿ œ∂¿ –	¿ –!¿ –9¿ –:¿ –n¿ –t¿ –¬¿ –·¿ –Á¿ —(¿ —x¿ —√¿ —‚¿ —„¿ “$¿ “q¿ “w¿ “ƒ¿ ”¿ ”^¿ ”d¿ ”t¿ ”z¿ ”À¿ ‘¿ ‘*¿ ‘z¿ ‘…¿ ‘ˇ¿ ’¿ ’F¿ ’G¿ ’É¿ ’ª¿ ’¡¿ ÷¿ ÷,¿ ÷A¿ ÷e¿ ÷f¿ ÷•¿ ÷œ¿ ÷–¿ ◊	¿ ◊J¿ ◊Ä¿ ◊Ü¿ ◊À¿ ÿ¿ ÿV¿ ÿy¿ ÿ¿ ÿƒ¿ Ÿ	¿ Ÿ4¿ Ÿ:¿ Ÿä¿ Ÿ⁄¿ ⁄)¿ ⁄/¿ ⁄E¿ ⁄ì¿ ⁄⁄¿ ⁄‡¿ €?¿ €Q¿ €f¿ €l¿ €¢¿ €€¿ €˛¿ ‹M¿ ‹ô¿ ‹‰¿ ›¿ ›¿ ›[¿ ›†¿ ›Ë¿ ﬁ8¿ ﬁá¿ ﬁÆ¿ ﬁ√¿ ﬁ…¿ ﬁŸ¿ ﬁﬂ¿ ﬂ¿ ﬂe¿ ﬂ®¿ ﬂË¿ ‡6¿ ‡y¿ ‡¢¿ ‡£¿ ‡‰¿ ·7¿ ·V¿ ·\¿ ·©¿ ·—¿ ·◊¿ ‚&¿ ‚v¿ ‚í¿ ‚ò¿ ‚Ë¿ „7¿ „Ç¿ „∂¿ „º¿ ‰¿ ‰#¿ ‰L¿ ‰M¿ ‰à¿ ‰ÿ¿ ‰Â¿ ‰Î¿ Â5¿ ÂÉ¿ Â…¿ Âœ¿ Â‡¿ Ê/¿ Ê5¿ ÊC¿ Êâ¿ Êì¿ Êô¿ ÊÁ¿ Á1¿ ÁÇ¿ Áß¿ Áº¿ ÁÁ¿ ÁË¿ Ë+¿ Ër¿ Ëx¿ Ë√¿ Ë”¿ ËŸ¿ È(¿ È_¿ Èe¿ Èu¿ Í)¿ Íy¿ Í©¿ Î7¿ Îá¿ Îµ¿ Î ¿ Ï¿ Ï¿ ÏE¿ Ïî¿ Ï•¿ Ï∫¿ Ï¿ ÏÒ¿ Ì9¿ Ìh¿ Ìi¿ Ì•¿ ÌÙ¿ Ó¿ Ó ¿ Óq¿ Ó¿¿ Ô¿ Ô[¿ Ô´¿ Ô›¿ Ô„¿ 4¿ ¿ À¿ Ò¿ Òi¿ ÒÖ¿ Òã¿ Ò‹¿ Ú'¿ Ús¿ Ú≥¿ Ú»¿ ÚŒ¿ Ú‰¿ Û0¿ ÛÄ¿ ÛΩ¿ Û√¿ Ù¿ Ù>¿ ÙD¿ Ùù¿ ÙØ¿ Ùµ¿ Ù≈¿ ÙÀ¿ ı¿ ı1¿ ı2¿ ıq¿ ı´¿ ı±¿ ıˇ¿ ˆP¿ ˆõ¿ ˆÏ¿ ˜¿ ˜#¿ ˜3¿ ˜9¿ ˜á¿ ˜ ¿ ˜ﬂ¿ ¯¿ ¯¿ ¯_¿ ¯m¿ ¯s¿ ¯ª¿ ¯¡¿ ˘¿ ˘b¿ ˘±¿ ˘Õ¿ ˘Ô¿ ˘¿ ˙;¿ ˙ä¿ ˙ê¿ ˙π¿ ˙ﬁ¿ ˙ﬂ¿ ˚¿ ˚>¿ ˚D¿ ˚[¿ ˚a¿ ˚©¿ ˚ˆ¿ ¸B¿ ¸í¿ ¸≤¿ ¸«¿ ¸„¿ ¸‰¿ ˝ ¿ ˝C¿ ˝I¿ ˝ú¿ ˝±¿ ˝œ¿ ˝–¿ ˛¿ ˛C¿ ˛I¿ ˛u¿ ˛ä¿ ˛®¿ ˛©¿ ˛Ó¿ ˇ;¿ ˇ[¿ ˇa¿ ˇ±¿ ˇ’¿ ˇÍ¿ ¿ ¿ K¿ i¿ j¿ Æ¿ —¿ “¿¿"¿a¿ë¿í¿‹¿‚¿ ¿N¿O¿u¿{¿Æ¿¥¿⁄¿¿¿?¿¢¿®¿¿@¿Æ¿$¿*¿R¿g¿â¿ä¿‘¿¿.¿4¿y¿∑¿ˆ¿¸¿?¿Ö¿Æ¿¥¿Ã¿·¿
¿¿X¿ß¿ø¿≈¿	¿	9¿	?¿	Ä¿	∞¿	±¿	Ì¿
¿
¿
[¿
§¿
™¿
Â¿
Î¿¿#¿O¿P¿ç¿”¿Ÿ¿#¿)¿I¿^¿d¿Ø¿˙¿¿7¿8¿w¿ª¿¡¿‡¿Ê¿˛¿¿1¿2¿r¿û¿§¿‹¿¿¿U¿V¿ì¿Â¿˜¿˝¿L¿õ¿ﬁ¿,¿]¿c¿±¿⁄¿‡¿¿¿*¿0¿}¿±¿∑¿’¿W¿©¿˛¿T¿§¿·¿Á¿
¿¿`¿±¿˝¿¿$¿k¿q¿ø¿	¿¿\¿¨¿¯¿F¿î¿‰¿Í¿8¿Ö¿”¿#¿t¿Ö¿ã¿÷¿%¿l¿r¿æ¿Ÿ¿ﬂ¿-¿{¿…¿¿]¿À¿—¿Ê¿*¿S¿T¿£¿©¿¿4¿\¿]¿ì¿ô¿º¿◊¿ÿ¿ ¿ 0¿ 6¿ Å¿ ∆¿ Ã¿!¿!c¿!i¿!±¿!ˆ¿"0¿"6¿"F¿"L¿"ô¿"´¿" ¿"À¿#¿#N¿#T¿#°¿#Â¿#˙¿$ ¿$E¿$î¿$ÿ¿$¿$ˆ¿%@¿%è¿%ù¿%≈¿%∆¿&¿&G¿&H¿&ï¿&‰¿&Ú¿&¯¿'G¿'ö¿' ¿'–¿("¿(k¿(©¿(Ø¿(≈¿(À¿)¿)+¿)1¿)ô¿)´¿)±¿)ˆ¿*<¿*ä¿*±¿*∑¿+¿+T¿+r¿+á¿+Õ¿+Œ¿,¿,T¿,Z¿,´¿,ı¿,˚¿-I¿-\¿-b¿-x¿-»¿.¿.¿.y¿.ã¿.ë¿.ß¿.˜¿/¿/¿/~¿/ê¿/ñ¿/¶¿/¯¿0D¿0W¿0•¿0›¿1¿1P¿1ó¿1¨¿1≤¿1Ë¿2$¿2%¿2l¿2≤¿2∏¿3¿3C¿3I¿3ì¿3„¿4(¿4.¿4Å¿4ñ¿4–¿4—¿5¿5!¿5P¿5V¿5¢¿5›¿5ﬁ¿6=¿6>¿6ä¿6…¿6œ¿7¿77¿7=¿7M¿7S¿7ó¿7’¿8#¿8e¿8∂¿8Î¿9¿9r¿9ª¿9˘¿:.¿:W¿:¿:©¿:◊¿;	¿;¿;d¿;e¿;ì¿;‹¿<+¿<x¿<à¿<ø¿<⁄¿<˚¿=¿=F¿=S¿=o¿=ê¿=Ø¿=›¿=Í¿>¿>(¿>H¿>w¿>Ñ¿>•¿>∆¿>Í¿?¿?*¿?4¿?:¿?;¿?f¿?â¿?ª¿?ﬂ¿@¿@¿@"¿@#¿@@¿@D¿@E¿@é¿@∫¿@Ë¿A¿A¿AE¿Aê¿Añ¿Aó¿AÕ¿AŒ¿B¿Br¿Bƒ¿C¿C¿Cp¿C¡¿C¯¿D¿D2¿DS¿Dv¿DÕ¿E	¿Ef¿E£¿Eﬂ¿F5¿Fs¿FÆ¿F¿G*¿Gá¿G‰¿HA¿Hv¿H”¿I0¿Il¿I®¿J¿JC¿J†¿JŸ¿K¿KW¿K¥¿L¿LQ¿LÆ¿LÁ¿LÙ¿Lı¿MC¿Mi¿Mä¿Mñ¿Mª¿M‡¿N¿N(¿N9¿NA¿NG¿NH¿Na¿Ná¿Nç¿Né¿N·¿O ¿Og¿Oß¿Oﬁ¿P¿PT¿Pè¿P«¿P˝¿QD¿Qä¿Q“¿R¿RX¿Rñ¿R’¿S¿SK¿Sé¿S«¿Sˇ¿T4¿Ty¿T™¿Tﬁ¿U¿U?¿Ur¿UÆ¿UÊ¿V¿VJ¿V¿V¥¿VÍ¿W ¿WS¿Wâ¿Wƒ¿W˜¿X'¿Xh¿X±¿X˝¿Y4¿Y{¿Y¬¿Z	¿ZP¿Zñ¿Z‹¿["¿[a¿[ú¿[ﬂ¿\%¿\f¿\™¿\Í¿]0¿]v¿]π¿^¿^O¿^|¿^Ø¿^∂¿^∑¿^˙¿^˛¿^ˇ¿_¿_E¿_F¿_R¿_ó¿_¬¿`¿`h¿`»¿a"¿aÅ¿b(¿bœ¿c:¿ce¿cæ¿d#¿dz¿d÷¿e¿ei¿e¡¿f¿fá¿f¸¿gh¿g◊¿hR¿hπ¿i<¿iπ¿j/¿jπ¿kª¿kø¿k¡¿k¬¿k‚¿lÀ¿l‚¿m¿me¿mx¿m†¿m§¿m·¿nE¿nF¿nô¿n«¿n»¿n˜¿oD¿oE¿o{¿oÅ¿oë¿o·¿p¿pR¿pS¿pÄ¿pÀ¿pÃ¿p˜¿p¯¿q(¿qW¿q“¿q”¿r¿r=¿rr¿rs¿rë¿rí¿rø¿rÀ¿s¿s¿s`¿sa¿sö¿s≥¿s¥¿s˚¿t¿tF¿tÇ¿tà¿tò¿tÊ¿t˚¿uN¿uO¿u|¿uÇ¿u”¿uÈ¿v5¿v6¿vt¿vz¿v¡¿w¿w`¿wà¿wâ¿x¿x¿xc¿xq¿xw¿x≈¿y¿y¿yc¿y≠¿y≥¿y“¿y˜¿z¿zS¿zö¿zõ¿zÊ¿{#¿{s¿{t¿{´¿{¨¿{Õ¿{Œ¿{⁄¿|¿|¿|s¿|t¿|Ä¿|ò¿|‹¿}/¿}5¿}Q¿}p¿}§¿}®¿}©¿}µ¿}Œ¿~¿~R¿~X¿~w¿~´¿~Ø¿~∞¿~º¿~÷¿¿X¿^¿z¿ª¿ø¿¿¿Ã¿Í¿Ä.¿ÄÆ¿Ä¥¿Äµ¿Ä‡¿Ä¸¿Å"¿Å6¿Å<¿Å=¿Åb¿ÅÉ¿Åô¿Å∏¿ÅË¿Ç¿ÇB¿Çe¿ÇÜ¿Ç©¿ÇŸ¿É¿Éb¿Éh¿Él¿Ém¿Éy¿Éõ¿É‰¿Ñ¿Ñ¿ÑO¿ÑS¿ÑT¿Ñy¿Ñã¿Ñ’¿Ñ›¿Ñ·¿Ñ‚¿Ö¿Ö¿Ök¿Ös¿Öw¿Öx¿Ö∑¿Ö˛¿Ü&¿Ü\¿Üb¿ÜÉ¿Üá¿Üà¿Üµ¿Ü¡¿Üı¿á5¿ál¿áz¿áÄ¿áØ¿á˜¿à)¿àa¿à{¿à|¿à£¿àƒ¿àÁ¿â
¿â/¿â@¿âe¿âä¿â–¿âˆ¿ä¿ä?¿äô¿ä®¿ä”¿ä‡¿äË¿äÓ¿ã¿ã¿ã¿ã=¿ãI¿ã|¿ã≠¿ãª¿ã¡¿å¿å0¿åQ¿å_¿åe¿å≠¿å˙¿ç,¿çv¿ç±¿ç»¿é¿é¿é¿é-¿é3¿éQ¿éU¿éV¿éy¿éÖ¿é√¿éﬁ¿éÏ¿éÚ¿è2¿èP¿è^¿èd¿èî¿èœ¿ê¿ê6¿êD¿êJ¿êK¿êò¿êØ¿ë
¿ë\¿ë¢¿ë©¿ë™¿ë ¿í¿í¿í¿íQ¿íõ¿í÷¿íÌ¿ì)¿ì3¿ì=¿ìR¿ìX¿ì\¿ì]¿ìÅ¿ìç¿ìΩ¿ìÓ¿î8¿îO¿î]¿îc¿îÉ¿î§¿ï¿ï
¿ï¿ï¿ï¿ïQ¿ïx¿ïù¿ïæ¿ï„¿ïÙ¿ñ¿ñ:¿ñ_¿ñx¿ñÄ¿ñß¿ñÃ¿ñÒ¿ó¿ó9¿óu¿óò¿óπ¿ó ¿ó“¿óÿ¿ó‹¿ó›¿ò¿ò8¿òF¿òL¿òk¿òê¿òñ¿ò»¿ò›¿ò„¿òÁ¿òË¿ô5¿ôJ¿ôP¿ô`¿ôf¿ôÆ¿ô˜¿ö2¿öw¿öõ¿öÈ¿õ7¿õf¿õy¿õ¿õÄ¿õ’¿õÏ¿ú¿ú3¿ú4¿úZ¿úì¿ú›¿ù#¿ù$¿ùr¿ùú¿ù§¿ù÷¿ù˘¿û¿û¿û0¿û8¿û>¿ûO¿ûS¿ûT¿ûú¿û¢¿ûÊ¿ü¿üÇ¿ü’¿†Z¿°¿°[¿°®¿°Û¿¢&¿¢8¿¢ä¿¢Æ¿¢œ¿¢ˆ¿£G¿£ë¿£›¿§-¿§f¿§w¿§†¿§…¿§ÿ¿§Â¿§Ô¿•¿•¿•G¿•M¿•N¿•µ¿•π¿•∫¿¶¿¶¿¶Q¿¶ä¿¶é¿¶Ó¿ß/¿ßa¿ßt¿ßz¿ßû¿ß ¿ßÈ¿®¿®<¿®I¿®t¿®¿®≠¿®Ã¿®Ê¿© ¿©-¿©Y¿©d¿©î¿©≥¿©Õ¿™¿™¿™=¿™H¿™Ä¿™ü¿™π¿™Ô¿™¸¿´-¿´8¿´?¿´C¿´D¿´î¿´Ø¿´‘¿¨¿¨¿¨Z¿¨§¿¨Ù¿≠<¿≠ã¿≠”¿≠¸¿Æ.¿Æ^¿Æë¿Æ‡¿Æ¸¿Ø/¿Ø`¿Øi¿Øo¿Øp¿Øµ¿∞¿∞d¿∞Ç¿∞º¿∞ƒ¿±¿±o¿±®¿±¬¿± ¿±‰¿≤3¿≤~¿≤Ö¿≤â¿≤ä¿≤ƒ¿≥¿≥¿≥¿≥-¿≥3¿≥Ç¿≥±¿≥Ë¿¥'¿¥Q¿¥ñ¿¥ü¿¥•¿¥¶¿¥·¿µ!¿µM¿µâ¿µø¿µ‡¿∂¿∂4¿∂V¿∂]¿∂a¿∂b¿∂Æ¿∂Í¿∂¿∑ ¿∑¿∑T¿∑ú¿∑Ì¿∏/¿∏~¿∏î¿∏Â¿π¿πN¿πö¿πÍ¿∫%¿∫w¿∫•¿∫ø¿∫˛¿ª¿ª(¿ªf¿ªx¿ªî¿ªœ¿ª·¿º¿º@¿ºR¿º~¿º√¿º’¿º‹¿º‡¿º·¿º˜¿º¯¿Ω¿Ω¿Ω0¿Ωv¿Ω≤¿ΩÒ¿æ(¿æ^¿æó¿æı¿æ˘¿æ˙¿øJ¿øl¿øã¿øå¿øò¿øπ¿ø‹¿ø›¿¿	¿¿T¿¿l¿¿m¿¿æ¿¿Ú¿¡'¿¡W¿¡ò¿¡û¿¡ü¿¡Õ¿¡È¿¬$¿¬U¿¬u¿¬≥¿¬Ω¿¬«¿¬Õ¿¬Œ¿√¿√L¿√{¿√•¿√∆¿√„¿ƒ ¿ƒ<¿ƒD¿ƒJ¿ƒK¿ƒµ¿ƒ√¿ƒ…¿ƒ ¿≈¿≈\¿≈Ä¿≈¶¿≈¥¿≈∫¿≈Â¿∆¿∆D¿∆`¿∆h¿∆•¿∆º¿∆ƒ¿∆ ¿∆Œ¿∆œ¿∆€¿«¿«2¿«g¿«Æ¿«Ô¿»¿» ¿»i¿»í¿»ò¿»›¿»ﬁ¿…¿…x¿…π¿…ø¿…¿¿…Û¿ 2¿ k¿ Ñ¿ ä¿ ã¿ Ã¿À0¿Àh¿Àn¿Ào¿Àò¿Àø¿ÀÒ¿ÃE¿ÃÉ¿Ã«¿ÃÁ¿ÃÒ¿Ã˜¿Ã¯¿Õ!¿ÕT¿Õ±¿Õπ¿Õø¿Õ¿¿Õﬂ¿Œ¿Œu¿Œ}¿ŒÉ¿ŒÑ¿ŒØ¿œ ¿œ¿œM¿œö¿œ¥¿œ’¿œ˝¿–&¿–K¿–t¿–ù¿–ƒ¿–œ¿–◊¿–›¿–ﬁ¿—¿—<¿—B¿—î¿—´¿—Ë¿“'¿“G¿“M¿“Q¿“R¿“^¿“q¿“õ¿“Œ¿”¿”?¿”j¿”è¿”±¿”Õ¿”Ê¿‘¿‘L¿‘n¿‘å¿‘∆¿‘¯¿’A¿’f¿’•¿’ƒ¿’Ì¿÷-¿÷B¿÷ê¿÷î¿÷ï¿÷∫¿÷ª¿◊¿◊¿◊X¿◊ú¿◊Ì¿ÿ¿ÿ¿ÿa¿ÿî¿ÿ ¿ÿÀ¿ÿ◊¿Ÿ¿Ÿ¿Ÿ¿ŸR¿Ÿü¿ŸÔ¿⁄8¿⁄9¿⁄á¿⁄®¿⁄—¿⁄ﬂ¿⁄Â¿⁄Ê¿€¿€z¿€Ä¿€Å¿€ú¿€Ì¿‹¿‹B¿‹H¿‹v¿‹w¿‹í¿‹ﬁ¿›¿›Z¿›h¿›n¿›o¿›ª¿›‰¿ﬁ¿ﬁF¿ﬁv¿ﬁ•¿ﬁÒ¿ﬂ#¿ﬂ2¿ﬂb¿ﬂj¿ﬂ°¿ﬂÆ¿ﬂ’¿‡$¿‡j¿‡ƒ¿‡‡¿‡Ë¿·¿·¿·J¿·Ñ¿·Í¿‚>¿‚?¿‚¢¿‚¸¿„=¿„C¿„D¿„{¿„À¿„˙¿‰¿‰¿‰¿‰k¿‰π¿Â¿Â$¿ÂY¿Â]¿Â^¿Âô¿Â‰¿Ê¿ÊQ¿Êä¿Ê«¿ÊÀ¿ÊÃ¿Êÿ¿Á¿Á¿ÁA¿Áå¿Á‘¿ÁË¿Ë¿Ë>¿ËH¿Ëi¿Ëà¿Ë©¿ËŒ¿ËÒ¿È¿ÈI¿Èt¿Èû¿Èø¿È‡¿Í¿Í*¿Íu¿Íæ¿Íˆ¿Í¸¿Î ¿Î¿Î¿ÎV¿Îä¿Îé¿Îè¿Îõ¿Î”¿Ï;¿ÏÜ¿Ïä¿Ïã¿Ï’¿ÏÓ¿ÏÔ¿Ì@¿ÌM¿Ìp¿Ìq¿Ìª¿ÌŸ¿Ì⁄¿Ó¿Ó.¿Ó/¿ÓÄ¿Ó–¿Ô¿Ôo¿Ôp¿Ô|¿Ô∏¿ÔÙ¿¿7¿R¿|¿∑¿È¿Ò¿Ò¿ÒR¿ÒÉ¿Ò∂¿Ú¿Ú)¿ÚT¿ÚU¿Ú¿ÛD¿ÛE¿Ûì¿Ûƒ¿Ù$¿ÙO¿Ùô¿ı¿ı¿ıe¿ı¿ˆP¿ˆx¿ˆõ¿ˆ∏¿ˆ¿˜7¿˜n¿˜Ê¿˜¿˜ˆ¿˜˙¿˜˚¿¯!¿¯û¿¯’¿˘=¿˘Ü¿˘–¿˙¿˙e¿˙Ö¿˙Ü¿˙÷¿˚%¿˚t¿˚√¿¸¿¸¿¸T¿¸ö¿¸‚¿˝$¿˝W¿˝÷¿˛I¿˛Q¿˛o¿˛è¿˛∞¿˛—¿˛ﬁ¿ˇ$¿ˇÑ¿ˇ‰¿ˇÂ¿ r¿ x¿ |¿ }¿ ™¿ ˚¿F¿r¿~¿£¿∆¿¸¿¿4¿R¿¶¿≤¿∫¿«¿¿U¿ñ¿¿¿€¿ı¿¿F¿k¿é¿µ¿⁄¿	¿.¿T¿Ç¿™¿“¿˜¿!¿J¿x¿Ç¿ä¿ê¿ë¿”¿Ú¿ ¿¿¿J¿T¿t¿ï¿…¿Á¿˝¿¿e¿o¿u¿v¿ƒ¿	¿	b¿	è¿	À¿	“¿
#¿
s¿
¡¿
œ¿
Ë¿¿¿¿¿2¿3¿Ñ¿ƒ¿ ¿¿j¿Ü¿†¿∫¿æ¿ø¿¿\¿b¿Ø¿ª¿”¿Ì¿˘¿¿d¿k¿î¿ò¿ô¿∆¿˝¿¿¿A¿{¿â¿è¿∆¿˘¿˝¿˛¿8¿_¿Ñ¿à¿â¿º¿Ì¿Ó¿;¿ä¿Ÿ¿Ì¿Ú¿>¿è¿›¿Ó¿$¿b¿≠¿≥¿¥¿Á¿
¿'¿(¿A¿{¿ß¿Ÿ¿"¿c¿´¿“¿ﬂ¿-¿~¿¥¿Â¿¿¿h¿q¿r¿∂¿Ò¿J¿q¿w¿x¿∆¿Ÿ¿¿9¿k¿ù¿§¿•¿Ì¿J¿N¿O¿ü¿Æ¿¿¿=¿w¿ó¿¿¿Œ¿‘¿Ù¿&¿'¿v¿ª¿—¿⁄¿'¿t¿≈¿Ê¿2¿ê¿„¿¿1¿M¿a¿ä¿Ø¿ÿ¿ ¿ (¿ 2¿ X¿ j¿ Ü¿ ’¿! ¿!1¿!9¿!n¿!{¿!ü¿!•¿!©¿!™¿!”¿!Ú¿"¿":¿"i¿"â¿"®¿"Æ¿"≤¿"≥¿"‚¿#"¿#@¿#]¿#Ñ¿#Æ¿#¥¿#∏¿#π¿#Â¿$¿$2¿$@¿$F¿$n¿$°¿$•¿$¿$ı¿%B¿%è¿%æ¿%‰¿&¿&N¿&\¿&b¿&Ö¿&¶¿&”¿&‘¿'7¿'†¿'Ú¿(¿(¿(/¿(>¿(P¿(w¿(ö¿(¡¿(Ë¿)¿)¿)6¿)e¿)i¿)j¿)k¿)w¿)“¿)˛¿*¿*2¿*8¿*<¿*=¿*I¿*e¿*Ñ¿*º¿*ﬂ¿+¿+"¿+g¿+v¿+ö¿+¢¿+®¿+¨¿+≠¿+Ò¿,=¿,Q¿,|¿,}¿, ¿,ﬂ¿,˝¿-$¿-a¿-e¿-f¿-Ü¿-Æ¿-Ó¿-Ú¿-Û¿.,¿.2¿.Ä¿.Œ¿/¿/k¿/ä¿/•¿/∫¿/ÿ¿/Â¿0¿0u¿0{¿0¿0Ä¿0¥¿0Ÿ¿0¿1¿1*¿1P¿1r¿1z¿1Ä¿1Ñ¿1Ö¿1¢¿1Ã¿1Í¿1Ó¿1Ô¿2"¿2|¿2ƒ¿2Ï¿3¿3¿39¿3d¿3ó¿3∆¿3Í¿4¿4<¿4o¿4Æ¿4„¿4Ú¿5¿5:¿5O¿5a¿5n¿5y¿5∂¿5Ω¿5æ¿5€¿5ﬂ¿5‡¿6¿6e¿6¥¿7¿7%¿7j¿7x¿7~¿7¿7¨¿7≠¿7Ò¿85¿8y¿8∑¿8Â¿8˙¿9¿97¿9^¿9ã¿9∑¿9‚¿:¿:2¿:M¿:x¿:ë¿:Æ¿:∏¿:æ¿;¿;3¿;S¿;`¿;á¿;æ¿;Õ¿;¯¿< ¿<G¿<o¿<u¿<¬¿<È¿=!¿=+¿=d¿=Ö¿=π¿=◊¿=Ì¿>	¿>[¿>e¿>k¿>l¿>º¿>Û¿?"¿?=¿?C¿?G¿?H¿?ç¿?‹¿@¿@¿@K¿@L¿@è¿@∂¿@ƒ¿@ ¿@Ú¿A4¿A_¿A¨¿A˜¿B$¿Br¿Bì¿BŒ¿B¸¿C¿C¿C¿CY¿CZ¿C®¿C‚¿D¿DV¿D†¿DÕ¿E¿E¿EB¿EM¿Eë¿E≠¿E‹¿EÙ¿F¿FC¿Fe¿Fõ¿F¥¿Fø¿F«¿F»¿G¿G-¿G.¿Gí¿G‡¿G·¿H ¿HB¿He¿Hè¿Hû¿H˚¿IJ¿Iñ¿Iº¿I‚¿J¿J¿Jh¿J≤¿Jº¿Jƒ¿J≈¿J‡¿K¿K$¿KQ¿Kx¿KÉ¿K®¿K‡¿L¿L4¿L?¿LN¿LÖ¿L™¿L‚¿LÌ¿Lı¿L˝¿M¿M¿M&¿M'¿M3¿MO¿Mc¿Mq¿Mw¿M©¿M„¿N'¿NU¿N_¿Nö¿NÓ¿OC¿O}¿OÖ¿Oã¿Oæ¿O¬¿O√¿P ¿P
¿Pn¿Po¿P}¿P•¿P˚¿Q¿Q¿Q;¿Q\¿Qz¿Q¬¿Q√¿Q‰¿RA¿RQ¿RY¿RZ¿Rö¿R«¿RË¿S¿S:¿SP¿Sl¿SØ¿Sπ¿Sø¿S√¿Sƒ¿SÒ¿Tc¿Të¿TÀ¿U*¿Us¿Ut¿Uú¿U¿VA¿VP¿Vü¿VÔ¿W>¿Wé¿W»¿W‘¿X¿X%¿Xö¿XÆ¿XØ¿Y¿Y0¿Y:¿Y]¿Yì¿Y≥¿YÀ¿YÈ¿Z1¿Z=¿ZE¿ZK¿ZL¿Zì¿Zî¿Z·¿["¿[8¿[L¿[ù¿[Ë¿\;¿\K¿\g¿\É¿\∏¿\Ó¿]&¿]v¿]|¿]®¿]–¿]‹¿^	¿^,¿^b¿^Ç¿^ö¿^∏¿^¯¿_¿_¿_¿_&¿_*¿_+¿_©¿_Œ¿_Ì¿`¿`F¿`y¿`ß¿`±¿`“¿`ı¿a¿a;¿an¿a≤¿a‡¿b/¿b_¿bk¿bu¿b{¿b¿bÄ¿bû¿c¿ch¿cl¿cm¿c‚¿c„¿d0¿dd¿dy¿d«¿d»¿e¿ed¿eÖ¿eö¿eŸ¿e⁄¿f¿f'¿fj¿fk¿fì¿f≥¿f¥¿f—¿gB¿g`¿gn¿gt¿gê¿gû¿g§¿g¿¿gÔ¿h ¿h.¿h4¿h\¿hƒ¿h—¿i3¿i9¿i=¿i>¿iW¿iÉ¿iÁ¿j¿j¿jN¿jh¿jp¿jv¿jw¿jü¿jΩ¿k¿k#¿k∂¿k√¿l¿lj¿lr¿l–¿l÷¿l⁄¿l€¿m¿mD¿m`¿my¿mì¿mª¿m¡¿m≈¿m∆¿mÒ¿n¿n+¿nR¿nm¿ns¿nw¿nx¿nû¿n–¿o$¿ov¿oõ¿oÌ¿p1¿pw¿p∏¿pæ¿pÁ¿q¿q>¿qé¿qØ¿qˆ¿rE¿rI¿rJ¿ri¿rî¿rª¿rÎ¿s ¿sN¿s¿s¿¿sﬁ¿t¿t¿tn¿tî¿tÕ¿t’¿t‚¿u¿uN¿uT¿uk¿uo¿up¿u£¿u¡¿v¿v=¿vX¿v£¿v≥¿v‘¿vÎ¿w¿w¿wJ¿wû¿wÂ¿wÎ¿x¿x¿x¿x/¿xn¿xª¿x⁄¿y¿y$¿y*¿y?¿yo¿yé¿yí¿yì¿yµ¿yÔ¿z¿z=¿zÄ¿z»¿zÃ¿zÕ¿{¿{0¿{>¿{D¿{a¿{Ö¿{•¿{˛¿|¿|*¿|+¿|`¿|≤¿|¿¿|∆¿|«¿}#¿}V¿}d¿}j¿}k¿}£¿}‡¿}˛¿~!¿~F¿~û¿¿¿D¿m¿é¿ï¿ñ¿ƒ¿‰¿Ä0¿Äl¿Äz¿ÄÄ¿Ä•¿Ä¶¿Äﬂ¿Ä˙¿ÅG¿ÅV¿Å™¿ÅÔ¿Ç¿Çd¿Ç´¿Ç¯¿É¿É¿ÉA¿ÉZ¿Éó¿ÉÊ¿Ñ!¿ÑN¿Ñ_¿Ñi¿Ñ≤¿Ñﬂ¿Ö¿Ö9¿Öâ¿Öˆ¿Ü ¿Ü¿Ü+¿Ü1¿Üe¿Üi¿Üj¿Ü∫¿á	¿áW¿á®¿á·¿à	¿à@¿àU¿à®¿àÓ¿â¿âT¿â†¿â˘¿âˇ¿ä:¿ä>¿ä?¿äc¿ä¢¿äÔ¿ä˝¿ã¿ã\¿ã±¿ã‰¿ãË¿ãÈ¿åC¿åD¿åu¿å{¿å ¿å˝¿çn¿ço¿ç{¿çÆ¿çØ¿ç˘¿ç˙¿é¿é`¿é§¿éÚ¿è#¿èO¿èh¿èÉ¿è∫¿è¿¿è¡¿ê¿ê`¿ê©¿êŒ¿êˆ¿ë¿ë=¿ët¿ë|¿ëä¿ëê¿ëë¿ëŒ¿ë“¿ë”¿ëﬂ¿í¿íW¿í£¿í§¿í◊¿ì¿ì¿ì¿ì_¿ìe¿ì¥¿ì¯¿î¿î¿îl¿îº¿ï¿ïW¿ïò¿ï»¿ï‹¿ï‚¿ï„¿ñ¿ñ¿ñ"¿ñF¿ñd¿ñä¿ñõ¿ñü¿ñ†¿ñ¨¿ñ‹¿ñÛ¿ó¿ó?¿ó~¿ó≤¿ó⁄¿ó‡¿ó‰¿óÂ¿ò¿òD¿òß¿ò®¿ò’¿òı¿ô¿ô¿ô¿ô!¿ô"¿ôp¿ôó¿ô√¿ö¿ö]¿öä¿ö√¿õ¿õ*¿õJ¿õe¿õä¿õ±¿ú¿ú[¿ú™¿úæ¿úƒ¿ú≈¿ú—¿ù¿ù]¿ù°¿ù∂¿ùΩ¿ùæ¿ù’¿ù˛¿û¿ûI¿û|¿ûì¿ûß¿û¥¿ûø¿û∆¿û◊¿û€¿û‹¿ü!¿üI¿üO¿üñ¿üΩ¿ü√¿†¿†;¿†i¿†é¿†ú¿†¢¿†£¿†‘¿°¿°¿°S¿°Y¿°]¿°^¿°ä¿°£¿°»¿°÷¿°‹¿°›¿¢¿¢8¿¢>¿¢B¿¢C¿¢è¿¢ö¿¢ü¿¢Í¿£0¿£Q¿£R¿£^¿£à¿£´¿£π¿£ø¿£¿¿£¿£˛¿§¿§¿§¿§j¿§r¿§v¿§w¿§É¿§§¿§Â¿§Û¿§˘¿§˙¿•¿•-¿•5¿•9¿•:¿•F¿•t¿•µ¿•∂¿•–¿¶¿¶6¿¶f¿¶n¿¶t¿¶x¿¶y¿¶Ö¿¶∫¿¶ª¿¶«¿¶˝¿ßT¿ß¢¿ß¡¿ßÈ¿®¿®I¿®S¿®{¿®|¿®ü¿®≈¿®Ê¿©¿©4¿©c¿©í¿©≈¿™¿™b¿™Ñ¿™£¿™¨¿™·¿´¿´J¿´ï¿´⁄¿´ı¿¨7¿¨>¿¨B¿¨C¿¨O¿¨ï¿¨ñ¿¨¬¿¨Ë¿¨È¿¨ı¿≠/¿≠A¿≠Ñ¿≠å¿≠ê¿≠ë¿≠’¿≠¯¿Æ¿ÆQ¿Æk¿Æº¿Æ…¿ÆÌ¿Ø#¿Ø+¿Ø9¿Ø=¿Ø>¿ØÅ¿Ø§¿Øπ¿Ø˝¿∞¿∞e¿∞r¿∞ï¿∞ ¿∞“¿∞‡¿∞‰¿∞Â¿±*¿±M¿±b¿±¶¿±¡¿≤¿≤T¿≤a¿≤Ü¿≤∏¿≤¿¿≤Œ¿≤“¿≤”¿≥%¿≥q¿≥é¿≥ı¿¥¿¥7¿¥ã¿¥ﬁ¿µ0¿µ~¿µ≈¿µÒ¿µı¿µˆ¿∂A¿∂w¿∂|¿∂…¿∑¿∑f¿∑∞¿∏¿∏3¿∏N¿∏m¿∏è¿∏º¿∏„¿π¿π¿πm¿π™¿π¯¿∫"¿∫à¿∫æ¿∫‚¿ª¿ª¿ªU¿ªç¿ªŸ¿º*¿ºq¿ºª¿Ω¿Ω¿Ω†¿Ω˜¿Ω˚¿Ω¸¿æN¿æO¿æÕ¿øP¿ø∏¿øˇ¿¿D¿¿E¿¿è¿¿·¿¿Â¿¿Ê¿¡.¿¡I¿¡O¿¡ò¿¡π¿¡ø¿¬ ¿¬@¿¬k¿¬î¿¬√¿¬—¿¬◊¿¬ÿ¿¬˝¿√3¿√o¿√≈¿√÷¿√ı¿ƒ¿ƒ/¿ƒ5¿ƒl¿ƒm¿ƒç¿ƒ•¿ƒÃ¿ƒ˝¿≈/¿≈V¿≈Ç¿≈—¿≈‹¿≈Â¿∆¿∆¿∆¿∆≠¿∆Æ¿∆ﬁ¿«¿«[¿«z¿«ò¿«ü¿«◊¿«ÿ¿»#¿»p¿»ø¿»⁄¿»˙¿…¿…$¿…(¿…ü¿…†¿…Ì¿ ¿ Z¿ t¿ ≥¿ ¿¿ Ù¿ ˙¿ ˛¿ ˇ¿ÀD¿ÀZ¿ÀÄ¿À≥¿À¡¿À«¿À»¿Ã¿Ã(¿Ãb¿Ãp¿Ãv¿Ãw¿Ã»¿Õ¿ÕZ¿Õh¿Õn¿Õo¿Õ√¿Œ¿ŒB¿Œe¿ŒÖ¿Œ•¿Œ¨¿Œ÷¿Œ‰¿ŒÍ¿œ¿œ¿œ¿œi¿œÖ¿œ…¿œÈ¿œ˜¿œ˝¿œ˛¿–%¿–f¿–Ö¿–å¿–‡¿—#¿—1¿—E¿—ê¿—∏¿—¡¿—»¿“¿“"¿“c¿“s¿“{¿“°¿“‡¿”3¿”â¿”æ¿”Ó¿‘,¿‘;¿‘l¿‘ï¿‘û¿‘´¿‘€¿‘Î¿‘Û¿’¿’X¿’©¿’”¿÷¿÷A¿÷P¿÷Å¿÷™¿÷≥¿÷π¿÷∫¿÷„¿◊¿◊4¿◊Z¿◊a¿◊e¿◊f¿◊û¿◊Õ¿◊Ì¿ÿ<¿ÿP¿ÿW¿ÿ[¿ÿ‚¿ÿ„¿ŸV¿Ÿ®¿Ÿ©¿Ÿ·¿⁄¿⁄3¿⁄F¿⁄L¿⁄x¿⁄|¿⁄}¿⁄~¿⁄π¿⁄ø¿€¿€H¿€ë¿€Æ¿€”¿€ˆ¿‹¿‹8¿‹Ü¿‹‘¿‹Ú¿›¿›7¿›a¿›o¿›ö¿›∆¿›˙¿ﬁ'¿ﬁO¿ﬁ}¿ﬁ—¿ﬁ€¿ﬁ¸¿ﬂ¿ﬂ@¿ﬂd¿ﬂj¿ﬂn¿ﬂo¿ﬂπ¿‡	¿‡4¿‡g¿‡™¿‡˝¿‡˛¿·¿·ñ¿‚1¿‚≥¿‚¥¿‚—¿„û¿‰ ¿‰˘¿Âﬁ¿Êû¿Á¿Áh¿Ëj¿ÈC¿Í:¿Í≈¿Î¿Î	¿Î!¿ÎÒ¿ÏÎ¿ÏÏ¿Ï˛¿ÌA¿Ìå¿Ó¿Ó¿Óa¿Óf¿Óg¿Ós¿Óö¿Ó»¿Ô¿Ô	¿ÔO¿Ôp¿Ôù¿Ô¡¿Ô‚¿%¿_¿{¿º¿÷¿ı¿Ò'¿ÒO¿ÒÖ¿Òÿ¿ÒÈ¿ÚH¿Ú{¿Úõ¿Ú≠¿ÚÆ¿Ú÷¿Úı¿Û¿Û¿Û9¿Ûd¿Ûë¿Û¿¿ÛÌ¿Ù¿Ùh¿Ù≤¿Ù÷¿ÙÏ¿ı¿ıv¿ı“¿ıÔ¿ˆ
¿ˆ¿ˆ¿ˆÄ¿ˆë¿ˆº¿ˆÌ¿˜	¿˜6¿˜_¿˜°¿˜ƒ¿˜Î¿¯¿¯s¿¯§¿¯’¿˘¿˘K¿˘†¿˘Ú¿˙+¿˙ê¿˙æ¿˙Â¿˙˙¿˚M¿˚É¿˚≤¿˚⁄¿¸¿¸P¿¸é¿¸¡¿¸¯¿˝-¿˝h¿˝ù¿˝—¿˛¿˛.¿˛Z¿˛â¿˛“¿ˇ¿ˇP¿ˇ{¿ˇ≤¿ ¿ Q¿ ö¿ ◊¿¿G¿x¿Ø¿Ê¿¿V¿π¿&¿_¿Õ¿¿A¿t¿Ì¿0¿{¿∏¿‰¿7¿t¿≥¿Ú¿@¿è¿‹¿+¿Å¿∫¿˚¿	A¿	í¿	—¿	Ó¿
	¿
"¿
9¿
N¿
a¿
r¿
Å¿
é¿
ô¿
¢¿
©¿
≠¿
Æ¿
‚¿
Ë¿-¿y¿ñ¿ó¿µ¿÷¿¿V¿¢¿æ¿¿;¿D¿™¿¿#¿}¿≥¿¿¿¿F¿L¿ü¿Ô¿@¿Z¿√¿$¿†¿Ø¿¿¿\¿•¿¿¿¿¿¿ ¿^¿Ñ¿◊¿)¿w¿“¿”¿1¿2¿g¿w¿ö¿™¿·¿˝¿¿¿¿D¿p¿à¿ù¿¡¿»¿Ã¿Œ¿œ¿¿¿#¿A¿Z¿Ç¿®¿æ¿ﬁ¿¸¿¿5¿R¿t¿ê¿¨¿ø¿⁄¿Ô¿¿+¿H¿i¿z¿†¿ø¿Ÿ¿¿!¿8¿O¿o¿ó¿–¿¿3¿\¿Ä¿ö¿¥¿‘¿+¿,¿K¿k¿á¿Ø¿’¿˚¿#¿;¿R¿i¿Ä¿ó¿≠¿Õ¿Ï¿¿)¿N¿f¿â¿£¿”¿˙¿¿>¿Z¿x¿ñ¿≥¿÷¿ ¿ 4¿ ]¿ í¿ ≥¿ ◊¿ ˜¿!¿!¿!¿![¿!v¿!é¿!Æ¿!‡¿"¿"B¿"`¿"|¿"ñ¿"∞¿" ¿"‰¿"¸¿#¿#@¿#h¿#Ñ¿#®¿#Ê¿$¿$¿$K¿$y¿$ô¿$«¿$Ì¿%¿%/¿%Q¿%s¿%•¿%◊¿&¿&E¿&y¿&£¿&À¿&Û¿'¿'¿' ¿'!¿'-¿'|¿'ç¿'ß¿'…¿'˝¿(-¿(c¿(É¿(°¿(Ω¿(Ÿ¿(ı¿)¿)+¿)K¿)s¿)ù¿)ª¿)·¿*!¿*E¿*]¿*å¿*º¿*‰¿+¿+6¿+X¿+|¿+†¿+ƒ¿+¯¿,*¿,j¿,†¿,Ã¿- ¿-*¿-N¿-{¿-¿-Å¿-Ç¿-ç¿-®¿-ƒ¿-‚¿-ˇ¿. ¿.C¿.i¿.É¿.¢¿.¡¿.Ÿ¿.ﬂ¿.‡¿.˝¿/"¿/B¿/r¿/ä¿/™¿/√¿/÷¿/ı¿/ˆ¿0,¿0N¿0w¿0}¿0∑¿0˘¿1?¿1À¿1ˇ¿2=¿2{¿2¨¿3¿3¿3¿3¿3@¿3]¿3v¿3ì¿3≤¿3⁄¿3ı¿3˚¿3¸¿4¿4/¿4N¿4y¿4è¿4ê¿4ú¿4‚¿4‰¿4Â¿5A¿5ö¿5õ¿5ß¿5º¿5”¿5Ì¿6/¿65¿69¿6:¿6F¿6}¿6£¿6”¿7¿7¿7¿7L¿7ä¿7ê¿7î¿7ï¿7°¿7¥¿7¿8¿8	¿8
¿8|¿8}¿8¶¿8…¿8 ¿8÷¿9¿9¿9¿9A¿9f¿9¡¿9‰¿9Ë¿9È¿9ı¿:¿:D¿:q¿:Ö¿:ã¿:¥¿:»¿:Œ¿:˙¿;¿;¿;T¿;Ü¿;Á¿<;¿<?¿<@¿<L¿<`¿<•¿<Ÿ¿<Ò¿<˜¿=/¿=ñ¿=ö¿=õ¿=ß¿=Œ¿=Á¿=Î¿=Ì¿=Ó¿>¿>=¿>W¿>o¿>u¿>v¿>”¿>Ê¿>Á¿>Û¿?j¿?å¿?µ¿?…¿@¿@¿@;¿@M¿@`¿@q¿@è¿@ñ¿@™¿@ø¿@≈¿@…¿@À¿@Ã¿A¿A¿Ab¿A≠¿A˘¿B<¿Bç¿B‹¿BÁ¿BÎ¿C;¿CR¿CV¿Cd¿Ch¿C≠¿CÂ¿D6¿Dn¿Dû¿D∆¿D«¿D›¿Dﬁ¿E/¿E[¿E§¿EÎ¿F.¿F2¿F3¿F?¿Fo¿Fò¿F´¿F±¿F ¿F⁄¿F‡¿G¿G¿G%¿GB¿GY¿G_¿G`¿Gä¿G°¿Gµ¿Gπ¿G∫¿G∆¿G˜¿H,¿H?¿HE¿H]¿Hm¿Hs¿Hõ¿H∂¿Hº¿HŸ¿H¿Hˆ¿H˜¿I%¿I<¿IT¿IX¿IZ¿I[¿I¨¿J¿JW¿JX¿Jy¿J™¿JŸ¿J⁄¿JÊ¿K¿KX¿Kv¿Kâ¿Kè¿KÆ¿Kˆ¿L:¿L\¿L¶¿Lœ¿M4¿MÉ¿Må¿M©¿Mª¿N¿N¿N¿N¿NÑ¿NÖ¿N∏¿NŸ¿O=¿Oê¿O¨¿O≥¿OŒ¿Oﬁ¿P8¿P?¿PC¿PD¿PP¿P®¿P™¿P´¿Q¿Q/¿Q?¿QY¿Qw¿Q¶¿Q¡¿Q·¿QÁ¿QË¿R	¿R3¿RJ¿Rf¿Ró¿R≈¿R∆¿RÒ¿RÚ¿S<¿ST¿Sä¿Sµ¿S˜¿T¿T%¿Tt¿TÕ¿T—¿T“¿U¿U2¿Uj¿Uó¿U€¿U‚¿V¿Vq¿Vu¿Vv¿VÇ¿V∏¿VÙ¿W¿W¿Ws¿W ¿X¿X¿Xx¿X†¿X™¿X∞¿X±¿X›¿Y,¿Yc¿YÖ¿Y¬¿Y·¿Z¿Z¿ZT¿Zs¿Zî¿Zø¿Z ¿Z“¿Zÿ¿ZŸ¿[y¿[˛¿\r¿\†¿]¿]¿][¿]Œ¿^C¿^∑¿^ª¿^º¿^»¿_¿_¿_	¿_y¿_≠¿_Æ¿_œ¿_–¿`¿`"¿`#¿`W¿`é¿`Æ¿`⁄¿`Ë¿`Ó¿a¿ah¿a≈¿b#¿bÜ¿b•¿b»¿b‰¿bÍ¿bÓ¿bÔ¿b˚¿c.¿cZ¿c[¿c∫¿d
¿d.¿d<¿dB¿dC¿du¿dò¿d¥¿d∫¿dª¿e ¿eb¿ec¿e∑¿f¿fe¿fì¿fÆ¿g¿gP¿g~¿g´¿g¨¿g¿¿g–¿h"¿h)¿h[¿hÑ¿h®¿hÆ¿h≤¿h≥¿hø¿h˝¿hˇ¿i ¿iD¿id¿ie¿iÜ¿iá¿iì¿i€¿iˆ¿j¿j#¿j9¿já¿jù¿j¶¿j≠¿j±¿j≤¿jæ¿j˚¿j˝¿j˛¿kJ¿kn¿ko¿kê¿kë¿kù¿kÊ¿l
¿l2¿l?¿lh¿ln¿lr¿ls¿l¿l‰¿lÊ¿lÁ¿m"¿m-¿mC¿m[¿mt¿mã¿më¿mí¿mº¿m“¿m”¿m¸¿n¿n    +Ä•  Ä∫Ä— Ä÷ÄÎÄÌÄ˚Ä˛ Å*ÅOÅQ  Å{ Å¢Å∏Å∫  Å„  Ç  Ç5  ÇL  Çd  Çà  Çù  Ç¥  ÇÕ  Çı  É
  É1  É_  É|  Éó  É∂  Éœ  ÉÏ  Ñ  Ñ   ÑD  Ñe  ÑÉ  Ñ¢  Ñº  Ñﬁ  Ñ˜  Ö  Ö,  Ö@  Öd  ÖÇ  Ö∞  Öœ  ÖÎ  Öˇ  ÜÜBÜ« ç”ÇºçŸ  éd éé2 é5éD  éVée  émét   é+éô  éÆéπ   é≈Ääéﬁ  éÒéˇ  é≈é∆èRÅ;èc  èvèÑ  èå'è®  èRèS êëÇ¥êó  êÕB êÕêÁ êËêÓ  ë ë   ë+ë-  ëBëP  ëÑëâ ëîëdëm    ëùÄ”ë°  ë©ëØ   ítÄœíÖ  íãíú  í§íØ  ítíu ìG¢•ú–âÇ/// A controller for an editable text field.
///
/// Whenever the user modifies a text field with an associated
/// [TextEditingController], the text field updates [value] and the controller
/// notifies its listeners. Listeners can then read the [text] and [selection]
/// properties to learn what the user has typed or how the selection has been
/// updated.
///
/// Similarly, if you modify the [text] or [selection] properties, the text
/// field will be notified and will update itself appropriately.
///
/// A [TextEditingController] can also be used to provide an initial value for a
/// text field. If you build a text field with a controller that already has
/// [text], the text field will use that text as its initial value.
///
/// The [value] (as well as [text] and [selection]) of this controller can be
/// updated from within a listener added to this controller. Be aware of
/// infinite loops since the listener will also be notified of the changes made
/// from within itself. Modifying the composing region from within a listener
/// can also have a bad interaction with some input methods. Gboard, for
/// example, will try to restore the composing region of the text if it was
/// modified programmatically, creating an infinite loop of communications
/// between the framework and the input method. Consider using
/// [TextInputFormatter]s instead for as-you-type text modification.
///
/// If both the [text] or [selection] properties need to be changed, set the
/// controller's [value] instead.
///
/// Remember to [dispose] of the [TextEditingController] when it is no longer
/// needed. This will ensure we discard any resources used by the object.
/// {@tool dartpad}
/// This example creates a [TextField] with a [TextEditingController] whose
/// change listener forces the entered text to be lower case and keeps the
/// cursor at the end of the input.
///
/// ** See code in examples/api/lib/widgets/editable_text/text_editing_controller.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * [TextField], which is a Material Design text field that can be controlled
///    with a [TextEditingController].
///  * [EditableText], which is a raw region of editable text that can be
///    controlled with a [TextEditingController].
///  * Learn how to use a [TextEditingController] in one of our [cookbook recipes](https://flutter.dev/docs/cookbook/forms/text-field-changes#2-use-a-texteditingcontroller). ùÅ ù™ùøÄè/// Creates a controller for an editable text field.
///
/// This constructor treats a null [text] argument as if it were the empty
/// string.ù¬ùÀ  ùÿù›û"ùÎûù„ùﬁùÊùÌù˝ù˛ûûû!ûûûû(Ç]üüüÄª/// Creates a controller for an editable text field from an initial [TextEditingValue].
///
/// This constructor treats a null [value] argument as if it were
/// [TextEditingValue.empty].üü  &ü+ü1üÉ†UüeüIüAü;üDüLüMüRüSü\ü]ühümünüçü£ü§ü©ü›üﬁüÔü‡üÂüÊü†.†^†c†É†j†d†m†}†~ †âL†¬+/// The current string the user is editing.   †ÿÇ·£	Ç/// Setting this will notify all the listeners of this [TextEditingController]
/// that they need to update (it calls [notifyListeners]). For this reason,
/// this value should only be set between frames, e.g. in response to user
/// actions, not during the build, layout, or paint phases.
///
/// This property can be set from a listener added to this
/// [TextEditingController]; however, one should not also set [selection]
/// in a separate statement. To change both the [text] and the [selection]
/// change the controller's [value]. ££   £ΩÅt£Õ  £”£Â  £Ω£æ™cÄ»´Äê/// The currently selected [text].
///
/// If the selection is collapsed, then this property gives the offset of the
/// cursor within the text.   ´.ÑX≠€Çê/// Setting this will notify all the listeners of this [TextEditingController]
/// that they need to update (it calls [notifyListeners]). For this reason,
/// this value should only be set between frames, e.g. in response to user
/// actions, not during the build, layout, or paint phases.
///
/// This property can be set from a listener added to this
/// [TextEditingController]; however, one should not also set [text]
/// in a separate statement. To change both the [text] and the [selection]
/// change the controller's [value].
///
/// If the new selection is of non-zero length, or is outside the composing
/// range, the composing range is cleared. ≠Â≠Ù   •5Ö*¶	Ä¬/// Builds [TextSpan] from current editing value.
///
/// By default makes text in composing range appear as underlined. Descendants
/// can override this method to customize appearance of text. ¶¶/  ¶7¶C  ¶J¶Y   ØäÇ<±fÅƒ/// Set the [value] to empty.
///
/// After calling this function, [text] will be the empty string and the
/// selection will be collapsed at zero offset.
///
/// Calling this will notify all the listeners of this [TextEditingController]
/// that they need to update (it calls [notifyListeners]). For this reason,
/// this method should only be called between frames, e.g. in response to user
/// actions, not during the build, layout, or paint phases.   ± Çf≥‚Å˛/// Set the composing region to an empty range.
///
/// The composing region is the range of text that is still being composed.
/// Calling this function indicates that the user is done composing that
/// region.
///
/// Calling this will notify all the listeners of this [TextEditingController]
/// that they need to update (it calls [notifyListeners]). For this reason,
/// this method should only be called between frames, e.g. in response to user
/// actions, not during the build, layout, or paint phases.   ¥4ÄŒ¥}A/// Check that the [selection] is inside of the bounds of [text]. ¥ô¥®   µÄ‰µN@/// Check that the [selection] is inside of the composing range. µoµ~    µÓÜï∑˘Åó/// Toolbar configuration for [EditableText].
///
/// Toolbar is a context menu that will show up when user right click or long
/// press the [EditableText]. It includes several options: cut, copy, paste,
/// and select all.
///
/// [EditableText] and its derived widgets have their own default [ToolbarOptions].
/// Create a custom [ToolbarOptions] if you want explicit control over the toolbar
/// option. ∏Åt π	π{/// Create a toolbar configuration with given options.
///
/// All options default to false if they are not explicitly set.ππ$  π5π;  πKπQ  πcπi  
∏é∏è∏ô∏ˇ∏ü∏»π*π@πXπtπÑsπﬂ</// An instance of [ToolbarOptions] with no options enabled.πÁπıπˆπ¸n∫fX/// Whether to show copy option in toolbar.
///
/// Defaults to false. Must not be null. ∫oÄƒª0Ä´/// Whether to show cut option in toolbar.
///
/// If [EditableText.readOnly] is set to true, cut will be disabled regardless.
///
/// Defaults to false. Must not be null. ª8Ä ª˝ÄØ/// Whether to show paste option in toolbar.
///
/// If [EditableText.readOnly] is set to true, paste will be disabled regardless.
///
/// Defaults to false. Must not be null. ºyºw^/// Whether to show select all option in toolbar.
///
/// Defaults to false. Must not be null.   ∑Ü∑á∑ë∑Ò∑ï∑ººÖâ©ΩÂÅY/// Configures the ability to insert media content through the soft keyboard.
///
/// The configuration provides a handler for any rich content inserted through
/// the system input method, and also provides the ability to limit the mime
/// types of the inserted content.
///
/// See also:
///
/// * [EditableText.contentInsertionConfiguration] æÅÓ øFøcÅ0/// Creates a content insertion configuration with the specified options.
///
/// A handler for inserted content, in the form of [onContentInserted], must
/// be supplied.
///
/// The allowable mime types of inserted content may also
/// be provided via [allowedMimeTypes], which cannot be an empty list.øjøy  øè9øï  øßø—ø◊øÛøÿøËøÈø˘Çv¿ B^Ç/// Called when a user inserts content through the virtual / on-screen keyboard,
/// currently only used on Android.
///
/// [KeyboardInsertedContent] holds the data representing the inserted content.
///
/// {@tool dartpad}
///
/// This example shows how to access the data for inserted content in your
/// `TextField`.
///
/// ** See code in examples/api/lib/widgets/editable_text/editable_text.on_content_inserted.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * <https://developer.android.com/guide/topics/text/image-keyboard> ¿ BtÉ∑¿ FÉe/// {@template flutter.widgets.contentInsertionConfiguration.allowedMimeTypes}
/// Used when a user inserts image-based content through the device keyboard,
/// currently only used on Android.
///
/// The passed list of strings will determine which MIME types are allowed to
/// be inserted via the device keyboard.
///
/// The default mime types are given by [kDefaultContentInsertionMimeTypes].
/// These are all the mime types that are able to be handled and inserted
/// from keyboards.
///
/// This field cannot be an empty list.
///
/// {@tool dartpad}
/// This example shows how to limit image insertion to specific file types.
///
/// ** See code in examples/api/lib/widgets/editable_text/editable_text.on_content_inserted.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * <https://developer.android.com/guide/topics/text/image-keyboard>
/// {@endtemplate}    ¿ FrÇØ¿ Fx  ¿ FÜ' ¿ Få¿ Fï ¿ Fñ	¿ Fú  ¿ F°
¿ Fß   ¿ F€Å÷¿ F¯ <¿ G¿ H∞¿ G¿ G¿ G¿ G%¿ G.¿ G9¿ G/¿ G8¿ GI¿ GR¿ G]¿ GS¿ G\¿ Gm¿ Gv¿ GÑ¿ Gw¿ GÄ¿ Gë¿ Gö¿ Gß¿ Gõ¿ G§¿ Gµ¿ Gæ¿ GÃ¿ Gø¿ G»¿ GŸ¿ G‚¿ GÌ¿ G„¿ GÏ¿ G˝¿ H¿ H¿ H¿ H¿ H!¿ H*¿ H8¿ H+¿ H4¿ HE¿ HN¿ H[¿ HO¿ HX¿ Hi¿ Hr¿ HÄ¿ Hs¿ H|¿ Hç¿ Hñ¿ H°¿ Hó¿ H†¿ H˜¿ I  ¿ I¿ I     ¿ I#á©¿ I)  ¿ I\`¿ Iw¿ Ix¿ Ià  	¿ Iç¿ Ië¿ Ií¿ Iì¿ I∫¿ Iî¿ Iù¿ Iû¿ Iπ¿ IøÅ¶¿ I⁄¿ I€¿ I‹ ¿ I›¿ I„  ¿ IÓ¿ IÙ  ¿ J¿ J¿ J"¿ J¿ J¿ J¿ J+¿ J1¿ JU¿ JG¿ J2¿ J<¿ J=¿ JA¿ JB¿ JJ¿ J^¿ Jd¿ K1¿ Kc¿ Je¿ K.¿ K/¿ K0¿ K3¿ Ki¿ Kv  ¿ KÜ ¿ Kú  ¿ Lc¿ Lg ¿ L| ¿ K´(¿ Kæ  ¿ K¡¿ K…  ¿ K´¿ K¨¿ K◊<¿ KË  ¿ KÔ¿ K˜  ¿ K◊¿ Kÿ¿ LÇÑH¿ Lï  ¿ Ló¿ Lü  ¿ LÇ¿ LÉ ¿ PŒ¿Ú¿ Å$∞O/// A basic text input field.
///
/// This widget interacts with the [TextInput] service to let the user edit the
/// text it contains. It also provides scrolling, selection, and cursor
/// movement. This widget does not provide any focus management (e.g.,
/// tap-to-focus).
///
/// ## Handling User Input
///
/// Currently the user may change the text this widget contains via keyboard or
/// the text selection menu. When the user inserted or deleted text, you will be
/// notified of the change and get a chance to modify the new text value:
///
/// * The [inputFormatters] will be first applied to the user input.
///
/// * The [controller]'s [TextEditingController.value] will be updated with the
///   formatted result, and the [controller]'s listeners will be notified.
///
/// * The [onChanged] callback, if specified, will be called last.
///
/// ## Input Actions
///
/// A [TextInputAction] can be provided to customize the appearance of the
/// action button on the soft keyboard for Android and iOS. The default action
/// is [TextInputAction.done].
///
/// Many [TextInputAction]s are common between Android and iOS. However, if a
/// [textInputAction] is provided that is not supported by the current
/// platform in debug mode, an error will be thrown when the corresponding
/// EditableText receives focus. For example, providing iOS's "emergencyCall"
/// action when running on an Android device will result in an error when in
/// debug mode. In release mode, incompatible [TextInputAction]s are replaced
/// either with "unspecified" on Android, or "default" on iOS. Appropriate
/// [textInputAction]s can be chosen by checking the current platform and then
/// selecting the appropriate action.
///
/// {@template flutter.widgets.EditableText.lifeCycle}
/// ## Lifecycle
///
/// Upon completion of editing, like pressing the "done" button on the keyboard,
/// two actions take place:
///
///   1st: Editing is finalized. The default behavior of this step includes
///   an invocation of [onChanged]. That default behavior can be overridden.
///   See [onEditingComplete] for details.
///
///   2nd: [onSubmitted] is invoked with the user's input value.
///
/// [onSubmitted] can be used to manually move focus to another input widget
/// when a user finishes with the currently focused input widget.
///
/// When the widget has focus, it will prevent itself from disposing via
/// [AutomaticKeepAliveClientMixin.wantKeepAlive] in order to avoid losing the
/// selection. Removing the focus will allow it to be disposed.
/// {@endtemplate}
///
/// Rather than using this widget directly, consider using [TextField], which
/// is a full-featured, material-design text input field with placeholder text,
/// labels, and [Form] integration.
///
/// ## Text Editing [Intent]s and Their Default [Action]s
///
/// This widget provides default [Action]s for handling common text editing
/// [Intent]s such as deleting, copying and pasting in the text field. These
/// [Action]s can be directly invoked using [Actions.invoke] or the
/// [Actions.maybeInvoke] method. The default text editing keyboard [Shortcuts]
/// also use these [Intent]s and [Action]s to perform the text editing
/// operations they are bound to.
///
/// The default handling of a specific [Intent] can be overridden by placing an
/// [Actions] widget above this widget. See the [Action] class and the
/// [Action.overridable] constructor for more information on how a pre-defined
/// overridable [Action] can be overridden.
///
/// ### Intents for Deleting Text and Their Default Behavior
///
/// | **Intent Class**                 | **Default Behavior when there's selected text**      | **Default Behavior when there is a [caret](https://en.wikipedia.org/wiki/Caret_navigation) (The selection is [TextSelection.collapsed])**  |
/// | :------------------------------- | :--------------------------------------------------- | :----------------------------------------------------------------------- |
/// | [DeleteCharacterIntent]          | Deletes the selected text                            | Deletes the user-perceived character before or after the caret location. |
/// | [DeleteToNextWordBoundaryIntent] | Deletes the selected text and the word before/after the selection's [TextSelection.extent] position | Deletes from the caret location to the previous or the next word boundary |
/// | [DeleteToLineBreakIntent]        | Deletes the selected text, and deletes to the start/end of the line from the selection's [TextSelection.extent] position | Deletes from the caret location to the logical start or end of the current line |
///
/// ### Intents for Moving the [Caret](https://en.wikipedia.org/wiki/Caret_navigation)
///
/// | **Intent Class**                                                                     | **Default Behavior when there's selected text**                  | **Default Behavior when there is a caret ([TextSelection.collapsed])**  |
/// | :----------------------------------------------------------------------------------- | :--------------------------------------------------------------- | :---------------------------------------------------------------------- |
/// | [ExtendSelectionByCharacterIntent](`collapseSelection: true`)                        | Collapses the selection to the logical start/end of the selection | Moves the caret past the user-perceived character before or after the current caret location. |
/// | [ExtendSelectionToNextWordBoundaryIntent](`collapseSelection: true`)                 | Collapses the selection to the word boundary before/after the selection's [TextSelection.extent] position | Moves the caret to the previous/next word boundary. |
/// | [ExtendSelectionToNextWordBoundaryOrCaretLocationIntent](`collapseSelection: true`)  | Collapses the selection to the word boundary before/after the selection's [TextSelection.extent] position, or [TextSelection.base], whichever is closest in the given direction | Moves the caret to the previous/next word boundary. |
/// | [ExtendSelectionToLineBreakIntent](`collapseSelection: true`)                        | Collapses the selection to the start/end of the line at the selection's [TextSelection.extent] position | Moves the caret to the start/end of the current line .|
/// | [ExtendSelectionVerticallyToAdjacentLineIntent](`collapseSelection: true`)           | Collapses the selection to the position closest to the selection's [TextSelection.extent], on the previous/next adjacent line | Moves the caret to the closest position on the previous/next adjacent line. |
/// | [ExtendSelectionVerticallyToAdjacentPageIntent](`collapseSelection: true`)           | Collapses the selection to the position closest to the selection's [TextSelection.extent], on the previous/next adjacent page | Moves the caret to the closest position on the previous/next adjacent page. |
/// | [ExtendSelectionToDocumentBoundaryIntent](`collapseSelection: true`)                 | Collapses the selection to the start/end of the document | Moves the caret to the start/end of the document. |
///
/// #### Intents for Extending the Selection
///
/// | **Intent Class**                                                                     | **Default Behavior when there's selected text**                  | **Default Behavior when there is a caret ([TextSelection.collapsed])**  |
/// | :----------------------------------------------------------------------------------- | :--------------------------------------------------------------- | :---------------------------------------------------------------------- |
/// | [ExtendSelectionByCharacterIntent](`collapseSelection: false`)                       | Moves the selection's [TextSelection.extent] past the user-perceived character before/after it |
/// | [ExtendSelectionToNextWordBoundaryIntent](`collapseSelection: false`)                | Moves the selection's [TextSelection.extent] to the previous/next word boundary |
/// | [ExtendSelectionToNextWordBoundaryOrCaretLocationIntent](`collapseSelection: false`) | Moves the selection's [TextSelection.extent] to the previous/next word boundary, or [TextSelection.base] whichever is closest in the given direction | Moves the selection's [TextSelection.extent] to the previous/next word boundary. |
/// | [ExtendSelectionToLineBreakIntent](`collapseSelection: false`)                       | Moves the selection's [TextSelection.extent] to the start/end of the line |
/// | [ExtendSelectionVerticallyToAdjacentLineIntent](`collapseSelection: false`)          | Moves the selection's [TextSelection.extent] to the closest position on the previous/next adjacent line |
/// | [ExtendSelectionVerticallyToAdjacentPageIntent](`collapseSelection: false`)          | Moves the selection's [TextSelection.extent] to the closest position on the previous/next adjacent page |
/// | [ExtendSelectionToDocumentBoundaryIntent](`collapseSelection: false`)                | Moves the selection's [TextSelection.extent] to the start/end of the document |
/// | [SelectAllTextIntent]  | Selects the entire document |
///
/// ### Other Intents
///
/// | **Intent Class**                        | **Default Behavior**                                 |
/// | :-------------------------------------- | :--------------------------------------------------- |
/// | [DoNothingAndStopPropagationTextIntent] | Does nothing in the input field, and prevents the key event from further propagating in the widget tree. |
/// | [ReplaceTextIntent]                     | Replaces the current [TextEditingValue] in the input field's [TextEditingController], and triggers all related user callbacks and [TextInputFormatter]s. |
/// | [UpdateSelectionIntent]                 | Updates the current selection in the input field's [TextEditingController], and triggers the [onSelectionChanged] callback. |
/// | [CopySelectionTextIntent]               | Copies or cuts the selected text into the clipboard |
/// | [PasteTextIntent]                       | Inserts the current text in the clipboard after the caret location, or replaces the selected text if the selection is not collapsed. |
///
/// ## Gesture Events Handling
///
/// This widget provides rudimentary, platform-agnostic gesture handling for
/// user actions such as tapping, long-pressing and scrolling when
/// [rendererIgnoresPointer] is false (false by default). To tightly conform
/// to the platform behavior with respect to input gestures in text fields, use
/// [TextField] or [CupertinoTextField]. For custom selection behavior, call
/// methods such as [RenderEditable.selectPosition],
/// [RenderEditable.selectWord], etc. programmatically.
///
/// {@template flutter.widgets.editableText.showCaretOnScreen}
/// ## Keep the caret visible when focused
///
/// When focused, this widget will make attempts to keep the text area and its
/// caret (even when [showCursor] is `false`) visible, on these occasions:
///
///  * When the user focuses this text field and it is not [readOnly].
///  * When the user changes the selection of the text field, or changes the
///    text when the text field is not [readOnly].
///  * When the virtual keyboard pops up.
/// {@endtemplate}
///
/// {@template flutter.widgets.editableText.accessibility}
/// ## Troubleshooting Common Accessibility Issues
///
/// ### Customizing User Input Accessibility Announcements
///
/// To customize user input accessibility announcements triggered by text
/// changes, use [SemanticsService.announce] to make the desired
/// accessibility announcement.
///
/// On iOS, the on-screen keyboard may announce the most recent input
/// incorrectly when a [TextInputFormatter] inserts a thousands separator to
/// a currency value text field. The following example demonstrates how to
/// suppress the default accessibility announcements by always announcing
/// the content of the text field as a US currency value (the `\$` inserts
/// a dollar sign, the `$newText interpolates the `newText` variable):
///
/// ```dart
/// onChanged: (String newText) {
///   if (newText.isNotEmpty) {
///     SemanticsService.announce('\$$newText', Directionality.of(context));
///   }
/// }
/// ```
///
/// {@endtemplate}
///
/// See also:
///
///  * [TextField], which is a full-featured, material-design text input field
///    with placeholder text, labels, and [Form] integration. ¿ ÅLòì ¿ Ü4¿ Ü@ÑΩ/// Creates a basic text input control.
///
/// The [maxLines] property can be set to null to remove the restriction on
/// the number of lines. By default, it is one, meaning this is a single-line
/// text field. [maxLines] must be null or greater than zero.
///
/// If [keyboardType] is not set or is null, its value will be inferred from
/// [autofillHints], if [autofillHints] is not empty. Otherwise it defaults to
/// [TextInputType.text] if [maxLines] is exactly one, and
/// [TextInputType.multiline] if [maxLines] is null or greater than one.
///
/// The text cursor is not shown if [showCursor] is false or if [showCursor]
/// is null (the default) and [readOnly] is true.
///
/// The [controller], [focusNode], [obscureText], [autocorrect], [autofocus],
/// [showSelectionHandles], [enableInteractiveSelection], [forceLine],
/// [style], [cursorColor], [cursorOpacityAnimates], [backgroundCursorColor],
/// [enableSuggestions], [paintCursorAboveText], [selectionHeightStyle],
/// [selectionWidthStyle], [textAlign], [dragStartBehavior], [scrollPadding],
/// [dragStartBehavior], [toolbarOptions], [rendererIgnoresPointer],
/// [readOnly], and [enableIMEPersonalizedLearning] arguments must not be null.F¿ ÜG	¿ ÜN  ¿ ÜV¿ Üe  ¿ Üt¿ ÜÉ  ¿ Üë¿ Üó  ¿ Ü¨¿ Ü≤  ¿ Üœ¿ Ü’  ¿ ÜÌ¿ ÜÛ  ¿ á
 ¿ á  ¿ á0 ¿ áB  ¿ áV¿ á\  ¿ áy¿ áà  ¿ áí¿ áü  ¿ áÆ¿ áΩ  ¿ áÕ#¿ á‹  ¿ áˆ ¿ á¸  ¿ à¿ à"  ¿ à4¿ à:  ¿ àE¿ àK  ¿ à_¿ àe  ¿ àv¿ à|  ¿ àâ¿ àè  ¿ à£¿ à©  ¿ àæ¿ àƒ  ¿ à€+¿ à·  ¿ â¿ â  ¿ â(¿ â/  ¿ â>!¿ âD  ¿ âe¿ âk  ¿ â~¿ âÑ  ¿ âö¿ â™  ¿ âª¿ â¡  ¿ â’1¿ â€  ¿ ä¿ ä  ¿ ä ¿ ä&  ¿ ä<¿ äB  ¿ äR¿ äX  ¿ äp¿ äv  ¿ äç¿ äì  ¿ äØ¿ äµ  ¿ ä∆)¿ ä·  ¿ äı¿ ä˚  ¿ ã#¿ ã  ¿ ã4¿ ã:  ¿ ãP¿ ãV  ¿ ãg¿ ãm  ¿ ã~"¿ ãÑ  ¿ ã¶¿ ã¨  ¿ ãΩ!¿ ã√  ¿ ã‰3¿ ãÍ  ¿ å1¿ å#  ¿ åT/¿ åZ  ¿ åâ*¿ åè  ¿ åπ0¿ åø  ¿ åÔ ¿ åˆ  ¿ ç¿ ç  ¿ ç0¿ ç6  ¿ çH ¿ çN  ¿ çnÄõ¿ ç¸  ¿ é%¿ é  ¿ é:¿ é@  ¿ éS!¿ éY  ¿ éz¿ éÄ  ¿ éí¿ éò  ¿ é´¿ é±  ¿ éÃ)¿ é“  ¿ é˚"¿ è  ¿ è#¿ è)  ¿ è@¿ èF  ¿ èbA¿ èh  ¿ è©¿ èØ  Å>¿ Ü°¿ Ü∆¿ Ü‚¿ á ¿ áo¿ à¿ à¿ à¿ ào¿ àò¿ à¥¿ àÒ¿ àˇ¿ â ¿ â¿ âZ¿ âÔ¿ ä¿ ä¿ ã)¿ ãG¿ ãõ¿ ãŸ¿ å ¿ å¿ å¿ å¿ å¿ å8¿ å:¿ å;¿ åH¿ åI¿ åi¿ åo¿ åy¿ åz¿ å}¿ åÇ¿ å~¿ å£¿ å≠¿ åÆ¿ å“¿ å„¿ å‰¿ çn¿ ço¿ çy¿ çÂ¿ çÅ¿ ç¨¿ é$¿ é2¿ é3¿ é*¿ é1¿ é+¿ ég¿ ék¿ él¿ é¬¿ éÒ¿ èÄ¿ èö¿ èõ¿ è≈¿ èÀ¿ èÍ¿ èÊ¿ èÃ¿ èﬁ¿ èﬂ¿ èÈ¿ ê¿ èÙ¿ ê¿ ê¿ ê¿ êZ¿ ê&¿ êA¿ ê¿ ê(¿ ê7¿ ê8¿ êC¿ êR¿ êS¿ êt¿ êd¿ êÜ¿ êv¿ êâ¿ ê ¿ êñ¿ ê±¿ êä¿ êò¿ êß¿ ê®¿ ê≥¿ ê¬¿ ê√¿ ê‘¿ ê⁄¿ ê˚¿ êÏ¿ ê‰¿ ê€¿ êÁ¿ ê¯¿ êÔ¿ ê˙¿ ë¿ ë¿ ëX¿ ëï¿ ë?¿ ë)¿ ë¿ ë'¿ ë ¿ ë¿ ë#¿ ë,¿ ë=¿ ë6¿ ë-¿ ë9¿ ëB¿ ëW¿ ëL¿ ëC¿ ëO¿ ëc¿ ëü¿ ë•¿ ë‚¿ í0¿ ëπ¿ ë∞¿ ë±¿ ëº¿ ë·¿ ëŒ¿ ë∆¿ ëΩ¿ ë…¿ ë⁄¿ ë—¿ ë›¿ ëÌ¿ í:¿ í@¿ í^¿ íÜ¿ íN¿ íA¿ íB¿ íZ¿ íQ¿ í]¿ í`¿ í´¿ íê¿ í»¿ í≠¿ íÀ¿ íÂ¿ í÷¿ íÃ¿ íÕ¿ íŸ¿ í⁄¿ í˛¿ íÔ¿ ìK¿ ìb¿ ì1¿ ì¿ ì ¿ ì¿ ìC¿ ì4¿ ìF¿ ìM¿ ì[¿ ì\¿ ìs¿ ìd¿ ìÅ¿ ñ⁄¿ ìù¿ ï¿ ìÇ¿ ìü¿ ï ¿ î.¿ îÜ¿ ì†¿ î0¿ î>¿ î?¿ îà¿ îé¿ îú¿ îˇ¿ îæ¿ îµ¿ î¿¿ î‚¿ î›¿ î‰¿ ï¿ ñŸ¿ ï_¿ ñ¿ ï¿ ïa¿ ïg¿ ïu¿ ï◊¿ ïó¿ ïé¿ ïô¿ ï∫¿ ï∂¿ ïº¿ ñ¿ ñ"¿ ñ0¿ ñÿ¿ ñM¿ ñI¿ ñO¿ ño¿ ñl¿ ñq¿ ñó¿ ñé¿ ñô¿ ñª¿ ñ∂¿ ñΩ¿ ñ‰¿ ñÍ¿ óß¿ ò¿ óg¿ ó¿ ó¿ ñˆ¿ ó¿ ó;¿ ó#¿ ó>¿ óD¿ ó[¿ ó\¿ ód¿ óe¿ ó†¿ ót¿ óã¿ óå¿ ó£¿ ó≥¿ ò1¿ ò%¿ ò3¿ òS¿ òF¿ òb¿ òU¿ òe¿ òw¿ ò®¿ òÖ¿ òx¿ òá¿ òû¿ òñ¿ ò†¿ ò¬¿ ò≤¿ ò›¿ ô†¿ òÕ¿ òƒ¿ ò–¿ òÛ¿ ôì¿ òﬂ¿ òÚ¿ ò‡¿ ô¿ ô¿ ô ¿ ôD¿ ôW¿ ôG¿ ôZ¿ ô`¿ ôh¿ ô{¿ ôi¿ ô|¿ ô}¿ ôÇ¿ ôÉ¿ ô¢¿ ô≈¿ ô∫¿ ô“¿ ô«¿ ô’¿ ô÷F¿ ô„L¿ ö%#/// Controls the text being edited. ¿ ö4P¿ ö{4/// Controls whether this widget has keyboard focus. ¿ öâÅ¿ õïÄÚ/// {@template flutter.widgets.editableText.obscuringCharacter}
/// Character used for obscuring text if [obscureText] is true.
///
/// Must be only a single character.
///
/// Defaults to the character U+2022 BULLET (‚Ä¢).
/// {@endtemplate} ¿ õ¨Å÷¿ ùwÅ´/// {@template flutter.widgets.editableText.obscureText}
/// Whether to hide the text being edited (e.g., for passwords).
///
/// When this is set to true, all the characters in the text field are
/// replaced by [obscuringCharacter], and the text in the field cannot be
/// copied with copy or cut. If [readOnly] is also true, then the text cannot
/// be selected.
///
/// Defaults to false. Cannot be null.
/// {@endtemplate} ¿ ùáV¿ ùÀ'/// {@macro dart.ui.textHeightBehavior} ¿ ù‚^¿ û28/// {@macro flutter.painting.textPainter.textWidthBasis} ¿ ûEÅE¿ üÇÅ!/// {@template flutter.widgets.editableText.readOnly}
/// Whether the text can be changed.
///
/// When this is set to true, the text cannot be modified
/// by any shortcut or keyboard operation. The text is still selectable.
///
/// Defaults to false. Must not be null.
/// {@endtemplate} ¿ üèÅ|¿ °ÅS/// Whether the text will take the full width regardless of the text width.
///
/// When this is set to false, the width will be based on text width, which
/// will also be affected by [textWidthBasis].
///
/// Defaults to true. Must not be null.
///
/// See also:
///
///  * [textWidthBasis], which controls the calculation of text width. ¿ °Åe¿ ¢gÅ5/// Configuration of toolbar options.
///
/// By default, all options are enabled. If [readOnly] is true, paste and cut
/// will be disabled regardless. If [obscureText] is true, cut and copy will
/// be disabled regardless. If [readOnly] and [obscureText] are both true,
/// select all will also be disabled. ¿ ¢zÅq¿ £◊Å?/// Whether to show selection handles.
///
/// When a selection is active, there will be two handles at each side of
/// boundary, or one handle if the selection is collapsed. The handles can be
/// dragged to adjust the selection.
///
/// See also:
///
///  * [showCursor], which controls the visibility of the cursor. ¿ £ÅO¿ •5Å'/// {@template flutter.widgets.editableText.showCursor}
/// Whether to show cursor.
///
/// The cursor refers to the blinking caret when the [EditableText] is focused.
/// {@endtemplate}
///
/// See also:
///
///  * [showSelectionHandles], which controls the visibility of the selection handles. ¿ •DÄº¿ •ıÄõ/// {@template flutter.widgets.editableText.autocorrect}
/// Whether to enable autocorrection.
///
/// Defaults to true. Cannot be null.
/// {@endtemplate} ¿ ¶l¿ ¶bD/// {@macro flutter.services.TextInputConfiguration.smartDashesType} ¿ ¶vl¿ ¶”D/// {@macro flutter.services.TextInputConfiguration.smartQuotesType} ¿ ¶Áe¿ ß;F/// {@macro flutter.services.TextInputConfiguration.enableSuggestions} ¿ ßQH¿ ßî0/// The text style to use for the editable text. ¿ ßûÄµ¿ ®EÄÉ/// Controls the undo state of the current editable text.
///
/// If null, this widget will create its own [UndoHistoryController]. ¿ ÆA¿ ÆS  ¿ ÆcÄÿ¿ Ø2Ä¥/// {@template flutter.widgets.editableText.textAlign}
/// How the text should be aligned horizontally.
///
/// Defaults to [TextAlign.start] and cannot be null.
/// {@endtemplate} ¿ Ø@Ç‚¿ ≤Ç°/// {@template flutter.widgets.editableText.textDirection}
/// The directionality of the text.
///
/// This decides how [textAlign] values like [TextAlign.start] and
/// [TextAlign.end] are interpreted.
///
/// This is also used to disambiguate how to render bidirectional text. For
/// example, if the text is an English phrase followed by a Hebrew phrase,
/// in a [TextDirection.ltr] context the English phrase will be on the left
/// and the Hebrew phrase to its right, while in a [TextDirection.rtl]
/// context, the English phrase will be on the right and the Hebrew phrase on
/// its left.
///
/// Defaults to the ambient [Directionality], if any.
/// {@endtemplate} ¿ ≤'Ç!¿ ¥6ÅŸ/// {@template flutter.widgets.editableText.textCapitalization}
/// Configures how the platform keyboard will select an uppercase or
/// lowercase keyboard.
///
/// Only supports text keyboards, other keyboard types will ignore this
/// configuration. Capitalization is locale-aware.
///
/// Defaults to [TextCapitalization.none]. Must not be null.
///
/// See also:
///
///  * [TextCapitalization], for a description of each capitalization behavior.
///
/// {@endtemplate} ¿ ¥MÅi¿ µ∞ÅF/// Used to select a font when the same Unicode character can
/// be rendered differently, depending on the locale.
///
/// It's rarely necessary to set this property. By default its value
/// is inherited from the enclosing app with `Localizations.localeOf(context)`.
///
/// See [RenderEditable.locale] for more information. ¿ µªÅ∑¿ ∑cÅá/// {@template flutter.widgets.editableText.textScaleFactor}
/// The number of font pixels for each logical pixel.
///
/// For example, if the text scale factor is 1.5, text will be 50% larger than
/// the specified font size.
///
/// Defaults to the [MediaQueryData.textScaleFactor] obtained from the ambient
/// [MediaQuery], or 1.0 if there is no [MediaQuery] in scope.
/// {@endtemplate} ¿ ∑wd¿ ∑–F/// The color to use when painting the cursor.
///
/// Cannot be null. ¿ ∑‡ÅÚ¿ π∑Åµ/// The color to use when painting the autocorrection Rect.
///
/// For [CupertinoTextField]s, the value is set to the ambient
/// [CupertinoThemeData.primaryColor] with 20% opacity. For [TextField]s, the
/// value is null on non-iOS platforms and the same color used in [CupertinoTextField]
/// on iOS.
///
/// Currently the autocorrection Rect only appears on iOS.
///
/// Defaults to null, which disables autocorrection Rect painting. ¿ π◊Ä˛¿ ∫¿Ä“/// The color to use when painting the background cursor aligned with the text
/// while rendering the floating cursor.
///
/// Cannot be null. By default it is the disabled grey color from
/// CupertinoColors. ¿ ∫⁄à¬¿ √îàD/// {@template flutter.widgets.editableText.maxLines}
/// The maximum number of lines to show at one time, wrapping if necessary.
///
/// This affects the height of the field itself and does not limit the number
/// of lines that can be entered into the field.
///
/// If this is 1 (the default), the text will not wrap, but will scroll
/// horizontally instead.
///
/// If this is null, there is no limit to the number of lines, and the text
/// container will start with enough vertical space for one line and
/// automatically grow to accommodate additional lines as they are entered, up
/// to the height of its constraints.
///
/// If this is not null, the value must be greater than zero, and it will lock
/// the input to the given number of lines and take up enough horizontal space
/// to accommodate that number of lines. Setting [minLines] as well allows the
/// input to grow and shrink between the indicated range.
///
/// The full set of behaviors possible with [minLines] and [maxLines] are as
/// follows. These examples apply equally to [TextField], [TextFormField],
/// [CupertinoTextField], and [EditableText].
///
/// Input that occupies a single line and scrolls horizontally as needed.
/// ```dart
/// const TextField()
/// ```
///
/// Input whose height grows from one line up to as many lines as needed for
/// the text that was entered. If a height limit is imposed by its parent, it
/// will scroll vertically when its height reaches that limit.
/// ```dart
/// const TextField(maxLines: null)
/// ```
///
/// The input's height is large enough for the given number of lines. If
/// additional lines are entered the input scrolls vertically.
/// ```dart
/// const TextField(maxLines: 2)
/// ```
///
/// Input whose height grows with content between a min and max. An infinite
/// max is possible with `maxLines: null`.
/// ```dart
/// const TextField(minLines: 2, maxLines: 4)
/// ```
///
/// See also:
///
///  * [minLines], which sets the minimum number of lines visible.
/// {@endtemplate}
///  * [expands], which determines whether the field should fill the height of
///    its parent. ¿ √°áá¿ À á/// {@template flutter.widgets.editableText.minLines}
/// The minimum number of lines to occupy when the content spans fewer lines.
///
/// This affects the height of the field itself and does not limit the number
/// of lines that can be entered into the field.
///
/// If this is null (default), text container starts with enough vertical space
/// for one line and grows to accommodate additional lines as they are entered.
///
/// This can be used in combination with [maxLines] for a varying set of behaviors.
///
/// If the value is set, it must be greater than zero. If the value is greater
/// than 1, [maxLines] should also be set to either null or greater than
/// this value.
///
/// When [maxLines] is set as well, the height will grow between the indicated
/// range of lines. When [maxLines] is null, it will grow as high as needed,
/// starting from [minLines].
///
/// A few examples of behaviors possible with [minLines] and [maxLines] are as follows.
/// These apply equally to [TextField], [TextFormField], [CupertinoTextField],
/// and [EditableText].
///
/// Input that always occupies at least 2 lines and has an infinite max.
/// Expands vertically as needed.
/// ```dart
/// TextField(minLines: 2)
/// ```
///
/// Input whose height starts from 2 lines and grows up to 4 lines at which
/// point the height limit is reached. If additional lines are entered it will
/// scroll vertically.
/// ```dart
/// const TextField(minLines:2, maxLines: 4)
/// ```
///
/// Defaults to null.
///
/// See also:
///
///  * [maxLines], which sets the maximum number of lines visible, and has
///    several examples of how minLines and maxLines interact to produce
///    various behaviors.
/// {@endtemplate}
///  * [expands], which determines whether the field should fill the height of
///    its parent. ¿ À-É¿ Œ-Ç /// {@template flutter.widgets.editableText.expands}
/// Whether this widget's height will be sized to fill its parent.
///
/// If set to true and wrapped in a parent widget like [Expanded] or
/// [SizedBox], the input will expand to fill the parent.
///
/// [maxLines] and [minLines] must both be null when this is set to true,
/// otherwise an error is thrown.
///
/// Defaults to false.
///
/// See the examples in [maxLines] for the complete picture of how [maxLines],
/// [minLines], and [expands] interact to produce various behaviors.
///
/// Input that matches the height of its parent:
/// ```dart
/// const Expanded(
///   child: TextField(maxLines: null, expands: true),
/// )
/// ```
/// {@endtemplate} ¿ Œ9Å˛¿ –.Ål/// {@template flutter.widgets.editableText.autofocus}
/// Whether this text field should focus itself if nothing else is already
/// focused.
///
/// If true, the keyboard will open as soon as this text field obtains focus.
/// Otherwise, the keyboard is only shown after the user taps the text field.
///
/// Defaults to false. Cannot be null.
/// {@endtemplate} ¿ –<Å§¿ —“Åx/// The color to use when painting the selection.
///
/// If this property is null, this widget gets the selection color from the
/// [DefaultSelectionStyle].
///
/// For [CupertinoTextField]s, the value is set to the ambient
/// [CupertinoThemeData.primaryColor] with 20% opacity. For [TextField]s, the
/// value is set to the ambient [TextSelectionThemeData.selectionColor]. ¿ —ÂÉ_¿ ’3É/// {@template flutter.widgets.editableText.selectionControls}
/// Optional delegate for building the text selection handles and toolbar.
///
/// The [EditableText] widget used on its own will not trigger the display
/// of the selection toolbar by itself. The toolbar is shown by calling
/// [EditableTextState.showToolbar] in response to an appropriate user event.
///
/// See also:
///
///  * [CupertinoTextField], which wraps an [EditableText] and which shows the
///    selection toolbar upon user events that are appropriate on the iOS
///    platform.
///  * [TextField], a Material Design themed wrapper of [EditableText], which
///    shows the selection toolbar upon appropriate user events based on the
///    user's platform set in [ThemeData.platform].
/// {@endtemplate} ¿ ’IÅ¿ ÷WÄÌ/// {@template flutter.widgets.editableText.keyboardType}
/// The type of keyboard to use for editing the text.
///
/// Defaults to [TextInputType.text] if [maxLines] is one and
/// [TextInputType.multiline] otherwise.
/// {@endtemplate} ¿ ÷he¿ ÷æ</// The type of action button to use with the soft keyboard. ¿ ÷“âŒ¿ ‡óâP/// {@template flutter.widgets.editableText.onChanged}
/// Called when the user initiates a change to the TextField's
/// value: when they have inserted or deleted text.
///
/// This callback doesn't run when the TextField's text is changed
/// programmatically, via the TextField's [controller]. Typically it
/// isn't necessary to be notified of such changes, since they're
/// initiated by the app itself.
///
/// To be notified of all changes to the TextField's text, cursor,
/// and selection, one can add a listener to its [controller] with
/// [TextEditingController.addListener].
///
/// [onChanged] is called before [onSubmitted] when user indicates completion
/// of editing, such as when pressing the "done" button on the keyboard. That
/// default behavior can be overridden. See [onEditingComplete] for details.
///
/// {@tool dartpad}
/// This example shows how onChanged could be used to check the TextField's
/// current value each time the user inserts or deletes a character.
///
/// ** See code in examples/api/lib/widgets/editable_text/editable_text.on_changed.0.dart **
/// {@end-tool}
/// {@endtemplate}
///
/// ## Handling emojis and other complex characters
/// {@template flutter.widgets.EditableText.onChanged}
/// It's important to always use
/// [characters](https://pub.dev/packages/characters) when dealing with user
/// input text that may contain complex characters. This will ensure that
/// extended grapheme clusters and surrogate pairs are treated as single
/// characters, as they appear to the user.
///
/// For example, when finding the length of some user input, use
/// `string.characters.length`. Do NOT use `string.length` or even
/// `string.runes.length`. For the complex character "üë®‚Äçüë©‚Äçüë¶", this
/// appears to the user as a single character, and `string.characters.length`
/// intuitively returns 1. On the other hand, `string.length` returns 8, and
/// `string.runes.length` returns 5!
/// {@endtemplate}
///
/// See also:
///
///  * [inputFormatters], which are called before [onChanged]
///    runs and can validate and change ("format") the input value.
///  * [onEditingComplete], [onSubmitted], [onSelectionChanged]:
///    which are more specialized input change notifications.
///  * [TextEditingController], which implements the [Listenable] interface
///    and notifies its listeners on [TextEditingValue] changes. ¿ ‡•É•¿ ‰9É[/// {@template flutter.widgets.editableText.onEditingComplete}
/// Called when the user submits editable content (e.g., user presses the "done"
/// button on the keyboard).
///
/// The default implementation of [onEditingComplete] executes 2 different
/// behaviors based on the situation:
///
///  - When a completion action is pressed, such as "done", "go", "send", or
///    "search", the user's content is submitted to the [controller] and then
///    focus is given up.
///
///  - When a non-completion action is pressed, such as "next" or "previous",
///    the user's content is submitted to the [controller], but focus is not
///    given up because developers may want to immediately move focus to
///    another input widget within [onSubmitted].
///
/// Providing [onEditingComplete] prevents the aforementioned default behavior.
/// {@endtemplate} ¿ ‰OÉñ¿ Á⁄ÉF/// {@template flutter.widgets.editableText.onSubmitted}
/// Called when the user indicates that they are done editing the text in the
/// field.
///
/// By default, [onSubmitted] is called after [onChanged] when the user
/// has finalized editing; or, if the default behavior has been overridden,
/// after [onEditingComplete]. See [onEditingComplete] for details.
///
/// ## Testing
/// The following is the recommended way to trigger [onSubmitted] in a test:
///
/// ```dart
/// await tester.testTextInput.receiveAction(TextInputAction.done);
/// ```
///
/// Sending a `LogicalKeyboardKey.enter` via `tester.sendKeyEvent` will not
/// trigger [onSubmitted]. This is because on a real device, the engine
/// translates the enter key to a done action, but `tester.sendKeyEvent` sends
/// the key to the framework only.
/// {@endtemplate} ¿ ÁÍÑ¿ ÎÌÉø/// {@template flutter.widgets.editableText.onAppPrivateCommand}
/// This is used to receive a private command from the input method.
///
/// Called when the result of [TextInputClient.performPrivateCommand] is
/// received.
///
/// This can be used to provide domain-specific features that are only known
/// between certain input methods and their clients.
///
/// See also:
///   * [performPrivateCommand](https://developer.android.com/reference/android/view/inputmethod/InputConnection#performPrivateCommand\(java.lang.String,%20android.os.Bundle\)),
///     which is the Android documentation for performPrivateCommand, used to
///     send a command from the input method.
///   * [sendAppPrivateCommand](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager#sendAppPrivateCommand),
///     which is the Android documentation for sendAppPrivateCommand, used to
///     send a command to the input method.
/// {@endtemplate} ¿ ÏÄÈ¿ Ï‹ÄÆ/// {@template flutter.widgets.editableText.onSelectionChanged}
/// Called when the user changes the selection of text (including the cursor
/// location).
/// {@endtemplate} ¿ ÏÛs¿ ÌOE/// {@macro flutter.widgets.SelectionOverlay.onSelectionHandleTapped} ¿ Ìkáƒ¿ ı#áR/// {@template flutter.widgets.editableText.onTapOutside}
/// Called for each tap that occurs outside of the[TextFieldTapRegion] group
/// when the text field is focused.
///
/// If this is null, [FocusNode.unfocus] will be called on the [focusNode] for
/// this text field when a [PointerDownEvent] is received on another part of
/// the UI. However, it will not unfocus as a result of mobile application
/// touch events (which does not include mouse clicks), to conform with the
/// platform conventions. To change this behavior, a callback may be set here
/// that operates differently from the default.
///
/// When adding additional controls to a text field (for example, a spinner, a
/// button that copies the selected text, or modifies formatting), it is
/// helpful if tapping on that control doesn't unfocus the text field. In
/// order for an external widget to be considered as part of the text field
/// for the purposes of tapping "outside" of the field, wrap the control in a
/// [TextFieldTapRegion].
///
/// The [PointerDownEvent] passed to the function is the event that caused the
/// notification. It is possible that the event may occur outside of the
/// immediate bounding box defined by the text field, although it will be
/// within the bounding box of a [TextFieldTapRegion] member.
/// {@endtemplate}
///
/// {@tool dartpad}
/// This example shows how to use a `TextFieldTapRegion` to wrap a set of
/// "spinner" buttons that increment and decrement a value in the [TextField]
/// without causing the text field to lose keyboard focus.
///
/// This example includes a generic `SpinnerField<T>` class that you can copy
/// into your own project and customize.
///
/// ** See code in examples/api/lib/widgets/tap_region/text_field_tap_region.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * [TapRegion] for how the region group is determined. ¿ ı4Ç‹¿ ¯Çê/// {@template flutter.widgets.editableText.inputFormatters}
/// Optional input validation and formatting overrides.
///
/// Formatters are run in the provided order when the user changes the text
/// this widget contains. When this parameter changes, the new formatters will
/// not be applied until the next time the user inserts or deletes text.
/// Similar to the [onChanged] callback, formatters don't run when the text is
/// changed programmatically via [controller].
///
/// See also:
///
///  * [TextEditingController], which implements the [Listenable] interface
///    and notifies its listeners on [TextEditingValue] changes.
/// {@endtemplate} ¿ ¯Åÿ¿ ˘‚Åß/// The cursor for a mouse pointer when it enters or is hovering over the
/// widget.
///
/// If this property is null, [SystemMouseCursors.text] will be used.
///
/// The [mouseCursor] is the only property of [EditableText] that controls the
/// appearance of the mouse pointer. All other properties related to "cursor"
/// stands for the text cursor, which is usually a blinking vertical line at
/// the editing position. ¿ ˘ÚÄÍ¿ ˙∆Ä¿/// If true, the [RenderEditable] created by this widget will not handle
/// pointer events, see [RenderEditable] and [RenderEditable.ignorePointer].
///
/// This property is false by default. ¿ ˙·Ç ¿ ¸÷Å—/// {@template flutter.widgets.editableText.cursorWidth}
/// How thick the cursor will be.
///
/// Defaults to 2.0.
///
/// The cursor will draw under the text. The cursor width will extend
/// to the right of the boundary between characters for left-to-right text
/// and to the left for right-to-left text. This corresponds to extending
/// downstream relative to the selected position. Negative values may be used
/// to reverse this behavior.
/// {@endtemplate} ¿ ¸ÊÄÁ¿ ˝¡Ä¬/// {@template flutter.widgets.editableText.cursorHeight}
/// How tall the cursor will be.
///
/// If this property is null, [RenderEditable.preferredLineHeight] will be used.
/// {@endtemplate} ¿ ˝“Ä‘¿ ˛öÄØ/// {@template flutter.widgets.editableText.cursorRadius}
/// How rounded the corners of the cursor should be.
///
/// By default, the cursor has no radius.
/// {@endtemplate} ¿ ˛´Åa¿ ˇ˜Å2/// {@template flutter.widgets.editableText.cursorOpacityAnimates}
/// Whether the cursor will animate from fully transparent to fully opaque
/// during each cursor blink.
///
/// By default, the cursor opacity will animate on iOS platforms and will not
/// animate on Android platforms.
/// {@endtemplate} ¿ V¿ [9///{@macro flutter.rendering.RenderEditable.cursorOffset} ¿ lc¿ ªA///{@macro flutter.rendering.RenderEditable.paintCursorAboveText} ¿ ‘Äª¿{Äà/// Controls how tall the selection highlight boxes are computed to be.
///
/// See [ui.BoxHeightStyle] for details on available styles. ¿îÄ∏¿9Äá/// Controls how wide the selection highlight boxes are computed to be.
///
/// See [ui.BoxWidthStyle] for details on available styles. ¿QÄÆ¿ÌÄÄ/// The appearance of the keyboard.
///
/// This setting is only honored on iOS devices.
///
/// Defaults to [Brightness.light]. ¿ÇÉ¿zÇP/// {@template flutter.widgets.editableText.scrollPadding}
/// Configures padding to edges surrounding a [Scrollable] when the Textfield scrolls into view.
///
/// When this widget receives focus and is not completely visible (for example scrolled partially
/// off the screen or overlapped by the keyboard)
/// then it will attempt to make itself visible by scrolling a surrounding [Scrollable], if one is present.
/// This value controls how far from the edges of a [Scrollable] the TextField will be positioned after the scroll.
///
/// Defaults to EdgeInsets.all(20.0).
/// {@endtemplate} ¿åÇ|¿ÓÇ:/// {@template flutter.widgets.editableText.enableInteractiveSelection}
/// Whether to enable user interface affordances for changing the
/// text selection.
///
/// For example, setting this to true will enable features such as
/// long-pressing the TextField to select text and show the
/// cut/copy/paste menu, and tapping to move the text caret.
///
/// When this is false, the text selection cannot be adjusted by
/// the user, text cannot be copied, and the user cannot paste into
/// the text field from the clipboard.
///
/// Defaults to true.
/// {@endtemplate} ¿Å°¿	éÅd/// Setting this property to true makes the cursor stop blinking or fading
/// on and off once the cursor appears on focus. This property is useful for
/// testing purposes.
///
/// It does not affect the necessity to focus the EditableText for the cursor
/// to appear in the first place.
///
/// Defaults to false, resulting in a typical blinking cursor.¿	©¿	≥e¿
9/// {@macro flutter.widgets.scrollable.dragStartBehavior} ¿
Å0¿=Ä˘/// {@template flutter.widgets.editableText.scrollController}
/// The [ScrollController] to use when vertically scrolling the input.
///
/// If null, it will instantiate a new ScrollController.
///
/// See [Scrollable.controller].
/// {@endtemplate} ¿RÅ„¿(Å™/// {@template flutter.widgets.editableText.scrollPhysics}
/// The [ScrollPhysics] to use when vertically scrolling the input.
///
/// If not specified, it will behave according to the current platform.
///
/// See [Scrollable.physics].
/// {@endtemplate}
///
/// If an explicit [ScrollBehavior] is provided to [scrollBehavior], the
/// [ScrollPhysics] provided by that behavior will take precedence after
/// [scrollPhysics]. ¿:Äı¿ ÄÃ/// {@template flutter.widgets.editableText.scribbleEnabled}
/// Whether iOS 14 Scribble features are enabled for this widget.
///
/// Only available on iPads.
///
/// Defaults to true.
/// {@endtemplate} ¿Xé˘¿DéG/// {@template flutter.widgets.editableText.autofillHints}
/// A list of strings that helps the autofill service identify the type of this
/// text input.
///
/// When set to null, this text input will not send its autofill information
/// to the platform, preventing it from participating in autofills triggered
/// by a different [AutofillClient], even if they're in the same
/// [AutofillScope]. Additionally, on Android and web, setting this to null
/// will disable autofill for this text field.
///
/// The minimum platform SDK version that supports Autofill is API level 26
/// for Android, and iOS 10.0 for iOS.
///
/// Defaults to an empty list.
///
/// ### Setting up iOS autofill:
///
/// To provide the best user experience and ensure your app fully supports
/// password autofill on iOS, follow these steps:
///
/// * Set up your iOS app's
///   [associated domains](https://developer.apple.com/documentation/safariservices/supporting_associated_domains_in_your_app).
/// * Some autofill hints only work with specific [keyboardType]s. For example,
///   [AutofillHints.name] requires [TextInputType.name] and [AutofillHints.email]
///   works only with [TextInputType.emailAddress]. Make sure the input field has a
///   compatible [keyboardType]. Empirically, [TextInputType.name] works well
///   with many autofill hints that are predefined on iOS.
///
/// ### Troubleshooting Autofill
///
/// Autofill service providers rely heavily on [autofillHints]. Make sure the
/// entries in [autofillHints] are supported by the autofill service currently
/// in use (the name of the service can typically be found in your mobile
/// device's system settings).
///
/// #### Autofill UI refuses to show up when I tap on the text field
///
/// Check the device's system settings and make sure autofill is turned on,
/// and there are available credentials stored in the autofill service.
///
/// * iOS password autofill: Go to Settings -> Password, turn on "Autofill
///   Passwords", and add new passwords for testing by pressing the top right
///   "+" button. Use an arbitrary "website" if you don't have associated
///   domains set up for your app. As long as there's at least one password
///   stored, you should be able to see a key-shaped icon in the quick type
///   bar on the software keyboard, when a password related field is focused.
///
/// * iOS contact information autofill: iOS seems to pull contact info from
///   the Apple ID currently associated with the device. Go to Settings ->
///   Apple ID (usually the first entry, or "Sign in to your iPhone" if you
///   haven't set up one on the device), and fill out the relevant fields. If
///   you wish to test more contact info types, try adding them in Contacts ->
///   My Card.
///
/// * Android autofill: Go to Settings -> System -> Languages & input ->
///   Autofill service. Enable the autofill service of your choice, and make
///   sure there are available credentials associated with your app.
///
/// #### I called `TextInput.finishAutofillContext` but the autofill save
/// prompt isn't showing
///
/// * iOS: iOS may not show a prompt or any other visual indication when it
///   saves user password. Go to Settings -> Password and check if your new
///   password is saved. Neither saving password nor auto-generating strong
///   password works without properly setting up associated domains in your
///   app. To set up associated domains, follow the instructions in
///   <https://developer.apple.com/documentation/safariservices/supporting_associated_domains_in_your_app>.
///
/// {@endtemplate}
/// {@macro flutter.services.AutofillConfiguration.autofillHints} ¿VÅ¿LÄ◊/// The [AutofillClient] that controls this input field's autofill behavior.
///
/// When null, this widget's [EditableTextState] will be used as the
/// [AutofillClient]. This property may override [autofillHints]. ¿_v¿…X/// {@macro flutter.material.Material.clipBehavior}
///
/// Defaults to [Clip.hardEdge]. ¿⁄ÇÓ¿"ªÇ∞/// Restoration ID to save and restore the scroll offset of the
/// [EditableText].
///
/// If a restoration id is provided, the [EditableText] will persist its
/// current scroll offset and restore it during state restoration.
///
/// The scroll offset is persisted in a [RestorationBucket] claimed from
/// the surrounding [RestorationScope] using the provided restoration ID.
///
/// Persisting and restoring the content of the [EditableText] is the
/// responsibility of the owner of the [controller], who may use a
/// [RestorableTextEditingController] for that purpose.
///
/// See also:
///
///  * [RestorationManager], which explains how state restoration works in
///    Flutter. ¿"ÕÇˆ¿%µÇ≥/// {@template flutter.widgets.shadow.scrollBehavior}
/// A [ScrollBehavior] that will be applied to this widget individually.
///
/// Defaults to null, wherein the inherited [ScrollBehavior] is copied and
/// modified to alter the viewport decoration, like [Scrollbar]s.
/// {@endtemplate}
///
/// [ScrollBehavior]s also provide [ScrollPhysics]. If an explicit
/// [ScrollPhysics] is provided in [scrollPhysics], it will take precedence,
/// followed by [scrollBehavior], and then the inherited ancestor
/// [ScrollBehavior].
///
/// The [ScrollBehavior] of the inherited [ScrollConfiguration] will be
/// modified by default to only apply a [Scrollbar] if [maxLines] is greater
/// than 1. ¿%»}¿&(R/// {@macro flutter.services.TextInputConfiguration.enableIMEPersonalizedLearning} ¿&JÖÅ¿+ÆÖ/// {@template flutter.widgets.editableText.contentInsertionConfiguration}
/// Configuration of handler for media content inserted via the system input
/// method.
///
/// Defaults to null in which case media content insertion will be disabled,
/// and the system will display a message informing the user that the text field
/// does not support inserting media content.
///
/// Set [ContentInsertionConfiguration.onContentInserted] to provide a handler.
/// Additionally, set [ContentInsertionConfiguration.allowedMimeTypes]
/// to limit the allowable mime types for inserted content.
///
/// {@tool dartpad}
///
/// This example shows how to access the data for inserted content in your
/// `TextField`.
///
/// ** See code in examples/api/lib/widgets/editable_text/editable_text.on_content_inserted.0.dart **
/// {@end-tool}
///
/// If [contentInsertionConfiguration] is not provided, by default
/// an empty list of mime types will be sent to the Flutter Engine.
/// A handler function must be provided in order to customize the allowable
/// mime types for inserted content.
///
/// If rich content is inserted without a handler, the system will display
/// a message informing the user that the current text input does not support
/// inserting rich content.
/// {@endtemplate} ¿+–ÜR¿2Ö”/// {@template flutter.widgets.EditableText.contextMenuBuilder}
/// Builds the text selection toolbar when requested by the user.
///
/// `primaryAnchor` is the desired anchor position for the context menu, while
/// `secondaryAnchor` is the fallback location if the menu doesn't fit.
///
/// `buttonItems` represents the buttons that would be built by default for
/// this widget.
///
/// {@tool dartpad}
/// This example shows how to customize the menu, in this case by keeping the
/// default buttons for the platform but modifying their appearance.
///
/// ** See code in examples/api/lib/material/context_menu/editable_text_toolbar_builder.0.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This example shows how to show a custom button only when an email address
/// is currently selected.
///
/// ** See code in examples/api/lib/material/context_menu/editable_text_toolbar_builder.1.dart **
/// {@end-tool}
///
/// See also:
///   * [AdaptiveTextSelectionToolbar], which builds the default text selection
///     toolbar for the current platform, but allows customization of the
///     buttons.
///   * [AdaptiveTextSelectionToolbar.getAdaptiveButtons], which builds the
///     button Widgets for the current platform given
///     [ContextMenuButtonItem]s.
///   * [BrowserContextMenu], which allows the browser's context menu on web
///     to be disabled and Flutter-rendered context menus to appear.
/// {@endtemplate}
///
/// If not provided, no context menu will be shown. ¿2'Çß¿4∑ÇX/// {@template flutter.widgets.EditableText.spellCheckConfiguration}
/// Configuration that details how spell check should be performed.
///
/// Specifies the [SpellCheckService] used to spell check text input and the
/// [TextStyle] used to style text with misspelled words.
///
/// If the [SpellCheckService] is left null, spell check is disabled by
/// default unless the [DefaultSpellCheckService] is supported, in which case
/// it is used. It is currently supported only on Android and iOS.
///
/// If this configuration is left null, then spell check is disabled by default.
/// {@endtemplate} ¿4”Å¿5≈Ä∆/// {@macro flutter.widgets.magnifier.TextMagnifierConfiguration.intro}
///
/// {@macro flutter.widgets.magnifier.intro}
///
/// {@macro flutter.widgets.magnifier.TextMagnifierConfiguration.details} ¿ ®XÖÊ¿ ≠éÑˆ/// {@template flutter.widgets.editableText.strutStyle}
/// The strut style used for the vertical layout.
///
/// [StrutStyle] is used to establish a predictable vertical layout.
/// Since fonts may vary depending on user input and due to font
/// fallback, [StrutStyle.forceStrutHeight] is enabled by default
/// to lock all lines to the height of the base [TextStyle], provided by
/// [style]. This ensures the typed text fits within the allotted space.
///
/// If null, the strut used will inherit values from the [style] and will
/// have [StrutStyle.forceStrutHeight] set to true. When no [style] is
/// passed, the theme's [TextStyle] will be used to generate [strutStyle]
/// instead.
///
/// To disable strut-based vertical alignment and allow dynamic vertical
/// layout based on the glyphs typed, use [StrutStyle.disabled].
///
/// Flutter's strut is based on [typesetting strut](https://en.wikipedia.org/wiki/Strut_(typesetting))
/// and CSS's [line-height](https://www.w3.org/TR/CSS2/visudet.html#line-height).
/// {@endtemplate}
///
/// Within editable text and text fields, [StrutStyle] will not use its standalone
/// default values, and will instead inherit omitted/null properties from the
/// [TextStyle] instead. See [StrutStyle.inheritFromTextStyle].   ¿4Å ¿%Ä€/// {@template flutter.widgets.editableText.selectionEnabled}
/// Same as [enableInteractiveSelection].
///
/// This getter exists primarily for consistency with
/// [RenderEditable.selectionEnabled].
/// {@endtemplate}   ¿5‡\¿5È    ¿6@ä¿9‡ÉZ/// Returns the [ContextMenuButtonItem]s representing the buttons in this
/// platform's default selection menu for an editable field.
///
/// For example, [EditableText] uses this to generate the default buttons for
/// its context menu.
///
/// See also:
///
/// * [EditableTextState.contextMenuButtonItems], which gives the
///   [ContextMenuButtonItem]s for a specific EditableText.
/// * [SelectableRegion.getSelectableButtonItems], which performs a similar
///   role but for content that is selectable but not editable.
/// * [AdaptiveTextSelectionToolbar], which builds the toolbar itself, and can
///   take a list of [ContextMenuButtonItem]s with
///   [AdaptiveTextSelectionToolbar.buttonItems].
/// * [AdaptiveTextSelectionToolbar.getAdaptiveButtons], which builds the button
///   Widgets for the current platform given [ContextMenuButtonItem]s. ¿9˝/¿:  ¿:2#¿:P  ¿:["¿:y  ¿:É$¿:°  ¿:≠(¿:À  ¿:€,¿:˘   ¿@êûm¿@•  ¿@æ(¿@⁄  ¿@Ï¿@˚   ¿_C¿_   ¿_¿_¿_Håv¿_Y  ¿_m&¿_ä  ¿_H¿_I ¿k¬¿´¿kË/// State for a [EditableText].  .¿lÕ¿l‘  ¿m¶9¿mª  ¿m„`¿m˘ ¿n¿n0¿n1¿nA¿nB¿nHO¿nb ¿n~¿nã¿nê¿nå¿në¿nñ¿ní¿nõ*¿n´ ¿n∫¿n√¿nƒ¿n x¿o,/// Detects whether the clipboard can paste.¿o)¿o@¿oA¿oGÅ	¿pÄì/// Detects whether the Live Text input is enabled.
///
/// See also:
///  * [LiveText], where the availability of Live Text input can be obtained.¿p*¿p1¿p#¿p,¿p3¿pN¿pO¿pU)¿pj  ¿pŒ'¿p‰  ¿p˙,¿q
 ¿q¿q$¿q%¿q*+¿q<  ¿q’/¿qÂ ¿q˘¿r¿r¿r3¿r ¿r0¿r9¿r:¿r?1¿rO ¿re¿rn¿ro¿ru¿rz ¿rä¿rî)¿r®  ¿sc5¿sÄ  ¿sú¿s´  ¿v8ÅN¿wuÅ/// The most up-to-date spell check results for text input.
///
/// These results will be updated via calls to spell check through a
/// [SpellCheckService] and used by this widget to build the [TextSpan] tree
/// for text input and menus for replacement suggestions of misspelled words. ¿{%L¿{; ¿{V¿{^¿{p¿{k¿{_¿{m¿{v3¿{ã  ¿{Æ¿{ª  ¿øn¿øs ¿øÖ¿÷ΩÇ¿ÿ®Å∆/// The last known [TextEditingValue] of the platform text input plugin.
///
/// This value is updated when the platform text input plugin sends a new
/// update via [updateEditingValue], or when [EditableText] calls
/// [TextInputConnection.setEditingState] to overwrite the platform text input
/// plugin's [TextEditingValue].
///
/// Used in [_updateRemoteEditingValueIfNeeded] to determine whether the
/// remote value is outdated and needs updating. ¿Ï◊¿Ï›  ¿ÌO¿Ì]  ¿ÌΩ¿Ì≈  ¿Ó¿Ó  ¿¿ ¿/¿#ª(¿#¿ ¿#ﬁ¿,S'¿,X ¿,u¿?èK¿?• ¿?ø¿?«¿?Ÿ¿?‘¿?»¿?÷¿?ﬁ>¿?Ò ¿@¿@¿@¿@!(¿@& ¿@D¿M ¿M  ¿fm$¿fq ¿fê¿fï¿fö  ¿|$¿|  ¿åFÅ&¿çÄ∞/// The renderer for this widget's descendant.
///
/// This property is typically used to notify the renderer of input gestures
/// when [RenderEditable.ignorePointer] is true.¿ç[¿çY¿çE¿ç*¿ç6¿ç7¿çF¿çG¿çW¿çX¿ç^¿£2¿£6 ¿£M¿£N¿¨ƒ"¿¨œ  ¿∆Äì¿∆E 	¿∆b¿∆p¿∆ä¿∆q¿∆ã¿∆™¿∆î¿∆å¿∆ñ¿…*s¿…O 	¿…d¿…r¿…Ñ¿…s¿…Ö¿…ú¿…é¿…Ü¿…ê¿ÿ]ÄÉ¿ÿÜ 	¿ÿü¿ÿ≠¿ÿ√¿ÿÆ¿ÿƒ¿ÿﬂ¿ÿÕ¿ÿ≈¿ÿœ¿ÿÂÄ¡¿Ÿ5 ¿Ÿ\¿ŸÄ¿Ÿü¿ŸÅ¿Ÿ†¿Ÿ•¿Ÿ°¿ﬂqéÛ¿ﬂñ ÅO¿ﬂ∑¿Óc¿ﬂ°¿ﬂ∂¿ﬂ¢¿ﬂ®¿ﬂÆ¿ﬂµ¿ﬂØ¿ﬂ‚¿ﬂΩ¿ﬂ‰¿ﬂÛ¿‡¿ﬂˇ¿ﬂÙ¿‡¿‡¿‡¿‡ ¿‡M¿‡8¿‡O¿‡Å¿‡k¿‡É¿‡ô¿‡ö¿‡¶¿‡ß¿‡ª¿‡Æ¿‡Ω¿‡À¿‡Ÿ¿‡Ã¿‡⁄¿‡˙¿‡„¿‡€¿‡Â¿·%¿·¿·'¿·7¿·ì¿·8¿·I¿·_¿·J¿·`¿·í¿·a¿·g¿·{¿·∏¿·ö¿·∫¿· ¿‚.¿·À¿·‹¿·˚¿·›¿·¸¿‚-¿·˝¿‚¿‚¿‚L¿‚5¿‚N¿‚^¿‚∞¿‚_¿‚p¿‚à¿‚q¿‚â¿‚Ø¿‚ä¿‚ê¿‚ú¿‚ı¿‚’¿‚˜¿„¿„õ¿„¿„"¿„C¿„#¿„D¿„ö¿„E¿„K¿„_¿„ì¿„x¿„ï¿„Ω¿„¢¿„ø¿„œ¿‰¿„–¿„ﬁ¿„˙¿„ﬂ¿„˚¿‰¿‰¿„¸¿‰¿‰K¿‰$¿‰M¿‰]¿‰ˆ¿‰^¿‰x¿‰†¿‰y¿‰°¿‰ı¿‰¢¿‰®¿‰ª¿‰Ô¿‰‘¿‰Ò¿Â*¿‰˝¿Â,¿Â<¿Â€¿Â=¿ÂW¿ÂÑ¿ÂX¿ÂÖ¿Â⁄¿ÂÜ¿Âå¿Â†¿Â‘¿Âπ¿Â÷¿Ê¿Â‚¿Ê¿Ê¿Êõ¿Ê¿Ê/¿ÊP¿Ê0¿ÊQ¿Êö¿ÊR¿ÊX¿Êd¿Êî¿Êy¿Êñ¿Êœ¿Ê¢¿Ê—¿Ê·¿Á ¿Ê‚¿Á4¿Á¿Á6¿ÁF¿Áe¿ÁG¿Áß¿Ál¿Á©¿Áπ¿Ëg¿Á∫¿Á‘¿Ë¿Á’¿Ë¿Ëf¿Ë¿Ë¿Ë,¿Ë`¿ËE¿Ëb¿Ëï¿Ën¿Ëó¿Ëß¿È@¿Ë®¿Ë¬¿ËÍ¿Ë√¿ËÎ¿È?¿ËÏ¿ËÚ¿È¿È9¿È¿È;¿È}¿ÈG¿È¿Èè¿Í7¿Èê¿È™¿È·¿È´¿È‚¿Í6¿È„¿ÈÈ¿È¸¿Í0¿Í¿Í2¿Í\¿Í>¿Í^¿Ín¿Í¬¿Ío¿Í}¿Íú¿Í~¿Íù¿Í¡¿Í¶¿Íû¿Í®¿Í’¿Í…¿Í◊¿ÍÂ¿ÍÚ¿ÍÊ¿ÍÛ¿Î¿Í¸¿ÍÙ¿Í˛¿ÎE¿Î%¿ÎG¿ÎW¿ÎÓ¿ÎX¿Îr¿Îì¿Îs¿Îî¿ÎÌ¿Îï¿Îõ¿Îß¿Î◊¿Îº¿ÎŸ¿ÎÁ¿Îﬂ¿ÎÈ¿Ï¿Îı¿Ï¿Ï.¿ÏË¿Ï/¿ÏI¿Ïq¿ÏJ¿Ïr¿ÏÁ¿Ïs¿Ïy¿Ïå¿Ïº¿Ï°¿Ïæ¿ÏÃ¿Ïƒ¿ÏŒ¿Ï·¿Ï‘¿Ï„¿Ì¿Ì¿Ì¿Ì'¿Ì>¿Ì(¿Ì8¿Ì=¿Ì9¿Ì\¿ÌE¿Ì^¿Ìn¿Ìâ¿Ìo¿ÌÉ¿Ìà¿ÌÑ¿Ìü¿Ìê¿Ì°¿Ì±¿Ó¿Ì≤¿Ì¿¿Ì–¿Ì¡¿Ì—¿Ó¿Ì⁄¿Ì“¿Ì‹¿Ó¿Ó1¿Ó¿Ó3¿ÓC¿Ó^¿ÓD#¿l‰Äø¿l¸    ¿pÇH¿pã    ¿qYx¿qn    ¿r¡M¿r‡   ¿r¡¿r¬¿sM¿s%    ¿s∂Åó¿uÅ#/// Configuration that determines how spell check will be performed.
///
/// If possible, this configuration will contain a default for the
/// [SpellCheckService] if it is not otherwise specified.
///
/// See also:
///  * [DefaultSpellCheckService], the spell check service used by default.  ¿tË¿tÈ¿uQÄ„¿uÙÄë/// Whether or not spell check is enabled.
///
/// Spell check is enabled when a [SpellCheckConfiguration] has been specified
/// for the widget.   ¿wãÄá¿wî    ¿xÇÉ¿z^Ç$/// Whether to create an input connection with the platform for text editing
/// or not.
///
/// Read-only input fields do not need a connection with the platform since
/// there's no need for text editing capabilities (e.g. virtual keyboard).
///
/// On the web, we always need a connection because we want some browser
/// functionalities to continue to work on read-only input fields like:
///
/// - Relevant context menu.
/// - cmd/ctrl+c shortcut to copy.
/// - cmd/ctrl+a to select all.
/// - Changing the selection using a physical keyboard.   ¿{–@¿{Â   ¿{–¿{—¿|^¿|    ¿|vÅ1¿|ã   ¿|v¿|w¿}´Å¿}¿   ¿}´¿}¨¿~≤Å¿~«   ¿~≤¿~≥¿¬É©¿◊   ¿¬¿√¿ÉoÄ„¿ÉÑ   ¿Éo¿Ép¿ÖzÅ¿Öè    ¿≤åÉ‘¿≥”Å/// {@template flutter.widgets.EditableText.getAnchors}
/// Returns the anchor points for the default context menu.
/// {@endtemplate}
///
/// See also:
///
///  * [contextMenuButtonItems], which provides the [ContextMenuButtonItem]s
///    for the default context menu buttons.   ¿∂dÜ{¿∫Ég/// Returns the [ContextMenuButtonItem]s representing the buttons in this
/// platform's default selection menu for [EditableText].
///
/// See also:
///
/// * [EditableText.getEditableButtonItems], which performs a similar role,
///   but for any editable field, not just specifically EditableText.
/// * [SelectableRegionState.contextMenuButtonItems], which performs a similar
///   role but for content that is selectable but not editable.
/// * [contextMenuAnchors], which provides the anchor points for the default
///   context menu.
/// * [AdaptiveTextSelectionToolbar], which builds the toolbar itself, and can
///   take a list of [ContextMenuButtonItem]s with
///   [AdaptiveTextSelectionToolbar.buttonItems].
/// * [AdaptiveTextSelectionToolbar.getAdaptiveButtons], which builds the
///   button Widgets for the current platform given [ContextMenuButtonItem]s.   ¿ÿÕC¿ÿÓ   ¿ÿÕ¿ÿŒ¿ÔV¿Ô#    ¿ 7¿    ¿:M¿>  ¿E¿W   ¿ã0¿î    ¿æ.¿«    ¿QÄ»¿πZ/// Whether to send the autofill information to the autofill service. True by
/// default.   ¿cor¿cx    ¿cÂÄ·¿dÑ|/// Whether the blinking cursor is actually visible at this precise moment
/// (it's hidden half the time, since it blinks).  ¿df¿dg¿d Å¿e©Ä∂/// The cursor blink interval (the amount of time the cursor is in the "on"
/// state or the "off" state). A complete cursor blink period is twice this
/// value (half on, half off).  ¿eá¿eà¿e‹Äç¿fC5/// The current status of the text selection handles.  ¿f¿f¿ãÎW¿ã˝    ¿çq<¿çí   ¿çq¿çr¿ç±G¿çº    ¿¶{>¿¶í   ¿¶{¿¶|¿¶ΩÖÑ¿¶‰   ¿¶Ω¿¶æ^¿ÑVÄä¿Ñ[    ¿Ñ‰Äí¿ÑÈ    ¿ÜäÑÖ¿Ü»*/// Copy current selection to [Clipboard]. ¿Ü÷¿ÜÌ  ¿Ü∑¿Ü∏¿ãÉA¿ãP)/// Cut current selection to [Clipboard]. ¿ã]¿ãt  ¿ã?¿ã@¿éXÖ¿éî /// Paste text from [Clipboard]. ¿éû¿éµ  ¿é{¿é|¿ì_Ñ|¿ìî!/// Select the entire text value. ¿ìû¿ìµ  ¿ìÉ¿ìÑ¿óﬂÅ¿ó‰  ¿ó¯¿ò   ¿òÍÖh¿öDÅ9/// Finds specified [SuggestionSpan] that matches the provided index using
/// binary search.
///
/// See also:
///
///  * [SpellCheckSuggestionsToolbar], the Material style spell check
///    suggestions toolbar that uses this method to render the correct
///    suggestions in the toolbar for a misspelled word. ¿öd¿öi   ¿ûVáb¿ü:Äº/// Infers the [SpellCheckConfiguration] used to perform spell check.
///
/// If spell check is enabled, this will try to infer a value for
/// the [SpellCheckService] if left unspecified. ¿üX&¿ür   ¿•ºÖÜ¿¶≠H/// Returns the [ContextMenuButtonItem]s for the given [ToolbarOptions]. ¿¶À¿¶‹  ¿¶¿¶¿¶¿¶å¿¶¿¶U¿´FáB¿´øf/// Gets the line heights at the start and end of the selection for the given
/// [EditableTextState].   ¿º˙Å˛¿Ω   ¿º˙¿º˚¿øéá?¿øü   ¿øé¿øè¿∆—ã¿∆‚  ¿∆Ú¿«   ¿∆—¿∆“¿“TÑ?¿“e   ¿“T¿“U¿ŸåH¿Ÿ%  ¿Ÿ8¿ŸJ  ¿Ÿ¿Ÿ¿Â`Åj¿Âe  ¿Â¿Âë   ¿ÊŒÑ1¿Êﬂ  ¿ÊÌ¿Ê˛  ¿ÊŒ¿Êœ¿ÎÄä¿Î  ¿Î*¿Î2  ¿Î9¿ÎO  ¿Î¿Î¿ÎëÄ¯¿Î¢  ¿Î∞¿Î…  ¿Îë¿Îí¿Ôràá¿ÔÉ  ¿Ôò¿Ô∞  ¿Ôr¿Ôs¿˜˝à~¿¯    ¿ äñ¿ ±  ¿ ¬¿ ”  ¿ €¿ Í  ¿ ¿ Ä¿ Ü¿ ®¿ á¿5Åà¿çÅF/// Begins a new batch edit, within which new updates made to the text editing
/// value will not be sent to the platform text input plugin.
///
/// Batch edits nest. When the outermost batch edit finishes, [endBatchEdit]
/// will attempt to send [currentTextEditingValue] to the text input plugin if
/// it detected a change.   ¿¡Å÷¿¬ÄÒ/// Ends the current batch edit started by the last call to [beginBatchEdit],
/// and send [currentTextEditingValue] to the text input plugin if needed.
///
/// Throws an error in debug mode if this [EditableText] is not in a batch
/// edit.   ¿õÅa¿†    ¿á]¿ˇ  ¿	¿   ¿yÜ/¿~    ¿!¨Å¿!±    ¿"µÅ¿"∫    ¿#ÁÄΩ¿#Ï    ¿%¿É®¿%≈    ¿)mÄŒ¿)~  ¿)î¿)ß  ¿)≤¿)≈  ¿)m¿)n¿*?Ål¿*P   ¿*?¿*@¿,·ÄÉ¿,Ê    ¿-hÄâ¿-m    ¿-ıÇâ¿/ëÅà/// Express interest in interacting with the keyboard.
///
/// If this control is already attached to the keyboard, this function will
/// request that the keyboard become visible. Otherwise, this function will
/// ask the focus system that it become focused. If successful in acquiring
/// focus, the control will then attach to the keyboard and request that the
/// keyboard become visible.   ¿0ÇÅ¿0á    ¿1áf¿1å    ¿1ÒÉÌ¿2    ¿5‚âd¿6  ¿6,¿6;  ¿6E¿6]  ¿5‚¿5„¿5È¿6¿5Í¿@Nå≤¿@S  ¿@o¿@~   ¿M)Çò¿M:   ¿M)¿M*¿O≈É˝¿O“  ¿OÂ¿OÛ   ¿S∆ãc¿S¯  ¿T¿T  ¿T#¿T;  ¿TB¿TH  ¿S∆¿S«¿SÕ¿SÔ¿SŒ¿TY¿_-ÉQ¿_2  ¿_Q¿_`  ¿_m¿_|  ¿_â¿_°   ¿bÇÄÈ¿bá    ¿f∂ÇÜ¿fª    ¿i@Éô¿iE    ¿l›ÄÁ¿l‚  ¿lı¿l˚  ¿m¿m»ÄÆ¿mÕ    ¿nzÉŒ¿n    ¿rLÉ"¿rQ    ¿urÇí¿uÅ    ¿xÅâ¿x  ¿x ¿x'   ¿yÒÄ⁄¿yˆ    ¿zœÅ2¿z‘  ¿z˘¿{   ¿|-ä;¿|2  ¿|I¿|O  ¿|V¿á„ÇZ¿áË    ¿äAÅ¶¿äF    ¿ç¸É’¿é  ¿é(¿é:  ¿é@¿éX  ¿ç¸¿ç˝¿ë’Å?¿ëÊ  ¿ëÙ¿í  ¿ë’¿ë÷¿ìÉÜ¿îÄŸ/// Shows the selection toolbar at the location of the current cursor.
///
/// Returns `false` if a toolbar couldn't be shown, such as when the toolbar
/// is already shown, or when no text selection currently exists.  ¿ì˙¿ì˚¿ñ¢ÅA¿ñ≥  ¿ñ¿¿ñ∆  ¿ñ¢¿ñ£¿ñ”¿óÁÅ9¿ò*/// Toggles the visibility of the toolbar. ¿ò(¿ò.  ¿ò;¿ô$Ö∂¿ôûp/// Shows toolbar with spell check suggestions of misspelled words that are
/// available for click-and-replace.   ¿ûﬁÇ~¿†BÅN/// Shows the magnifier at the position given by `positionToShow`,
/// if there is no magnifier visible.
///
/// Updates the magnifier to the position given by `positionToShow`,
/// if there is a magnifier visible.
///
/// Does nothing if a magnifier couldn't be shown, such as when the selection
/// overlay does not currently exist. ¿†P¿†X   ¿°`Ä·¿°ë)/// Hides the magnifier if it is visible.   ¿£TÅ!¿£e  ¿£{	¿£Å  ¿£T¿£U¿§yÄø¿§ä   ¿§y¿§z¿•<Å;¿•M  ¿•]¿•e  ¿•<¿•=¿¨EO¿¨V  ¿¨_¿¨q  ¿¨E¿¨F¿¨ÎÄ§¿¨¸  ¿≠	¿≠  ¿≠$¿≠)  ¿¨Î¿¨Ï¿≠ìÅ©¿≠°  ¿≠≤¿≠    ¿Ø@Å£¿ØN  ¿Ø^¿Øv   ¿∞ÁÅÍ¿∞ı  ¿±¿±   ¿≥êÇd¿≥ù  ¿≥µ¿≥√  ¿≥ ¿≥–  ¿≥ÿ¿≥Ê   ¿∑≤ÜH¿∑ø  ¿∑”¿∑·  ¿∑Ë¿∑Ó  ¿∑ˆ¿∏   ¿æQ{¿æ^    ¿æœÄÄ¿æ‹    ¿øRe¿ø_    ¿ø∫D¿ø«    ¿¿B¿¿    ¿¿GÄù¿¿Q ¿¿b¿¿b¿¿t¿¿   ¿¿ËÖ-¿¬Å/// Transpose the characters immediately before and after the current
/// collapsed selection.
///
/// When the cursor is at the end of the text, transposes the last two
/// characters, if they exist.
///
/// When the cursor is at the start of the text, does nothing. ¿¬ ¿¬7   ¿∆∞Çw¿∆µ  ¿∆¬¿∆’   ¿ ÄÎ¿   ¿ 1%¿ Q   ¿ÀÑ¿ÀaV/// Handles [ScrollIntent] by scrolling the [Scrollable] inside of
/// [EditableText]. ¿Ài¿Àw   ¿œàH¿œåf/// Extend the selection down by page if the `forward` parameter is true, or
/// up by page otherwise. ¿œ£"¿œ¿   ¿◊hÄÚ¿◊m  ¿◊~¿◊ï   ¿Ÿ´Ä–¿Ÿ≥  ¿Ÿ…¿Ÿÿ   ¿⁄ÄÑÌ¿€Äç/// The default behavior used if [onTapOutside] is null.
///
/// The `event` argument is the [PointerDownEvent] that caused the notification. ¿€.¿€@   ¿ÓiúC¿Ó|  ¿ÓÇ¿Óê  ¿Ói¿Ój¿
∞å¿ÑÄ¬/// Builds [TextSpan] from current editing value.
///
/// By default makes text in composing range appear as underlined.
/// Descendants can override this method to customize appearance of text.    ¿œñ±¿’  ¿Ö" ¿¿ '¿	¿  ¿'¿6  ¿E¿T  ¿^"¿m  ¿Ü ¿ï  ¿¨¿≤  ¿¬¿»  ¿‚¿Ò  ¿ ¿  ¿¿,  ¿9¿?  ¿V¿e  ¿x¿á  ¿î¿£  ¿∞¿∂  ¿√¿“  ¿ﬁ¿‰  ¿Û¿˘  ¿¿  ¿/¿>  ¿L¿[  ¿m¿s  ¿~ ¿ç  ¿§¿≥  ¿√¿“  ¿›#¿„  ¿¿  ¿%¿+  ¿<¿B  ¿S¿b  ¿s"¿Ç  ¿õ3¿°  ¿‘1¿⁄  ¿&¿  ¿7#¿F  ¿`¿o  ¿Ñ¿ä  ¿û¿§  ¿∏¿«  ¿˚¿∑¿π¿∫¿»¿…¿Ô¿Ò¿Ú¿ˇ¿ ¿-¿€¿‡¿(¿È¿·¿Î¿ı¿ˆ¿¿'¿¿&¿.¿?  ¿M¿d  ¿m¿z  ¿â$¿ô  ¿±"¿¡  ¿◊"¿‰  ¿˝$¿  ¿%¿0  ¿=¿H  ¿T¿_  ¿k¿v  ¿Ç¿ç  ¿ô¿§  ¿Ø¿¡  ¿œ¿‹  ¿Ó¿˚  ¿¿  ¿+!¿?  ¿P¿^  ¿h¿u  ¿ã¿ñ  ¿•,¿ø  ¿’#¿Í  ¿¸¿  ¿!¿&  ¿@¿M  ¿\¿j  ¿z¿à  ¿ò¿•  ¿µ¿¿  ¿ÿ,¿  ¿ *¿   ¿ 6%¿ A  ¿ _1¿ {  ¿ î¿ °  ¿ µ ¿ ∆  ¿ Ÿ¿ Ê  ¿ ˘¿!   ¿!Ü
¿!0  ¿!C¿!Q  ¿!¿!¿'#Ü[¿'4  ¿'G¿'U  ¿']¿'m  ¿'#¿'$ ¿-ÇÖä¿-ì  ¿-™Å4 ¿-∞¿-¡ 	¿-»¿-◊  ¿-Ê¿-ı  ¿.¿.  ¿.$¿.3  ¿.G ¿.V  ¿.m¿.|  ¿.á¿.ñ  ¿.¶¿.µ  ¿.≈¿.‘   	¿.‚¿.Ú  ¿.ˇ!¿/  ¿/$¿/1  ¿/D,¿/^  ¿/t¿/Ç  ¿/å¿/ù  ¿/¨¿/∂  ¿/≈¿/–  ¿/ÿ¿/È   ¿/¯É¿0	  ¿0¿0$   ¿-Ç¿-É¿3Å’¿3  ¿3BÄ∏ ¿3H¿3Z ¿3a¿3p  ¿3z¿3â  ¿3ó¿3¶  ¿3∂"¿3≈  ¿3ﬁ¿3Ì   ¿3˛¿4  ¿4¿4$  ¿41¿4A  ¿4P'¿4c  ¿4{¿4Ü   ¿4íO¿4∂   ¿4í¿4ì ¿4Ââ¿4Î  ¿5CV ¿5C¿5Z  
¿5q¿5^¿5s¿5å¿5ä¿5t¿5ç¿5é¿5ñ¿5ó¿8%¿8ä ¿8£¿8®¿8µ  ¿8o¿8     ¿8Ã?¿8„   ¿8Ã¿8Õ¿<BÅW¿<W   ¿<B¿<C¿5ùÄõ¿5Æ   ¿5ù¿5û¿6<ÅW¿6M  ¿6]¿6q  ¿6<¿6=¿7óq¿7®   ¿7ó¿7ò¿9Äÿ¿9   ¿90¿98  ¿9¿9¿9ÎÇS¿9¸  ¿:	¿:  ¿9Î¿9Ï¿=ùM¿=∞  ¿=∂¿=ƒ  ¿=ù¿=û ¿=ÓÇ‹¿=Ù  ¿> T ¿>&¿>: ¿>A¿>Q  ¿>[¿>j   ¿>xl¿>‡Z/// The size of the span, used in place of adding a placeholder size to the [TextPainter].  ¿>ÈÅﬂ¿>˙  ¿? ¿?  ¿?¿?'  ¿?='¿?[  ¿>È¿>Í¿?8 ¿@Ãàç¿DtÉ´/// A text boundary that uses code points as logical boundaries.
///
/// A code point represents a single character. This may be smaller than what is
/// represented by a user-perceived character, or grapheme. For example, a
/// single grapheme (in this case a Unicode extended grapheme cluster) like
/// "üë®‚Äçüë©‚Äçüë¶" consists of five code points: the man emoji, a zero
/// width joiner, the woman emoji, another zero width joiner, and the boy emoji.
/// The [String] has a length of eight because each emoji consists of two code
/// units.
///
/// Code units are the units by which Dart's String class is measured, which is
/// encoded in UTF-16.
///
/// See also:
///
///  * [String.runes], which deals with code points like this class.
///  * [String.characters], which deals with graphemes.
///  * [CharacterBoundary], which is a [TextBoundary] like this class, but whose
///    boundaries are graphemes instead of code points. ¿D†% ¿D¶¿D∏ ¿Dπ
¿Dø   ¿D…¿D÷   ¿E1Å ¿E6  ¿EK¿EP   ¿F5ÅÉ¿FF  ¿F_¿Fd  ¿F5¿F6¿GºÅõ¿GÕ  ¿GÁ¿GÏ  ¿Gº¿GΩ ¿I¨Ü˝¿I≤ ¿Iƒ&¿Iƒ¿J	M ¿J	¿J ¿J
¿J!  ¿J'¿J-  ¿J=¿JC   ¿JZ¿Jr  ¿J{-¿Jô  ¿J¨+¿J≈  ¿PFa¿P[   ¿PF¿PG¿J‹Öf¿J  ¿J˜¿J˙  ¿K¿K  ¿J‹¿J› ¿P´é\¿P± ¿PÃ(¿PÃ¿QÄ” ¿Q¿Q- ¿Q3
¿Q9  ¿QC¿QI  ¿Q]¿Qc  ¿Q{)¿Qä  ¿Q™¿Q∞  ¿Q≈¿QÀ  ¿Q∫¿Q⁄¿QÍ¿R  ¿R&¿R  ¿R5¿R@  ¿RL¿RW  ¿Rh-¿RÜ  ¿Rô*¿R≤  ¿R»'¿RŸ ¿RÌ¿^æG¿^”   ¿^æ¿^ø¿SVÅz¿S[  ¿Sq¿S   ¿U4Å@¿U9  ¿UQ¿U_   ¿VxàB¿Vå  ¿Vì¿Vñ  ¿Vû¿V≠  ¿Vx¿Vy ¿_	âı¿_ ¿_4(¿_4¿_{1 ¿_{¿_ü ¿_†
¿_¶   ¿_∞¿_»  ¿_“.¿_Ï  ¿`¿`  ¿hµG¿h    ¿hµ¿h∂¿`%Ç»¿`*    ¿bÒÖ¿¿c  ¿c	¿c  ¿c¿c#  ¿bÒ¿bÚ ¿i Å¸¿i  ¿iF ¿iF¿iV ¿iW
¿i]   ¿ig¿i  ¿j¥F¿j…   ¿j¥¿jµ¿iâÅ'¿iù  ¿i§¿iπ  ¿i¡¿i–  ¿iâ¿iä ¿j˛ÅÁ¿k  ¿kL! ¿kL¿k` ¿ka
¿kg   ¿kq¿kâ  ¿lun¿lä   ¿lu¿lv¿kìÄﬁ¿k§  ¿k´¿kƒ  ¿kÃ¿k€  ¿kì¿kî ¿lÁÅ*¿m3:/// The start and end glyph heights of some range of text. ¿mEK ¿mK¿mX ¿m_¿mn  ¿mx¿má   ¿mî<¿mÀ'/// The glyph height of the first line. ¿m’9¿n&/// The glyph height of the last line.   ¿m"¿m#      áÄ›áõt/// Signature for the callback that reports when the user changes the selection
/// (including the cursor location).  áƒá”  á›áı   á˝ÄùàRL/// Signature for the callback that reports the app private command results.  à|   àÑ    àúÅ_âàÄ„/// Signature for a widget builder that builds a context menu for the given
/// [EditableTextState].
///
/// See also:
///
///  * [SelectableRegionContextMenuBuilder], which performs the same role for
///    [SelectableRegion].  âºâ   â‘#âÁ   äÖUäç   ä∏   ä∆   äÃ     ãùDã¨ ã∆ãŒã‡ã€ãœã›åV0å` åÖåâÅGç6Äô/// The default mime types to be used when allowedMimeTypes is not provided.
///
/// The default value supports inserting images of any supported format.çbçœçZçaç[çfçuçÑçìç£ç≤ç¬  ïQ <ÄÜÄ§Ä•Ä∫Ä÷Ä˝Ä˛ÅQÅ{Å∫Å„ÇÇ4Ç5ÇLÇdÇàÇùÇ¥ÇÕÇıÉ
É1É_É|ÉóÉ∂ÉœÉÏÑÑ ÑDÑeÑÉÑ¢ÑºÑﬁÑ˜ÖÖ,Ö@ÖdÖÇÖ∞ÖœÖÎÖˇÜÜÜ…Ü Ü‚á ááánáìá¸á˝àJàõàúàËâââââeâÄâ∫â“â˘â¸â˝äJäÖä€ä‹ã#ãrãùã„ã‰å/åVåàåâå÷å⁄ç#çdçsçÇçëç°ç∞ç¿çœç“ç”éé}é¨é¬é√éœè	èLèPè\è∑èÏê%êfêäêéêêêëêÀëëë@ëaëbëÇëõë∫ë”ëËíí%íOígímíqírí~í∏íÀììì@ìDìFìGìtìxì∑îîUî£î∞î¥ï ïAïEïñï„ñ'ñ+ñyñ¬óó`ó©óıò@òòƒò»ôô7ô;ôâô”ôÁö3ö~ö¢ö¶õõõõ$õ(õyõ†õÍúú ùùGùMùöù®ù“û%û&ûÄûÜû ûÍü%ü3üÖü’†&†O†X†Ü†á†µ†÷°'°u°¬¢ ¢¢C¢è¢‹££ £<£Q£ç£Ø£∂£∫£ª£«££¸§A§í§‰•••.•2•3•g•m•æ•˛¶j¶¡ßßbßÆ®	®
®/®`®f®g®–©©'©;©W©ó©©© ™™™L™U™\™`™a™Ü™å™‹™˙´,´}´À¨¨V¨\¨ô¨‡≠-≠T≠Z≠®≠’ÆÆ9Æ|ÆÇÆ•Æ¯ØØ5ØÉØáØàØ®ØÆØ˘∞+∞1∞Ç∞–±!±_±p±√±«±»±˙≤ ≤N≤ô≤ß≤≠≤˛≥L≥ù≥€≥ı¥-¥1¥2¥v¥¥¥ˇµµµGµäµÁµÎµÌµÓ∂∂ ∂n∂ª∂œ∂”∑'∑z∑Ü∑ì∑∫∑Ò∑Û∏
∏C∏I∏å∏õ∏ƒ∏˝πππ1πGπ_π{πÅπÇπ¡π˘π˙∫(∫.∫Y∫l∫m∫ö∫†∫Ú∫¯ª#ª5ª6ªeªkªøª≈ªººº9º?ºjºÇºÑºÖº”º◊Ω&ΩsΩñΩöΩ®Ω¨ΩﬂææQæWæ¶æπæøæ˚øDøføãø øˆø˜¿ @J¿ @p¿ @v¿ @»¿ @Œ¿ @‰¿ @Í¿ A7¿ AJ¿ AP¿ A∏¿ A ¿ A–¿ A‡¿ AÊ¿ B0¿ Bq¿ Br¿ B√¿ C¿ C9¿ C?¿ Cè¿ C∫¿ C¿¿ D¿ D[¿ Dq¿ Dw¿ D°¿ Dß¿ DΩ¿ E¿ E¿ Ey¿ Eã¿ Eë¿ E°¿ Eß¿ EÒ¿ F¿ F-¿ F/¿ F0¿ Fr¿ FÑ¿ FÆ¿ FŸ¿ G!¿ GE¿ Gi¿ Gç¿ G±¿ G’¿ G˘¿ H¿ HA¿ He¿ Hâ¿ HÆ¿ H≥¿ H¥¿ Hı¿ I
¿ I ¿ I"¿ I#¿ IZ¿ IΩ¿ J ¿ J%¿ JX¿ Jj¿ J¶¿ J„¿ J˝¿ K	¿ K¿ K(¿ Kf¿ Kg¿ KÉ¿ KÑ¿ K®¿ K©¿ Kµ¿ K‘¿ K’¿ K·¿ L¿ L¿ La¿ L¿ LÄ¿ Lå¿ L¶¿ L–¿ L—¿ M ¿ Mj¿ Mé¿ M£¿ Mª¿ MÒ¿ N;¿ N]¿ Nt¿ Nô¿ N¶¿ NŒ¿ NÁ¿ NÌ¿ NÓ¿ O7¿ OÖ¿ OÆ¿ O‚¿ P¿ P:¿ PI¿ PQ¿ Pi¿ Po¿ Pp¿ Pñ¿ P«¿ PÀ¿ PÕ¿ PŒ¿ PÏ¿ P¿ Q@¿ Qà¿ Qœ¿ Q‚¿ QÊ¿ R¿ R¿ RU¿ R¶¿ R¿ RÙ¿ S9¿ S=¿ Sç¿ Sÿ¿ S‹¿ T¿ T#¿ T8¿ T<¿ Tá¿ T÷¿ Tı¿ T˘¿ UG¿ Ué¿ UŸ¿ V'¿ Vt¿ V¬¿ W¿ W\¿ WÇ¿ WÜ¿ WΩ¿ WŒ¿ W“¿ X#¿ X?¿ XC¿ Xè¿ X‹¿ Y¿ Y¿ YL¿ YP¿ Yù¿ Yﬂ¿ Y„¿ Z,¿ Z{¿ Zª¿ ZŒ¿ Z“¿ [ ¿ [p¿ [î¿ [ò¿ [“¿ [÷¿ \"¿ \o¿ \≥¿ ]¿ ]J¿ ]l¿ ]p¿ ]¿¿ ^¿ ^V¿ ^Ç¿ ^Ü¿ ^√¿ ^«¿ _¥¿ `_¿ a
¿ aÂ¿ b€¿ bﬂ¿ c6¿ c:¿ d$¿ e¿ f¿ g¿ hS¿ iR¿ j}¿ k®¿ lt¿ lx¿ l•¿ l©¿ mì¿ n}¿ o;¿ oÍ¿ q1¿ q⁄¿ r°¿ sh¿ t¿ tR¿ tV¿ tl¿ tp¿ t◊¿ u>¿ uŸ¿ v§¿ wR¿ w∏¿ xo¿ xs¿ xí¿ xñ¿ x„¿ y&¿ ys¿ y√¿ z¿ zE¿ z}¿ zÅ¿ z¿¿ zÎ¿ zÔ¿ {>¿ {â¿ {ç¿ {‘¿ |!¿ |T¿ |~¿ |ë¿ |ï¿ |–¿ }¿ }¿ }B¿ }F¿ }ê¿ }—¿ }Ò¿ }ı¿ ~;¿ ~à¿ ~”¿ ¿ h¿ Ø¿ ≥¿ ø¿ ·¿ Ä¿ ÄN¿ ÄV¿ Ä\¿ Äd¿ Äh¿ Ä{¿ Ä¿ Äç¿ Äë¿ Ä‡¿ Å¿ ÅJ¿ Åt¿ Åz¿ Å»¿ Ç¿ ÇX¿ Ç^¿ Ç≠¿ Ç˛¿ É;¿ ÉÜ¿ Éå¿ É€¿ Ñ¿ Ñ¿ Ñe¿ ÑÆ¿ Ñ˛¿ ÖI¿ Öô¿ Ö‡¿ Ü2¿ ÜC¿ ÜR¿ Üp¿ Üç¿ Ü®¿ ÜÀ¿ ÜÈ¿ á¿ á,¿ áR¿ áu¿ áé¿ á™¿ á…¿ áÚ¿ à¿ à0¿ àA¿ à[¿ àr¿ àÖ¿ àü¿ à∫¿ à◊¿ â¿ â$¿ â:¿ âa¿ âz¿ âñ¿ â∑¿ â—¿ ä¿ ä¿ ä8¿ äN¿ äl¿ äâ¿ ä´¿ ä¬¿ äÒ¿ ã¿ ã0¿ ãL¿ ãc¿ ãz¿ ã¢¿ ãπ¿ ã‡¿ å¿ åP¿ åÖ¿ åµ¿ åÎ¿ ç¿ ç,¿ çD¿ çj¿ ç{¿ ç¶¿ ç·¿ çÁ¿ é¿ é6¿ éO¿ év¿ éé¿ éß¿ é»¿ é˜¿ è¿ è<¿ è^¿ è•¿ èæ¿ èÌ¿ ê]¿ êÕ¿ ê˛¿ ë¿ ëZ¿ ëé¿ ëò¿ ëß¿ ë‰¿ í)¿ í3¿ íâ¿ íË¿ ìv¿ ìé¿ ì©¿ ì˛¿ î¿ îE¿ îs¿ îû¿ î∆¿ îÍ¿ ï¿ ï¿ ïL¿ ïw¿ ïü¿ ï¬¿ ïŸ¿ ñ¿ ñ2¿ ñU¿ ñw¿ ñü¿ ñ√¿ ñ›¿ ñÏ¿ ó¿ ój¿ ó©¿ ò¿ ò¿ ò?¿ ò´¿ ò“¿ òı¿ ô5¿ ôÜ¿ ôï¿ ô≥¿ ô‡¿ ô·¿ ö¿ ö1¿ ö2¿ öi¿ öÜ¿ öá¿ ö…¿ õ¿ õ¿ õ8¿ õ>¿ õq¿ õÜ¿ õ©¿ õ™¿ õÂ¿ ú(¿ ú.¿ úw¿ ú√¿ ù¿ ù&¿ ù,¿ ùU¿ ùj¿ ùÑ¿ ùÖ¿ ùØ¿ ùﬂ¿ ù‡¿ û¿ ûB¿ ûC¿ û{¿ û¢¿ û®¿ û‰¿ ü/¿ ü5¿ ü`¿ üu¿ üå¿ üç¿ ü€¿ ü·¿ †/¿ †`¿ †f¿ †ê¿ †ñ¿ †¶¿ †¨¿ †ı¿ °¿ °¿ °6¿ °<¿ °å¿ °€¿ ¢(¿ ¢P¿ ¢w¿ ¢x¿ ¢°¿ ¢ß¿ ¢Û¿ £C¿ £j¿ £p¿ £Ä¿ £Ü¿ £ ¿ £Ì¿ £Ó¿ §(¿ §F¿ §L¿ §û¿ §≥¿ §π¿ §…¿ §œ¿ •(¿ •A¿ •B¿ •}¿ ••¿ •´¿ •”¿ •Ë¿ ¶¿ ¶¿ ¶J¿ ¶s¿ ¶t¿ ¶ª¿ ¶‰¿ ¶Â¿ ß.¿ ßN¿ ßO¿ ßÇ¿ ßõ¿ ßú¿ ßÿ¿ ßﬁ¿ ®&¿ ®U¿ ®V¿ ®ê¿ ®ƒ¿ ® ¿ ©¿ ©T¿ ©ò¿ ©„¿ ™.¿ ™4¿ ™Ä¿ ™…¿ ´¿ ´$¿ ´*¿ ´u¿ ´∏¿ ´æ¿ ¨'¿ ¨{¿ ¨ê¿ ¨ñ¿ ¨Î¿ ≠;¿ ≠}¿ ≠õ¿ ≠∫¿ Æ ¿ Æ¿ Æ;¿ Æ?¿ Æ`¿ Æa¿ Æö¿ ÆÕ¿ Æ”¿ Ø¿ Ø ¿ Ø=¿ Ø>¿ Ø{¿ Ø°¿ Øß¿ ØÏ¿ ∞¿ ∞¿ ∞g¿ ∞¥¿ ±¿ ±K¿ ±õ¿ ±´¿ ±±¿ ±È¿ ±˛¿ ≤$¿ ≤%¿ ≤g¿ ≤Æ¿ ≤»¿ ≤Œ¿ ≥¿ ≥M¿ ≥S¿ ≥í¿ ≥ò¿ ≥®¿ ≥Æ¿ ¥ ¿ ¥¿ ¥¿ ¥J¿ ¥K¿ ¥ã¿ ¥√¿ ¥…¿ µ¿ µb¿ µh¿ µ†¿ µ∏¿ µπ¿ µ¯¿ ∂0¿ ∂6¿ ∂á¿ ∂¶¿ ∂¨¿ ∂˝¿ ∑>¿ ∑S¿ ∑t¿ ∑u¿ ∑¶¿ ∑¨¿ ∑¬¿ ∑›¿ ∑ﬁ¿ ∏¿ ∏"¿ ∏c¿ ∏≥¿ π¿ π¿ π ¿ π]¿ πc¿ π®¿ π‘¿ π’¿ ∫&¿ ∫Q¿ ∫W¿ ∫õ¿ ∫≤¿ ∫◊¿ ∫ÿ¿ ª¿ ª^¿ ªd¿ ª¥¿ ªÁ¿ ªÌ¿ º7¿ ºS¿ ºY¿ ºß¿ ºÓ¿ Ω?¿ Ωg¿ Ωm¿ Ωæ¿ æ¿ æ`¿ æú¿ æ¢¿ æÒ¿ ø>¿ øn¿ øt¿ ø¿¿ øŒ¿ øÊ¿ ø¿ øˆ¿ ¿E¿ ¿ï¿ ¿÷¿ ¿‰¿ ¡
¿ ¡¿ ¡¿ ¡e¿ ¡¶¿ ¡¥¿ ¡◊¿ ¡·¿ ¡Á¿ ¬6¿ ¬c¿ ¬q¿ ¬°¿ ¬´¿ ¬±¿ ¬¡¿ ¬«¿ √¿ √!¿ √r¿ √á¿ √û¿ √ü¿ √◊¿ ƒ'¿ ƒ-¿ ƒ}¿ ƒ∞¿ ƒ∂¿ ≈¿ ≈Z¿ ≈`¿ ≈∂¿ ≈º¿ ∆¿ ∆X¿ ∆j¿ ∆p¿ ∆¡¿ «¿ «0¿ «6¿ «ê¿ «·¿ «˚¿ »¿ »L¿ »p¿ »~¿ »õ¿ »•¿ »´¿ »˘¿ …J¿ …c¿ …q¿ …†¿ …™¿ …∞¿ …»¿ …Œ¿ …ﬁ¿ …‰¿  1¿  |¿  ò¿  ≠¿  ˛¿ À¿ À*¿ À+¿ Àb¿ Àß¿ À≠¿ ÀÙ¿ Ã0¿ Ã6¿ ÃÇ¿ Ã¶¿ Ã¨¿ Ã≈¿ ÃÀ¿ Õ¿ Õc¿ Õi¿ Õú¿ Õ™¿ Õ¿¿ Õ˘¿ Œ¿ Œ¿ Œ ¿ Œ6¿ Œ7¿ Œp¿ ŒΩ¿ ŒÃ¿ Œ“¿ œ"¿ œr¿ œx¿ œ°¿ œ∂¿ –	¿ –!¿ –9¿ –:¿ –n¿ –t¿ –¬¿ –·¿ –Á¿ —(¿ —x¿ —√¿ —‚¿ —„¿ “$¿ “q¿ “w¿ “ƒ¿ ”¿ ”^¿ ”d¿ ”t¿ ”z¿ ”À¿ ‘¿ ‘*¿ ‘z¿ ‘…¿ ‘ˇ¿ ’¿ ’F¿ ’G¿ ’É¿ ’ª¿ ’¡¿ ÷¿ ÷,¿ ÷A¿ ÷e¿ ÷f¿ ÷•¿ ÷œ¿ ÷–¿ ◊	¿ ◊J¿ ◊Ä¿ ◊Ü¿ ◊À¿ ÿ¿ ÿV¿ ÿy¿ ÿ¿ ÿƒ¿ Ÿ	¿ Ÿ4¿ Ÿ:¿ Ÿä¿ Ÿ⁄¿ ⁄)¿ ⁄/¿ ⁄E¿ ⁄ì¿ ⁄⁄¿ ⁄‡¿ €?¿ €Q¿ €f¿ €l¿ €¢¿ €€¿ €˛¿ ‹M¿ ‹ô¿ ‹‰¿ ›¿ ›¿ ›[¿ ›†¿ ›Ë¿ ﬁ8¿ ﬁá¿ ﬁÆ¿ ﬁ√¿ ﬁ…¿ ﬁŸ¿ ﬁﬂ¿ ﬂ¿ ﬂe¿ ﬂ®¿ ﬂË¿ ‡6¿ ‡y¿ ‡¢¿ ‡£¿ ‡‰¿ ·7¿ ·V¿ ·\¿ ·©¿ ·—¿ ·◊¿ ‚&¿ ‚v¿ ‚í¿ ‚ò¿ ‚Ë¿ „7¿ „Ç¿ „∂¿ „º¿ ‰¿ ‰#¿ ‰L¿ ‰M¿ ‰à¿ ‰ÿ¿ ‰Â¿ ‰Î¿ Â5¿ ÂÉ¿ Â…¿ Âœ¿ Â‡¿ Ê/¿ Ê5¿ ÊC¿ Êâ¿ Êì¿ Êô¿ ÊÁ¿ Á1¿ ÁÇ¿ Áß¿ Áº¿ ÁÁ¿ ÁË¿ Ë+¿ Ër¿ Ëx¿ Ë√¿ Ë”¿ ËŸ¿ È(¿ È_¿ Èe¿ Èu¿ Í)¿ Íy¿ Í©¿ Î7¿ Îá¿ Îµ¿ Î ¿ Ï¿ Ï¿ ÏE¿ Ïî¿ Ï•¿ Ï∫¿ Ï¿ ÏÒ¿ Ì9¿ Ìh¿ Ìi¿ Ì•¿ ÌÙ¿ Ó¿ Ó ¿ Óq¿ Ó¿¿ Ô¿ Ô[¿ Ô´¿ Ô›¿ Ô„¿ 4¿ ¿ À¿ Ò¿ Òi¿ ÒÖ¿ Òã¿ Ò‹¿ Ú'¿ Ús¿ Ú≥¿ Ú»¿ ÚŒ¿ Ú‰¿ Û0¿ ÛÄ¿ ÛΩ¿ Û√¿ Ù¿ Ù>¿ ÙD¿ Ùù¿ ÙØ¿ Ùµ¿ Ù≈¿ ÙÀ¿ ı¿ ı1¿ ı2¿ ıq¿ ı´¿ ı±¿ ıˇ¿ ˆP¿ ˆõ¿ ˆÏ¿ ˜¿ ˜#¿ ˜3¿ ˜9¿ ˜á¿ ˜ ¿ ˜ﬂ¿ ¯¿ ¯¿ ¯_¿ ¯m¿ ¯s¿ ¯ª¿ ¯¡¿ ˘¿ ˘b¿ ˘±¿ ˘Õ¿ ˘Ô¿ ˘¿ ˙;¿ ˙ä¿ ˙ê¿ ˙π¿ ˙ﬁ¿ ˙ﬂ¿ ˚¿ ˚>¿ ˚D¿ ˚[¿ ˚a¿ ˚©¿ ˚ˆ¿ ¸B¿ ¸í¿ ¸≤¿ ¸«¿ ¸„¿ ¸‰¿ ˝ ¿ ˝C¿ ˝I¿ ˝ú¿ ˝±¿ ˝œ¿ ˝–¿ ˛¿ ˛C¿ ˛I¿ ˛u¿ ˛ä¿ ˛®¿ ˛©¿ ˛Ó¿ ˇ;¿ ˇ[¿ ˇa¿ ˇ±¿ ˇ’¿ ˇÍ¿ ¿ ¿ K¿ i¿ j¿ Æ¿ —¿ “¿¿"¿a¿ë¿í¿‹¿‚¿ ¿N¿O¿u¿{¿Æ¿¥¿⁄¿¿¿?¿¢¿®¿¿@¿Æ¿$¿*¿R¿g¿â¿ä¿‘¿¿.¿4¿y¿∑¿ˆ¿¸¿?¿Ö¿Æ¿¥¿Ã¿·¿
¿¿X¿ß¿ø¿≈¿	¿	9¿	?¿	Ä¿	∞¿	±¿	Ì¿
¿
¿
[¿
§¿
™¿
Â¿
Î¿¿#¿O¿P¿ç¿”¿Ÿ¿#¿)¿I¿^¿d¿Ø¿˙¿¿7¿8¿w¿ª¿¡¿‡¿Ê¿˛¿¿1¿2¿r¿û¿§¿‹¿¿¿U¿V¿ì¿Â¿˜¿˝¿L¿õ¿ﬁ¿,¿]¿c¿±¿⁄¿‡¿¿¿*¿0¿}¿±¿∑¿’¿W¿©¿˛¿T¿§¿·¿Á¿
¿¿`¿±¿˝¿¿$¿k¿q¿ø¿	¿¿\¿¨¿¯¿F¿î¿‰¿Í¿8¿Ö¿”¿#¿t¿Ö¿ã¿÷¿%¿l¿r¿æ¿Ÿ¿ﬂ¿-¿{¿…¿¿]¿À¿—¿Ê¿*¿S¿T¿£¿©¿¿4¿\¿]¿ì¿ô¿º¿◊¿ÿ¿ ¿ 0¿ 6¿ Å¿ ∆¿ Ã¿!¿!c¿!i¿!±¿!ˆ¿"0¿"6¿"F¿"L¿"ô¿"´¿" ¿"À¿#¿#N¿#T¿#°¿#Â¿#˙¿$ ¿$E¿$î¿$ÿ¿$¿$ˆ¿%@¿%è¿%ù¿%≈¿%∆¿&¿&G¿&H¿&ï¿&‰¿&Ú¿&¯¿'G¿'ö¿' ¿'–¿("¿(k¿(©¿(Ø¿(≈¿(À¿)¿)+¿)1¿)ô¿)´¿)±¿)ˆ¿*<¿*ä¿*±¿*∑¿+¿+T¿+r¿+á¿+Õ¿+Œ¿,¿,T¿,Z¿,´¿,ı¿,˚¿-I¿-\¿-b¿-x¿-»¿.¿.¿.y¿.ã¿.ë¿.ß¿.˜¿/¿/¿/~¿/ê¿/ñ¿/¶¿/¯¿0D¿0W¿0•¿0›¿1¿1P¿1ó¿1¨¿1≤¿1Ë¿2$¿2%¿2l¿2≤¿2∏¿3¿3C¿3I¿3ì¿3„¿4(¿4.¿4Å¿4ñ¿4–¿4—¿5¿5!¿5P¿5V¿5¢¿5›¿5ﬁ¿6=¿6>¿6ä¿6…¿6œ¿7¿77¿7=¿7M¿7S¿7ó¿7’¿8#¿8e¿8∂¿8Î¿9¿9r¿9ª¿9˘¿:.¿:W¿:¿:©¿:◊¿;	¿;¿;d¿;e¿;ì¿;‹¿<+¿<x¿<à¿<ø¿<⁄¿<˚¿=¿=F¿=S¿=o¿=ê¿=Ø¿=›¿=Í¿>¿>(¿>H¿>w¿>Ñ¿>•¿>∆¿>Í¿?¿?*¿?4¿?:¿?;¿?f¿?â¿?ª¿?ﬂ¿@¿@¿@"¿@#¿@@¿@D¿@E¿@é¿@∫¿@Ë¿A¿A¿AE¿Aê¿Añ¿Aó¿AÕ¿AŒ¿B¿Br¿Bƒ¿C¿C¿Cp¿C¡¿C¯¿D¿D2¿DS¿Dv¿DÕ¿E	¿Ef¿E£¿Eﬂ¿F5¿Fs¿FÆ¿F¿G*¿Gá¿G‰¿HA¿Hv¿H”¿I0¿Il¿I®¿J¿JC¿J†¿JŸ¿K¿KW¿K¥¿L¿LQ¿LÆ¿LÁ¿LÙ¿Lı¿MC¿Mi¿Mä¿Mñ¿Mª¿M‡¿N¿N(¿N9¿NA¿NG¿NH¿Na¿Ná¿Nç¿Né¿N·¿O ¿Og¿Oß¿Oﬁ¿P¿PT¿Pè¿P«¿P˝¿QD¿Qä¿Q“¿R¿RX¿Rñ¿R’¿S¿SK¿Sé¿S«¿Sˇ¿T4¿Ty¿T™¿Tﬁ¿U¿U?¿Ur¿UÆ¿UÊ¿V¿VJ¿V¿V¥¿VÍ¿W ¿WS¿Wâ¿Wƒ¿W˜¿X'¿Xh¿X±¿X˝¿Y4¿Y{¿Y¬¿Z	¿ZP¿Zñ¿Z‹¿["¿[a¿[ú¿[ﬂ¿\%¿\f¿\™¿\Í¿]0¿]v¿]π¿^¿^O¿^|¿^Ø¿^∂¿^∑¿^˙¿^˛¿^ˇ¿_¿_E¿_F¿_R¿_ó¿_¬¿`¿`h¿`»¿a"¿aÅ¿b(¿bœ¿c:¿ce¿cæ¿d#¿dz¿d÷¿e¿ei¿e¡¿f¿fá¿f¸¿gh¿g◊¿hR¿hπ¿i<¿iπ¿j/¿jπ¿kª¿kø¿k¡¿k¬¿k‚¿lÀ¿l‚¿m¿me¿mx¿m†¿m§¿m·¿nE¿nF¿nô¿n«¿n»¿n˜¿oD¿oE¿o{¿oÅ¿oë¿o·¿p¿pR¿pS¿pÄ¿pÀ¿pÃ¿p˜¿p¯¿q(¿qW¿q“¿q”¿r¿r=¿rr¿rs¿rë¿rí¿rø¿rÀ¿s¿s¿s`¿sa¿sö¿s≥¿s¥¿s˚¿t¿tF¿tÇ¿tà¿tò¿tÊ¿t˚¿uN¿uO¿u|¿uÇ¿u”¿uÈ¿v5¿v6¿vt¿vz¿v¡¿w¿w`¿wà¿wâ¿x¿x¿xc¿xq¿xw¿x≈¿y¿y¿yc¿y≠¿y≥¿y“¿y˜¿z¿zS¿zö¿zõ¿zÊ¿{#¿{s¿{t¿{´¿{¨¿{Õ¿{Œ¿{⁄¿|¿|¿|s¿|t¿|Ä¿|ò¿|‹¿}/¿}5¿}Q¿}p¿}§¿}®¿}©¿}µ¿}Œ¿~¿~R¿~X¿~w¿~´¿~Ø¿~∞¿~º¿~÷¿¿X¿^¿z¿ª¿ø¿¿¿Ã¿Í¿Ä.¿ÄÆ¿Ä¥¿Äµ¿Ä‡¿Ä¸¿Å"¿Å6¿Å<¿Å=¿Åb¿ÅÉ¿Åô¿Å∏¿ÅË¿Ç¿ÇB¿Çe¿ÇÜ¿Ç©¿ÇŸ¿É¿Éb¿Éh¿Él¿Ém¿Éy¿Éõ¿É‰¿Ñ¿Ñ¿ÑO¿ÑS¿ÑT¿Ñy¿Ñã¿Ñ’¿Ñ›¿Ñ·¿Ñ‚¿Ö¿Ö¿Ök¿Ös¿Öw¿Öx¿Ö∑¿Ö˛¿Ü&¿Ü\¿Üb¿ÜÉ¿Üá¿Üà¿Üµ¿Ü¡¿Üı¿á5¿ál¿áz¿áÄ¿áØ¿á˜¿à)¿àa¿à{¿à|¿à£¿àƒ¿àÁ¿â
¿â/¿â@¿âe¿âä¿â–¿âˆ¿ä¿ä?¿äô¿ä®¿ä”¿ä‡¿äË¿äÓ¿ã¿ã¿ã¿ã=¿ãI¿ã|¿ã≠¿ãª¿ã¡¿å¿å0¿åQ¿å_¿åe¿å≠¿å˙¿ç,¿çv¿ç±¿ç»¿é¿é¿é¿é-¿é3¿éQ¿éU¿éV¿éy¿éÖ¿é√¿éﬁ¿éÏ¿éÚ¿è2¿èP¿è^¿èd¿èî¿èœ¿ê¿ê6¿êD¿êJ¿êK¿êò¿êØ¿ë
¿ë\¿ë¢¿ë©¿ë™¿ë ¿í¿í¿í¿íQ¿íõ¿í÷¿íÌ¿ì)¿ì3¿ì=¿ìR¿ìX¿ì\¿ì]¿ìÅ¿ìç¿ìΩ¿ìÓ¿î8¿îO¿î]¿îc¿îÉ¿î§¿ï¿ï
¿ï¿ï¿ï¿ïQ¿ïx¿ïù¿ïæ¿ï„¿ïÙ¿ñ¿ñ:¿ñ_¿ñx¿ñÄ¿ñß¿ñÃ¿ñÒ¿ó¿ó9¿óu¿óò¿óπ¿ó ¿ó“¿óÿ¿ó‹¿ó›¿ò¿ò8¿òF¿òL¿òk¿òê¿òñ¿ò»¿ò›¿ò„¿òÁ¿òË¿ô5¿ôJ¿ôP¿ô`¿ôf¿ôÆ¿ô˜¿ö2¿öw¿öõ¿öÈ¿õ7¿õf¿õy¿õ¿õÄ¿õ’¿õÏ¿ú¿ú3¿ú4¿úZ¿úì¿ú›¿ù#¿ù$¿ùr¿ùú¿ù§¿ù÷¿ù˘¿û¿û¿û0¿û8¿û>¿ûO¿ûS¿ûT¿ûú¿û¢¿ûÊ¿ü¿üÇ¿ü’¿†Z¿°¿°[¿°®¿°Û¿¢&¿¢8¿¢ä¿¢Æ¿¢œ¿¢ˆ¿£G¿£ë¿£›¿§-¿§f¿§w¿§†¿§…¿§ÿ¿§Â¿§Ô¿•¿•¿•G¿•M¿•N¿•µ¿•π¿•∫¿¶¿¶¿¶Q¿¶ä¿¶é¿¶Ó¿ß/¿ßa¿ßt¿ßz¿ßû¿ß ¿ßÈ¿®¿®<¿®I¿®t¿®¿®≠¿®Ã¿®Ê¿© ¿©-¿©Y¿©d¿©î¿©≥¿©Õ¿™¿™¿™=¿™H¿™Ä¿™ü¿™π¿™Ô¿™¸¿´-¿´8¿´?¿´C¿´D¿´î¿´Ø¿´‘¿¨¿¨¿¨Z¿¨§¿¨Ù¿≠<¿≠ã¿≠”¿≠¸¿Æ.¿Æ^¿Æë¿Æ‡¿Æ¸¿Ø/¿Ø`¿Øi¿Øo¿Øp¿Øµ¿∞¿∞d¿∞Ç¿∞º¿∞ƒ¿±¿±o¿±®¿±¬¿± ¿±‰¿≤3¿≤~¿≤Ö¿≤â¿≤ä¿≤ƒ¿≥¿≥¿≥¿≥-¿≥3¿≥Ç¿≥±¿≥Ë¿¥'¿¥Q¿¥ñ¿¥ü¿¥•¿¥¶¿¥·¿µ!¿µM¿µâ¿µø¿µ‡¿∂¿∂4¿∂V¿∂]¿∂a¿∂b¿∂Æ¿∂Í¿∂¿∑ ¿∑¿∑T¿∑ú¿∑Ì¿∏/¿∏~¿∏î¿∏Â¿π¿πN¿πö¿πÍ¿∫%¿∫w¿∫•¿∫ø¿∫˛¿ª¿ª(¿ªf¿ªx¿ªî¿ªœ¿ª·¿º¿º@¿ºR¿º~¿º√¿º’¿º‹¿º‡¿º·¿º˜¿º¯¿Ω¿Ω¿Ω0¿Ωv¿Ω≤¿ΩÒ¿æ(¿æ^¿æó¿æı¿æ˘¿æ˙¿øJ¿øl¿øã¿øå¿øò¿øπ¿ø‹¿ø›¿¿	¿¿T¿¿l¿¿m¿¿æ¿¿Ú¿¡'¿¡W¿¡ò¿¡û¿¡ü¿¡Õ¿¡È¿¬$¿¬U¿¬u¿¬≥¿¬Ω¿¬«¿¬Õ¿¬Œ¿√¿√L¿√{¿√•¿√∆¿√„¿ƒ ¿ƒ<¿ƒD¿ƒJ¿ƒK¿ƒµ¿ƒ√¿ƒ…¿ƒ ¿≈¿≈\¿≈Ä¿≈¶¿≈¥¿≈∫¿≈Â¿∆¿∆D¿∆`¿∆h¿∆•¿∆º¿∆ƒ¿∆ ¿∆Œ¿∆œ¿∆€¿«¿«2¿«g¿«Æ¿«Ô¿»¿» ¿»i¿»í¿»ò¿»›¿»ﬁ¿…¿…x¿…π¿…ø¿…¿¿…Û¿ 2¿ k¿ Ñ¿ ä¿ ã¿ Ã¿À0¿Àh¿Àn¿Ào¿Àò¿Àø¿ÀÒ¿ÃE¿ÃÉ¿Ã«¿ÃÁ¿ÃÒ¿Ã˜¿Ã¯¿Õ!¿ÕT¿Õ±¿Õπ¿Õø¿Õ¿¿Õﬂ¿Œ¿Œu¿Œ}¿ŒÉ¿ŒÑ¿ŒØ¿œ ¿œ¿œM¿œö¿œ¥¿œ’¿œ˝¿–&¿–K¿–t¿–ù¿–ƒ¿–œ¿–◊¿–›¿–ﬁ¿—¿—<¿—B¿—î¿—´¿—Ë¿“'¿“G¿“M¿“Q¿“R¿“^¿“q¿“õ¿“Œ¿”¿”?¿”j¿”è¿”±¿”Õ¿”Ê¿‘¿‘L¿‘n¿‘å¿‘∆¿‘¯¿’A¿’f¿’•¿’ƒ¿’Ì¿÷-¿÷B¿÷ê¿÷î¿÷ï¿÷∫¿÷ª¿◊¿◊¿◊X¿◊ú¿◊Ì¿ÿ¿ÿ¿ÿa¿ÿî¿ÿ ¿ÿÀ¿ÿ◊¿Ÿ¿Ÿ¿Ÿ¿ŸR¿Ÿü¿ŸÔ¿⁄8¿⁄9¿⁄á¿⁄®¿⁄—¿⁄ﬂ¿⁄Â¿⁄Ê¿€¿€z¿€Ä¿€Å¿€ú¿€Ì¿‹¿‹B¿‹H¿‹v¿‹w¿‹í¿‹ﬁ¿›¿›Z¿›h¿›n¿›o¿›ª¿›‰¿ﬁ¿ﬁF¿ﬁv¿ﬁ•¿ﬁÒ¿ﬂ#¿ﬂ2¿ﬂb¿ﬂj¿ﬂ°¿ﬂÆ¿ﬂ’¿‡$¿‡j¿‡ƒ¿‡‡¿‡Ë¿·¿·¿·J¿·Ñ¿·Í¿‚>¿‚?¿‚¢¿‚¸¿„=¿„C¿„D¿„{¿„À¿„˙¿‰¿‰¿‰¿‰k¿‰π¿Â¿Â$¿ÂY¿Â]¿Â^¿Âô¿Â‰¿Ê¿ÊQ¿Êä¿Ê«¿ÊÀ¿ÊÃ¿Êÿ¿Á¿Á¿ÁA¿Áå¿Á‘¿ÁË¿Ë¿Ë>¿ËH¿Ëi¿Ëà¿Ë©¿ËŒ¿ËÒ¿È¿ÈI¿Èt¿Èû¿Èø¿È‡¿Í¿Í*¿Íu¿Íæ¿Íˆ¿Í¸¿Î ¿Î¿Î¿ÎV¿Îä¿Îé¿Îè¿Îõ¿Î”¿Ï;¿ÏÜ¿Ïä¿Ïã¿Ï’¿ÏÓ¿ÏÔ¿Ì@¿ÌM¿Ìp¿Ìq¿Ìª¿ÌŸ¿Ì⁄¿Ó¿Ó.¿Ó/¿ÓÄ¿Ó–¿Ô¿Ôo¿Ôp¿Ô|¿Ô∏¿ÔÙ¿¿7¿R¿|¿∑¿È¿Ò¿Ò¿ÒR¿ÒÉ¿Ò∂¿Ú¿Ú)¿ÚT¿ÚU¿Ú¿ÛD¿ÛE¿Ûì¿Ûƒ¿Ù$¿ÙO¿Ùô¿ı¿ı¿ıe¿ı¿ˆP¿ˆx¿ˆõ¿ˆ∏¿ˆ¿˜7¿˜n¿˜Ê¿˜¿˜ˆ¿˜˙¿˜˚¿¯!¿¯û¿¯’¿˘=¿˘Ü¿˘–¿˙¿˙e¿˙Ö¿˙Ü¿˙÷¿˚%¿˚t¿˚√¿¸¿¸¿¸T¿¸ö¿¸‚¿˝$¿˝W¿˝÷¿˛I¿˛Q¿˛o¿˛è¿˛∞¿˛—¿˛ﬁ¿ˇ$¿ˇÑ¿ˇ‰¿ˇÂ¿ r¿ x¿ |¿ }¿ ™¿ ˚¿F¿r¿~¿£¿∆¿¸¿¿4¿R¿¶¿≤¿∫¿«¿¿U¿ñ¿¿¿€¿ı¿¿F¿k¿é¿µ¿⁄¿	¿.¿T¿Ç¿™¿“¿˜¿!¿J¿x¿Ç¿ä¿ê¿ë¿”¿Ú¿ ¿¿¿J¿T¿t¿ï¿…¿Á¿˝¿¿e¿o¿u¿v¿ƒ¿	¿	b¿	è¿	À¿	“¿
#¿
s¿
¡¿
œ¿
Ë¿¿¿¿¿2¿3¿Ñ¿ƒ¿ ¿¿j¿Ü¿†¿∫¿æ¿ø¿¿\¿b¿Ø¿ª¿”¿Ì¿˘¿¿d¿k¿î¿ò¿ô¿∆¿˝¿¿¿A¿{¿â¿è¿∆¿˘¿˝¿˛¿8¿_¿Ñ¿à¿â¿º¿Ì¿Ó¿;¿ä¿Ÿ¿Ì¿Ú¿>¿è¿›¿Ó¿$¿b¿≠¿≥¿¥¿Á¿
¿'¿(¿A¿{¿ß¿Ÿ¿"¿c¿´¿“¿ﬂ¿-¿~¿¥¿Â¿¿¿h¿q¿r¿∂¿Ò¿J¿q¿w¿x¿∆¿Ÿ¿¿9¿k¿ù¿§¿•¿Ì¿J¿N¿O¿ü¿Æ¿¿¿=¿w¿ó¿¿¿Œ¿‘¿Ù¿&¿'¿v¿ª¿—¿⁄¿'¿t¿≈¿Ê¿2¿ê¿„¿¿1¿M¿a¿ä¿Ø¿ÿ¿ ¿ (¿ 2¿ X¿ j¿ Ü¿ ’¿! ¿!1¿!9¿!n¿!{¿!ü¿!•¿!©¿!™¿!”¿!Ú¿"¿":¿"i¿"â¿"®¿"Æ¿"≤¿"≥¿"‚¿#"¿#@¿#]¿#Ñ¿#Æ¿#¥¿#∏¿#π¿#Â¿$¿$2¿$@¿$F¿$n¿$°¿$•¿$¿$ı¿%B¿%è¿%æ¿%‰¿&¿&N¿&\¿&b¿&Ö¿&¶¿&”¿&‘¿'7¿'†¿'Ú¿(¿(¿(/¿(>¿(P¿(w¿(ö¿(¡¿(Ë¿)¿)¿)6¿)e¿)i¿)j¿)k¿)w¿)“¿)˛¿*¿*2¿*8¿*<¿*=¿*I¿*e¿*Ñ¿*º¿*ﬂ¿+¿+"¿+g¿+v¿+ö¿+¢¿+®¿+¨¿+≠¿+Ò¿,=¿,Q¿,|¿,}¿, ¿,ﬂ¿,˝¿-$¿-a¿-e¿-f¿-Ü¿-Æ¿-Ó¿-Ú¿-Û¿.,¿.2¿.Ä¿.Œ¿/¿/k¿/ä¿/•¿/∫¿/ÿ¿/Â¿0¿0u¿0{¿0¿0Ä¿0¥¿0Ÿ¿0¿1¿1*¿1P¿1r¿1z¿1Ä¿1Ñ¿1Ö¿1¢¿1Ã¿1Í¿1Ó¿1Ô¿2"¿2|¿2ƒ¿2Ï¿3¿3¿39¿3d¿3ó¿3∆¿3Í¿4¿4<¿4o¿4Æ¿4„¿4Ú¿5¿5:¿5O¿5a¿5n¿5y¿5∂¿5Ω¿5æ¿5€¿5ﬂ¿5‡¿6¿6e¿6¥¿7¿7%¿7j¿7x¿7~¿7¿7¨¿7≠¿7Ò¿85¿8y¿8∑¿8Â¿8˙¿9¿97¿9^¿9ã¿9∑¿9‚¿:¿:2¿:M¿:x¿:ë¿:Æ¿:∏¿:æ¿;¿;3¿;S¿;`¿;á¿;æ¿;Õ¿;¯¿< ¿<G¿<o¿<u¿<¬¿<È¿=!¿=+¿=d¿=Ö¿=π¿=◊¿=Ì¿>	¿>[¿>e¿>k¿>l¿>º¿>Û¿?"¿?=¿?C¿?G¿?H¿?ç¿?‹¿@¿@¿@K¿@L¿@è¿@∂¿@ƒ¿@ ¿@Ú¿A4¿A_¿A¨¿A˜¿B$¿Br¿Bì¿BŒ¿B¸¿C¿C¿C¿CY¿CZ¿C®¿C‚¿D¿DV¿D†¿DÕ¿E¿E¿EB¿EM¿Eë¿E≠¿E‹¿EÙ¿F¿FC¿Fe¿Fõ¿F¥¿Fø¿F«¿F»¿G¿G-¿G.¿Gí¿G‡¿G·¿H ¿HB¿He¿Hè¿Hû¿H˚¿IJ¿Iñ¿Iº¿I‚¿J¿J¿Jh¿J≤¿Jº¿Jƒ¿J≈¿J‡¿K¿K$¿KQ¿Kx¿KÉ¿K®¿K‡¿L¿L4¿L?¿LN¿LÖ¿L™¿L‚¿LÌ¿Lı¿L˝¿M¿M¿M&¿M'¿M3¿MO¿Mc¿Mq¿Mw¿M©¿M„¿N'¿NU¿N_¿Nö¿NÓ¿OC¿O}¿OÖ¿Oã¿Oæ¿O¬¿O√¿P ¿P
¿Pn¿Po¿P}¿P•¿P˚¿Q¿Q¿Q;¿Q\¿Qz¿Q¬¿Q√¿Q‰¿RA¿RQ¿RY¿RZ¿Rö¿R«¿RË¿S¿S:¿SP¿Sl¿SØ¿Sπ¿Sø¿S√¿Sƒ¿SÒ¿Tc¿Të¿TÀ¿U*¿Us¿Ut¿Uú¿U¿VA¿VP¿Vü¿VÔ¿W>¿Wé¿W»¿W‘¿X¿X%¿Xö¿XÆ¿XØ¿Y¿Y0¿Y:¿Y]¿Yì¿Y≥¿YÀ¿YÈ¿Z1¿Z=¿ZE¿ZK¿ZL¿Zì¿Zî¿Z·¿["¿[8¿[L¿[ù¿[Ë¿\;¿\K¿\g¿\É¿\∏¿\Ó¿]&¿]v¿]|¿]®¿]–¿]‹¿^	¿^,¿^b¿^Ç¿^ö¿^∏¿^¯¿_¿_¿_¿_&¿_*¿_+¿_©¿_Œ¿_Ì¿`¿`F¿`y¿`ß¿`±¿`“¿`ı¿a¿a;¿an¿a≤¿a‡¿b/¿b_¿bk¿bu¿b{¿b¿bÄ¿bû¿c¿ch¿cl¿cm¿c‚¿c„¿d0¿dd¿dy¿d«¿d»¿e¿ed¿eÖ¿eö¿eŸ¿e⁄¿f¿f'¿fj¿fk¿fì¿f≥¿f¥¿f—¿gB¿g`¿gn¿gt¿gê¿gû¿g§¿g¿¿gÔ¿h ¿h.¿h4¿h\¿hƒ¿h—¿i3¿i9¿i=¿i>¿iW¿iÉ¿iÁ¿j¿j¿jN¿jh¿jp¿jv¿jw¿jü¿jΩ¿k¿k#¿k∂¿k√¿l¿lj¿lr¿l–¿l÷¿l⁄¿l€¿m¿mD¿m`¿my¿mì¿mª¿m¡¿m≈¿m∆¿mÒ¿n¿n+¿nR¿nm¿ns¿nw¿nx¿nû¿n–¿o$¿ov¿oõ¿oÌ¿p1¿pw¿p∏¿pæ¿pÁ¿q¿q>¿qé¿qØ¿qˆ¿rE¿rI¿rJ¿ri¿rî¿rª¿rÎ¿s ¿sN¿s¿s¿¿sﬁ¿t¿t¿tn¿tî¿tÕ¿t’¿t‚¿u¿uN¿uT¿uk¿uo¿up¿u£¿u¡¿v¿v=¿vX¿v£¿v≥¿v‘¿vÎ¿w¿w¿wJ¿wû¿wÂ¿wÎ¿x¿x¿x¿x/¿xn¿xª¿x⁄¿y¿y$¿y*¿y?¿yo¿yé¿yí¿yì¿yµ¿yÔ¿z¿z=¿zÄ¿z»¿zÃ¿zÕ¿{¿{0¿{>¿{D¿{a¿{Ö¿{•¿{˛¿|¿|*¿|+¿|`¿|≤¿|¿¿|∆¿|«¿}#¿}V¿}d¿}j¿}k¿}£¿}‡¿}˛¿~!¿~F¿~û¿¿¿D¿m¿é¿ï¿ñ¿ƒ¿‰¿Ä0¿Äl¿Äz¿ÄÄ¿Ä•¿Ä¶¿Äﬂ¿Ä˙¿ÅG¿ÅV¿Å™¿ÅÔ¿Ç¿Çd¿Ç´¿Ç¯¿É¿É¿ÉA¿ÉZ¿Éó¿ÉÊ¿Ñ!¿ÑN¿Ñ_¿Ñi¿Ñ≤¿Ñﬂ¿Ö¿Ö9¿Öâ¿Öˆ¿Ü ¿Ü¿Ü+¿Ü1¿Üe¿Üi¿Üj¿Ü∫¿á	¿áW¿á®¿á·¿à	¿à@¿àU¿à®¿àÓ¿â¿âT¿â†¿â˘¿âˇ¿ä:¿ä>¿ä?¿äc¿ä¢¿äÔ¿ä˝¿ã¿ã\¿ã±¿ã‰¿ãË¿ãÈ¿åC¿åD¿åu¿å{¿å ¿å˝¿çn¿ço¿ç{¿çÆ¿çØ¿ç˘¿ç˙¿é¿é`¿é§¿éÚ¿è#¿èO¿èh¿èÉ¿è∫¿è¿¿è¡¿ê¿ê`¿ê©¿êŒ¿êˆ¿ë¿ë=¿ët¿ë|¿ëä¿ëê¿ëë¿ëŒ¿ë“¿ë”¿ëﬂ¿í¿íW¿í£¿í§¿í◊¿ì¿ì¿ì¿ì_¿ìe¿ì¥¿ì¯¿î¿î¿îl¿îº¿ï¿ïW¿ïò¿ï»¿ï‹¿ï‚¿ï„¿ñ¿ñ¿ñ"¿ñF¿ñd¿ñä¿ñõ¿ñü¿ñ†¿ñ¨¿ñ‹¿ñÛ¿ó¿ó?¿ó~¿ó≤¿ó⁄¿ó‡¿ó‰¿óÂ¿ò¿òD¿òß¿ò®¿ò’¿òı¿ô¿ô¿ô¿ô!¿ô"¿ôp¿ôó¿ô√¿ö¿ö]¿öä¿ö√¿õ¿õ*¿õJ¿õe¿õä¿õ±¿ú¿ú[¿ú™¿úæ¿úƒ¿ú≈¿ú—¿ù¿ù]¿ù°¿ù∂¿ùΩ¿ùæ¿ù’¿ù˛¿û¿ûI¿û|¿ûì¿ûß¿û¥¿ûø¿û∆¿û◊¿û€¿û‹¿ü!¿üI¿üO¿üñ¿üΩ¿ü√¿†¿†;¿†i¿†é¿†ú¿†¢¿†£¿†‘¿°¿°¿°S¿°Y¿°]¿°^¿°ä¿°£¿°»¿°÷¿°‹¿°›¿¢¿¢8¿¢>¿¢B¿¢C¿¢è¿¢ö¿¢ü¿¢Í¿£0¿£Q¿£R¿£^¿£à¿£´¿£π¿£ø¿£¿¿£¿£˛¿§¿§¿§¿§j¿§r¿§v¿§w¿§É¿§§¿§Â¿§Û¿§˘¿§˙¿•¿•-¿•5¿•9¿•:¿•F¿•t¿•µ¿•∂¿•–¿¶¿¶6¿¶f¿¶n¿¶t¿¶x¿¶y¿¶Ö¿¶∫¿¶ª¿¶«¿¶˝¿ßT¿ß¢¿ß¡¿ßÈ¿®¿®I¿®S¿®{¿®|¿®ü¿®≈¿®Ê¿©¿©4¿©c¿©í¿©≈¿™¿™b¿™Ñ¿™£¿™¨¿™·¿´¿´J¿´ï¿´⁄¿´ı¿¨7¿¨>¿¨B¿¨C¿¨O¿¨ï¿¨ñ¿¨¬¿¨Ë¿¨È¿¨ı¿≠/¿≠A¿≠Ñ¿≠å¿≠ê¿≠ë¿≠’¿≠¯¿Æ¿ÆQ¿Æk¿Æº¿Æ…¿ÆÌ¿Ø#¿Ø+¿Ø9¿Ø=¿Ø>¿ØÅ¿Ø§¿Øπ¿Ø˝¿∞¿∞e¿∞r¿∞ï¿∞ ¿∞“¿∞‡¿∞‰¿∞Â¿±*¿±M¿±b¿±¶¿±¡¿≤¿≤T¿≤a¿≤Ü¿≤∏¿≤¿¿≤Œ¿≤“¿≤”¿≥%¿≥q¿≥é¿≥ı¿¥¿¥7¿¥ã¿¥ﬁ¿µ0¿µ~¿µ≈¿µÒ¿µı¿µˆ¿∂A¿∂w¿∂|¿∂…¿∑¿∑f¿∑∞¿∏¿∏3¿∏N¿∏m¿∏è¿∏º¿∏„¿π¿π¿πm¿π™¿π¯¿∫"¿∫à¿∫æ¿∫‚¿ª¿ª¿ªU¿ªç¿ªŸ¿º*¿ºq¿ºª¿Ω¿Ω¿Ω†¿Ω˜¿Ω˚¿Ω¸¿æN¿æO¿æÕ¿øP¿ø∏¿øˇ¿¿D¿¿E¿¿è¿¿·¿¿Â¿¿Ê¿¡.¿¡I¿¡O¿¡ò¿¡π¿¡ø¿¬ ¿¬@¿¬k¿¬î¿¬√¿¬—¿¬◊¿¬ÿ¿¬˝¿√3¿√o¿√≈¿√÷¿√ı¿ƒ¿ƒ/¿ƒ5¿ƒl¿ƒm¿ƒç¿ƒ•¿ƒÃ¿ƒ˝¿≈/¿≈V¿≈Ç¿≈—¿≈‹¿≈Â¿∆¿∆¿∆¿∆≠¿∆Æ¿∆ﬁ¿«¿«[¿«z¿«ò¿«ü¿«◊¿«ÿ¿»#¿»p¿»ø¿»⁄¿»˙¿…¿…$¿…(¿…ü¿…†¿…Ì¿ ¿ Z¿ t¿ ≥¿ ¿¿ Ù¿ ˙¿ ˛¿ ˇ¿ÀD¿ÀZ¿ÀÄ¿À≥¿À¡¿À«¿À»¿Ã¿Ã(¿Ãb¿Ãp¿Ãv¿Ãw¿Ã»¿Õ¿ÕZ¿Õh¿Õn¿Õo¿Õ√¿Œ¿ŒB¿Œe¿ŒÖ¿Œ•¿Œ¨¿Œ÷¿Œ‰¿ŒÍ¿œ¿œ¿œ¿œi¿œÖ¿œ…¿œÈ¿œ˜¿œ˝¿œ˛¿–%¿–f¿–Ö¿–å¿–‡¿—#¿—1¿—E¿—ê¿—∏¿—¡¿—»¿“¿“"¿“c¿“s¿“{¿“°¿“‡¿”3¿”â¿”æ¿”Ó¿‘,¿‘;¿‘l¿‘ï¿‘û¿‘´¿‘€¿‘Î¿‘Û¿’¿’X¿’©¿’”¿÷¿÷A¿÷P¿÷Å¿÷™¿÷≥¿÷π¿÷∫¿÷„¿◊¿◊4¿◊Z¿◊a¿◊e¿◊f¿◊û¿◊Õ¿◊Ì¿ÿ<¿ÿP¿ÿW¿ÿ[¿ÿ‚¿ÿ„¿ŸV¿Ÿ®¿Ÿ©¿Ÿ·¿⁄¿⁄3¿⁄F¿⁄L¿⁄x¿⁄|¿⁄}¿⁄~¿⁄π¿⁄ø¿€¿€H¿€ë¿€Æ¿€”¿€ˆ¿‹¿‹8¿‹Ü¿‹‘¿‹Ú¿›¿›7¿›a¿›o¿›ö¿›∆¿›˙¿ﬁ'¿ﬁO¿ﬁ}¿ﬁ—¿ﬁ€¿ﬁ¸¿ﬂ¿ﬂ@¿ﬂd¿ﬂj¿ﬂn¿ﬂo¿ﬂπ¿‡	¿‡4¿‡g¿‡™¿‡˝¿‡˛¿·¿·ñ¿‚1¿‚≥¿‚¥¿‚—¿„û¿‰ ¿‰˘¿Âﬁ¿Êû¿Á¿Áh¿Ëj¿ÈC¿Í:¿Í≈¿Î¿Î	¿Î!¿ÎÒ¿ÏÎ¿ÏÏ¿Ï˛¿ÌA¿Ìå¿Ó¿Ó¿Óa¿Óf¿Óg¿Ós¿Óö¿Ó»¿Ô¿Ô	¿ÔO¿Ôp¿Ôù¿Ô¡¿Ô‚¿%¿_¿{¿º¿÷¿ı¿Ò'¿ÒO¿ÒÖ¿Òÿ¿ÒÈ¿ÚH¿Ú{¿Úõ¿Ú≠¿ÚÆ¿Ú÷¿Úı¿Û¿Û¿Û9¿Ûd¿Ûë¿Û¿¿ÛÌ¿Ù¿Ùh¿Ù≤¿Ù÷¿ÙÏ¿ı¿ıv¿ı“¿ıÔ¿ˆ
¿ˆ¿ˆ¿ˆÄ¿ˆë¿ˆº¿ˆÌ¿˜	¿˜6¿˜_¿˜°¿˜ƒ¿˜Î¿¯¿¯s¿¯§¿¯’¿˘¿˘K¿˘†¿˘Ú¿˙+¿˙ê¿˙æ¿˙Â¿˙˙¿˚M¿˚É¿˚≤¿˚⁄¿¸¿¸P¿¸é¿¸¡¿¸¯¿˝-¿˝h¿˝ù¿˝—¿˛¿˛.¿˛Z¿˛â¿˛“¿ˇ¿ˇP¿ˇ{¿ˇ≤¿ ¿ Q¿ ö¿ ◊¿¿G¿x¿Ø¿Ê¿¿V¿π¿&¿_¿Õ¿¿A¿t¿Ì¿0¿{¿∏¿‰¿7¿t¿≥¿Ú¿@¿è¿‹¿+¿Å¿∫¿˚¿	A¿	í¿	—¿	Ó¿
	¿
"¿
9¿
N¿
a¿
r¿
Å¿
é¿
ô¿
¢¿
©¿
≠¿
Æ¿
‚¿
Ë¿-¿y¿ñ¿ó¿µ¿÷¿¿V¿¢¿æ¿¿;¿D¿™¿¿#¿}¿≥¿¿¿¿F¿L¿ü¿Ô¿@¿Z¿√¿$¿†¿Ø¿¿¿\¿•¿¿¿¿¿¿ ¿^¿Ñ¿◊¿)¿w¿“¿”¿1¿2¿g¿w¿ö¿™¿·¿˝¿¿¿¿D¿p¿à¿ù¿¡¿»¿Ã¿Œ¿œ¿¿¿#¿A¿Z¿Ç¿®¿æ¿ﬁ¿¸¿¿5¿R¿t¿ê¿¨¿ø¿⁄¿Ô¿¿+¿H¿i¿z¿†¿ø¿Ÿ¿¿!¿8¿O¿o¿ó¿–¿¿3¿\¿Ä¿ö¿¥¿‘¿+¿,¿K¿k¿á¿Ø¿’¿˚¿#¿;¿R¿i¿Ä¿ó¿≠¿Õ¿Ï¿¿)¿N¿f¿â¿£¿”¿˙¿¿>¿Z¿x¿ñ¿≥¿÷¿ ¿ 4¿ ]¿ í¿ ≥¿ ◊¿ ˜¿!¿!¿!¿![¿!v¿!é¿!Æ¿!‡¿"¿"B¿"`¿"|¿"ñ¿"∞¿" ¿"‰¿"¸¿#¿#@¿#h¿#Ñ¿#®¿#Ê¿$¿$¿$K¿$y¿$ô¿$«¿$Ì¿%¿%/¿%Q¿%s¿%•¿%◊¿&¿&E¿&y¿&£¿&À¿&Û¿'¿'¿' ¿'!¿'-¿'|¿'ç¿'ß¿'…¿'˝¿(-¿(c¿(É¿(°¿(Ω¿(Ÿ¿(ı¿)¿)+¿)K¿)s¿)ù¿)ª¿)·¿*!¿*E¿*]¿*å¿*º¿*‰¿+¿+6¿+X¿+|¿+†¿+ƒ¿+¯¿,*¿,j¿,†¿,Ã¿- ¿-*¿-N¿-{¿-¿-Å¿-Ç¿-ç¿-®¿-ƒ¿-‚¿-ˇ¿. ¿.C¿.i¿.É¿.¢¿.¡¿.Ÿ¿.ﬂ¿.‡¿.˝¿/"¿/B¿/r¿/ä¿/™¿/√¿/÷¿/ı¿/ˆ¿0,¿0N¿0w¿0}¿0∑¿0˘¿1?¿1À¿1ˇ¿2=¿2{¿2¨¿3¿3¿3¿3¿3@¿3]¿3v¿3ì¿3≤¿3⁄¿3ı¿3˚¿3¸¿4¿4/¿4N¿4y¿4è¿4ê¿4ú¿4‚¿4‰¿4Â¿5A¿5ö¿5õ¿5ß¿5º¿5”¿5Ì¿6/¿65¿69¿6:¿6F¿6}¿6£¿6”¿7¿7¿7¿7L¿7ä¿7ê¿7î¿7ï¿7°¿7¥¿7¿8¿8	¿8
¿8|¿8}¿8¶¿8…¿8 ¿8÷¿9¿9¿9¿9A¿9f¿9¡¿9‰¿9Ë¿9È¿9ı¿:¿:D¿:q¿:Ö¿:ã¿:¥¿:»¿:Œ¿:˙¿;¿;¿;T¿;Ü¿;Á¿<;¿<?¿<@¿<L¿<`¿<•¿<Ÿ¿<Ò¿<˜¿=/¿=ñ¿=ö¿=õ¿=ß¿=Œ¿=Á¿=Î¿=Ì¿=Ó¿>¿>=¿>W¿>o¿>u¿>v¿>”¿>Ê¿>Á¿>Û¿?j¿?å¿?µ¿?…¿@¿@¿@;¿@M¿@`¿@q¿@è¿@ñ¿@™¿@ø¿@≈¿@…¿@À¿@Ã¿A¿A¿Ab¿A≠¿A˘¿B<¿Bç¿B‹¿BÁ¿BÎ¿C;¿CR¿CV¿Cd¿Ch¿C≠¿CÂ¿D6¿Dn¿Dû¿D∆¿D«¿D›¿Dﬁ¿E/¿E[¿E§¿EÎ¿F.¿F2¿F3¿F?¿Fo¿Fò¿F´¿F±¿F ¿F⁄¿F‡¿G¿G¿G%¿GB¿GY¿G_¿G`¿Gä¿G°¿Gµ¿Gπ¿G∫¿G∆¿G˜¿H,¿H?¿HE¿H]¿Hm¿Hs¿Hõ¿H∂¿Hº¿HŸ¿H¿Hˆ¿H˜¿I%¿I<¿IT¿IX¿IZ¿I[¿I¨¿J¿JW¿JX¿Jy¿J™¿JŸ¿J⁄¿JÊ¿K¿KX¿Kv¿Kâ¿Kè¿KÆ¿Kˆ¿L:¿L\¿L¶¿Lœ¿M4¿MÉ¿Må¿M©¿Mª¿N¿N¿N¿N¿NÑ¿NÖ¿N∏¿NŸ¿O=¿Oê¿O¨¿O≥¿OŒ¿Oﬁ¿P8¿P?¿PC¿PD¿PP¿P®¿P™¿P´¿Q¿Q/¿Q?¿QY¿Qw¿Q¶¿Q¡¿Q·¿QÁ¿QË¿R	¿R3¿RJ¿Rf¿Ró¿R≈¿R∆¿RÒ¿RÚ¿S<¿ST¿Sä¿Sµ¿S˜¿T¿T%¿Tt¿TÕ¿T—¿T“¿U¿U2¿Uj¿Uó¿U€¿U‚¿V¿Vq¿Vu¿Vv¿VÇ¿V∏¿VÙ¿W¿W¿Ws¿W ¿X¿X¿Xx¿X†¿X™¿X∞¿X±¿X›¿Y,¿Yc¿YÖ¿Y¬¿Y·¿Z¿Z¿ZT¿Zs¿Zî¿Zø¿Z ¿Z“¿Zÿ¿ZŸ¿[y¿[˛¿\r¿\†¿]¿]¿][¿]Œ¿^C¿^∑¿^ª¿^º¿^»¿_¿_¿_	¿_y¿_≠¿_Æ¿_œ¿_–¿`¿`"¿`#¿`W¿`é¿`Æ¿`⁄¿`Ë¿`Ó¿a¿ah¿a≈¿b#¿bÜ¿b•¿b»¿b‰¿bÍ¿bÓ¿bÔ¿b˚¿c.¿cZ¿c[¿c∫¿d
¿d.¿d<¿dB¿dC¿du¿dò¿d¥¿d∫¿dª¿e ¿eb¿ec¿e∑¿f¿fe¿fì¿fÆ¿g¿gP¿g~¿g´¿g¨¿g¿¿g–¿h"¿h)¿h[¿hÑ¿h®¿hÆ¿h≤¿h≥¿hø¿h˝¿hˇ¿i ¿iD¿id¿ie¿iÜ¿iá¿iì¿i€¿iˆ¿j¿j#¿j9¿já¿jù¿j¶¿j≠¿j±¿j≤¿jæ¿j˚¿j˝¿j˛¿kJ¿kn¿ko¿kê¿kë¿kù¿kÊ¿l
¿l2¿l?¿lh¿ln¿lr¿ls¿l¿l‰¿lÊ¿lÁ¿m"¿m-¿mC¿m[¿mt¿mã¿më¿mí¿mº¿m“¿m”¿m¸¿n¿n    _kCursorBlinkHalfPeriod"_kObscureShowLatestCharCursorTicks!kDefaultContentInsertionMimeTypes_CompositionCallback_RenderCompositionCallbackTextEditingControllerToolbarOptionsContentInsertionConfiguration	_KeyFrame_DiscreteKeyFrameSimulationEditableTextEditableTextState	_Editable_ScribbleCacheKey_ScribbleFocusable_ScribbleFocusableState_ScribblePlaceholder_CodePointBoundary_DeleteTextAction_UpdateTextSelectionAction$_UpdateTextSelectionVerticallyAction_SelectAllAction_CopySelectionAction_GlyphHeights ¶£