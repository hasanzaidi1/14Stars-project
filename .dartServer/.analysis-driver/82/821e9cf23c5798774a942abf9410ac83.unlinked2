Ä¡shouldPainttoStringbuildHandlegetHandleAnchorbuildToolbargetHandleSizecanCutcanCopycanPastecanSelectAll	handleCut
handleCopyhandlePastehandleSelectAllcontextfadeDurationrenderObjectselectionControlsselectionDelegate_selectionOverlaycontextMenuBuildervalue_value
_selection_effectiveStartHandleVisibility_effectiveEndHandleVisibility_effectiveToolbarVisibility'_updateTextSelectionOverlayVisibilitieshandlesVisible_handlesVisibleshowHandleshideHandlesshowToolbar showSpellCheckSuggestionsToolbarshowMagnifierupdateMagnifierhideMagnifierupdate_updateSelectionOverlayupdateForScrollhandlesAreVisibletoolbarIsVisiblemagnifierIsVisiblespellCheckToolbarIsVisiblehidehideToolbardispose_getStartGlyphHeight_getEndGlyphHeight_buildMagnifier_endHandleDragPosition$_endHandleDragPositionToCenterOfLine"_handleSelectionEndHandleDragStart_getHandleDy#_handleSelectionEndHandleDragUpdate_startHandleDragPosition&_startHandleDragPositionToCenterOfLine$_handleSelectionStartHandleDragStart%_handleSelectionStartHandleDragUpdate_handleAnyDragEnd_handleSelectionHandleChanged_chooseType_magnifierInfo_magnifierControllermagnifierConfigurationstartHandleType_startHandleTypelineHeightAtStart_lineHeightAtStart_isDraggingStartHandlestartHandlesVisibleonStartHandleDragStart_handleStartHandleDragStart_handleStartHandleDragUpdateonStartHandleDragUpdateonStartHandleDragEnd_handleStartHandleDragEndendHandleType_endHandleTypelineHeightAtEnd_lineHeightAtEnd_isDraggingEndHandleendHandlesVisibleonEndHandleDragStart_handleEndHandleDragStart_handleEndHandleDragUpdateonEndHandleDragUpdateonEndHandleDragEnd_handleEndHandleDragEndtoolbarVisibleselectionEndpoints_selectionEndpointsdebugRequiredFortoolbarLayerLinkstartHandleLayerLinkendHandleLayerLinkdragStartBehavioronSelectionHandleTappedclipboardStatustoolbarLocation_toolbarLocation_handles_toolbar_contextMenuController_spellCheckToolbarController_buildScheduledmarkNeedsBuild_buildStartHandle_buildEndHandle_buildToolbarchildoffset	layerLink
visibilitycreateState_controller_opacity	initStatedidUpdateWidget_toolbarVisibilityChangedbuildhandleLayerLinkonSelectionHandleDragStartonSelectionHandleDragUpdateonSelectionHandleDragEndpreferredLineHeighttype_handleVisibilityChangededitableTextKeyforcePressEnabledselectionEnableddelegate#_showMagnifierIfSupportedByPlatform#_hideMagnifierIfSupportedByPlatform_lastSecondaryTapWasOnSelection _positionWasOnSelectionExclusive _positionWasOnSelectionInclusive_positionOnSelection_containsShift_expandSelection_extendSelectionshouldShowSelectionToolbar_shouldShowSelectionToolbareditableTextrenderEditable_dragStartScrollOffset_dragStartViewportOffset_scrollPosition_dragStartSelection_dragBeganOnPreviousSelection_longPressStartedWithoutFocus	onTapDownonForcePressStartonForcePressEndonSingleTapUponSingleTapCancelonSingleLongTapStartonSingleLongTapMoveUpdateonSingleLongTapEndonSecondaryTaponSecondaryTapDownonDoubleTapDown_selectParagraphsInRange_selectLinesInRange_moveBeyondTextBoundary_selectTextBoundariesInRangeonTripleTapDownonDragSelectionStartonDragSelectionUpdateonDragSelectionEndbuildGestureDetectorbehavior _getEffectiveConsecutiveTapCount_handleTapDown_handleTapUp_handleTapCancel_handleDragStart_handleDragUpdate_handleDragEnd_forcePressStarted_forcePressEnded_handleLongPressStart_handleLongPressMoveUpdate_handleLongPressEnd	_disposedaddListenerremoveListenerdidChangeAppLifecycleState	pasteableunknownnotPasteableenableddisabledToolbarBuilderToolbarItemsParentDataTextSelectionControlsEmptyTextSelectionControlsemptyTextSelectionControlsTextSelectionOverlaySelectionOverlay_SelectionToolbarWrapper_SelectionToolbarWrapperState_SelectionHandleOverlay_SelectionHandleOverlayState+TextSelectionGestureDetectorBuilderDelegate#TextSelectionGestureDetectorBuilderTextSelectionGestureDetector"_TextSelectionGestureDetectorStateClipboardStatusNotifierClipboardStatusLiveTextInputStatusNotifierLiveTextInputStatusTextSelectionHandleControlsÅ±TextSelectionPointTextSelectionDelegateTextSelectionToolbartoolbarBuilderCupertinoTextSelectionToolbarWidgetBuildContextContainerBoxParentData	RenderBoxbooloverrideStringtoStringEditableTextcontextMenuBuilderbuildHandleSelectionAreaonTapcupertinoTextSelectionControlsTextSelectionHandleTypedoubleVoidCallbackOffsetRenderEditablepreferredLineHeight
DeprecatedRectListValueListenableSize	Clipboard
cutEnabledtextEditingValue	selectionisCollapsedcopyEnabledpasteEnabledselectAllEnabledtext
isNotEmptycutSelectionvoidSelectionChangedCausetoolbarcopySelection	pasteTextFuture	selectAllMaterialTextSelectionControlszeroshrinkmaterialTextSelectionControlsOverlayTextEditingValue	LayerLinkDragStartBehaviorstartTextMagnifierConfigurationselectionStartInViewportaddListenerselectionEndInViewportmagnifierConfigurationcontextdebugRequiredForstartHandleType	collapsedstartHandlesVisiblelineHeightAtStartonStartHandleDragStartonStartHandleDragUpdateonEndHandleDragEndendHandleTypeendHandlesVisiblelineHeightAtEndonEndHandleDragStartonEndHandleDragUpdateonStartHandleDragEndtoolbarVisibleselectionEndpointsselectionControlsselectionDelegateclipboardStatusstartHandleLayerLinkendHandleLayerLinktoolbarLayerLinkonSelectionHandleTappeddragStartBehaviortoolbarLocationlastSecondaryTapDownPositionDurationfadeDurationWidgetBuildervisibleForTestingTextSelectionValueNotifiervalueshowHandleshideHandlesshowToolbarmounted showSpellCheckSuggestionsToolbarbuilderTextPositiongetPositionForPointshowMagnifiercurrentTextPositionglobalGesturePositionrenderEditableupdateMagnifierhideMagnifierSchedulerBindingschedulerPhaseSchedulerPhasepersistentCallbacksWidgetsBinding	drawFramemarkNeedsBuildtextDirectionleftrightgetEndpointsForSelection_handlestoolbarIsVisible_magnifierControllershown_spellCheckToolbarControllerisShownhidehideToolbardisposeremoveListenerint	plainTextisValid
textInside
charactersfirstlengthgetRectForComposingRange	TextRangeendheightlastMagnifierInfolocalToGlobalgetLocalRectForCaretgetLineAtOffsetoffsetextentOffsetaffinityTextAffinityupstream
baseOffset
fromPoints	topCenterbottomCenterfieldBoundssize	caretRectshiftcurrentLineBoundariesDragStartDetailsattachedglobalPositiondypointdxabsfloorDragUpdateDetailsfromPositiondefaultTargetPlatformTargetPlatformiOSmacOSandroidfuchsialinuxwindowsextentbaseDragEndDetailsuserUpdateTextEditingValuecopyWithdragTextDirectionltrrtldisableddebugCheckHasOverlayemptyMagnifierControllershowmagnifierBuilderbelowshouldDisplayHandlesInMagnifieroverlayEntryFadeTransitionValueChangedkindPointerDeviceKindtouchcall
listEqualsHapticFeedbackselectionClickCompositedTransformTargetdownDragGestureRecognizerCupertinoTextSelectionControlsgetDatamillisecondsOverlayEntryContextMenuControllerofrootOverlay	insertAllremoveinsertfindRenderObject	layerLinkchildinstanceaddPostFrameCallbacktypehandleLayerLinkonSelectionHandleDragStartonSelectionHandleDragUpdateonSelectionHandleDragEnd
visibilityTextFieldTapRegionExcludeSemanticsbottomRightwidthtopLeftBuilderbuildToolbarStatefulWidgetStateSingleTickerProviderStateMixinAnimationController	Animationview	initStatedurationvsyncwidgetdidUpdateWidgetforwardreverseDirectionalityopacityCompositedTransformFollowerlinkshowWhenUnlinkedgetHandleAnchorgetHandleSizefromLTWHexpandToInclude
fromCirclecenterradiuskMinInteractiveDimensionRelativeRectfromLTRBmax	Container	alignment	AlignmentRawGestureDetectorbehaviorHitTestBehaviortranslucentgesturesTypeGestureRecognizerFactoryPanGestureRecognizer$GestureRecognizerFactoryWithHandlers
debugOwnersupportedDevicesstylusunknownonStartonUpdateonEndPaddingpadding
EdgeInsetsonlytopbottom	TextFieldCupertinoTextField	GlobalKeyEditableTextState	protectedSetLogicalKeyboardKeyany	shiftLeft
shiftRightcontainsfromSelectioneditableTextKeycurrentStateRenderObject
ScrollableScrollableStatecurrentContextmaybeOfpositionpixels	onTapDownhandleTapDownTapDragDownDetailsselectionEnabledTapDownDetailskeysPressedOnDownhasFocustapselectPositioncauseonForcePressStartForcePressDetailsforcePressEnabledselectWordsInRangefrom
forcePressonForcePressEndonSingleTapUpTapDragUpDetailsmousetrackpadinvertedStylustextPositionpreviousSelectionfindSuggestionSpanAtCursorIndexwordAtCursorIndexIsMisspelled
selectWordtoggleToolbarisAffinityTheSameselectWordEdgeonSingleTapCancelonSingleLongTapStartLongPressStartDetails	longPressselectPositionAtonSingleLongTapMoveUpdateLongPressMoveUpdateDetailsmaxLinesoffsetFromOrigintoonSingleLongTapEndLongPressEndDetailsonSecondaryTaponSecondaryTapDownhandleSecondaryTapDownonDoubleTapDown	doubleTapTextBoundaryParagraphBoundaryboundaryLineBoundarygetLeadingTextBoundaryAtgetTrailingTextBoundaryAtonTripleTapDownonDragSelectionStartTapDragStartDetails _getEffectiveConsecutiveTapCountconsecutiveTapCountonDragSelectionUpdateTapDragUpdateDetailsonDragSelectionEndTapDragEndDetailsKeykeyGestureDetectorGestureTapDragDownCallbackForcePressGestureRecognizerstartPressureGestureForcePressStartCallbackGestureForcePressEndCallbackGestureTapCallbackGestureTapDownCallbackGestureTapDragUpCallbackGestureCancelCallbackkLongPressTimeoutGestureLongPressStartCallback"GestureLongPressMoveUpdateCallbackGestureLongPressEndCallbackkDoubleTapTimeoutGestureTapDragStartCallbackGestureTapDragUpdateCallbackGestureTapDragEndCallbackdeferToChildminMapTapGestureRecognizerLongPressGestureRecognizeronLongPressStartonLongPressMoveUpdateonLongPressEnd%TapAndHorizontalDragGestureRecognizeronDragStartonDragUpdate	onDragEndonTapUponCancelTapAndPanGestureRecognizerexcludeFromSemanticsWidgetsBindingObserver
hasStringsFlutterErrorreportErrorFlutterErrorDetails	exceptionstacklibraryErrorDescription	pasteablenotPasteablehasListenersaddObserverremoveObserverAppLifecycleStateresumeddetachedinactivehiddenpausedLiveTextisLiveTextInputAvailableenabledContainerBoxParentDataTextSelectionControlsStatefulWidgetStateSingleTickerProviderStateMixinValueNotifierWidgetsBindingObserveruxπ÷Œ†)§ËgÈLO;0¶ É≠ÉƒTextSelectionPoint ÉÖpackage:flutter/rendering.dartÉÌÑTextSelectionDelegate É∆package:flutter/services.dart  Ä¶  
dart:async  Äª  ÄÕmathÄ–	dart:math  Äÿ  "package:characters/characters.dart  Å  package:flutter/foundation.dart  Å/  package:flutter/gestures.dart  ÅW  package:flutter/rendering.dart  ÅÄ  package:flutter/scheduler.dart  Å©  package:flutter/services.dart  Å“  
basic.dart  ÅÁ  binding.dart  Å˛  constants.dart  Ç  container.dart  Ç0  context_menu_controller.dart  ÇW  
debug.dart  Çl  editable_text.dart  Çâ  framework.dart  Ç¢  gesture_detector.dart  Ç¬  magnifier.dart  Ç€  overlay.dart  ÇÚ  scrollable.dart  É  tap_and_drag_gestures.dart  É1  tap_region.dart  ÉK  ticker_provider.dart  Éj  transitions.dart    	dart:core¿ «Ω ¿±ç— <ÄÜÄ§Ä•Ä∫Ä÷Ä◊ÅÅ.ÅVÅÅ®Å–Å—ÅÊÅ˝ÇÇ/ÇVÇkÇàÇ°Ç¡Ç⁄ÇÒÉÉ0ÉJÉiÉÑÉÖÉ∆Ñ	Ñ
ÑWÑbÑfÑtÑxÑæÑÃÖÖAÖèÖêÖ‡Ö‰Ü5ÜÄÜ•ÜÓáá áqáµá—á“áﬁà&à(à)àoàñàöà÷à⁄ââ?âáâ’â¯â¸äLäôä„ã1ãmã≥ã˛å8åeåiåwå{å≈åÎççGçMçôç≥çπé	éYé•éŸèQèRè£èÔêênêoêùê£ê‚êËë7ëbëhëπëˆë¸íFíâíΩíÃíıì.ì2ìIìcìÇìùìªì„îî>îhîmînîûîÀîÃïï_ïrïxï»ïŒññ5ñDñmñ¶ñ™ñ⁄ó.ó2ó3ó~ó±ó∑òòòTòuòÑò≠òÊòÍôôpôtôuô√ô›ô„ö+öLöRö¢öÔö˝õõ5õnõrõ§õ∆õ õÀúúaúnútú¡ú‚úÒùùSùWùçûûûûbûhûµû≈û‘û˝ü6ü:ümüßü´ü¨ü¯ü˛†L†\†k†î†Õ†—°°@°D°E°Å°á°÷°Ê°Ï¢8¢Å¢î¢’¢‰££F£J£ç£ƒ£»£…§§;§A§b§h§π§Ã§€••=•A•z•±•µ•∑•∏•˛¶¶P¶ü¶Ïß,ßqßéßíßÕßÚ®3®?®y®z®Ü®ù®∑®÷®Ò©©7©[©í©º©‹©›©È™b™Ü™ä™ã™ó™Á™ˇ´´´´L´P´û´Ì¨:¨z¨ø¨‹≠3≠4≠5≠w≠ç≠ë≠‡Æ+ÆKÆhÆ¥Æ∫Ø
Ø#ØHØcØÅØ™Ø◊∞∞"∞>∞_∞Ñ∞«∞Ú± ±=±}±¶±æ≤≤|≤´≤’≥≥#≥M≥Å≥ª≥˜¥¥Y¥ü¥Ãµµ<µXµòµ⁄∂	∂<∂t∂†∂Ã∂Ù∑&∑T∑~∑∂∑‚∏$∏+∏/∏0∏k∏¶∏¨∏˘π:πOπmπnπæπÕ∫∫:∫>∫Ñ∫Ö∫–ªª`ªÖªÜª»ª˙ª˚º=ºnºoº†º°º‡ºÊΩΩGΩHΩfΩ{Ω£Ω§ΩøΩ¿ΩÙΩıæOæßæ˝æ˛ø1øù¿ @¿ @á¿ @ã¿ @å¿ @π¿ @ø¿ A¿ A?¿ AE¿ A^¿ Aå¿ A¨¿ A—¿ A˜¿ B¿ B¿ B*¿ BY¿ B]¿ B^¿ Bö¿ B±¿ B–¿ Bı¿ B˘¿ B˙¿ C6¿ Co¿ Cp¿ C¨¿ C√¿ C‚¿ C„¿ D ¿ DG¿ DU¿ D[¿ D\¿ DÇ¿ Dê¿ Dñ¿ Dó¿ D¥¿ D◊¿ DÔ¿ E¿ E$¿ E0¿ E4¿ E5¿ EÉ¿ E™¿ E”¿ F	¿ F¿ F.¿ FK¿ Fa¿ Fä¿ F§¿ F⁄¿ F·¿ FÙ¿ F¯¿ F˘¿ G7¿ Ge¿ Gπ¿ Gÿ¿ G˝¿ H¿ H;¿ Hj¿ Hê¿ Hô¿ H†¿ H§¿ H•¿ HÂ¿ I¿ Ii¿ Ià¿ IØ¿ I∆¿ IÌ¿ J¿ JB¿ JK¿ JR¿ JV¿ JW¿ Jï¿ JÆ¿ J’¿ JŸ¿ J⁄¿ K¿ K¿ Ki¿ K∑¿ L¿ LP¿ L†¿ L¿ M!¿ ML¿ Mj¿ Mx¿ M~¿ Mï¿ M¥¿ N ¿ NO¿ N†¿ NÆ¿ N÷¿ N⁄¿ N€¿ N˛¿ O¿ O>¿ Oe¿ Oâ¿ OØ¿ O÷¿ Oﬁ¿ P¿ P6¿ PZ¿ PÅ¿ Pß¿ PØ¿ Pﬁ¿ Q	¿ QX¿ Qù¿ Q°¿ Q¢¿ Q‘¿ Q⁄¿ R+¿ Rd¿ R¿ Rû¿ RÌ¿ S=¿ SR¿ Sz¿ S~¿ S¿ S∞¿ T¿ T¿ TH¿ TN¿ T^¿ Td¿ T∑¿ T⁄¿ U¿ U¿ UP¿ Uü¿ U†¿ UŸ¿ Uﬂ¿ UÔ¿ Uı¿ V<¿ Vù¿ Vû¿ V”¿ V˛¿ Vˇ¿ W;¿ Wt¿ Wu¿ W≠¿ W¿¿ W·¿ XD¿ X•¿ X–¿ Xˇ¿ Y,¿ Y?¿ YC¿ YD¿ Yf¿ Y´¿ Y÷¿ YÒ¿ Z6¿ ZÄ¿ Z–¿ [¿ [g¿ [Ø¿ [ÿ¿ \7¿ \¿ \Œ¿ ]f¿ ]l¿ ]¥¿ ]∏¿ ]π¿ ]Ÿ¿ ^¿ ^H¿ ^a¿ ^ï¿ ^Ù¿ _<¿ _â¿ `¿ ` ¿ `f¿ `j¿ `k¿ `ç¿ `π¿ `‰¿ a¿ a¿ at¿ aŒ¿ aœ¿ b+¿ bf¿ bë¿ b∫¿ b¡¿ b¬¿ bÈ¿ c*¿ cQ¿ cX¿ cY¿ cä¿ c⁄¿ d'¿ d.¿ d/¿ dI¿ dè¿ d√¿ e¿ eW¿ e^¿ eb¿ ec¿ e∞¿ e‘¿ e˙¿ e˚¿ fK¿ f`¿ fî¿ fï¿ f€¿ f˝¿ g¿ g¿ g¿ gV¿ gó¿ gœ¿ gÎ¿ h@¿ hî¿ hÊ¿ i*¿ i8¿ i[¿ iq¿ iz¿ iÅ¿ iÇ¿ iß¿ iæ¿ iÂ¿ j¿ jB¿ jK¿ jR¿ jV¿ jW¿ jß¿ jΩ¿ j√¿ k¿ k_¿ k´¿ kÚ¿ l*¿ l`¿ lû¿ lª¿ m¿ m^¿ mb¿ mc¿ m´¿ mÕ¿ m€¿ m·¿ m‚¿ n@¿ nj¿ nã¿ n–¿ n◊¿ nÿ¿ o,¿ o-¿ oO¿ oà¿ oØ¿ oÊ¿ p¿ p¿ p¿ pj¿ p°¿ pØ¿ pµ¿ p∂¿ p‹¿ q¿ qL¿ qk¿ qå¿ q≤¿ q€¿ r¿ r¿ rA¿ rr¿ r|¿ rü¿ r¬¿ r„¿ s¿ s,¿ sY¿ sÇ¿ sç¿ s—¿ t¿ t¿ t¿ t¿ tD¿ tE¿ t}¿ t≠¿ t‚¿ u¿ u¿ u¿ u¿ ub¿ uÜ¿ uÆ¿ uØ¿ u˛¿ v¿ vL¿ vM¿ vï¿ v∑¿ v≈¿ vÀ¿ vÃ¿ w¿ wQ¿ wã¿ w©¿ wˇ¿ xU¿ x´¿ xÔ¿ x˝¿ y ¿ y6¿ y?¿ yF¿ yG¿ yl¿ yÉ¿ y™¿ y·¿ z¿ z¿ z¿ z¿ z¿ zf¿ zà¿ zñ¿ zú¿ zù¿ zˇ¿ {)¿ {J¿ {ì¿ {ö¿ {Ó¿ {Ô¿ |¿ |J¿ |q¿ |®¿ |Œ¿ |ÿ¿ |Ÿ¿ },¿ }c¿ }q¿ }w¿ }x¿ }û¿ }√¿ ~¿ ~-¿ ~N¿ ~t¿ ~ù¿ ~√¿ ~Œ¿ 	¿ :¿ D¿ g¿ ä¿ ´¿ Œ¿ Ù¿ Ä¿ ÄL¿ ÄW¿ Äõ¿ ÄÃ¿ Ä÷¿ Ä‹¿ Ä›¿ Å¿ Åê¿ Å≈¿ ÅÈ¿ ÅÒ¿ ÅÚ¿ Ç#¿ Ç'¿ Ç(¿ Ç[¿ Çw¿ ÇÖ¿ Çã¿ Ç»¿ ÇÒ¿ É¿ É?¿ ÉG¿ ÉU¿ É[¿ ÉÇ¿ É•¿ É ¿ É‰¿ Ñ¿ Ñ¿ Ñ#¿ Ñ'¿ Ñ(¿ Ñk¿ Ñù¿ ÑÕ¿ ÑÔ¿ Ñˆ¿ Ñ˙¿ Ñ˚¿ Ö"¿ ÖE¿ Öl¿ Öì¿ Öù¿ Öø¿ ÖÔ¿ Öı¿ Öˆ¿ Ü¿ Ü1¿ ÜI¿ Üg¿ Ü¿ ÜÖ¿ Üâ¿ Üã¿ Üå¿ Ü“¿ Ü÷¿ á!¿ áH¿ áa¿ á≠¿ á≥¿ à¿ à¿ à3¿ àN¿ àÑ¿ à´¿ à…¿ àÍ¿ â¿ â+¿ â_¿ âÑ¿ â†¿ âø¿ âﬂ¿ â¸¿ ä¿ äO¿ ät¿ äÖ¿ ä¡¿ ä¸¿ ã¿ ã'¿ ãJ¿ ãr¿ ãò¿ ãº¿ ãÚ¿ å¿ å%¿ åa¿ åú¿ å¢¿ åø¿ ç¿ ç1¿ ç`¿ çá¿ ç≤¿ ç„¿ é¿ é<¿ é=¿ éu¿ éì¿ éî¿ é ¿ è¿ è¿ èj¿ è—¿ ê3¿ êf¿ ê∞¿ ê±¿ ê˚¿ ë¿ ë0¿ ë6¿ ëá¿ ëç¿ ëŸ¿ í¿ í¿ íY¿ íâ¿ íè¿ íÿ¿ íÌ¿ ì¿ ìG¿ ìò¿ ì‹¿ ì‡¿ ì·¿ î"¿ îz¿ î¿¿ ï¿ ï7¿ ï=¿ ïÜ¿ ï–¿ ïÛ¿ ñ¿ ñC¿ ñ_¿ ñt¿ ñz¿ ñ{¿ ñº¿ ñÌ¿ ñÓ¿ ó6¿ óx¿ óü¿ óÎ¿ ó˙¿ ò¿ ò,¿ ò3¿ ò4¿ òV¿ òd¿ òj¿ òk¿ òä¿ ò§¿ òÍ¿ ò˝¿ ô¿ ôE¿ ôI¿ ôJ¿ ôã¿ ô≠¿ ô≥¿ ôÂ¿ ô˙¿ ö¿ öW¿ öú¿ öÿ¿ õ¿ õ¿ õ!¿ õ"¿ õC¿ õG¿ õH¿ õr¿ õx¿ õ«¿ ú
¿ ú6¿ úm¿ úí¿ ú†¿ ú¶¿ úƒ¿ ú⁄¿ úﬁ¿ úﬂ¿ ù¿ ù¿ ùd¿ ùj¿ ùπ¿ ùÔ¿ û¿ û4¿ û[¿ ûi¿ ûo¿ ûè¿ û•¿ û©¿ û™¿ û—¿ û“¿ û˝¿ ü¿ üT¿ üx¿ ü~¿ ü»¿ ü¸¿ ü˝¿ †E¿ †Ö¿ †Ü¿ †≈¿ †Í¿ °:¿ °ä¿ °¶¿ °Ã¿ °⁄¿ °‡¿ ¢&¿ ¢Q¿ ¢U¿ ¢V¿ ¢ó¿ ¢Á¿ £7¿ £S¿ £y¿ £á¿ £ç¿ £π¿ £Ω¿ £æ¿ §¿ §O¿ §P¿ §¢¿ §±¿ §Ì¿ §Ó¿ •)¿ •M¿ •ù¿ •Ì¿ ¶	¿ ¶¿ ¶¿ ¶F¿ ¶J¿ ¶K¿ ¶s¿ ¶y¿ ¶»¿ ß¿ ß1¿ ßf¿ ßâ¿ ßó¿ ßù¿ ßπ¿ ßœ¿ ß”¿ ß‘¿ ® ¿ ®¿ ®U¿ ®[¿ ®™¿ ®‹¿ ®˜¿ ©¿ ©B¿ ©P¿ ©V¿ ©t¿ ©ä¿ ©é¿ ©è¿ ©¥¿ ©µ¿ ©ﬁ¿ ©‰¿ ™3¿ ™W¿ ™]¿ ™•¿ ™◊¿ ™ÿ¿ ´¿ ´\¿ ´]¿ ´ö¿ ´Ω¿ ¨¿ ¨]¿ ¨y¿ ¨ù¿ ¨´¿ ¨±¿ ¨ı¿ ≠¿ ≠"¿ ≠#¿ ≠b¿ ≠≤¿ Æ¿ Æ¿ ÆB¿ ÆP¿ ÆV¿ ÆÄ¿ ÆÑ¿ ÆÖ¿ Æ“¿ Ø¿ Ø¿ Øc¿ Ør¿ Ø¨¿ Ø≠¿ ØÊ¿ ∞¿ ∞X¿ ∞®¿ ∞ƒ¿ ∞“¿ ∞ÿ¿ ∞ˇ¿ ±¿ ±¿ ±*¿ ±0¿ ±|¿ ±†¿ ±¶¿ ±‡¿ ≤¿ ≤¿ ≤O¿ ≤ô¿ ≤…¿ ≥¿ ≥7¿ ≥O¿ ≥ã¿ ≥¥¿ ≥€¿ ¥¿ ¥/¿ ¥R¿ ¥w¿ ¥ú¿ ¥√¿ ¥÷¿ ¥‡¿ ¥Ë¿ ¥Ó¿ µ¿ µ¿ µ¿ µ^¿ µÄ¿ µÅ¿ µ“¿ µﬂ¿ ∂¿ ∂¿ ∂Q¿ ∂{¿ ∂£¿ ∂§¿ ∂Ò¿ ∑¿ ∑?¿ ∑@¿ ∑Ö¿ ∑∂¿ ∑À¿ ∑˝¿ ∑˛¿ ∏C¿ ∏ã¿ ∏ù¿ ∏≤¿ ∏¡¿ ∏Í¿ π#¿ π'¿ πY¿ πZ¿ πò¿ πû¿ π„¿ ∫/¿ ∫y¿ ∫ò¿ ∫û¿ ∫È¿ ª7¿ ªh¿ ªn¿ ª∂¿ ªº¿ ªÃ¿ ª“¿ º:¿ ºg¿ ºh¿ º≥¿ Ω¿ Ω¿ ΩS¿ Ωö¿ Ω›¿ æ,¿ æ]¿ æ¨¿ æ˘¿ ø+¿ ø@¿ øê¿ ø•¿ ø‘¿ ø’¿ ¿%¿ ¿=¿ ¿C¿ ¿é¿ ¿æ¿ ¿¿ ¿Ò¿ ¡<¿ ¡b¿ ¡h¿ ¡∂¿ ¡‰¿ ¡Í¿ ¬:¿ ¬T¿ ¬c¿ ¬´¿ ¬‰¿ ¬Ë¿ √¿ √7¿ √^¿ √É¿ √ë¿ √ó¿ √µ¿ √À¿ √œ¿ √–¿ ƒ ¿ ƒd¿ ƒe¿ ƒ≤¿ ƒÍ¿ ≈
¿ ≈¿ ≈'¿ ≈A¿ ≈B¿ ≈à¿ ≈ÿ¿ ≈Ÿ¿ ∆/¿ ∆0¿ ∆o¿ ∆∏¿ ∆Õ¿ ∆‰¿ « ¿ «¿ «¿ «¿ «4¿ «d¿ «í¿ «ô¿ «˛¿ »¿ »¿ »B¿ »|¿ »ë¿ »®¿ »ƒ¿ »·¿ »˛¿ …¿ …¿ …¿ … ¿ …_¿ …•¿ …∫¿ …œ¿ …Í¿  ¿  ¿  >¿  \¿  l¿  t¿  ´¿ À¿ À"¿ À(¿ À)¿ ÀD¿ ÀR¿ ÀX¿ ÀY¿ À£¿ Àƒ¿ À‹¿ Ã¿ Ã8¿ Ã_¿ Ãò¿ Ã∆¿ Ã—¿ Ã⁄¿ Ã·¿ ÃÂ¿ ÃÊ¿ Õ4¿ Õ[¿ ÕÖ¿ Õ†¿ Õƒ¿ ÕÀ¿ ÕÊ¿ ÕÙ¿ Õ˙¿ Õ˚¿ ŒE¿ Œl¿ ŒÑ¿ Œ∑¿ Œ‡¿ œ¿ œ@¿ œc¿ œn¿ œw¿ œ~¿ œÇ¿ œÉ¿ œ£¿ œ§¿ œÈ¿ –¿ –3¿ –A¿ –G¿ –í¿ –À¿ —%¿ —B¿ —R¿ —Z¿ —x¿ —√¿ —‰¿ “¿ “-¿ “V¿ “`¿ “Ñ¿ “≤¿ “Â¿ ” ¿ ”Y¿ ”c¿ ”m¿ ”z¿ ”ò¿ ”ø¿ ”Ê¿ ”Ó¿ ‘¿ ‘<¿ ‘m¿ ‘¶¿ ‘›¿ ‘Â¿ ‘Î¿ ‘Ô¿ ‘¿ ’(¿ ’n¿ ’É¿ ’ì¿ ’¥¿ ’–¿ ’Ì¿ ÷
¿ ÷!¿ ÷'¿ ÷ç¿ ÷¢¿ ÷®¿ ÷¨¿ ÷≠¿ ÷Ï¿ ◊¿ ◊¿ ◊L¿ ◊a¿ ◊x¿ ◊ù¿ ◊»¿ ◊‰¿ ◊Ú¿ ◊¯¿ ÿ¿ ÿ%¿ ÿ)¿ ÿ*¿ ÿe¿ ÿó¿ ÿ¨¿ ÿø¿ ÿÀ¿ ÿœ¿ ÿ–¿ Ÿ¿ Ÿ¿ Ÿi¿ Ÿé¿ Ÿ∂¿ Ÿ√¿ ŸÎ¿ ⁄¿ ⁄:¿ ⁄t¿ ⁄µ¿ ⁄¯¿ €5¿ €c¿ €å¿ €Ω¿ €Î¿ €Ù¿ €˙¿ ‹¿ ‹8¿ ‹O¿ ‹X¿ ‹_¿ ‹c¿ ‹d¿ ‹ï¿ ‹Æ¿ ‹˚¿ ›Y¿ ›â¿ ›±¿ ›æ¿ ›Ê¿ ﬁ¿ ﬁ1¿ ﬁk¿ ﬁ™¿ ﬁÎ¿ ﬂ&¿ ﬂT¿ ﬂ{¿ ﬂ™¿ ﬂÿ¿ ﬂ·¿ ﬂÁ¿ ‡¿ ‡%¿ ‡<¿ ‡E¿ ‡L¿ ‡P¿ ‡Q¿ ‡É¿ ‡≤¿ ‡◊¿ ‡˝¿ ·¿ ·k¿ ·l¿ ·ª¿ ·º¿ ·Ï¿ ‚¿ ‚`¿ ‚g¿ ‚h¿ ‚Ã¿ ‚È¿ ‚Í¿ „?¿ „i¿ „ç¿ „≠¿ ‰¿ ‰¿ ‰&¿ ‰2¿ ‰n¿ ‰´¿ ‰≤¿ ‰≥¿ ‰ÿ¿ ‰˙¿ Â¿ ÂC¿ ÂY¿ ÂÉ¿ Âµ¿ Â ¿ ÂÂ¿ Ê¿ Ê¿ Ê:¿ ÊZ¿ Êw¿ Êî¿ Ê°¿ Ê¨¿ Êµ¿ Êº¿ Ê¿¿ Ê¡¿ Á¿ ÁQ¿ Áp¿ Áv¿ Á≈¿ Ë¿ Ë)¿ Ë/¿ Ëq¿ ËÜ¿ Ëº¿ ËÒ¿ Ëˇ¿ È¿ È¿ È0¿ È4¿ È6¿ È7¿ ÈÉ¿ È“¿ Í¿ ÍL¿ Íô¿ Í¿¿ Í¯¿ Î¿ Î0¿ ÎM¿ Îg¿ ÎÄ¿ ÎÜ¿ Îá¿ Îù¿ Î¥¿ Î—¿ Î¸¿ Î˝¿ Ï	¿ Ï]¿ Ï_¿ Ï`¿ Ï“¿ Ï˙¿ Ì0¿ Ì1¿ Ì=¿ ÌR¿ Ìi¿ Ìj¿ Ì«¿ Ì»¿ ÌÈ¿ Ó(¿ Ó,¿ Ó-¿ Ó9¿ Óv¿ Óú¿ Ó—¿ Óﬂ¿ ÓÂ¿ Ô*¿ ÔK¿ Ôä¿ Ôé¿ Ôè¿ Ôõ¿ ÔÆ¿ Ô¿ ¿  ¿ $¿ %¿ J¿ v¿ ì¿ †¿ Ω¿ √¿ «¿ »¿ ‘¿ ˚¿ Ò¿ Ò7¿ Òo¿ Òé¿ Ò´¿ ÒŸ¿ Ò˝¿ Ú"¿ ÚE¿ Úf¿ Ús¿ Ú~¿ Úá¿ Úé¿ Úí¿ Úî¿ Úï¿ Ú’¿ Û¿ Û,¿ ÛN¿ Ûf¿ Ûâ¿ Û´¿ Û–¿ Ûˆ¿ Ù¿ Ù>¿ ÙS¿ Ùz¿ Ù∞¿ Ù∂¿ Ù∑¿ Ù⁄¿ ı	¿ ıM¿ ıì¿ ı”¿ ˆ¿ ˆ/¿ ˆS¿ ˆy¿ ˆ¶¿ ˆß¿ ˆ≥¿ ˜¿ ˜¿ ˜¿ ˜x¿ ˜†¿ ˜÷¿ ˜◊¿ ˜„¿ ˜¯¿ ¯¿ ¯¿ ¯m¿ ¯n¿ ¯é¿ ¯Ã¿ ¯–¿ ¯—¿ ¯ı¿ ˘!¿ ˘>¿ ˘K¿ ˘h¿ ˘n¿ ˘r¿ ˘s¿ ˘¿ ˘ª¿ ˘·¿ ˙%¿ ˙E¿ ˙É¿ ˙á¿ ˙à¿ ˙î¿ ˙ß¿ ˙Ë¿ ˚¿ ˚¿ ˚¿ ˚¿ ˚)¿ ˚P¿ ˚ö¿ ˚≠¿ ˚œ¿ ˚÷¿ ¸¿ ¸<¿ ¸C¿ ¸D¿ ¸o¿ ¸á¿ ¸ü¿ ¸∑¿ ¸–¿ ¸◊¿ ¸ÿ¿ ˝%¿ ˝b¿ ˝∫¿ ˝¡¿ ˝˘¿ ˛<¿ ˛Å¿ ˛ƒ¿ ˇ	¿ ˇ¿ ˇ¿ ˇ9¿ ˇ]¿ ˇÑ¿ ˇ£¿ ˇ¿¿ ˇ€¿ ˇı¿ ¿ E¿ o¿ î¿ «¿ ˇ¿_¿ã¿Ø¿˝¿6¿c¿ë¿¿¿’¿Ë¿¿5¿x¿∫¿˛¿=¿P¿a¿p¿å¿¥¿ÿ¿˙¿ ¿H¿Y¿î¿≠¿ ¿ˆ¿&¿7¿F¿S¿^¿g¿n¿r¿t¿u¿ª¿ø¿¿_¿≤¿˛¿L¿i¿m¿{¿¿œ¿	¿	0¿	m¿	£¿	¸¿
0¿
1¿
o¿
ç¿
é¿
»¿
Â¿
Á¿
Ë¿/¿3¿y¿ ¿¿b¿Ø¿ ¿Œ¿¿L¿P¿^¿b¿Ø¿⁄¿¿\¿à¿ø¿≈¿Ï¿¿0¿6¿7¿z¿Ä¿–¿ ¿\¿i¿ß¿®¿˜¿¿V¿{¿û¿Ω¿Ò¿¿5¿V¿y¿¿É¿Ñ¿’¿¿)¿L¿k¿ë¿¥¿’¿ˆ¿¿¿#¿$¿i¿ñ¿◊¿¿¿¿¿h¿ú¿£¿§¿Ê¿'¿+¿,¿q¿∞¿Õ¿·¿Á¿Ë¿¿I¿M¿N¿ì¿“¿Ô¿¿	¿
¿<¿m¿q¿r¿£¿Ú¿¿)¿/¿0¿Ñ¿Ö¿Ω¿Ù¿¯¿˘¿B¿Ü¿ ¿¿¿=¿B¿í¿ÿ¿›¿,¿V¿[¿j¿o¿Ω¿–¿6¿p¿q¿≈¿¿3¿p¿≤¿Ó¿>¿i¿p¿q¿û¿Ã¿Ó¿˜¿ ¿ ¿ ¿ ¿ H¿ M¿ Ä¿ Ö¿ î¿ ô¿ Ë¿! ¿!F¿!Ä¿!Å¿!’¿"¿"P¿"{¿"Ç¿"É¿"∞¿"ﬁ¿# ¿#	¿#¿#¿#!¿#"¿#O¿#U¿#¶¿#ı¿$¿$K¿$v¿$w¿$ƒ¿$Í¿$˜¿%G¿%H¿%í¿%¬¿%œ¿&¿&¿&X¿&á¿&Æ¿&Ø¿' ¿')¿'*¿'I¿'v¿'Æ¿'¡¿(¿(0¿(>¿(i¿(m¿(n¿(ª¿)¿)3¿)Y¿)Z¿)™¿)ˆ¿*"¿*'¿*w¿*∆¿*¿+¿+¿+l¿+µ¿+∫¿,¿,_¿,ö¿,»¿,…¿-¿-¿-\¿-∑¿-Ω¿-Õ¿-”¿.$¿.1¿.`¿.Ü¿.î¿.ö¿.Ó¿/C¿/ò¿/Ó¿0A¿0~¿0ÿ¿1'¿1z¿1†¿1Ï¿2¿2o¿2∑¿2Ô¿3¿3G¿3r¿3s¿3§¿3Ô¿4E¿4q¿4÷¿4˚¿5¿5A¿5Ä¿5©¿5»¿6¿6¿67¿6[¿6¨¿6À¿6Ó¿75¿7J¿7Ñ¿7†¿7ƒ¿7Î¿8¿8¿8%¿8/¿8|¿8Õ¿9¿95¿9~¿9ü¿9¬¿9Ê¿:	¿:X¿:j¿:t¿:Ω¿:√¿:«¿:»¿;¿;¿;\¿;{¿;Å¿;≈¿;À¿;€¿;·¿<0¿<C¿<P¿<Ü¿<Æ¿<÷¿<˚¿=$¿=J¿={¿=Ñ¿=ä¿=é¿=è¿=—¿=◊¿>(¿>J¿>P¿>î¿>ö¿>™¿>∞¿>˝¿?¿?¿?Q¿?y¿?†¿?ƒ¿?Û¿?˙¿@ ¿@B¿@H¿@L¿@M¿@ç¿@ì¿@”¿@Ÿ¿@È¿@Ô¿A5¿AM¿AZ¿Aã¿A∞¿A„¿B0¿Bà¿B∂¿C¿CD¿Cg¿Cä¿CØ¿C¿¿D¿D)¿DN¿Dü¿D≥¿Dø¿E
¿EE¿Ej¿Eè¿E‡¿EÙ¿F ¿FK¿Fl¿Fë¿F‡¿G¿GP¿Gg¿G£¿G¡¿GÁ¿H¿H-¿H<¿HP¿H\¿H~¿H®¿H’¿I ¿I3¿Iã¿IŒ¿J$¿Jb¿J±¿J€¿K¿Kx¿KÈ¿L0¿LA¿LØ¿M#¿Mò¿MÒ¿N¿N|¿N™¿Nª¿O=¿Oæ¿P¿Pë¿P˝¿Q_¿Q„¿Q‰¿R¿Rd¿R∏¿R˚¿S¿SI¿S[¿TQ¿TÑ¿Tõ¿TÏ¿U[¿Uê¿U©¿U‹¿UÓ¿U˛¿V
¿V¿V¿V¿V¿Va¿Vg¿V≤¿V∏¿V»¿VŒ¿W¿W0¿W=¿Wí¿Wì¿W⁄¿W‡¿X/¿XA¿XG¿XW¿X]¿X™¿X¬¿Xœ¿Y¿Y1¿YX¿Yy¿Yú¿Y∆¿Y¯¿ZG¿ZZ¿Zá¿Z≥¿ZÈ¿Z¯¿[¿[)¿[N¿[q¿[ñ¿[„¿[Î¿[Ï¿\/¿\0¿\o¿\ü¿\•¿\©¿\™¿\ˆ¿\¸¿]J¿]f¿]l¿]|¿]Ç¿]À¿]Ï¿]˘¿^@¿^e¿^±¿^Ú¿_C¿_ï¿_√¿_–¿`¿`¿`¿`3¿`T¿`w¿`¶¿`’¿a@¿aj¿a†¿aØ¿a¬¿aÔ¿b¿bQ¿b`¿bl¿bë¿b∂¿bŸ¿b˛¿c+¿cî¿cº¿c¿c˝¿d¿d¿dI¿dO¿dS¿dT¿dô¿dü¿d–¿d÷¿dÊ¿dÏ¿e<¿eO¿e\¿eï¿e¿¿eÊ¿f¿f¿f9¿f]¿f¿fÉ¿fÑ¿f≈¿fÀ¿g¿g¿g8¿g^¿gl¿gr¿gó¿g∂¿g◊¿h#¿hj¿ht¿hû¿hƒ¿hÍ¿hÙ¿i¿i:¿i[¿i~¿i¶¿iÒ¿i˚¿j!¿j'¿j+¿j,¿jq¿jw¿já¿jç¿j›¿j¿k1¿k>¿kr¿k∆¿l¿lp¿l∆¿m¿mV¿mπ¿m·¿mÂ¿mÊ¿n(¿n.¿ny¿n∞¿n∂¿n∆¿nÃ¿o¿o,¿o9¿on¿oì¿o‹¿p¿p(¿p0¿p6¿p:¿p;¿på¿p£¿q¿qi¿q ¿qŒ¿qœ¿r¿r2¿rë¿r’¿s1¿s5¿s6¿sà¿sï¿sÎ¿t¿t\¿t¨¿t¯¿uM¿u≈¿uÛ¿u˜¿u¯¿vE¿ve¿vj¿vπ¿v”¿vÿ¿w!¿wY¿w·¿x1¿xÇ¿x±¿x»¿x˙¿y3¿yG¿yÄ¿yœ¿y–¿z¿zf¿z∑¿z∏¿zÂ¿{,¿{9¿{@¿{D¿{E¿{á¿{ç¿{π¿|¿|0¿|6¿|F¿|L¿|ô¿|¨¿|π¿|Ó¿}¿}"¿}(¿}P¿}â¿}ñ¿}Ω¿}‚¿~¿~(¿~K¿~p¿~‘¿~˜¿V¿^¿d¿ä¿¨¿≤¿∂¿∑¿˛¿Ä¿ÄI¿ÄO¿Ä_¿Äe¿Ä≤¿Ä ¿Ä◊¿Å¿Å8¿ÅF¿ÅL¿Å~¿Å≠¿Å÷¿Ç¿Ç¿Ç6¿Çd¿Ç°¿É¿É	¿Éy¿É∫¿É»¿ÉŒ¿Éœ¿Ñ¿Ñ¿Ñ~¿Ñ•¿Ñ∆¿ÑÈ¿Ö9¿Ö^¿ÖÉ¿Ö¶¿ÖÀ¿Ü¿Ü#¿Ü0¿ÜW¿Üx¿Üö¿Üƒ¿ÜÒ¿á ¿áN¿áÅ¿áí¿áΩ¿á¿à¿àF¿àî¿àÊ¿â#¿âr¿â£¿â”¿ä¿ä¿äh¿äx¿äè¿äõ¿ä¿¿äÂ¿ã¿ã1¿ã^¿ãç¿ãª¿ãÓ¿ãˇ¿å*¿å]¿åá¿å≥¿å˙¿ç<¿çi¿çö¿ç ¿çˇ¿é¿é_¿éo¿éÜ¿éí¿éµ¿éÿ¿é˝¿è(¿èR¿èÅ¿èé¿èñ¿èú¿è†¿è°¿èÈ¿èÔ¿ê=¿êT¿êZ¿êj¿êp¿êæ¿ê˜¿ë¿ëA¿ëg¿ëu¿ë{¿ë|¿ë«¿ë»¿ë„¿í/¿íp¿í¡¿ì¿ìA¿ìN¿ìÄ¿ìâ¿ìÈ¿ìÍ¿î¿î{¿î¶¿îÛ¿ï¿ïF¿ïQ¿ïR¿ïr¿ïõ¿ïÃ¿ïÙ¿ñ¿ñn¿ññ¿ñ¡¿ñ÷¿ñÍ¿ñÙ¿ñ¸¿ñ˝¿ó%¿óò¿ó¡¿óË¿ò¿ò2¿òV¿òÇ¿ò±¿ò‚¿ô7¿ôe¿ôö¿ô≠¿ô⁄¿ö¿ö;¿öi¿öÇ¿ö’¿õ¿õ*¿õ8¿õL¿õq¿õô¿õÍ¿ú¿úE¿úT¿ú{¿ú†¿úÕ¿ù¿ùH¿ùy¿ùà¿ùí¿ùö¿ùõ¿ù¬¿ù„¿û>¿û•¿ûÌ¿û˙¿üW¿üâ¿ü´¿ü’¿†¿†8¿†ã¿†∑¿†Í¿†˚¿°&¿°Y¿°É¿°Ø¿°Ï¿¢¿¢L¿¢Ä¿¢í¿¢√¿¢Û¿£(¿£;¿£è¿£ü¿£∂¿£À¿£◊¿£È¿§¿§3¿§Ö¿§Ë¿•0¿•R¿•|¿•©¿•‘¿¶¿¶=¿¶ê¿¶º¿¶Ô¿ß ¿ß*¿ßV¿ßÉ¿ß¥¿ß‰¿®¿®,¿®Ä¿®ê¿®ß¿®º¿®»¿®⁄¿®˝¿© ¿©E¿©w¿©∆¿©Ó¿™¿™*¿™2¿™8¿™9¿™b¿™ö¿™€¿´.¿´4¿´5¿´Å¿´ì¿´‡¿¨@¿¨p¿¨Ω¿¨¯¿≠6¿≠u¿≠∆¿≠ı¿Æ%¿ÆI¿ÆÑ¿Æ±¿Ææ¿Æ…¿ÆÌ¿Æˆ¿Ø¿ØQ¿Øó¿Ø∆¿Øˆ¿∞¿∞S¿∞Ä¿∞ç¿∞ò¿∞º¿∞≈¿∞“¿±¿±$¿±(¿±)¿±n¿±t¿±∑¿±—¿±◊¿±Á¿±Ì¿≤=¿≤P¿≤]¿≤î¿≤ﬂ¿≥	¿≥
¿≥ö¿≥º¿≥¬¿≥√¿≥›¿≥ˇ¿¥¿¥¿¥1¿¥5¿¥6¿¥Ç¿¥¢¿¥®¿¥Ë¿µ¿µ¿µ5¿µP¿µW¿µÄ¿µê¿µ¨¿µ¸¿∂H¿∂n¿∂ú¿∂¿¿∂Ï¿∑¿∑Z¿∑à¿∑∞¿∑ÿ¿∏
¿∏>¿∏l¿∏Ü¿∏ö¿∏°¿∏•¿∏ß¿∏®¿∏˙¿∏˛¿πI¿πò¿πÁ¿π¸¿∫ ¿∫¿∫¿∫^¿∫™¿∫ª¿∫˜¿ª&¿ª,¿ªv¿ª§¿ªÀ¿ª⁄¿ªÓ¿º
¿º$¿º=¿ºZ¿ºr¿ºé¿º≠¿º—¿ºÓ¿Ω¿Ω"¿ΩA¿Ωa¿Ω~¿Ωë¿Ω™¿Ω∞¿Ω±¿Ω˚¿æK¿æÄ¿æØ¿æ∞¿æ˝¿øI¿øÑ¿øÖ¿ø÷¿øÛ¿¿*¿¿+¿¿i¿¿ï¿¿ñ¿¿Ÿ¿¡¿¡¿¡_¿¡r¿¡x¿¡ø¿¬¿¬f¿¬ó¿¬ò¿¬Á¿√4¿√h¿√ö¿√õ¿√ﬂ¿ƒ&¿ƒd¿ƒ°¿ƒ¢¿ƒÈ¿≈0¿≈1¿≈w¿≈∞¿≈±¿≈ˇ¿∆@¿∆u¿∆v¿∆ƒ¿«¿«;¿«<¿«v¿«±¿«≤¿«Î¿»(¿»)¿»m¿»§¿»•¿»Á¿»Ì¿…$¿…G¿…H¿…g¿…}¿…~¿…ä¿…Ÿ¿…€¿…‹¿ 3¿ 4¿ Ñ¿ ÷¿À(¿ÀF¿ÀK¿Àù¿À±¿ÀÔ¿Ã¿Ã7¿ÃZ¿Ã{¿Ã…¿Õ¿Õg¿Õ∑¿Œ¿Œ5¿Œá¿Œ¶¿Œ«¿œ¿œf¿œ∑¿œ…¿œÔ¿–¿–a¿–∞¿— ¿—L¿—~¿—π¿—ø¿—√¿—ƒ¿“¿“;¿“o¿“î¿“·¿”4¿”É¿”±¿”ˇ¿‘3¿‘9¿‘:¿‘à¿‘º¿‘¬¿‘∆¿‘«¿‘˜¿’E¿’p¿’v¿’z¿’{¿’ó¿’Ω¿’¡¿’¬¿’˘¿÷)¿÷-¿÷.¿÷g¿÷ò¿÷ú¿÷ù¿÷–¿÷˛¿◊¿◊¿◊:¿◊g¿◊k¿◊l¿◊°¿◊Ã¿◊–¿◊—¿ÿ¿ÿ>¿ÿk¿ÿq¿ÿu¿ÿv¿ÿæ¿ÿÚ¿Ÿ$¿Ÿ*¿Ÿ.¿Ÿ/¿Ÿi¿Ÿñ¿Ÿ¡¿Ÿ«¿ŸÀ¿ŸÃ¿Ÿÿ¿Ÿˇ¿⁄\¿⁄]¿⁄æ¿⁄Ú¿€¿€+¿€^¿€ö¿€£¿€™¿€´¿€⁄¿‹¿‹;¿‹™¿›(¿›X¿›k¿›¢¿›„¿ﬁ¿ﬁ"¿ﬁ+¿ﬁ1¿ﬁ2¿ﬁa¿ﬁë¿ﬁæ¿ﬁÂ¿ﬂ
¿ﬂ/¿ﬂP¿ﬂŸ¿‡$¿‡c¿‡z¿‡–¿‡Ô¿·,¿·Y¿·ä¿·Ω¿·Í¿‚¿‚B¿‚Q¿‚^¿‚Å¿‚§¿‚…¿„<¿„|¿„∞¿„«¿‰¿‰<¿‰y¿‰¶¿‰◊¿Â
¿Â7¿Â`¿Âè¿Âû¿Â´¿Â≥¿Âπ¿Â∫¿Ê¿Êy¿Ê∂¿ÊÁ¿Ê˙¿ÁO¿Áü¿Á™¿Á≥¿Áπ¿Á∫¿ÁŸ¿ÁÛ¿Ë¿Ë6¿ËQ¿ËX¿Ë\¿Ë^¿Ë_¿Ë≠¿ËŒ¿Ë“¿È¿È]¿È®¿Í¿Í7¿ÍS¿Íà¿Íù¿Íû¿Í∏¿Íπ¿ÍÛ¿Î¿Î(¿Î6¿Î<¿Î=¿ÎX¿Îb¿Îì¿Î¥¿ÎË¿Ï¿Ï¿Ï?¿Ïë¿Ïõ¿ÏÂ¿Ì!¿Ì\¿Ìl¿Ìt¿Ìõ¿Ì©¿ÌØ¿Ì·¿Ó¿Ó-¿Ó.¿ÓZ¿Óh¿Ón¿ÓÜ¿Óä¿Óã¿Óó¿Ó√¿Ó‹¿Ô¿Ô¿Ô?¿ÔO¿ÔU¿Ôv¿Ôz¿Ô{¿Ôá¿Ô∂¿Ô⁄¿¿5¿;¿?¿@¿L¿â¿û¿ƒ¿÷¿˝¿Ò$¿ÒI¿Òn¿Òà¿Òó¿Òù¿Ò°¿Ò¢¿ÒÆ¿Ò¡¿ÒÛ¿Ú	¿Ú¿Ú"¿Ú$¿Ú%¿Ún¿ÚÖ¿Ú‘¿Ú·¿Ú‚¿Û0¿Û}¿Û¡¿ÛÃ¿ÛÕ¿Ù¿Ù,¿Ù.¿Ù/¿Ùè¿Ù£¿Ùß¿Ùµ¿ı¿ıg¿ıö¿ıû¿ı‹¿ˆG¿ˆr¿ˆí¿ˆœ¿ˆ‰¿ˆÂ¿ˆˇ¿˜ ¿˜D¿˜d¿˜y¿˜á¿˜ç¿˜é¿˜µ¿˜ø¿¯	¿¯*¿¯^¿¯|¿¯í¿¯µ¿˘¿˘¿˘b¿˘û¿˘›¿˘Ì¿˘ı¿˙ ¿˙.¿˙4¿˙5¿˙w¿˙ù¿˙≈¿˙∆¿˙Ú¿˚ ¿˚¿˚¿˚"¿˚#¿˚/¿˚[¿˚t¿˚•¿˚´¿˚€¿˚Î¿˚Ò¿¸¿¸¿¸¿¸#¿¸R¿¸v¿¸ù¿¸—¿¸◊¿¸€¿¸‹¿¸Ë¿˝%¿˝:¿˝`¿˝r¿˝ô¿˝¿¿˝Â¿˛
¿˛"¿˛(¿˛,¿˛-¿˛9¿˛L¿˛~¿˛î¿˛©¿˛≠¿˛Ø¿˛∞¿ˇ¿ˇ¿ˇ!¿ˇo¿ˇä¿ˇ¿¿ˇÀ¿ˇÃ¿ /¿ è¿ Õ¿ ÿ¿ Ÿ¿¿¿!¿"¿p¿¡¿˜¿H¿Ä¿Ω¿…¿‡¿˙¿¿4¿R¿z¿û¿’¿ˇ¿¿ ¿,¿d¿e¿q¿™¿´¿∑¿Ò¿Ú¿˛¿<¿=¿I¿©¿™¿∂¿¿¿$¿h¿i¿u¿Ø¿±    Ä•  Ä∫Ä— Ä◊  Å  Å.  ÅV  Å  Å®  Å—  ÅÊ  Å˝  Ç  Ç/  ÇV  Çk  Çà  Ç°  Ç¡  Ç⁄  ÇÒ  É  É0  ÉJ  Éi  ÉÖÉ≠ÉƒÉ∆ÉÌÑ ÖêÇóÜ´Å/// ParentData that determines whether or not to paint the corresponding child.
///
/// Used in the layout of the Cupertino and Material text selection menus, which
/// decide whether or not to paint their buttons after laying them out and
/// determining where they overflow.  ÜÄﬂáºÄæ/// Whether or not this child is painted.
///
/// Children in the selection toolbar may be laid out for measurement purposes
/// but not painted. This allows these children to be identified.á  á‘QáÁ   á‘á’ à)ùçå˙Ñ¡/// An interface for building the selection UI, to be provided by the
/// implementer of the toolbar widget.
///
/// Override text operations such as [handleCut] if needed.
///
/// ## Use with [EditableText.contextMenuBuilder]
/// [buildToolbar] has been deprecated in favor of
/// [EditableText.contextMenuBuilder], and that is the preferred way to
/// customize the context menus now. However, both ways will continue to work
/// during the deprecation period.
///
/// To use both [EditableText.contextMenuBuilder] and [buildHandle], a two-step
/// migration is necessary. First, migrate to [TextSelectionHandleControls],
/// using its [TextSelectionHandleControls.buildHandle] method and moving
/// toolbar code to [EditableText.contextMenuBuilder]. Later, the deprecation
/// period will expire, [buildToolbar] will be removed, and
/// [TextSelectionHandleControls] will be deprecated. Migrate back to
/// [TextSelectionControls.buildHandle], so that the final state is to use
/// [EditableText.contextMenuBuilder] for the toolbar and
/// [TextSelectionControls] for the handles.
///
/// See also:
///
///  * [SelectionArea], which selects appropriate text selection controls
///    based on the current platform.    çÇ<é‚Å¥/// Builds a selection handle of the given `type`.
///
/// The top left corner of this widget is positioned at the bottom of the
/// selection position.
///
/// The supplied [onTap] should be invoked when the handle is tapped, if such
/// interaction is allowed. As a counterexample, the default selection handle
/// on iOS [cupertinoTextSelectionControls] does not call [onTap] at all,
/// since its handles are not meant to be tapped. éÓé¸  èè  è"è*  è:èI   èTÅê(Ä∆/// Get the anchor point of the handle relative to itself. The anchor point is
/// the point that is aligned with a specific point in the text. A handle
/// often visually "points to" that location. ê8êQ  êVê^   êqÉ˚ì;Ç3/// Builds a toolbar near a text selection.
///
/// Typically displays buttons for copying and pasting text.
///
/// The [globalEditableRegion] parameter is the TextField size of the global
/// coordinate system in logical pixels.
///
/// The [textLineHeight] parameter is the [RenderEditable.preferredLineHeight]
/// of the [RenderEditable] we are building a toolbar for.
///
/// The [selectionMidpoint] parameter is a general calculation midpoint
/// parameter of the toolbar. More detailed position information
/// is computable from the [endpoints] parameter. ìMì[  ìgìm  ìÜìé  ì°ì©  ìø"ìŸ  ìÁì˛  î1î.  îB$îK  íøí¿í ì0í–í˘îpZî•-/// Returns the size of the selection handle. î≥îª   îŒÇcñ±ÅX/// Whether the current selection of the text field managed by the given
/// `delegate` can be removed from the text field and placed into the
/// [Clipboard].
///
/// By default, false is returned when nothing is selected in the text field.
///
/// Subclasses can use this to decide if they should expose the cut
/// functionality to the user. ñ∏ñœ  ñ7ñ8ñBñ®ñHñqó5Ç>òÒÅ3/// Whether the current selection of the text field managed by the given
/// `delegate` can be copied to the [Clipboard].
///
/// By default, false is returned when nothing is selected in the text field.
///
/// Subclasses can use this to decide if they should expose the copy
/// functionality to the user. ò˘ô  òwòxòÇòËòàò±ôwÇRõyÅu/// Whether the text field managed by the given `delegate` supports pasting
/// from the clipboard.
///
/// Subclasses can use this to decide if they should expose the paste
/// functionality to the user.
///
/// This does not consider the contents of the clipboard. Subclasses may want
/// to, for example, disallow pasting when the clipboard contains an empty
/// string. õÇõô  öˇõ õ
õpõõ9õÕÇIù^Å
/// Whether the current selection of the text field managed by the given
/// `delegate` can be extended to include the entire content of the text
/// field.
///
/// Subclasses can use this to decide if they should expose the select all
/// functionality to the user. ùkùÇ  ú‰úÂúÔùUúıùûÅêüAÄ§/// Call [TextSelectionDelegate.cutSelection] to cut current selection.
///
/// This is called by subclasses when their cut affordance is activated by
/// the user. üKüb  û«û»û“ü8ûÿüüÆÅï†ÿÄß/// Call [TextSelectionDelegate.copySelection] to copy current selection.
///
/// This is called by subclasses when their copy affordance is activated by
/// the user. †„†˙  †^†_†i†œ†o†ò°GÇÄ£YÅ>/// Call [TextSelectionDelegate.pasteText] to paste text.
///
/// This is called by subclasses when their paste affordance is activated by
/// the user.
///
/// This function is asynchronous since interacting with the clipboard is
/// asynchronous. Race conditions may exist with this API as currently
/// implemented. £e£|  ¢◊¢ÿ¢‚£H¢Ë££ÀÅÈ•HÄÙ/// Call [TextSelectionDelegate.selectAll] to set the current selection to
/// contain the entire text value.
///
/// Does not hide the toolbar.
///
/// This is called by subclasses when their select-all affordance is activated
/// by the user. •X•o  §Œ§œ§Ÿ•?§ﬂ• •∏ÖLß¯Ç9/// Text selection controls that do not show any toolbars or handles.
///
/// This is a placeholder, suitable for temporary use during development, but
/// not practical for production. For example, it provides no way for the user
/// to interact with selections: no context menus on desktop, no toolbars or
/// drag handles on mobile, etc. For production, consider using
/// [MaterialTextSelectionControls] or creating a custom subclass of
/// [TextSelectionControls].
///
/// The [emptyTextSelectionControls] global variable has a
/// suitable instance of this class.    ®5C®F  ®T®\  ®5®6®|Å_®è  ®°®Ø  ®ª®¡  ®⁄®‚  ®ı®˝  ©"©-  ©;©R  ©_1©Ç  ©ñ$©ü  ®|®}©ﬂÄ™©Ú  ©˛™  ™™-  ™2™:  ™J™Y  ©ﬂ©‡™çu™†  ™∞™…  ™Œ™÷  ™ç™é ≠5¿ YUÆQÅ/// An object that manages a pair of text selection handles for a
/// [RenderEditable].
///
/// This class is a wrapper of [SelectionOverlay] to provide APIs specific for
/// [RenderEditable]s. To manage selection handles for custom widgets, use
/// [SelectionOverlay] instead. Æjâƒ ØØ Äõ/// Creates an object that manages overlay entries for selection handles.
///
/// The [context] must not be null and must have an [Overlay] as an ancestor.Ø'ØB  ØLØ[  ØgØp  ØÖ#Øô  ØÆ'Ø¬  Ø€%ØÔ  ∞∞  ∞&∞,  ∞B∞H  ∞c∞r  ∞à=∞õ  ∞À%∞⁄  ∞ˆ(±  ±$±*  ±A:±f  
∞X∞Æ∞ø∞¿±î±Ñ±ñ±¥±≠±∂∏2Å9πdÅ/// {@template flutter.widgets.SelectionOverlay.context}
/// The context in which the selection UI should appear.
///
/// This context must have an [Overlay] as an ancestor because this object
/// will display the text selection handles in that [Overlay].
/// {@endtemplate} πpÅ∫VM/// Controls the fade-in and fade-out animations for the toolbar and handles.	π¿π¡πÀ∫<π—∫∫e∫u∫vªhªwD/// The editable line in which the selected text is being displayed. ªàpªÁ?/// {@macro flutter.widgets.SelectionOverlay.selectionControls} ª˝oº[?/// {@macro flutter.widgets.SelectionOverlay.selectionDelegate} ºq-ºç  º£Ä¢Ω3t/// {@macro flutter.widgets.EditableText.contextMenuBuilder}
///
/// If not provided, no context menu will be built. Ω¶Ω∑  Ω˜Væ æ3æ@æEæAæFæLæGæQTæk æãæòæùæôæûæ§æüæ©Ræ√ æ·æÓæÛæÔæÙæ˙æı¿ Aé¿ Aì ¿ A•¿ e÷"¿ e‚  ¿ fb0¿ fn  ¿ uà$¿ uî  ¿ v2¿ v$  ΩJXΩí/// Retrieve current value.  ΩhΩiΩ¬1Ω‘    ¿ @éÄ˝¿ AiÄ≈/// Whether selection handles are visible.
///
/// Set to false if you want to hide the handles. Use this property to show or
/// hide the handle without rebuilding them.
///
/// Defaults to false.   ¿ AÆÄÆ¿ A≤  ¿ A¡¿ A«   ¿ SÅÄÑ¿ Sª./// Whether the handles are currently visible.   ¿ T	Å¿ TÂÄ∆/// {@macro flutter.widgets.SelectionOverlay.toolbarIsVisible}
///
/// See also:
///
///   * [spellCheckToolbarIsVisible], which is only whether the spell check menu
///     specifically is visible.   ¿ U ~¿ U[//// Whether the magnifier is currently visible.   ¿ U¢Ä˙¿ VGÄë/// Whether the spell check menu is currently visible.
///
/// See also:
///
///   * [toolbarIsVisible], which is whether any toolbar is visible.   ø Åäø    ¿ B`Äò¿ B°9/// {@macro flutter.widgets.SelectionOverlay.showHandles}   ¿ B¸r¿ C=9/// {@macro flutter.widgets.SelectionOverlay.hideHandles}   ¿ CrÅ¡¿ C≥9/// {@macro flutter.widgets.SelectionOverlay.showToolbar}   ¿ E7Å¿¿ E±p/// Shows toolbar with spell check suggestions of misspelled words that are
/// available for click-and-replace. ¿ E◊1¿ EÊ   ¿ F˚Å®¿ G>;/// {@macro flutter.widgets.SelectionOverlay.showMagnifier} ¿ GL¿ GT   ¿ HßÅÆ¿ HÏ=/// {@macro flutter.widgets.SelectionOverlay.updateMagnifier} ¿ H¸¿ I   ¿ JY¿ Jú;/// {@macro flutter.widgets.SelectionOverlay.hideMagnifier}   ¿ J‹É˝¿ M(Ç4/// Updates the overlay after the selection has changed.
///
/// If this method is called while the [SchedulerBinding.schedulerPhase] is
/// [SchedulerPhase.persistentCallbacks], i.e. during the build, layout, or
/// paint phases (see [WidgetsBinding.drawFrame]), then the update is delayed
/// until the post-frame callbacks phase. Otherwise the update is done
/// synchronously. This means that it is safe to call during builds, but also
/// that if you do call this during a build, the UI will not update until the
/// next frame (i.e. many milliseconds later). ¿ M/¿ MA   ¿ N›Ç√¿ N‚    ¿ Q§ÅŸ¿ RkÄπ/// Causes the overlay to update its rendering.
///
/// This is intended to be called when the [renderObject] may have changed its
/// text metrics (e.g. because the text was scrolled).   ¿ V†]¿ V⁄2/// {@macro flutter.widgets.SelectionOverlay.hide}   ¿ Wr¿ WB9/// {@macro flutter.widgets.SelectionOverlay.hideToolbar}   ¿ WwÅÀ¿ W¥5/// {@macro flutter.widgets.SelectionOverlay.dispose}   ¿ YFÑq¿ YM    ¿ ]ªÇÆ¿ ]¬    ¿ `mÑÙ¿ `{  ¿ `ë&¿ `™  ¿ `Ω%¿ `Œ  ¿ `Ë)¿ `ˇ   ¿ fóÉæ¿ fú  ¿ fø¿ f—   ¿ jYÉ¿ k˚Åå/// Given a handle position and drag position, returns the position of handle
/// after the drag.
///
/// The handle jumps instantly between lines when the drag reaches a full
/// line's height away from the original handle position. In other words, the
/// line jump happens when the contact point would be located at the same
/// place on the handle at the new line as when the gesture started. ¿ l¿ l  ¿ l¿ l   ¿ meá¨¿ mj  ¿ mé¿ m°   ¿ vOÉÀ¿ vT  ¿ vy¿ vã   ¿ zà¿ z#  ¿ zI¿ z\   ¿ Ç*Å¸¿ Ç/  ¿ ÇA¿ ÇQ   ¿ Ñ*Äœ¿ Ñ/  ¿ ÑM¿ Ñ\   ¿ Ñ˝Åã¿ Ö  ¿ Ö(¿ Ö7  ¿ ÖK¿ Öd  ¿ Ör¿ Öã    ¿ Üå¿ b©¿ áNÄª/// An object that manages a pair of selection handles and a toolbar.
///
/// The selection handles are displayed in the [Overlay] that most closely
/// encloses the given [BuildContext]. ¿ ácÜÿ ¿ à¿ àÄõ/// Creates an object that manages overlay entries for selection handles.
///
/// The [context] must not be null and must have an [Overlay] as an ancestor.¿ à¿ à+  ¿ à7¿ à=  ¿ àR0¿ àt  ¿ àà!¿ àô  ¿ àØ¿ àµ  ¿ àÕ¿ à”  ¿ àÓ¿ àÙ  ¿ â¿ â  ¿ â/.¿ âQ  ¿ âc¿ ât  ¿ âà¿ âé  ¿ â§¿ â™  ¿ â√¿ â…  ¿ â„¿ âÈ  ¿ ä ¿ ä  ¿ ä4¿ ä<  ¿ äS¿ äb  ¿ äxÄ≠¿ ã  ¿ ã+¿ ã:  ¿ ãN"¿ ã]  ¿ ãv ¿ ãÖ  ¿ ãú¿ ã´  ¿ ã¿0¿ ã∆  ¿ ãˆ¿ ã¸  ¿ åÄ•¿ åØ  ¿ å√A¿ å…  +¿ äx¿ äy¿ äÉ¿ ã ¿ äã¿ ä«¿ ãŸ¿ ãÍ¿ ãÎ¿ å¿ å¿ å#¿ å†¿ å+¿ åg¿ å·¿ å˚¿ å¸¿ ç¿ ç¿ ç ¿ çK¿ ç8¿ çM¿ çv¿ çg¿ çx¿ çü¿ çé¿ ç°¿ çÕ¿ çπ¿ çœ¿ ç˚¿ çÍ¿ ç˝¿ é¿ é¿ é9¿ é¿ é0¿ é8¿ é1$¿ é?R¿ éä5/// {@macro flutter.widgets.SelectionOverlay.context} ¿ éñk¿ éπ 	¿ é–¿ é›¿ éÎ¿ éﬁ¿ éÏ¿ è ¿ éÌ¿ é˙¿ é˚¿ èÅ®¿ êÇÅY/// [MagnifierController.show] and [MagnifierController.hide] should not be called directly, except
/// from inside [showMagnifier] and [hideMagnifier]. If it is desired to show or hide the magnifier,
/// call [showMagnifier] or [hideMagnifier]. This is because the magnifier needs to orchestrate
/// with other properties in [SelectionOverlay].¿ êô¿ ê¨¿ ê≠¿ ê≥Å_¿ ë¸Å/// {@macro flutter.widgets.magnifier.TextMagnifierConfiguration.intro}
///
/// {@macro flutter.widgets.magnifier.intro}
///
/// By default, [SelectionOverlay]'s [TextMagnifierConfiguration] is disabled.
///
/// {@macro flutter.widgets.magnifier.TextMagnifierConfiguration.details} ¿ ú(¿ ú$  ¿ ùÒ¿ ù¯  ¿ û¨#¿ û± ¿ û ¿ û‘Å&¿ üÁÄÈ/// Whether the start handle is visible.
///
/// If the value changes, the start handle uses [FadeTransition] to transition
/// itself on and off the screen.
///
/// If this is null, the start selection handle will always be visible. ¿ üˇÄÑ¿ †mE/// Called when the users start dragging the start selection handles. ¿ £¿Äç¿ §6L/// Called when the users drag the start selection handles to new locations. ¿ §RÄô¿ §◊\/// Called when the users lift their fingers after dragging the start selection
/// handles. ¿ ß	&¿ ß!  ¿ ®ﬁ¿ ®Â  ¿ ©ë!¿ ©ñ ¿ ©≠¿ ©∑Å¿ ™ƒÄ„/// Whether the end handle is visible.
///
/// If the value changes, the end handle uses [FadeTransition] to transition
/// itself on and off the screen.
///
/// If this is null, the end selection handle will always be visible. ¿ ™⁄ÄÄ¿ ´FC/// Called when the users start dragging the end selection handles. ¿ ÆáÄâ¿ Æ˚J/// Called when the users drag the end selection handles to new locations. ¿ ØÄï¿ ØòZ/// Called when the users lift their fingers after dragging the end selection
/// handles. ¿ ±Å¿ ±ˇÄœ/// Whether the toolbar is visible.
///
/// If the value changes, the toolbar uses [FadeTransition] to transition
/// itself on and off the screen.
///
/// If this is null the toolbar will always be visible. ¿ ≤õ,¿ ≤¥  ¿ µh¿ µnG/// Debugging information for explaining why the [Overlay] is required. ¿ µÉ~¿ µÒY/// The object supplied to the [CompositedTransformTarget] that wraps the text
/// field. ¿ ∂Äõ¿ ∂çr/// The objects supplied to the [CompositedTransformTarget] that wraps the
/// location of start selection handle. ¿ ∂¶Äó¿ ∑+p/// The objects supplied to the [CompositedTransformTarget] that wraps the
/// location of end selection handle. ¿ ∑BÄπ¿ ∑ÍÄÑ/// {@template flutter.widgets.SelectionOverlay.selectionControls}
/// Builds text selection handles and toolbar.
/// {@endtemplate} ¿ ∏ ÅW¿ πFÄ´/// {@template flutter.widgets.SelectionOverlay.selectionDelegate}
/// The delegate for manipulating the current selection in the owning
/// text field.
/// {@endtemplate}¿ ∏¥¿ ∏µ¿ ∏ø¿ π%¿ ∏≈¿ ∏Ó¿ π\É	¿ ºTÇø/// Determines the way that drag start behavior is handled.
///
/// If set to [DragStartBehavior.start], handle drag behavior will
/// begin at the position where the drag gesture won the arena. If set to
/// [DragStartBehavior.down] it will begin at the position where a down
/// event is first detected.
///
/// In general, setting this to [DragStartBehavior.start] will make drag
/// animation smoother and setting it to [DragStartBehavior.down] will make
/// drag behavior feel slightly more reactive.
///
/// By default, the drag start behavior is [DragStartBehavior.start].
///
/// See also:
///
///  * [DragGestureRecognizer.dragStartBehavior], which gives an example for the different behaviors. ¿ ºjÉh¿ øªÇø/// {@template flutter.widgets.SelectionOverlay.onSelectionHandleTapped}
/// A callback that's optionally invoked when a selection handle is tapped.
///
/// The [TextSelectionControls.buildHandle] implementation the text field
/// uses decides where the handle's tap "hotspot" is, or whether the
/// selection handle supports tap gestures at all. For instance,
/// [MaterialTextSelectionControls] calls [onSelectionHandleTapped] when the
/// selection handle's "knob" is tapped, while
/// [CupertinoTextSelectionControls] builds a handle that's not sufficiently
/// large for tapping (as it's not meant to be tapped) so it does not call
/// [onSelectionHandleTapped] even when tapped.
/// {@endtemplate} ¿ ø◊Å¿ ¿ﬂÄﬁ/// Maintains the status of the clipboard for determining if its contents can
/// be pasted or not.
///
/// Useful because the actual value of the clipboard can only be checked
/// asynchronously (see [Clipboard.getData]). ¿ √¿ √%  ¿ √“Äê¿ ƒ8M/// Controls the fade-in and fade-out animations for the toolbar and handles.¿ ƒG¿ ƒO¿ ƒa¿ ƒ\¿ ƒP¿ ƒ^¿ ƒgÄ°¿ ≈ ÄÄ/// A pair of handles. If this is non-null, there are always 2, though the
/// second is hidden when the selection is collapsed. ¿ ≈2¿ ≈7/// A copy/paste toolbar. ¿ ≈äL¿ ≈¶ ¿ ≈ø¿ ≈‘¿ ≈’¿ ≈€R¿ ≈˜ ¿ ∆¿ ∆+¿ ∆,¿ œÖ¿ œä ¿ œú¿ íÅ»¿ í¯ÄÕ/// {@template flutter.widgets.SelectionOverlay.toolbarIsVisible}
/// Whether the toolbar is currently visible.
///
/// Includes both the text selection toolbar and the spell check menu.
/// {@endtemplate}   ¿ õJÄø¿ õÂx/// The type of start selection handle.
///
/// Changing the value while the handles are visible causes them to rebuild.   ¿ ú8Ä•¿ ú<  ¿ úL¿ úe   ¿ ú·Å¿ ù∆Äœ/// The line height at the selection start.
///
/// This value is used for calculating the size of the start selection handle.
///
/// Changing the value while the handles are visible causes them to rebuild.   ¿ ûÄö¿ û  ¿ û$¿ û,   ¿ ¶MÄπ¿ ¶Êv/// The type of end selection handle.
///
/// Changing the value while the handles are visible causes them to rebuild.   ¿ ß3Äü¿ ß7  ¿ ßE¿ ß^   ¿ ß÷Å¿ ®∑ÄÀ/// The line height at the selection end.
///
/// This value is used for calculating the size of the end selection handle.
///
/// Changing the value while the handles are visible causes them to rebuild.   ¿ ®˘Äî¿ ®˝  ¿ ©¿ ©   ¿ ≤ÄÜ¿ ≤n</// The text selection positions of selection start and end.   ¿ ≤ÀÇG¿ ≤œ  ¿ ≤‚¿ ≤¸   ¿ ¿ÛÇ'¿ ¬ˆÅR/// The location of where the toolbar should be drawn in relative to the
/// location of [toolbarLayerLink].
///
/// If this is null, the toolbar is drawn based on [selectionEndpoints] and
/// the rect of render object of [context].
///
/// This is useful for displaying toolbars at the mouse right-click locations
/// in desktop devices.  ¿ ¬V¿ ¬W¿ ¬a¿ ¬Ê¿ ¬g¿ ¬Ø¿ √9Äï¿ √=  ¿ √M¿ √V   ¿ ì„Öe¿ ñÇ/// {@template flutter.widgets.SelectionOverlay.showMagnifier}
/// Shows the magnifier, and hides the toolbar if it was showing when [showMagnifier]
/// was called. This is safe to call on platforms not mobile, since
/// a magnifierBuilder will not be provided, or the magnifierBuilder will return null
/// on platforms not mobile.
///
/// This is NOT the source of truth for if the magnifier is up or not,
/// since magnifiers may hide themselves. If this info is needed, check
/// [MagnifierController.shown].
/// {@endtemplate} ¿ ñ"¿ ñ,   ¿ ôLÅ˙¿ öÄ•/// {@template flutter.widgets.SelectionOverlay.hideMagnifier}
/// Hide the current magnifier.
///
/// This does nothing if there is no magnifier.
/// {@endtemplate}   ¿ †àÅÃ¿ †ç  ¿ †©¿ †ª   ¿ ¢XÅd¿ ¢]  ¿ ¢z¿ ¢ç   ¿ §ÅY¿ §ı  ¿ •¿ •   ¿ ´_Å¬¿ ´d  ¿ ´~¿ ´ê   ¿ ≠%Å^¿ ≠*  ¿ ≠E¿ ≠X   ¿ ØØÅS¿ Ø¥  ¿ ØÃ¿ Ø‹   ¿ ∆2Åœ¿ ∆‘Äñ/// {@template flutter.widgets.SelectionOverlay.showHandles}
/// Builds the handles by inserting them into the [context]'s overlay.
/// {@endtemplate}   ¿ »Å¿ »òÄá/// {@template flutter.widgets.SelectionOverlay.hideHandles}
/// Destroys the handles by removing them from overlay.
/// {@endtemplate}   ¿ …"É¬¿ …¡Äì/// {@template flutter.widgets.SelectionOverlay.showToolbar}
/// Shows the toolbar by inserting it into the [context]'s overlay.
/// {@endtemplate} ¿ …”¿ …‚  ¿ …Ó!¿ …˛   ¿ ÃËÇô¿ Õbp/// Shows toolbar with spell check suggestions of misspelled words that are
/// available for click-and-replace. ¿ Õâ¿ Õò  ¿ Õ§¿ Õº   ¿ œ¶ÖH¿ œB/// Rebuilds the selection toolbar or handles if they are present.   ¿ ‘ÚÅπ¿ ’äÄå/// {@template flutter.widgets.SelectionOverlay.hide}
/// Hides the entire overlay including the toolbar and the handles.
/// {@endtemplate}   ¿ ÷ØÅy¿ ◊hÄ©/// {@template flutter.widgets.SelectionOverlay.hideToolbar}
/// Hides the toolbar part of the overlay.
///
/// To hide the whole overlay, see [hide].
/// {@endtemplate}   ¿ ÿ,Ä¢¿ ÿ≥{/// {@template flutter.widgets.SelectionOverlay.dispose}
/// Disposes this object and release resources.
/// {@endtemplate}   ¿ ÿ“Éê¿ ÿŸ  ¿ ÿÎ¿ ÿ˘   ¿ ‹fÉÈ¿ ‹m  ¿ ‹}¿ ‹ã   ¿ ‡ÖÜ:¿ ‡å  ¿ ‡ö¿ ‡®   ¿ Ê√Çp¿ ËçÅ∞/// {@template flutter.widgets.SelectionOverlay.updateMagnifier}
/// Update the current magnifier with new selection data, so the magnifier
/// can respond accordingly.
///
/// If the magnifier is not shown, this still updates the magnifier position
/// because the magnifier may have hidden itself and is looking for a cue to reshow
/// itself.
///
/// If there is no magnifier in the overlay, this does nothing.
/// {@endtemplate} ¿ Ëù¿ Ë¨    ¿ Í¿Åû¿ Í∆  ¿ Í˙Äã ¿ Î ¿ Î ¿ Î¿ Î%  ¿ Î4¿ ÎC  ¿ ÎQ¿ Î`  ¿ Îk¿ Îz   ¿ Îâ¿ Îñ  ¿ Îü¿ Î¨  ¿ Î∂¿ Î∆  ¿ Î”'¿ Î   ¿ Îˇ]¿ Ï+   ¿ Îˇ¿ Ï  ¿ Ï`Ü3¿ Ïf   ¿ Ï‘$¿ ÏÌ  ¿ Ï¸3¿ Ì    ¿ Ì3Ä¯¿ ÌD   ¿ Ì3¿ Ì4¿ Ó/Å^¿ Ó@  ¿ ÓP"¿ Ój  ¿ Ó/¿ Ó0¿ ÔëÄí¿ Ô¢   ¿ Ôë¿ Ôí¿ 'Äü¿ ,    ¿  Å«¿ ›  ¿ „¿ Ò  ¿  ¿ À ¿ ÚïÑq¿ Ú€?/// This widget represents a single draggable selection handle. ¿ ÛÅß ¿ Û4¿ ÛK/// Create selection overlay.
¿ ÛR¿ Ûa  ¿ Ûj¿ Ûy  ¿ Ûç¿ Ûì  ¿ ÛØ¿ Ûµ  ¿ Û‘ ¿ Û⁄  ¿ Û˙¿ Ù   ¿ Ù¿ Ù,  ¿ ÙB¿ ÙH  ¿ ÙW!¿ Ùf  ¿ Ù~0¿ ÙÑ  ¿ Ùó¿ Ù®¿ Ù©
¿ Ùπ¿ Ù…  ¿ Ù‹+¿ Ù  ¿ ı@¿ ı1  ¿ ıOB¿ ıv  ¿ ıï<¿ ıπ  ¿ ı’-¿ ıÒ  ¿ ˆ'¿ ˆ#  ¿ ˆ1 ¿ ˆ>  ¿ ˆU"¿ ˆs  ¿ ˆ{)¿ ˆì   ¿ ˆ©[¿ ˆ‘   ¿ ˆ©¿ ˆ™ ¿ ˜èk¿ ˜   ¿ ˜z$¿ ˜ì  ¿ ˜¢3¿ ˜∏    ¿ ˜ŸÄˆ¿ ˜Í   ¿ ˜Ÿ¿ ˜⁄¿ ¯”Äû¿ ¯ÿ    ¿ ˘uÅ¿ ˘Ü  ¿ ˘ñ!¿ ˘Ø  ¿ ˘u¿ ˘v¿ ˙äÄë¿ ˙õ   ¿ ˙ä¿ ˙ã¿ ˚ãR¿ ˚2  ¿ ˚8¿ ˚F  ¿ ˚¿ ˚  ¿uÑq¿	?Ç∫/// Delegate interface for the [TextSelectionGestureDetectorBuilder].
///
/// The interface is usually implemented by text field implementations wrapping
/// [EditableText], that use a [TextSelectionGestureDetectorBuilder] to build a
/// [TextSelectionGestureDetector] for their [EditableText]. The delegate provides
/// the builder with information about the current state of the text field.
/// Based on these information, the builder adds the correct gesture handlers
/// to the gesture detector.
///
/// See also:
///
///  * [TextField], which implements this delegate for the Material text field.
///  * [CupertinoTextField], which implements this delegate for the Cupertino
///    text field.   ¿	oÄ¿¿
Ää/// [GlobalKey] to the [EditableText] for which the
/// [TextSelectionGestureDetectorBuilder] will build a [TextSelectionGestureDetector].   ¿
3Y¿
z;/// Whether the text field should respond to force presses.   ¿
êT¿
”7/// Whether the user may select text in the text field.     ¿
Ë¿ ≠æ¿bÉs/// Builds a [TextSelectionGestureDetector] to wrap an [EditableText].
///
/// The class implements sensible defaults for many user interactions
/// with an [EditableText] (see the documentation of the various gesture handler
/// methods, e.g. [onTapDown], [onForcePressStart], etc.). Subclasses of
/// [TextSelectionGestureDetectorBuilder] can change the behavior performed in
/// responds to these gesture events by overriding the corresponding handler
/// methods of this class.
///
/// The resulting [TextSelectionGestureDetector] to wrap an [EditableText] is
/// obtained by calling [buildGestureDetector].
///
/// See also:
///
///  * [TextField], which uses a subclass to implement the Material-specific
///    gesture logic of an [EditableText].
///  * [CupertinoTextField], which uses a subclass to implement the
///    Cupertino-specific gesture logic of an [EditableText]. ¿äÄ´ ¿Ó¿]/// Creates a [TextSelectionGestureDetectorBuilder].
///
/// The [delegate] must not be null.¿¿'   ¿9Ål¿ùÅ/// The delegate for this [TextSelectionGestureDetectorBuilder].
///
/// The delegate provides the builder with information about what actions can
/// currently be performed on the text field. Based on this, the builder adds
/// the correct gesture handlers to the gesture detector.¿^¿_¿$M'¿$R ¿$p¿&Äñ¿&ên/// The viewport offset pixels of any [Scrollable] containing the
/// [RenderEditable] at the last drag start.¿&©¿&±v¿'	N/// The viewport offset pixels of the [RenderEditable] at the last drag start.¿'$¿)5"¿)D  ¿*Ú#¿*¯  ¿,ú*¿,° ¿,¡¿&Ç¿tB/// Returns true if lastSecondaryTapDownPosition was on selection.   ¿#$Å&¿$Äÿ/// Whether to show the selection toolbar.
///
/// It is based on the signal source when a [onTapDown] is called. This getter
/// will return true if current [onTapDown] event is triggered by a touch or
/// a stylus.   ¿$yÄÕ¿%n/// The [State] of the [EditableText] for which the builder will provide a
/// [TextSelectionGestureDetector].  ¿$Ï¿$Ì¿%JÄ»¿%‰u/// The [RenderObject] of the [EditableText] for which the builder will
/// provide a [TextSelectionGestureDetector].  ¿%ƒ¿%≈¿',Å@¿'7    ¿Ån¿  ¿=¿E   ¿◊ÅK¿‹    ¿.Å¿3  ¿T¿b   ¿PÅ ¿U  ¿v¿Ñ   ¿tÅÉ¿™./// Returns true if position was on selection. ¿ø¿«  ¿–¿‡   ¿˚Å¿PF/// Returns true if shift left or right is contained in the given set. ¿_#¿x   ¿“É<¿◊  ¿Ë¿  ¿˜¿  ¿¿%   ¿!Ç¿!  ¿!¿!   ¿!'¿!>   ¿,Àç˚¿.8ÅJ/// Handler for [TextSelectionGestureDetector.onTapDown].
///
/// By default, it forwards the tap to [RenderEditable.handleTapDown] and sets
/// [shouldShowSelectionToolbar] to true if the tap was initiated by a finger or stylus.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onTapDown], which triggers this callback. ¿.B¿.V  ¿.&¿.'¿: Ç√¿<WÅd/// Handler for [TextSelectionGestureDetector.onForcePressStart].
///
/// By default, it selects the word at the position of the force press,
/// if selection is enabled.
///
/// This callback is only applicable when force press is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onForcePressStart], which triggers this
///    callback. ¿<i¿<|  ¿<E¿<F¿=ëÇ∫¿?$Åj/// Handler for [TextSelectionGestureDetector.onForcePressEnd].
///
/// By default, it selects words in the range specified in [details] and shows
/// toolbar if it is necessary.
///
/// This callback is only applicable when force press is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onForcePressEnd], which triggers this
///    callback. ¿?4¿?G  ¿?¿?¿@OïÃ¿AaÄÔ/// Handler for [TextSelectionGestureDetector.onSingleTapUp].
///
/// By default, it selects word edge if selection is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleTapUp], which triggers
///    this callback. ¿Ao¿AÅ  ¿AO¿AP¿VÅr¿WDÅ/// Handler for [TextSelectionGestureDetector.onSingleTapCancel].
///
/// By default, it services as place holder to enable subclass override.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleTapCancel], which triggers
///    this callback.  ¿W2¿W3¿WïÖ¿X÷Å/// Handler for [TextSelectionGestureDetector.onSingleLongTapStart].
///
/// By default, it selects text position specified in [details] if selection
/// is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleLongTapStart], which triggers
///    this callback. ¿XÎ¿Y  ¿Xƒ¿X≈¿\¨á¶¿^ Å//// Handler for [TextSelectionGestureDetector.onSingleLongTapMoveUpdate].
///
/// By default, it updates the selection location specified in [details] if
/// selection is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleLongTapMoveUpdate], which
///    triggers this callback. ¿^"¿^6  ¿]Ó¿]Ô¿dVÇ,¿ecÄÍ/// Handler for [TextSelectionGestureDetector.onSingleLongTapEnd].
///
/// By default, it shows toolbar if necessary.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleLongTapEnd], which triggers this
///    callback. ¿ev¿eã  ¿eQ¿eR¿fÜÉ§¿g%ÄÜ/// Handler for [TextSelectionGestureDetector.onSecondaryTap].
///
/// By default, selects the word if possible and shows the toolbar.  ¿g¿g¿j.É∂¿kEÄˆ/// Handler for [TextSelectionGestureDetector.onSecondaryTapDown].
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSecondaryTapDown], which triggers this
///    callback.
///  * [onSecondaryTap], which is typically called after this. ¿kX¿kh  ¿k3¿k4¿mËÇQ¿o@Å3/// Handler for [TextSelectionGestureDetector.onDoubleTapDown].
///
/// By default, it selects a word through [RenderEditable.selectWord] if
/// selectionEnabled and shows toolbar if necessary.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onDoubleTapDown], which triggers this
///    callback. ¿oP¿od  ¿o.¿o/¿p•Å(¿p™  ¿pƒ¿p’  ¿p⁄
¿p„  ¿pÊ¿p˛   ¿r4Å ¿r9  ¿rN¿r_  ¿rd
¿rm  ¿rp¿rà   ¿sóÇ_¿s°  ¿sπ¿s«  ¿sŒ¿s‹   ¿w[ÉË¿w`  ¿w~¿wï  ¿wû¿wØ  ¿w¥
¿wΩ  ¿w¿¿wÿ   ¿{GÑn¿|¿ÅR/// Handler for [TextSelectionGestureDetector.onTripleTapDown].
///
/// By default, it selects a paragraph if
/// [TextSelectionGestureDetectorBuilderDelegate.selectionEnabled] is true
/// and shows the toolbar if necessary.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onTripleTapDown], which triggers this
///    callback. ¿|–¿|‰  ¿|Æ¿|Ø¿πèÊ¿ÄﬁÅ/// Handler for [TextSelectionGestureDetector.onDragSelectionStart].
///
/// By default, it selects a text position specified in [details].
///
/// See also:
///
///  * [TextSelectionGestureDetector.onDragSelectionStart], which triggers
///    this callback. ¿ÄÛ¿Å  ¿ÄÃ¿ÄÕ¿è£°Ñ¿ëÅC/// Handler for [TextSelectionGestureDetector.onDragSelectionUpdate].
///
/// By default, it updates the selection location specified in the provided
/// details objects.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onDragSelectionUpdate], which triggers
///    this callback./lib/src/material/text_field.dart ¿ë!¿ë7  ¿ê˘¿ê˙¿±+É	¿≤dÅ/// Handler for [TextSelectionGestureDetector.onDragSelectionEnd].
///
/// By default, it cleans up the state used for handling certain
/// built-in behaviors.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onDragSelectionEnd], which triggers this
///    callback. ¿≤w¿≤ä  ¿≤R¿≤S¿¥8Ñl¿¥ÒÄ©/// Returns a [TextSelectionGestureDetector] configured with the handlers
/// provided by this builder.
///
/// The [child] or its subtree should contain [EditableText]. ¿µ¿µ  ¿µ¿µ,  ¿µ9¿µJ    ¿∏®ë2¿∫¡Ç/// A gesture detector to respond to non-exclusive event chains for a text field.
///
/// An ordinary [GestureDetector] configured to handle events like tap and
/// double tap will only recognize one or the other. This widget detects both:
/// the first tap and then any subsequent taps that occurs within a time limit
/// after the first.
///
/// See also:
///
///  * [TextField], a Material text field which uses this gesture detector.
///  * [CupertinoTextField], a Cupertino text field which uses this gesture
///    detector. ¿∫˘Ç∂ ¿ª¨¿ª»Ä§/// Create a [TextSelectionGestureDetector].
///
/// Multiple callbacks can be called for one sequence of input gesture.
/// The [child] parameter must not be null.¿ªœ	¿ª÷  ¿ªﬁ¿ª‰  ¿ªÚ¿ª¯  ¿º¿º  ¿º(¿º.  ¿ºA¿ºG  ¿º^¿ºd  ¿ºv¿º|  ¿ºí¿ºò  ¿º±¿º∑  ¿º’¿º€  ¿ºÚ¿º¯  ¿Ω¿Ω  ¿Ω&¿Ω,  ¿ΩE¿ΩK  ¿Ωe¿Ωk  ¿ΩÇ¿Ωà  ¿Ωï¿Ω§   ¿Ω≥Ä˙¿æ§Ä»/// Called for every tap down including every tap down that's part of a
/// double click or a long press, except touches that include enough movement
/// to not qualify as taps (e.g. pans and flings). ¿æ≤Ä–¿øqÄî/// Called when a pointer has tapped down and the force of the pointer has
/// just become greater than [ForcePressGestureRecognizer.startPressure]. ¿øáÄ°¿¿i/// Called when a pointer that had previously triggered [onForcePressStart] is
/// lifted off the screen. ¿¿-f¿¿Ö;/// Called for a tap event with the secondary mouse button. ¿¿òs¿¿˘@/// Called for a tap down event with the secondary mouse button. ¿¡ÅÖ¿¬àÅK/// Called for the first tap in a series of taps, consecutive taps do not call
/// this method.
///
/// For example, if the detector was configured with [onTapDown] and
/// [onDoubleTapDown], three quick taps would be recognized as a single tap
/// down, followed by a tap up, then a double tap down, followed by a single tap down. ¿¬öÄ˛¿√áÄ…/// Called for each touch that becomes recognized as a gesture that is not a
/// short tap, such as a long tap or drag. It is called at the moment when
/// another gesture from the touch is recognized. ¿√ùÅ¿ƒãÄ¬/// Called for a single long tap that's sustained for longer than
/// [kLongPressTimeout] but not necessarily lifted. Not called for a
/// double-tap-hold, which calls [onDoubleTapDown] instead. ¿ƒ§Ää¿≈D/// Called after [onSingleLongTapStart] when the pointer is dragged. ¿≈3{¿≈úC/// Called after [onSingleLongTapStart] when the pointer is lifted. ¿≈≥Ä¿¿∆dÄä/// Called after a momentary hold or a short tap that is close in space and
/// time (within [kDoubleTapTimeout]) to a previous short tap. ¿∆xÄ¡¿«*Äã/// Called after a momentary hold or a short tap that is close in space and
/// time (within [kDoubleTapTimeout]) to a previous double-tap. ¿«>q¿«õ7/// Called when a mouse starts dragging to select text. ¿«¥r¿»6/// Called repeatedly as a mouse moves while dragging. ¿»+w¿»êA/// Called when a mouse that was previously dragging is released. ¿»ßÄû¿…=x/// How this gesture detector should behave during hit testing.
///
/// This defaults to [HitTestBehavior.deferToChild]. ¿…J1¿…v/// Child below this widget.  ¿…ÄX¿…¢   ¿…Ä¿…Å ¿…‹ûÅ¿…‚     ¿À≥Ü¿Àæ  ¿Àﬂ¿À‰   ¿“=Çà¿“B  ¿“Q¿“e   ¿‘…Ä∞¿‘Œ  ¿‘€¿‘Ì   ¿’}C¿’Ç    ¿’ƒh¿’…  ¿’⁄¿’Ô   ¿÷0k¿÷5  ¿÷G¿÷]   ¿÷üb¿÷§  ¿÷≥¿÷∆   ¿◊e¿◊
  ¿◊¿◊0   ¿◊na¿◊s  ¿◊Ñ¿◊ó   ¿◊”Ä°¿◊ÿ  ¿◊Ó¿ÿ   ¿ÿxÄµ¿ÿ}  ¿ÿò"¿ÿ¥   ¿Ÿ1Äô¿Ÿ6  ¿ŸJ¿Ÿ_   ¿ŸŒéç¿Ÿ·  ¿ŸÁ¿Ÿı  ¿ŸŒ¿Ÿœ ¿Ë_âƒ¿ÈÆÅH/// A [ValueNotifier] whose [value] indicates whether the current contents of
/// the clipboard can be pasted.
///
/// The contents of the clipboard can only be read asynchronously, via
/// [Clipboard.getData], so this maintains a value that can be used
/// synchronously. Call [update] to asynchronously update value if needed. ¿ÍÄè ¿Í9¿ÍP)/// Create a new ClipboardStatusNotifier.¿ÍW/¿Íh  ¿Ío¿Í~¿Í¿Íè¿Íî¿Íö¿Íï¿Í†¿Í• ¿Í± ¿ÍªÉŒ¿Î7/// Check the [Clipboard] and update [value] if needed.   ¿ÓçÄÏ¿Óû  ¿Ó™¿Ó∏  ¿Óç¿Óé¿Ô}Ä¡¿Ôé  ¿Ôù¿Ô´  ¿Ô}¿Ô~¿BÅ^¿S  ¿n¿Å  ¿B¿C¿Ò§}¿Òµ   ¿Ò§¿Ò• ¿Ù/ä¿ı‚Å¨/// A [ValueNotifier] whose [value] indicates whether the current device supports the Live Text
/// (OCR) function.
///
/// See also:
///  * [LiveText], where the availability of Live Text input can be obtained.
///  * [LiveTextInputStatus], an enumeration that indicates whether the current device is available
///                           for Live Text input.
///
/// Call [update] to asynchronously update [value] if needed. ¿ˆIÄö ¿ˆt¿ˆè(/// Create a new LiveTextStatusNotifier.¿ˆñ7¿ˆ´  ¿ˆ≤¿ˆ≈¿ˆ∆¿ˆ÷¿ˆ€¿ˆ·¿ˆ‹¿ˆÁ¿ˆÏ ¿ˆ¯ ¿˜Ñ¿˜SA/// Check the [LiveTextInputStatus] and update [value] if needed.   ¿˚%Ä¿˚6  ¿˚B¿˚P  ¿˚%¿˚&¿¸Ä¡¿¸*  ¿¸9¿¸G  ¿¸¿¸¿¸ﬁÅM¿¸Ô  ¿˝
¿˝  ¿¸ﬁ¿¸ﬂ¿˛/}¿˛@   ¿˛/¿˛0  ¿Ú%Ç¿ÚsH/// An enumeration of the status of the content on the user's clipboard.  ¿ÚáX¿Ú÷L/// The clipboard content can be pasted, such as a String of nonzero length. ¿Ú‰ÄÊ¿Û√Äÿ/// The status of the clipboard is unknown. Since getting clipboard data is
/// asynchronous (see [Clipboard.getData]), this status often exists while
/// waiting to receive the clipboard contents for the first time. ¿Ûœ[¿ÙL/// The content on the clipboard is not pasteable, such as when it is empty.    ¿˛∞Çp¿ˇtÄæ/// An enumeration that indicates whether the current device is available for Live Text input.
///
/// See also:
///  * [LiveText], where the availability of Live Text input can be obtained.  ¿ˇå=¿ˇ¬3/// This device supports Live Text input currently. ¿ˇŒÅ¿ œÄ˙/// The status of the Live Text input is unknown. Since getting the Live Text input availability
/// is asynchronous (see [LiveText.isLiveTextInputAvailable]), this status often exists while
/// waiting to receive the status value for the first time. ¿ €B¿7/// The current device doesn't support Live Text input.        Ñ
ÅÑÖIÅ6/// The type for a Function that builds a toolbar's container with the given
/// child.
///
/// See also:
///
///   * [TextSelectionToolbar.toolbarBuilder], which is of this type.
///     type.
///   * [CupertinoTextSelectionToolbar.toolbarBuilder], which is similar, but
///     for a Cupertino-style toolbar.  ÖjÖx  ÖÄÖà   ¿˜Ñπ¿ÜÄà/// [TextSelectionControls] that specifically do not manage the toolbar in order
/// to leave that to [EditableText.contextMenuBuilder].    	¿øÅ_¿“  ¿‰¿Ú  ¿˛¿  ¿¿%  ¿8¿@  ¿V"¿p  ¿~¿ï  ¿¢1¿≈  ¿Ÿ$¿‚  ¿ø¿¿¿"A¿3  ¿:¿Q  ¿"¿#¿gB¿x  ¿Ä¿ó  ¿g¿h¿≠C¿æ  ¿«¿ﬁ  ¿≠¿Æ¿ÙG¿  ¿¿)  ¿Ù¿ı¿?i¿P  ¿Z¿q  ¿{(¿ï  ¿?¿@¿¨j¿Ω  ¿»¿ﬂ  ¿È(¿  ¿¨¿≠¿M¿3  ¿?¿V  ¿¿¿kC¿|  ¿å¿£  ¿k¿l ´Ç+¨¯Å’/// Text selection controls that do not show any toolbars or handles.
///
/// This is a placeholder, suitable for temporary use during development, but
/// not practical for production. For example, it provides no way for the user
/// to interact with selections: no context menus on desktop, no toolbars or
/// drag handles on mobile, etc. For production, consider using
/// [materialTextSelectionControls] or creating a custom subclass of
/// [TextSelectionControls].≠≠/≠0  ç— <ÄÜÄ§Ä•Ä∫Ä÷Ä◊ÅÅ.ÅVÅÅ®Å–Å—ÅÊÅ˝ÇÇ/ÇVÇkÇàÇ°Ç¡Ç⁄ÇÒÉÉ0ÉJÉiÉÑÉÖÉ∆Ñ	Ñ
ÑWÑbÑfÑtÑxÑæÑÃÖÖAÖèÖêÖ‡Ö‰Ü5ÜÄÜ•ÜÓáá áqáµá—á“áﬁà&à(à)àoàñàöà÷à⁄ââ?âáâ’â¯â¸äLäôä„ã1ãmã≥ã˛å8åeåiåwå{å≈åÎççGçMçôç≥çπé	éYé•éŸèQèRè£èÔêênêoêùê£ê‚êËë7ëbëhëπëˆë¸íFíâíΩíÃíıì.ì2ìIìcìÇìùìªì„îî>îhîmînîûîÀîÃïï_ïrïxï»ïŒññ5ñDñmñ¶ñ™ñ⁄ó.ó2ó3ó~ó±ó∑òòòTòuòÑò≠òÊòÍôôpôtôuô√ô›ô„ö+öLöRö¢öÔö˝õõ5õnõrõ§õ∆õ õÀúúaúnútú¡ú‚úÒùùSùWùçûûûûbûhûµû≈û‘û˝ü6ü:ümüßü´ü¨ü¯ü˛†L†\†k†î†Õ†—°°@°D°E°Å°á°÷°Ê°Ï¢8¢Å¢î¢’¢‰££F£J£ç£ƒ£»£…§§;§A§b§h§π§Ã§€••=•A•z•±•µ•∑•∏•˛¶¶P¶ü¶Ïß,ßqßéßíßÕßÚ®3®?®y®z®Ü®ù®∑®÷®Ò©©7©[©í©º©‹©›©È™b™Ü™ä™ã™ó™Á™ˇ´´´´L´P´û´Ì¨:¨z¨ø¨‹≠3≠4≠5≠w≠ç≠ë≠‡Æ+ÆKÆhÆ¥Æ∫Ø
Ø#ØHØcØÅØ™Ø◊∞∞"∞>∞_∞Ñ∞«∞Ú± ±=±}±¶±æ≤≤|≤´≤’≥≥#≥M≥Å≥ª≥˜¥¥Y¥ü¥Ãµµ<µXµòµ⁄∂	∂<∂t∂†∂Ã∂Ù∑&∑T∑~∑∂∑‚∏$∏+∏/∏0∏k∏¶∏¨∏˘π:πOπmπnπæπÕ∫∫:∫>∫Ñ∫Ö∫–ªª`ªÖªÜª»ª˙ª˚º=ºnºoº†º°º‡ºÊΩΩGΩHΩfΩ{Ω£Ω§ΩøΩ¿ΩÙΩıæOæßæ˝æ˛ø1øù¿ @¿ @á¿ @ã¿ @å¿ @π¿ @ø¿ A¿ A?¿ AE¿ A^¿ Aå¿ A¨¿ A—¿ A˜¿ B¿ B¿ B*¿ BY¿ B]¿ B^¿ Bö¿ B±¿ B–¿ Bı¿ B˘¿ B˙¿ C6¿ Co¿ Cp¿ C¨¿ C√¿ C‚¿ C„¿ D ¿ DG¿ DU¿ D[¿ D\¿ DÇ¿ Dê¿ Dñ¿ Dó¿ D¥¿ D◊¿ DÔ¿ E¿ E$¿ E0¿ E4¿ E5¿ EÉ¿ E™¿ E”¿ F	¿ F¿ F.¿ FK¿ Fa¿ Fä¿ F§¿ F⁄¿ F·¿ FÙ¿ F¯¿ F˘¿ G7¿ Ge¿ Gπ¿ Gÿ¿ G˝¿ H¿ H;¿ Hj¿ Hê¿ Hô¿ H†¿ H§¿ H•¿ HÂ¿ I¿ Ii¿ Ià¿ IØ¿ I∆¿ IÌ¿ J¿ JB¿ JK¿ JR¿ JV¿ JW¿ Jï¿ JÆ¿ J’¿ JŸ¿ J⁄¿ K¿ K¿ Ki¿ K∑¿ L¿ LP¿ L†¿ L¿ M!¿ ML¿ Mj¿ Mx¿ M~¿ Mï¿ M¥¿ N ¿ NO¿ N†¿ NÆ¿ N÷¿ N⁄¿ N€¿ N˛¿ O¿ O>¿ Oe¿ Oâ¿ OØ¿ O÷¿ Oﬁ¿ P¿ P6¿ PZ¿ PÅ¿ Pß¿ PØ¿ Pﬁ¿ Q	¿ QX¿ Qù¿ Q°¿ Q¢¿ Q‘¿ Q⁄¿ R+¿ Rd¿ R¿ Rû¿ RÌ¿ S=¿ SR¿ Sz¿ S~¿ S¿ S∞¿ T¿ T¿ TH¿ TN¿ T^¿ Td¿ T∑¿ T⁄¿ U¿ U¿ UP¿ Uü¿ U†¿ UŸ¿ Uﬂ¿ UÔ¿ Uı¿ V<¿ Vù¿ Vû¿ V”¿ V˛¿ Vˇ¿ W;¿ Wt¿ Wu¿ W≠¿ W¿¿ W·¿ XD¿ X•¿ X–¿ Xˇ¿ Y,¿ Y?¿ YC¿ YD¿ Yf¿ Y´¿ Y÷¿ YÒ¿ Z6¿ ZÄ¿ Z–¿ [¿ [g¿ [Ø¿ [ÿ¿ \7¿ \¿ \Œ¿ ]f¿ ]l¿ ]¥¿ ]∏¿ ]π¿ ]Ÿ¿ ^¿ ^H¿ ^a¿ ^ï¿ ^Ù¿ _<¿ _â¿ `¿ ` ¿ `f¿ `j¿ `k¿ `ç¿ `π¿ `‰¿ a¿ a¿ at¿ aŒ¿ aœ¿ b+¿ bf¿ bë¿ b∫¿ b¡¿ b¬¿ bÈ¿ c*¿ cQ¿ cX¿ cY¿ cä¿ c⁄¿ d'¿ d.¿ d/¿ dI¿ dè¿ d√¿ e¿ eW¿ e^¿ eb¿ ec¿ e∞¿ e‘¿ e˙¿ e˚¿ fK¿ f`¿ fî¿ fï¿ f€¿ f˝¿ g¿ g¿ g¿ gV¿ gó¿ gœ¿ gÎ¿ h@¿ hî¿ hÊ¿ i*¿ i8¿ i[¿ iq¿ iz¿ iÅ¿ iÇ¿ iß¿ iæ¿ iÂ¿ j¿ jB¿ jK¿ jR¿ jV¿ jW¿ jß¿ jΩ¿ j√¿ k¿ k_¿ k´¿ kÚ¿ l*¿ l`¿ lû¿ lª¿ m¿ m^¿ mb¿ mc¿ m´¿ mÕ¿ m€¿ m·¿ m‚¿ n@¿ nj¿ nã¿ n–¿ n◊¿ nÿ¿ o,¿ o-¿ oO¿ oà¿ oØ¿ oÊ¿ p¿ p¿ p¿ pj¿ p°¿ pØ¿ pµ¿ p∂¿ p‹¿ q¿ qL¿ qk¿ qå¿ q≤¿ q€¿ r¿ r¿ rA¿ rr¿ r|¿ rü¿ r¬¿ r„¿ s¿ s,¿ sY¿ sÇ¿ sç¿ s—¿ t¿ t¿ t¿ t¿ tD¿ tE¿ t}¿ t≠¿ t‚¿ u¿ u¿ u¿ u¿ ub¿ uÜ¿ uÆ¿ uØ¿ u˛¿ v¿ vL¿ vM¿ vï¿ v∑¿ v≈¿ vÀ¿ vÃ¿ w¿ wQ¿ wã¿ w©¿ wˇ¿ xU¿ x´¿ xÔ¿ x˝¿ y ¿ y6¿ y?¿ yF¿ yG¿ yl¿ yÉ¿ y™¿ y·¿ z¿ z¿ z¿ z¿ z¿ zf¿ zà¿ zñ¿ zú¿ zù¿ zˇ¿ {)¿ {J¿ {ì¿ {ö¿ {Ó¿ {Ô¿ |¿ |J¿ |q¿ |®¿ |Œ¿ |ÿ¿ |Ÿ¿ },¿ }c¿ }q¿ }w¿ }x¿ }û¿ }√¿ ~¿ ~-¿ ~N¿ ~t¿ ~ù¿ ~√¿ ~Œ¿ 	¿ :¿ D¿ g¿ ä¿ ´¿ Œ¿ Ù¿ Ä¿ ÄL¿ ÄW¿ Äõ¿ ÄÃ¿ Ä÷¿ Ä‹¿ Ä›¿ Å¿ Åê¿ Å≈¿ ÅÈ¿ ÅÒ¿ ÅÚ¿ Ç#¿ Ç'¿ Ç(¿ Ç[¿ Çw¿ ÇÖ¿ Çã¿ Ç»¿ ÇÒ¿ É¿ É?¿ ÉG¿ ÉU¿ É[¿ ÉÇ¿ É•¿ É ¿ É‰¿ Ñ¿ Ñ¿ Ñ#¿ Ñ'¿ Ñ(¿ Ñk¿ Ñù¿ ÑÕ¿ ÑÔ¿ Ñˆ¿ Ñ˙¿ Ñ˚¿ Ö"¿ ÖE¿ Öl¿ Öì¿ Öù¿ Öø¿ ÖÔ¿ Öı¿ Öˆ¿ Ü¿ Ü1¿ ÜI¿ Üg¿ Ü¿ ÜÖ¿ Üâ¿ Üã¿ Üå¿ Ü“¿ Ü÷¿ á!¿ áH¿ áa¿ á≠¿ á≥¿ à¿ à¿ à3¿ àN¿ àÑ¿ à´¿ à…¿ àÍ¿ â¿ â+¿ â_¿ âÑ¿ â†¿ âø¿ âﬂ¿ â¸¿ ä¿ äO¿ ät¿ äÖ¿ ä¡¿ ä¸¿ ã¿ ã'¿ ãJ¿ ãr¿ ãò¿ ãº¿ ãÚ¿ å¿ å%¿ åa¿ åú¿ å¢¿ åø¿ ç¿ ç1¿ ç`¿ çá¿ ç≤¿ ç„¿ é¿ é<¿ é=¿ éu¿ éì¿ éî¿ é ¿ è¿ è¿ èj¿ è—¿ ê3¿ êf¿ ê∞¿ ê±¿ ê˚¿ ë¿ ë0¿ ë6¿ ëá¿ ëç¿ ëŸ¿ í¿ í¿ íY¿ íâ¿ íè¿ íÿ¿ íÌ¿ ì¿ ìG¿ ìò¿ ì‹¿ ì‡¿ ì·¿ î"¿ îz¿ î¿¿ ï¿ ï7¿ ï=¿ ïÜ¿ ï–¿ ïÛ¿ ñ¿ ñC¿ ñ_¿ ñt¿ ñz¿ ñ{¿ ñº¿ ñÌ¿ ñÓ¿ ó6¿ óx¿ óü¿ óÎ¿ ó˙¿ ò¿ ò,¿ ò3¿ ò4¿ òV¿ òd¿ òj¿ òk¿ òä¿ ò§¿ òÍ¿ ò˝¿ ô¿ ôE¿ ôI¿ ôJ¿ ôã¿ ô≠¿ ô≥¿ ôÂ¿ ô˙¿ ö¿ öW¿ öú¿ öÿ¿ õ¿ õ¿ õ!¿ õ"¿ õC¿ õG¿ õH¿ õr¿ õx¿ õ«¿ ú
¿ ú6¿ úm¿ úí¿ ú†¿ ú¶¿ úƒ¿ ú⁄¿ úﬁ¿ úﬂ¿ ù¿ ù¿ ùd¿ ùj¿ ùπ¿ ùÔ¿ û¿ û4¿ û[¿ ûi¿ ûo¿ ûè¿ û•¿ û©¿ û™¿ û—¿ û“¿ û˝¿ ü¿ üT¿ üx¿ ü~¿ ü»¿ ü¸¿ ü˝¿ †E¿ †Ö¿ †Ü¿ †≈¿ †Í¿ °:¿ °ä¿ °¶¿ °Ã¿ °⁄¿ °‡¿ ¢&¿ ¢Q¿ ¢U¿ ¢V¿ ¢ó¿ ¢Á¿ £7¿ £S¿ £y¿ £á¿ £ç¿ £π¿ £Ω¿ £æ¿ §¿ §O¿ §P¿ §¢¿ §±¿ §Ì¿ §Ó¿ •)¿ •M¿ •ù¿ •Ì¿ ¶	¿ ¶¿ ¶¿ ¶F¿ ¶J¿ ¶K¿ ¶s¿ ¶y¿ ¶»¿ ß¿ ß1¿ ßf¿ ßâ¿ ßó¿ ßù¿ ßπ¿ ßœ¿ ß”¿ ß‘¿ ® ¿ ®¿ ®U¿ ®[¿ ®™¿ ®‹¿ ®˜¿ ©¿ ©B¿ ©P¿ ©V¿ ©t¿ ©ä¿ ©é¿ ©è¿ ©¥¿ ©µ¿ ©ﬁ¿ ©‰¿ ™3¿ ™W¿ ™]¿ ™•¿ ™◊¿ ™ÿ¿ ´¿ ´\¿ ´]¿ ´ö¿ ´Ω¿ ¨¿ ¨]¿ ¨y¿ ¨ù¿ ¨´¿ ¨±¿ ¨ı¿ ≠¿ ≠"¿ ≠#¿ ≠b¿ ≠≤¿ Æ¿ Æ¿ ÆB¿ ÆP¿ ÆV¿ ÆÄ¿ ÆÑ¿ ÆÖ¿ Æ“¿ Ø¿ Ø¿ Øc¿ Ør¿ Ø¨¿ Ø≠¿ ØÊ¿ ∞¿ ∞X¿ ∞®¿ ∞ƒ¿ ∞“¿ ∞ÿ¿ ∞ˇ¿ ±¿ ±¿ ±*¿ ±0¿ ±|¿ ±†¿ ±¶¿ ±‡¿ ≤¿ ≤¿ ≤O¿ ≤ô¿ ≤…¿ ≥¿ ≥7¿ ≥O¿ ≥ã¿ ≥¥¿ ≥€¿ ¥¿ ¥/¿ ¥R¿ ¥w¿ ¥ú¿ ¥√¿ ¥÷¿ ¥‡¿ ¥Ë¿ ¥Ó¿ µ¿ µ¿ µ¿ µ^¿ µÄ¿ µÅ¿ µ“¿ µﬂ¿ ∂¿ ∂¿ ∂Q¿ ∂{¿ ∂£¿ ∂§¿ ∂Ò¿ ∑¿ ∑?¿ ∑@¿ ∑Ö¿ ∑∂¿ ∑À¿ ∑˝¿ ∑˛¿ ∏C¿ ∏ã¿ ∏ù¿ ∏≤¿ ∏¡¿ ∏Í¿ π#¿ π'¿ πY¿ πZ¿ πò¿ πû¿ π„¿ ∫/¿ ∫y¿ ∫ò¿ ∫û¿ ∫È¿ ª7¿ ªh¿ ªn¿ ª∂¿ ªº¿ ªÃ¿ ª“¿ º:¿ ºg¿ ºh¿ º≥¿ Ω¿ Ω¿ ΩS¿ Ωö¿ Ω›¿ æ,¿ æ]¿ æ¨¿ æ˘¿ ø+¿ ø@¿ øê¿ ø•¿ ø‘¿ ø’¿ ¿%¿ ¿=¿ ¿C¿ ¿é¿ ¿æ¿ ¿¿ ¿Ò¿ ¡<¿ ¡b¿ ¡h¿ ¡∂¿ ¡‰¿ ¡Í¿ ¬:¿ ¬T¿ ¬c¿ ¬´¿ ¬‰¿ ¬Ë¿ √¿ √7¿ √^¿ √É¿ √ë¿ √ó¿ √µ¿ √À¿ √œ¿ √–¿ ƒ ¿ ƒd¿ ƒe¿ ƒ≤¿ ƒÍ¿ ≈
¿ ≈¿ ≈'¿ ≈A¿ ≈B¿ ≈à¿ ≈ÿ¿ ≈Ÿ¿ ∆/¿ ∆0¿ ∆o¿ ∆∏¿ ∆Õ¿ ∆‰¿ « ¿ «¿ «¿ «¿ «4¿ «d¿ «í¿ «ô¿ «˛¿ »¿ »¿ »B¿ »|¿ »ë¿ »®¿ »ƒ¿ »·¿ »˛¿ …¿ …¿ …¿ … ¿ …_¿ …•¿ …∫¿ …œ¿ …Í¿  ¿  ¿  >¿  \¿  l¿  t¿  ´¿ À¿ À"¿ À(¿ À)¿ ÀD¿ ÀR¿ ÀX¿ ÀY¿ À£¿ Àƒ¿ À‹¿ Ã¿ Ã8¿ Ã_¿ Ãò¿ Ã∆¿ Ã—¿ Ã⁄¿ Ã·¿ ÃÂ¿ ÃÊ¿ Õ4¿ Õ[¿ ÕÖ¿ Õ†¿ Õƒ¿ ÕÀ¿ ÕÊ¿ ÕÙ¿ Õ˙¿ Õ˚¿ ŒE¿ Œl¿ ŒÑ¿ Œ∑¿ Œ‡¿ œ¿ œ@¿ œc¿ œn¿ œw¿ œ~¿ œÇ¿ œÉ¿ œ£¿ œ§¿ œÈ¿ –¿ –3¿ –A¿ –G¿ –í¿ –À¿ —%¿ —B¿ —R¿ —Z¿ —x¿ —√¿ —‰¿ “¿ “-¿ “V¿ “`¿ “Ñ¿ “≤¿ “Â¿ ” ¿ ”Y¿ ”c¿ ”m¿ ”z¿ ”ò¿ ”ø¿ ”Ê¿ ”Ó¿ ‘¿ ‘<¿ ‘m¿ ‘¶¿ ‘›¿ ‘Â¿ ‘Î¿ ‘Ô¿ ‘¿ ’(¿ ’n¿ ’É¿ ’ì¿ ’¥¿ ’–¿ ’Ì¿ ÷
¿ ÷!¿ ÷'¿ ÷ç¿ ÷¢¿ ÷®¿ ÷¨¿ ÷≠¿ ÷Ï¿ ◊¿ ◊¿ ◊L¿ ◊a¿ ◊x¿ ◊ù¿ ◊»¿ ◊‰¿ ◊Ú¿ ◊¯¿ ÿ¿ ÿ%¿ ÿ)¿ ÿ*¿ ÿe¿ ÿó¿ ÿ¨¿ ÿø¿ ÿÀ¿ ÿœ¿ ÿ–¿ Ÿ¿ Ÿ¿ Ÿi¿ Ÿé¿ Ÿ∂¿ Ÿ√¿ ŸÎ¿ ⁄¿ ⁄:¿ ⁄t¿ ⁄µ¿ ⁄¯¿ €5¿ €c¿ €å¿ €Ω¿ €Î¿ €Ù¿ €˙¿ ‹¿ ‹8¿ ‹O¿ ‹X¿ ‹_¿ ‹c¿ ‹d¿ ‹ï¿ ‹Æ¿ ‹˚¿ ›Y¿ ›â¿ ›±¿ ›æ¿ ›Ê¿ ﬁ¿ ﬁ1¿ ﬁk¿ ﬁ™¿ ﬁÎ¿ ﬂ&¿ ﬂT¿ ﬂ{¿ ﬂ™¿ ﬂÿ¿ ﬂ·¿ ﬂÁ¿ ‡¿ ‡%¿ ‡<¿ ‡E¿ ‡L¿ ‡P¿ ‡Q¿ ‡É¿ ‡≤¿ ‡◊¿ ‡˝¿ ·¿ ·k¿ ·l¿ ·ª¿ ·º¿ ·Ï¿ ‚¿ ‚`¿ ‚g¿ ‚h¿ ‚Ã¿ ‚È¿ ‚Í¿ „?¿ „i¿ „ç¿ „≠¿ ‰¿ ‰¿ ‰&¿ ‰2¿ ‰n¿ ‰´¿ ‰≤¿ ‰≥¿ ‰ÿ¿ ‰˙¿ Â¿ ÂC¿ ÂY¿ ÂÉ¿ Âµ¿ Â ¿ ÂÂ¿ Ê¿ Ê¿ Ê:¿ ÊZ¿ Êw¿ Êî¿ Ê°¿ Ê¨¿ Êµ¿ Êº¿ Ê¿¿ Ê¡¿ Á¿ ÁQ¿ Áp¿ Áv¿ Á≈¿ Ë¿ Ë)¿ Ë/¿ Ëq¿ ËÜ¿ Ëº¿ ËÒ¿ Ëˇ¿ È¿ È¿ È0¿ È4¿ È6¿ È7¿ ÈÉ¿ È“¿ Í¿ ÍL¿ Íô¿ Í¿¿ Í¯¿ Î¿ Î0¿ ÎM¿ Îg¿ ÎÄ¿ ÎÜ¿ Îá¿ Îù¿ Î¥¿ Î—¿ Î¸¿ Î˝¿ Ï	¿ Ï]¿ Ï_¿ Ï`¿ Ï“¿ Ï˙¿ Ì0¿ Ì1¿ Ì=¿ ÌR¿ Ìi¿ Ìj¿ Ì«¿ Ì»¿ ÌÈ¿ Ó(¿ Ó,¿ Ó-¿ Ó9¿ Óv¿ Óú¿ Ó—¿ Óﬂ¿ ÓÂ¿ Ô*¿ ÔK¿ Ôä¿ Ôé¿ Ôè¿ Ôõ¿ ÔÆ¿ Ô¿ ¿  ¿ $¿ %¿ J¿ v¿ ì¿ †¿ Ω¿ √¿ «¿ »¿ ‘¿ ˚¿ Ò¿ Ò7¿ Òo¿ Òé¿ Ò´¿ ÒŸ¿ Ò˝¿ Ú"¿ ÚE¿ Úf¿ Ús¿ Ú~¿ Úá¿ Úé¿ Úí¿ Úî¿ Úï¿ Ú’¿ Û¿ Û,¿ ÛN¿ Ûf¿ Ûâ¿ Û´¿ Û–¿ Ûˆ¿ Ù¿ Ù>¿ ÙS¿ Ùz¿ Ù∞¿ Ù∂¿ Ù∑¿ Ù⁄¿ ı	¿ ıM¿ ıì¿ ı”¿ ˆ¿ ˆ/¿ ˆS¿ ˆy¿ ˆ¶¿ ˆß¿ ˆ≥¿ ˜¿ ˜¿ ˜¿ ˜x¿ ˜†¿ ˜÷¿ ˜◊¿ ˜„¿ ˜¯¿ ¯¿ ¯¿ ¯m¿ ¯n¿ ¯é¿ ¯Ã¿ ¯–¿ ¯—¿ ¯ı¿ ˘!¿ ˘>¿ ˘K¿ ˘h¿ ˘n¿ ˘r¿ ˘s¿ ˘¿ ˘ª¿ ˘·¿ ˙%¿ ˙E¿ ˙É¿ ˙á¿ ˙à¿ ˙î¿ ˙ß¿ ˙Ë¿ ˚¿ ˚¿ ˚¿ ˚¿ ˚)¿ ˚P¿ ˚ö¿ ˚≠¿ ˚œ¿ ˚÷¿ ¸¿ ¸<¿ ¸C¿ ¸D¿ ¸o¿ ¸á¿ ¸ü¿ ¸∑¿ ¸–¿ ¸◊¿ ¸ÿ¿ ˝%¿ ˝b¿ ˝∫¿ ˝¡¿ ˝˘¿ ˛<¿ ˛Å¿ ˛ƒ¿ ˇ	¿ ˇ¿ ˇ¿ ˇ9¿ ˇ]¿ ˇÑ¿ ˇ£¿ ˇ¿¿ ˇ€¿ ˇı¿ ¿ E¿ o¿ î¿ «¿ ˇ¿_¿ã¿Ø¿˝¿6¿c¿ë¿¿¿’¿Ë¿¿5¿x¿∫¿˛¿=¿P¿a¿p¿å¿¥¿ÿ¿˙¿ ¿H¿Y¿î¿≠¿ ¿ˆ¿&¿7¿F¿S¿^¿g¿n¿r¿t¿u¿ª¿ø¿¿_¿≤¿˛¿L¿i¿m¿{¿¿œ¿	¿	0¿	m¿	£¿	¸¿
0¿
1¿
o¿
ç¿
é¿
»¿
Â¿
Á¿
Ë¿/¿3¿y¿ ¿¿b¿Ø¿ ¿Œ¿¿L¿P¿^¿b¿Ø¿⁄¿¿\¿à¿ø¿≈¿Ï¿¿0¿6¿7¿z¿Ä¿–¿ ¿\¿i¿ß¿®¿˜¿¿V¿{¿û¿Ω¿Ò¿¿5¿V¿y¿¿É¿Ñ¿’¿¿)¿L¿k¿ë¿¥¿’¿ˆ¿¿¿#¿$¿i¿ñ¿◊¿¿¿¿¿h¿ú¿£¿§¿Ê¿'¿+¿,¿q¿∞¿Õ¿·¿Á¿Ë¿¿I¿M¿N¿ì¿“¿Ô¿¿	¿
¿<¿m¿q¿r¿£¿Ú¿¿)¿/¿0¿Ñ¿Ö¿Ω¿Ù¿¯¿˘¿B¿Ü¿ ¿¿¿=¿B¿í¿ÿ¿›¿,¿V¿[¿j¿o¿Ω¿–¿6¿p¿q¿≈¿¿3¿p¿≤¿Ó¿>¿i¿p¿q¿û¿Ã¿Ó¿˜¿ ¿ ¿ ¿ ¿ H¿ M¿ Ä¿ Ö¿ î¿ ô¿ Ë¿! ¿!F¿!Ä¿!Å¿!’¿"¿"P¿"{¿"Ç¿"É¿"∞¿"ﬁ¿# ¿#	¿#¿#¿#!¿#"¿#O¿#U¿#¶¿#ı¿$¿$K¿$v¿$w¿$ƒ¿$Í¿$˜¿%G¿%H¿%í¿%¬¿%œ¿&¿&¿&X¿&á¿&Æ¿&Ø¿' ¿')¿'*¿'I¿'v¿'Æ¿'¡¿(¿(0¿(>¿(i¿(m¿(n¿(ª¿)¿)3¿)Y¿)Z¿)™¿)ˆ¿*"¿*'¿*w¿*∆¿*¿+¿+¿+l¿+µ¿+∫¿,¿,_¿,ö¿,»¿,…¿-¿-¿-\¿-∑¿-Ω¿-Õ¿-”¿.$¿.1¿.`¿.Ü¿.î¿.ö¿.Ó¿/C¿/ò¿/Ó¿0A¿0~¿0ÿ¿1'¿1z¿1†¿1Ï¿2¿2o¿2∑¿2Ô¿3¿3G¿3r¿3s¿3§¿3Ô¿4E¿4q¿4÷¿4˚¿5¿5A¿5Ä¿5©¿5»¿6¿6¿67¿6[¿6¨¿6À¿6Ó¿75¿7J¿7Ñ¿7†¿7ƒ¿7Î¿8¿8¿8%¿8/¿8|¿8Õ¿9¿95¿9~¿9ü¿9¬¿9Ê¿:	¿:X¿:j¿:t¿:Ω¿:√¿:«¿:»¿;¿;¿;\¿;{¿;Å¿;≈¿;À¿;€¿;·¿<0¿<C¿<P¿<Ü¿<Æ¿<÷¿<˚¿=$¿=J¿={¿=Ñ¿=ä¿=é¿=è¿=—¿=◊¿>(¿>J¿>P¿>î¿>ö¿>™¿>∞¿>˝¿?¿?¿?Q¿?y¿?†¿?ƒ¿?Û¿?˙¿@ ¿@B¿@H¿@L¿@M¿@ç¿@ì¿@”¿@Ÿ¿@È¿@Ô¿A5¿AM¿AZ¿Aã¿A∞¿A„¿B0¿Bà¿B∂¿C¿CD¿Cg¿Cä¿CØ¿C¿¿D¿D)¿DN¿Dü¿D≥¿Dø¿E
¿EE¿Ej¿Eè¿E‡¿EÙ¿F ¿FK¿Fl¿Fë¿F‡¿G¿GP¿Gg¿G£¿G¡¿GÁ¿H¿H-¿H<¿HP¿H\¿H~¿H®¿H’¿I ¿I3¿Iã¿IŒ¿J$¿Jb¿J±¿J€¿K¿Kx¿KÈ¿L0¿LA¿LØ¿M#¿Mò¿MÒ¿N¿N|¿N™¿Nª¿O=¿Oæ¿P¿Pë¿P˝¿Q_¿Q„¿Q‰¿R¿Rd¿R∏¿R˚¿S¿SI¿S[¿TQ¿TÑ¿Tõ¿TÏ¿U[¿Uê¿U©¿U‹¿UÓ¿U˛¿V
¿V¿V¿V¿V¿Va¿Vg¿V≤¿V∏¿V»¿VŒ¿W¿W0¿W=¿Wí¿Wì¿W⁄¿W‡¿X/¿XA¿XG¿XW¿X]¿X™¿X¬¿Xœ¿Y¿Y1¿YX¿Yy¿Yú¿Y∆¿Y¯¿ZG¿ZZ¿Zá¿Z≥¿ZÈ¿Z¯¿[¿[)¿[N¿[q¿[ñ¿[„¿[Î¿[Ï¿\/¿\0¿\o¿\ü¿\•¿\©¿\™¿\ˆ¿\¸¿]J¿]f¿]l¿]|¿]Ç¿]À¿]Ï¿]˘¿^@¿^e¿^±¿^Ú¿_C¿_ï¿_√¿_–¿`¿`¿`¿`3¿`T¿`w¿`¶¿`’¿a@¿aj¿a†¿aØ¿a¬¿aÔ¿b¿bQ¿b`¿bl¿bë¿b∂¿bŸ¿b˛¿c+¿cî¿cº¿c¿c˝¿d¿d¿dI¿dO¿dS¿dT¿dô¿dü¿d–¿d÷¿dÊ¿dÏ¿e<¿eO¿e\¿eï¿e¿¿eÊ¿f¿f¿f9¿f]¿f¿fÉ¿fÑ¿f≈¿fÀ¿g¿g¿g8¿g^¿gl¿gr¿gó¿g∂¿g◊¿h#¿hj¿ht¿hû¿hƒ¿hÍ¿hÙ¿i¿i:¿i[¿i~¿i¶¿iÒ¿i˚¿j!¿j'¿j+¿j,¿jq¿jw¿já¿jç¿j›¿j¿k1¿k>¿kr¿k∆¿l¿lp¿l∆¿m¿mV¿mπ¿m·¿mÂ¿mÊ¿n(¿n.¿ny¿n∞¿n∂¿n∆¿nÃ¿o¿o,¿o9¿on¿oì¿o‹¿p¿p(¿p0¿p6¿p:¿p;¿på¿p£¿q¿qi¿q ¿qŒ¿qœ¿r¿r2¿rë¿r’¿s1¿s5¿s6¿sà¿sï¿sÎ¿t¿t\¿t¨¿t¯¿uM¿u≈¿uÛ¿u˜¿u¯¿vE¿ve¿vj¿vπ¿v”¿vÿ¿w!¿wY¿w·¿x1¿xÇ¿x±¿x»¿x˙¿y3¿yG¿yÄ¿yœ¿y–¿z¿zf¿z∑¿z∏¿zÂ¿{,¿{9¿{@¿{D¿{E¿{á¿{ç¿{π¿|¿|0¿|6¿|F¿|L¿|ô¿|¨¿|π¿|Ó¿}¿}"¿}(¿}P¿}â¿}ñ¿}Ω¿}‚¿~¿~(¿~K¿~p¿~‘¿~˜¿V¿^¿d¿ä¿¨¿≤¿∂¿∑¿˛¿Ä¿ÄI¿ÄO¿Ä_¿Äe¿Ä≤¿Ä ¿Ä◊¿Å¿Å8¿ÅF¿ÅL¿Å~¿Å≠¿Å÷¿Ç¿Ç¿Ç6¿Çd¿Ç°¿É¿É	¿Éy¿É∫¿É»¿ÉŒ¿Éœ¿Ñ¿Ñ¿Ñ~¿Ñ•¿Ñ∆¿ÑÈ¿Ö9¿Ö^¿ÖÉ¿Ö¶¿ÖÀ¿Ü¿Ü#¿Ü0¿ÜW¿Üx¿Üö¿Üƒ¿ÜÒ¿á ¿áN¿áÅ¿áí¿áΩ¿á¿à¿àF¿àî¿àÊ¿â#¿âr¿â£¿â”¿ä¿ä¿äh¿äx¿äè¿äõ¿ä¿¿äÂ¿ã¿ã1¿ã^¿ãç¿ãª¿ãÓ¿ãˇ¿å*¿å]¿åá¿å≥¿å˙¿ç<¿çi¿çö¿ç ¿çˇ¿é¿é_¿éo¿éÜ¿éí¿éµ¿éÿ¿é˝¿è(¿èR¿èÅ¿èé¿èñ¿èú¿è†¿è°¿èÈ¿èÔ¿ê=¿êT¿êZ¿êj¿êp¿êæ¿ê˜¿ë¿ëA¿ëg¿ëu¿ë{¿ë|¿ë«¿ë»¿ë„¿í/¿íp¿í¡¿ì¿ìA¿ìN¿ìÄ¿ìâ¿ìÈ¿ìÍ¿î¿î{¿î¶¿îÛ¿ï¿ïF¿ïQ¿ïR¿ïr¿ïõ¿ïÃ¿ïÙ¿ñ¿ñn¿ññ¿ñ¡¿ñ÷¿ñÍ¿ñÙ¿ñ¸¿ñ˝¿ó%¿óò¿ó¡¿óË¿ò¿ò2¿òV¿òÇ¿ò±¿ò‚¿ô7¿ôe¿ôö¿ô≠¿ô⁄¿ö¿ö;¿öi¿öÇ¿ö’¿õ¿õ*¿õ8¿õL¿õq¿õô¿õÍ¿ú¿úE¿úT¿ú{¿ú†¿úÕ¿ù¿ùH¿ùy¿ùà¿ùí¿ùö¿ùõ¿ù¬¿ù„¿û>¿û•¿ûÌ¿û˙¿üW¿üâ¿ü´¿ü’¿†¿†8¿†ã¿†∑¿†Í¿†˚¿°&¿°Y¿°É¿°Ø¿°Ï¿¢¿¢L¿¢Ä¿¢í¿¢√¿¢Û¿£(¿£;¿£è¿£ü¿£∂¿£À¿£◊¿£È¿§¿§3¿§Ö¿§Ë¿•0¿•R¿•|¿•©¿•‘¿¶¿¶=¿¶ê¿¶º¿¶Ô¿ß ¿ß*¿ßV¿ßÉ¿ß¥¿ß‰¿®¿®,¿®Ä¿®ê¿®ß¿®º¿®»¿®⁄¿®˝¿© ¿©E¿©w¿©∆¿©Ó¿™¿™*¿™2¿™8¿™9¿™b¿™ö¿™€¿´.¿´4¿´5¿´Å¿´ì¿´‡¿¨@¿¨p¿¨Ω¿¨¯¿≠6¿≠u¿≠∆¿≠ı¿Æ%¿ÆI¿ÆÑ¿Æ±¿Ææ¿Æ…¿ÆÌ¿Æˆ¿Ø¿ØQ¿Øó¿Ø∆¿Øˆ¿∞¿∞S¿∞Ä¿∞ç¿∞ò¿∞º¿∞≈¿∞“¿±¿±$¿±(¿±)¿±n¿±t¿±∑¿±—¿±◊¿±Á¿±Ì¿≤=¿≤P¿≤]¿≤î¿≤ﬂ¿≥	¿≥
¿≥ö¿≥º¿≥¬¿≥√¿≥›¿≥ˇ¿¥¿¥¿¥1¿¥5¿¥6¿¥Ç¿¥¢¿¥®¿¥Ë¿µ¿µ¿µ5¿µP¿µW¿µÄ¿µê¿µ¨¿µ¸¿∂H¿∂n¿∂ú¿∂¿¿∂Ï¿∑¿∑Z¿∑à¿∑∞¿∑ÿ¿∏
¿∏>¿∏l¿∏Ü¿∏ö¿∏°¿∏•¿∏ß¿∏®¿∏˙¿∏˛¿πI¿πò¿πÁ¿π¸¿∫ ¿∫¿∫¿∫^¿∫™¿∫ª¿∫˜¿ª&¿ª,¿ªv¿ª§¿ªÀ¿ª⁄¿ªÓ¿º
¿º$¿º=¿ºZ¿ºr¿ºé¿º≠¿º—¿ºÓ¿Ω¿Ω"¿ΩA¿Ωa¿Ω~¿Ωë¿Ω™¿Ω∞¿Ω±¿Ω˚¿æK¿æÄ¿æØ¿æ∞¿æ˝¿øI¿øÑ¿øÖ¿ø÷¿øÛ¿¿*¿¿+¿¿i¿¿ï¿¿ñ¿¿Ÿ¿¡¿¡¿¡_¿¡r¿¡x¿¡ø¿¬¿¬f¿¬ó¿¬ò¿¬Á¿√4¿√h¿√ö¿√õ¿√ﬂ¿ƒ&¿ƒd¿ƒ°¿ƒ¢¿ƒÈ¿≈0¿≈1¿≈w¿≈∞¿≈±¿≈ˇ¿∆@¿∆u¿∆v¿∆ƒ¿«¿«;¿«<¿«v¿«±¿«≤¿«Î¿»(¿»)¿»m¿»§¿»•¿»Á¿»Ì¿…$¿…G¿…H¿…g¿…}¿…~¿…ä¿…Ÿ¿…€¿…‹¿ 3¿ 4¿ Ñ¿ ÷¿À(¿ÀF¿ÀK¿Àù¿À±¿ÀÔ¿Ã¿Ã7¿ÃZ¿Ã{¿Ã…¿Õ¿Õg¿Õ∑¿Œ¿Œ5¿Œá¿Œ¶¿Œ«¿œ¿œf¿œ∑¿œ…¿œÔ¿–¿–a¿–∞¿— ¿—L¿—~¿—π¿—ø¿—√¿—ƒ¿“¿“;¿“o¿“î¿“·¿”4¿”É¿”±¿”ˇ¿‘3¿‘9¿‘:¿‘à¿‘º¿‘¬¿‘∆¿‘«¿‘˜¿’E¿’p¿’v¿’z¿’{¿’ó¿’Ω¿’¡¿’¬¿’˘¿÷)¿÷-¿÷.¿÷g¿÷ò¿÷ú¿÷ù¿÷–¿÷˛¿◊¿◊¿◊:¿◊g¿◊k¿◊l¿◊°¿◊Ã¿◊–¿◊—¿ÿ¿ÿ>¿ÿk¿ÿq¿ÿu¿ÿv¿ÿæ¿ÿÚ¿Ÿ$¿Ÿ*¿Ÿ.¿Ÿ/¿Ÿi¿Ÿñ¿Ÿ¡¿Ÿ«¿ŸÀ¿ŸÃ¿Ÿÿ¿Ÿˇ¿⁄\¿⁄]¿⁄æ¿⁄Ú¿€¿€+¿€^¿€ö¿€£¿€™¿€´¿€⁄¿‹¿‹;¿‹™¿›(¿›X¿›k¿›¢¿›„¿ﬁ¿ﬁ"¿ﬁ+¿ﬁ1¿ﬁ2¿ﬁa¿ﬁë¿ﬁæ¿ﬁÂ¿ﬂ
¿ﬂ/¿ﬂP¿ﬂŸ¿‡$¿‡c¿‡z¿‡–¿‡Ô¿·,¿·Y¿·ä¿·Ω¿·Í¿‚¿‚B¿‚Q¿‚^¿‚Å¿‚§¿‚…¿„<¿„|¿„∞¿„«¿‰¿‰<¿‰y¿‰¶¿‰◊¿Â
¿Â7¿Â`¿Âè¿Âû¿Â´¿Â≥¿Âπ¿Â∫¿Ê¿Êy¿Ê∂¿ÊÁ¿Ê˙¿ÁO¿Áü¿Á™¿Á≥¿Áπ¿Á∫¿ÁŸ¿ÁÛ¿Ë¿Ë6¿ËQ¿ËX¿Ë\¿Ë^¿Ë_¿Ë≠¿ËŒ¿Ë“¿È¿È]¿È®¿Í¿Í7¿ÍS¿Íà¿Íù¿Íû¿Í∏¿Íπ¿ÍÛ¿Î¿Î(¿Î6¿Î<¿Î=¿ÎX¿Îb¿Îì¿Î¥¿ÎË¿Ï¿Ï¿Ï?¿Ïë¿Ïõ¿ÏÂ¿Ì!¿Ì\¿Ìl¿Ìt¿Ìõ¿Ì©¿ÌØ¿Ì·¿Ó¿Ó-¿Ó.¿ÓZ¿Óh¿Ón¿ÓÜ¿Óä¿Óã¿Óó¿Ó√¿Ó‹¿Ô¿Ô¿Ô?¿ÔO¿ÔU¿Ôv¿Ôz¿Ô{¿Ôá¿Ô∂¿Ô⁄¿¿5¿;¿?¿@¿L¿â¿û¿ƒ¿÷¿˝¿Ò$¿ÒI¿Òn¿Òà¿Òó¿Òù¿Ò°¿Ò¢¿ÒÆ¿Ò¡¿ÒÛ¿Ú	¿Ú¿Ú"¿Ú$¿Ú%¿Ún¿ÚÖ¿Ú‘¿Ú·¿Ú‚¿Û0¿Û}¿Û¡¿ÛÃ¿ÛÕ¿Ù¿Ù,¿Ù.¿Ù/¿Ùè¿Ù£¿Ùß¿Ùµ¿ı¿ıg¿ıö¿ıû¿ı‹¿ˆG¿ˆr¿ˆí¿ˆœ¿ˆ‰¿ˆÂ¿ˆˇ¿˜ ¿˜D¿˜d¿˜y¿˜á¿˜ç¿˜é¿˜µ¿˜ø¿¯	¿¯*¿¯^¿¯|¿¯í¿¯µ¿˘¿˘¿˘b¿˘û¿˘›¿˘Ì¿˘ı¿˙ ¿˙.¿˙4¿˙5¿˙w¿˙ù¿˙≈¿˙∆¿˙Ú¿˚ ¿˚¿˚¿˚"¿˚#¿˚/¿˚[¿˚t¿˚•¿˚´¿˚€¿˚Î¿˚Ò¿¸¿¸¿¸¿¸#¿¸R¿¸v¿¸ù¿¸—¿¸◊¿¸€¿¸‹¿¸Ë¿˝%¿˝:¿˝`¿˝r¿˝ô¿˝¿¿˝Â¿˛
¿˛"¿˛(¿˛,¿˛-¿˛9¿˛L¿˛~¿˛î¿˛©¿˛≠¿˛Ø¿˛∞¿ˇ¿ˇ¿ˇ!¿ˇo¿ˇä¿ˇ¿¿ˇÀ¿ˇÃ¿ /¿ è¿ Õ¿ ÿ¿ Ÿ¿¿¿!¿"¿p¿¡¿˜¿H¿Ä¿Ω¿…¿‡¿˙¿¿4¿R¿z¿û¿’¿ˇ¿¿ ¿,¿d¿e¿q¿™¿´¿∑¿Ò¿Ú¿˛¿<¿=¿I¿©¿™¿∂¿¿¿$¿h¿i¿u¿Ø¿±    ToolbarItemsParentDataTextSelectionControlsEmptyTextSelectionControlsemptyTextSelectionControlsTextSelectionOverlaySelectionOverlay_SelectionToolbarWrapper_SelectionToolbarWrapperState_SelectionHandleOverlay_SelectionHandleOverlayState+TextSelectionGestureDetectorBuilderDelegate#TextSelectionGestureDetectorBuilderTextSelectionGestureDetector"_TextSelectionGestureDetectorStateClipboardStatusNotifierClipboardStatusLiveTextInputStatusNotifierLiveTextInputStatusTextSelectionHandleControls ï