ÄÀ_startstart_extentextent==hashCodetoStringlerpborderAnimationbordergapAnimationgaptextDirection	fillColorhoverColorTweenhoverAnimationblendedColorpaintshouldRepaint
hoverColor
isHoveringcreateState_kHoverDuration_controller_hoverColorController_borderAnimation_border_hoverAnimation_hoverColorTween	initStatedisposedidUpdateWidgetbuildchild	animation
translateX	textAlign
helperTexthelperStylehelperMaxLineserror	errorText
errorStyleerrorMaxLinesempty_helper_error	_hasError_handleChange_buildHelper_buildErrorneverautoalways_xcenter
_stringifyiconinputlabelhintprefixsuffix
prefixIcon
suffixIconhelperErrorcounter	containercontentPaddingisCollapsedfloatingLabelHeightfloatingLabelProgressfloatingLabelAlignment	borderGapalignLabelWithHintisDensevisualDensityboxToBaselineinputBaselineoutlineBaselinesubtextBaselinecontainerHeightsubtextHeight
subtextGapchildren
decoration_decoration_textDirectiontextBaseline_textBaseline_defaultTextAlignVerticaltextAlignVertical_textAlignVertical	isFocused
_isFocusedexpands_expands	material3
_material3_isOutlineAlignedvisitChildrenForSemanticssizedByParent	_minWidth	_maxWidth
_minHeight_boxSize_boxParentData_layoutLineBox_layout_interpolateThreecomputeMinIntrinsicWidthcomputeMaxIntrinsicWidth_lineHeightcomputeMinIntrinsicHeightcomputeMaxIntrinsicHeightcomputeDistanceToActualBaseline_labelTransformcomputeDryLayout$_childSemanticsConfigurationDelegatedescribeSemanticsConfigurationperformLayout_paintLabelhitTestSelfhitTestChildrenapplyPaintTransformslotschildForSlotcreateRenderObjectupdateRenderObjectlabelIsFloatingtextstylesemanticsSortKeysemanticsTag	baseStyleisEmpty_labelShouldWithdrawcontainerOfdebugFillProperties_floatingLabelController_floatingLabelAnimation_shakingLabelController
_borderGap_kPrefixSemanticsSortOrder_kInputSemanticsSortOrder_kSuffixSemanticsSortOrder_kPrefixSemanticsTag_kSuffixSemanticsTagdidChangeDependencies_effectiveDecoration_floatingLabelEnabled_getDefaultM2BorderColor_getFillColor_getHoverColor_getIconColor_getPrefixIconColor_getSuffixIconColor_hasInlineLabel_shouldShowLabel_getInlineLabelStyle_getInlineHintStyle_getFloatingLabelStyle_getHelperStyle_getErrorStylematerialState_getDefaultBorder	iconColor	labelText
labelStylefloatingLabelStylehintText	hintStylehintTextDirectionhintMaxLinesfloatingLabelBehaviorprefixIconConstraints
prefixTextprefixStyleprefixIconColor
suffixTextsuffixStylesuffixIconColorsuffixIconConstraintscounterTextcounterStylefilled
focusColorerrorBorderfocusedBorderfocusedErrorBorderdisabledBorderenabledBorderenabledsemanticCounterTextconstraintscopyWithapplyDefaultsoutlineBorderactiveIndicatorBordermergecontext_colors
_textTheme_kTransitionDuration_kTransitionCurve_kFinalLabelScale_InputBorderGap_InputBorderTween_InputBorderPainter_BorderContainer_BorderContainerState_Shaker_HelperError_HelperErrorStateFloatingLabelBehaviorFloatingLabelAlignment_DecorationSlot_Decoration_RenderDecorationLayout_RenderDecoration
_Decorator
_AffixTextInputDecorator_InputDecoratorStateInputDecorationInputDecorationTheme_InputDecoratorDefaultsM2_InputDecoratorDefaultsM3Å£
lerpDoubleDurationmillisecondsCurveCurvesfastOutSlowIndoubleChangeNotifiernotifyListenersoverrideboolObject	identicalruntimeTypestartextentinthashStringdescribeIdentityTweenInputBorderShapeBorderlerpbeginendCustomPainter
Listenablerepaint	AnimationTextDirectionColor
ColorTween
alphaBlendevaluatevoidCanvasSizeRectOffsetzeroalphadrawPathgetOuterPathtextDirectionPaintcolorstylePaintingStylefillpaintgapStart	gapExtentgapPercentagevalueborderAnimationhoverAnimationgapAnimationbordergapStatefulWidgetStateTickerProviderStateMixinAnimationController	initStatedurationwidget
isHoveringvsyncCurvedAnimationparentcurvereverseCurveflippedlinearColorstransparent
hoverColordisposedidUpdateWidgetforwardreverseWidgetBuildContextCustomPaintforegroundPaintermergeDirectionalityof	fillColorhoverColorTweenAnimatedWidget
listenable	Transform	transformMatrix4translationValueschild	TextAlign	TextStyleSingleTickerProviderStateMixinSizedBoxshrink	errorTexterror
helperTextaddListenersetState	Semantics	containerFadeTransitionopacityanimateTexthelperStyle	textAlignoverflowTextOverflowellipsismaxLineshelperMaxLinesFractionalTranslationtranslationview
errorStyleerrorMaxLinesisDismissedisCompletedStackchildrenfloatingLabelBehaviorlabel	labelTextfloatingLabelAlignment	immutableltrrtl_hashCode_xtoStringAsFixedEdgeInsetsGeometryVisualDensitycontentPaddingisCollapsedfloatingLabelHeightfloatingLabelProgress	borderGapalignLabelWithHintisDensevisualDensityiconinputhintprefixsuffix
prefixIcon
suffixIconhelperErrorcounterMap	RenderBox!SlottedContainerRenderObjectMixinTextBaselineTextAlignVerticalchildForSlotIterablemarkNeedsLayoutcentertopymarkNeedsSemanticsUpdate	isOutlineRenderObjectVisitorgetMinIntrinsicWidthgetMaxIntrinsicWidthgetMinIntrinsicHeightsizeBoxParentData
parentData
EdgeInsetsBoxConstraintslayoutparentUsesSizegetDistanceToBaseline
alphabeticFlutterError	fromPartsDiagnosticsNodeErrorSummaryErrorDescriptionmaxWidthinfinityloosencopyWithwidth
horizontalmaxconstraintsleftrightminWidthheightbaseSizeAdjustmentdeflateonlydybottomkMinInteractiveDimension	maxHeightminverticalboxToBaselinecontainerHeightinputBaselineoutlineBaselinesubtextBaselinesubtextHeightListboxreduceoffsetcomputeDistanceToActualBaselinedebugCannotComputeDryLayoutreason"ChildSemanticsConfigurationsResultSemanticsConfiguration)ChildSemanticsConfigurationsResultBuilderchildConfigtagsChildrenWith_kPrefixSemanticsTagadd_kSuffixSemanticsTagmarkAsMergeUpmarkAsSiblingMergeGroupbuildchildConfigurationsDelegatetightFordxoffsetToPrefixIcon	constrainconstrainWidthconstrainHeightPaintingContext
paintChild
borderSideidentity	translatescalelayerpushTransformneedsCompositingoldLayerTransformLayerBoxHitTestResultaddWithPaintOffsetpositionhitTesttransformedRenderObjectmultiplyapplyPaintTransform#SlottedMultiChildRenderObjectWidgetvalues
decorationtextBaselinetextAlignVertical	isFocusedexpands	material3ThemeuseMaterial3StatelessWidgetSemanticsSortKeySemanticsTagDefaultTextStyleAnimatedOpacitysortKeytagForChildren	TextFieldEditableTextMaterial
DecorationDecoratedBox	ThemeDatainputDecorationTheme	textThememinLinesDropdownButtonInkWellenabledfilledcounterTextfindAncestorRenderObjectOfTypeDiagnosticPropertiesBuilderdebugFillPropertiesDiagnosticsPropertydefaultValueOrdinalSortKeyalwaysnever_labelShouldWithdrawdidChangeDependenciesapplyDefaultscontextisEmptydisabledColorcolorSchemeprimary	hintColor	onSurfacewithOpacityMaterialStateProperty	resolveAs	iconColorprefixIconColorsuffixIconColor
labelStyletitleMedium	baseStyle	hintStylefloatingLabelStyleSetMaterialStatedisabledfocusedhoveredUnderlineInputBorder
BorderSidenoneactiveIndicatorBorderoutlineBorderhintTexthintTextDirectionhintMaxLineserrorBorderdisabledBorderfocusedErrorBorderfocusedBorderenabledBorder	animationAnimatedDefaultTextStyle
prefixText
suffixTextlabelIsFloatingtextprefixStylesemanticsSortKeysemanticsTagsuffixStyleMouseRegioncursorSystemMouseCursorsbasicPaddingpadding	IconThemedataIconThemeDataCenterwidthFactorheightFactorConstrainedBoxprefixIconConstraintseffectiveConstraints	minHeightIconButtonThemeIconButtonThemeData
IconButton	styleFromforegroundColoriconSizesuffixIconConstraints
liveRegioncounterStylesemanticsLabelsemanticCounterTextresolvefontSize
MediaQuerytextScaleFactorOffromLTRBIcon	ImageIconMaterialStateColorrichMaterialStateTextStyleColorSchemeTextFormField	validatorauto	collapsedAlign
focusColorOutlineInputBorder!MaterialStateUnderlineInputBorderMaterialStateOutlineInputBorderhashAlljoinDiagnosticableIntPropertyColorPropertyresolveWithstatescontains	bodySmall
brightness
Brightnessdarklightwhite70black45	TextThemesurfaceVariantMaterialStateBorderSideonErrorContaineronSurfaceVariantoutline	bodyLargeChangeNotifierTweenCustomPainterStatefulWidgetStateTickerProviderStateMixinAnimatedWidgetSingleTickerProviderStateMixin	RenderBox!SlottedContainerRenderObjectMixin#SlottedMultiChildRenderObjectWidgetStatelessWidgetDiagnosticableInputDecorationThemeÃP≤≥d∂æ∫€eø#©y
9    Ä¶  Ä∏mathÄª	dart:mathÄ“Ä·
lerpDouble Ä¬  dart:ui  ÄÂ  package:flutter/foundation.dart  Å  package:flutter/rendering.dart  Å8  package:flutter/widgets.dart  Å`  color_scheme.dart  Å|  colors.dart  Åí  constants.dart  Å´  icon_button.dart  Å∆  icon_button_theme.dart  ÅÁ  input_border.dart  Ç  material.dart  Ç  material_state.dart  Ç9  text_theme.dart  ÇS  
theme.dart  Çh  theme_data.dart    	dart:core¿Rﬂ ¿√¡íö <ÄÜÄ§Ä•Ä¡Ä„Ä‰ÅÅ7Å^Å_Å{ÅëÅ™Å≈ÅÊÇÇÇ8ÇRÇgÇÅÇÇÇöÇ≤Ç≥ÇŸÉoÉ≤ÉËÑÑÑTÑsÑ¢Ñ¥Ñ”ÑÖÖ!Ö:Ö@ÖDÖEÖ]Ö}ÖöÖ∂ÖÕÖÊÖÏÖÖÒÖ˝Ü^ÜÅÜ£Ü∂ÜºÜËÜ¸áá&áFáiámánázá€ààààIàKàLà}à≤à·à‚àÓâ?âAâBâìâ≈â›â˛ä!ä;ä[äräìä∞ä“äıãããAãcããã®ãÕãÊå
å4å5åôåöå¶åœççEçvçúç≥çˇéé4é\éeékéléÉéëé£éæé€èè(è/è3è4è@èwè∞èÁêêAêbêòêúêùê©êÿê⁄ê€ë'ërëªë€íí&í@íWíwíîí≤í–í÷í◊íÛìì8ìQìkìÑìÖìëì”ì’ì÷î2îxîyî°î”î˛ï ïJïnïoï{ïêïßïÿï˘ñ%ñ8ñ?ñfñåñüñ¶ñŒñÈó	ó8ó?ó`ó|óñóùóƒóÈòòòbòfògòsòÜò°ò∆ò€òﬂò‡òÏô!ôGôtôóô∏ô‘ô›ôÔööö öUö≠ö≥öËõõ0õ?õhõpõvõzõ{õáõÆõ∆õÙú$ú@úVúwúÉúÆú«úÚùù>ùcùéù∑ù¿ù«ùÀùÕùŒûû;ûbûtûûûÆû”û‘ûÎûÏü2ü3üMüpüñü´ü…ü‰†	††A†G†K†L†X††ï†◊†Î†Ú†ˆ†¯†˘°;°z°¨°ÿ°Ô¢¢¢.¢G¢W¢k¢Ä¢ò¢û¢ü¢Ω¢Ÿ¢˘££-£H£g£É£Ñ£ê£ £Ã£Õ§'§o§®§Ÿ§⁄•••'•(•r•s••î•´•“•¯¶¶¶'¶E¶d¶ê¶∞¶∂¶‚¶Ê¶Á¶Ûßß!ß6ß:ß;ßTßfßîßúß†ß°ß≠ßÿß¯ß˘®$®W®å®¥®‰©©©d©Ω™1™2™Ç™∏™ÿ™˜´!´C´b´q´ê´ò´û´¢´£´Ω´‰´˙¨¨.¨y¨é¨¨¨—¨¯≠#≠N≠Y≠b≠i≠m≠n≠á≠≈≠€≠ÚÆÆ-ÆSÆyÆ¶ÆƒÆÏØØ2ØXØÅØÆØ⁄ØÁØÚØ˚∞∞∞∞∞:∞]∞r∞ô∞¬∞—∞È∞ˇ±±±±1±G±^±Ö±î±´±¡±…±œ±–±¯≤≤≤≤R≤o≤u≤v≤ã≤ü≤ª≤’≥$≥@≥M≥f≥q≥z≥Ä≥Å≥¶≥∫≥÷≥¥
¥,¥G¥T¥_¥h¥n¥o¥Å¥Ö¥á¥à¥æ¥¬¥–¥‘µ"µaµ¨µ≈µ‚∂+∂4∂z∂Ç∂∑∂¡∂√∂ƒ∑∑!∑%∑3∑7∑á∑∆∏∏$∏/∏N∏õ∏ú∏ÿ∏Î∏Ïπ8π>πâπèπ€∫)∫o∫Ω∫æ∫ ∫Ì∫Ó∫˙ªª?ªRªXªÑªòªûª…ªËªÏªÌºº)ºVº\ºpºûº§ºÂºÈºÍºˆΩΩΩ ΩZΩqΩyΩÇΩãΩìΩùΩßΩµΩ√Ω“Ω›ΩÍΩÏΩÌæ(æ3æGæ]ææûæ≈æÓøø2øOøuøêø±ø¿ø–ø‡øÔ¿ @ ¿ @¿ @&¿ @;¿ @Q¿ @c¿ @w¿ @}¿ @~¿ @©¿ @√¿ @Á¿ A¿ AD¿ A`¿ AÉ¿ A§¿ Aª¿ A‡¿ Aˆ¿ B¿ B$¿ B:¿ BR¿ Bj¿ BÜ¿ B¢¿ Bø¿ Bÿ¿ BÛ¿ BÙ¿ C ¿ C#¿ CE¿ CX¿ C^¿ Cä¿ Cû¿ C§¿ Cƒ¿ Cˆ¿ D"¿ D^¿ Dû¿ D‡¿ E¿ E*¿ Ed¿ Eà¿ E∏¿ E÷¿ Eˆ¿ F¿ F4¿ FV¿ Fx¿ F¢¿ FÃ¿ F¯¿ G¿ GE¿ GI¿ GJ¿ GV¿ Gy¿ Gç¿ G¶¿ G¡¿ G›¿ GÈ¿ G¯¿ H¿ H¿ H0¿ H:¿ HE¿ HP¿ HZ¿ Hf¿ Hr¿ HÇ¿ Hí¿ H£¿ H∞¿ Hø¿ Hƒ¿ H∆¿ H«¿ I¿ I[¿ Iì¿ I≥¿ I’¿ Iˆ¿ J8¿ Jz¿ Jù¿ J¿¿ J·¿ JÁ¿ JË¿ K¿ K5¿ KU¿ Kç¿ K≠¿ KÀ¿ KÕ¿ KŒ¿ L¿ LÉ¿ Lô¿ Læ¿ LË¿ M¿ M-¿ MH¿ Me¿ Mè¿ M∞¿ M◊¿ M¸¿ N+¿ NJ¿ Ne¿ NÑ¿ NÖ¿ N≠¿ NÆ¿ NÎ¿ O*¿ Oi¿ O¶¿ OÁ¿ P(¿ Pq¿ P∫¿ Q¿ QH¿ Qè¿ Qê¿ Q√¿ Qœ¿ QÙ¿ R¿ R$¿ R3¿ RL¿ R\¿ Rz¿ Rè¿ R≠¿ R¬¿ R‹¿ RÌ¿ S¿ S¿ S1¿ SA¿ SY¿ Sh¿ Sá¿ Sù¿ S∏¿ S ¿ SÁ¿ S˚¿ T¿ T¿ T¿ T4¿ TO¿ Tu¿ Tï¿ T£¿ T©¿ T¬¿ TŸ¿ T›¿ Tﬁ¿ U¿ U3¿ U^¿ UÅ¿ Uè¿ Uï¿ U±¿ U»¿ UÃ¿ UÕ¿ Uˇ¿ V¿ VF¿ Vh¿ Vv¿ V|¿ Vó¿ VÆ¿ V≤¿ V≥¿ V˙¿ W¿ W:¿ Wò¿ W¡¿ Wı¿ X¿ X*¿ X0¿ Xu¿ X¡¿ X„¿ XÒ¿ X˜¿ Y¿ Y.¿ Y2¿ Y3¿ YW¿ Yj¿ Yà¿ Yß¿ Yµ¿ Yª¿ Y”¿ YÛ¿ Y˜¿ Y¯¿ Z¿ Z1¿ ZM¿ Zj¿ Zx¿ Z~¿ Zî¿ Z´¿ ZØ¿ Z∞¿ Z‘¿ ZÔ¿ [¿ [,¿ [:¿ [@¿ [X¿ [o¿ [s¿ [t¿ [√¿ [–¿ [Ô¿ \2¿ \6¿ \7¿ \C¿ \É¿ \õ¿ \±¿ \∑¿ \—¿ \È¿ \Ô¿ ]¿ ])¿ ]/¿ ]0¿ ]I¿ ]`¿ ]f¿ ]~¿ ]ï¿ ]≠¿ ]œ¿ ]Á¿ ]Ô¿ ]ı¿ ]ˆ¿ ^¿ ^&¿ ^,¿ ^J¿ ^f¿ ^l¿ ^Ü¿ ^û¿ ^§¿ ^¡¿ ^‹¿ ^‚¿ _¿ _¿ _$¿ _?¿ _X¿ _^¿ _b¿ _c¿ _o¿ _í¿ _ì¿ _Œ¿ `¿ `¿ `¿ `O¿ `ê¿ `î¿ `ï¿ `–¿ a¿ a¿ a¿ ad¿ ae¿ aø¿ a¿¿ b¿ b¿ bL¿ bí¿ b©¿ bª¿ b¡¿ bÙ¿ cF¿ có¿ cÂ¿ d3¿ dÑ¿ dù¿ dÓ¿ dÔ¿ dˇ¿ e¿ e/¿ e7¿ em¿ eÃ¿ eÊ¿ f0¿ f_¿ fj¿ ft¿ f~¿ fì¿ fó¿ fò¿ fÂ¿ g3¿ gw¿ gΩ¿ g…¿ g˝¿ hK¿ hn¿ hª¿ i
¿ iX¿ i°¿ i∆¿ iÕ¿ iŒ¿ j¿ jX¿ jû¿ jü¿ j‘¿ k¿ k]¿ kù¿ k§¿ kˆ¿ lH¿ lï¿ l‡¿ lÁ¿ m/¿ mw¿ mx¿ m†¿ m´¿ m ¿ mÁ¿ n^¿ nÉ¿ n§¿ n≈¿ nÍ¿ oc¿ oj¿ o¥¿ p&¿ p_¿ pÜ¿ p„¿ pÈ¿ q¿ q¿ q;¿ qX¿ qv¿ qõ¿ qµ¿ q÷¿ q›¿ r¿ r¿ r_¿ rf¿ rê¿ rú¿ rÁ¿ rÓ¿ s8¿ s9¿ sÇ¿ s´¿ s‹¿ sÔ¿ t¿ tj¿ ts¿ tz¿ t{¿ tÀ¿ tˆ¿ u#¿ u-¿ uU¿ ué¿ u«¿ u‹¿ v¿ v¿ vE¿ vÇ¿ v´¿ v„¿ vÌ¿ w¿ wF¿ w[¿ wt¿ w{¿ w…¿ wÙ¿ x¿ x/¿ xs¿ x¿¿ x”¿ xÒ¿ y¿ y¿ y¿ y ¿ yb¿ yò¿ y÷¿ z¿ zQ¿ zn¿ zä¿ zë¿ zí¿ z‡¿ zÚ¿ {,¿ {f¿ {ç¿ {´¿ {…¿ {–¿ |!¿ |O¿ ||¿ |©¿ |∞¿ |¸¿ }"¿ }Y¿ }Ñ¿ }ç¿ }Õ¿ }‘¿ }’¿ ~¿ ~P¿ ~í¿ ~·¿ ¿ !¿ 1¿ L¿ b¿ v¿ å¿ ™¿ ƒ¿ À¿ Ä*¿ Ä6¿ ÄX¿ Äß¿ Ä“¿ ÄÌ¿ Å@¿ ÅA¿ Åç¿ Åª¿ Ç¿ Ç:¿ ÇG¿ ÇH¿ Çó¿ ÇË¿ É1¿ É~¿ ÉÃ¿ Ñ¿ ÑR¿ Ñ£¿ ÑÚ¿ Ö¿ Ö}¿ Ö~¿ ÖÃ¿ Ü¿ Ü¿ Ü3¿ ÜN¿ Ül¿ Üå¿ Ü˙¿ áJ¿ áì¿ áÎ¿ à8¿ à9¿ àä¿ àë¿ à ¿ â¿ âQ¿ âè¿ âñ¿ âﬂ¿ ä,¿ äk¿ ä™¿ äÀ¿ ã¿ ã:¿ ãâ¿ ãø¿ ãŸ¿ ãˆ¿ å¿ å,¿ å3¿ å4¿ åz¿ å°¿ å«¿ åÏ¿ ç¿ ç+¿ çJ¿ çä¿ ç ¿ ç–¿ çÌ¿ é¿ éO¿ é~¿ éÑ¿ é±¿ éœ¿ éÏ¿ éÛ¿ è¿ è:¿ èU¿ è\¿ è]¿ èÅ¿ è•¿ èÕ¿ èÒ¿ ê¿ êA¿ êe¿ êl¿ êp¿ êq¿ êø¿ ë¿ ë_¿ ë©¿ ë˘¿ íJ¿ íX¿ í√¿ íÁ¿ ì7¿ ì|¿ ìô¿ ì∞¿ ì∏¿ î	¿ î¿ îJ¿ îu¿ î{¿ î|¿ îï¿ î™¿ î∞¿ ï¿ ï¿ ï7¿ ï_¿ ïc¿ ïd¿ ïp¿ ï£¿ ï∆¿ ï‚¿ ñ¿ ñ*¿ ñn¿ ñê¿ ñ∂¿ ñ‘¿ ñÿ¿ ñŸ¿ ñÂ¿ ó¿ ó;¿ óW¿ ó}¿ óü¿ ó„¿ ò¿ ò+¿ òI¿ òM¿ òN¿ òã¿ ò§¿ òŒ¿ òÁ¿ ò˘¿ ô¿ ô:¿ ô@¿ ôS¿ ô†¿ ô—¿ ö¿ ö¿ ö¿ ö¿ öP¿ öá¿ ö¡¿ ö¬¿ ö¿ öÒ¿ õ4¿ õÄ¿ õÅ¿ õƒ¿ ú¿ ú¿ úO¿ úP¿ úç¿ ú–¿ ú—¿ ù#¿ ù|¿ ù√¿ ù‚¿ û¿ û¿ û¿ ûG¿ ûá¿ ûà¿ û√¿ ü¿ ü¿ üÅ¿ ü›¿ †C¿ †D¿ †í¿ †∆¿ °¿ °¿ °:¿ °T¿ °—¿ ¢¿ ¢"¿ ¢D¿ ¢é¿ ¢í¿ ¢ì¿ ¢ü¿ ¢“¿ ¢ˇ¿ £¿ £¿ £¿ £R¿ £ª¿ £ø¿ £¿¿ £Í¿ §¿ §¿ §¿ §I¿ §q¿ §“¿ §⁄¿ §¿ §Ù¿ §ı¿ •l¿ •◊¿ ¶¿ ¶?¿ ¶Ñ¿ ¶Ÿ¿ ß¿ ß=¿ ßô¿ ß“¿ ß˝¿ ®¿ ®8¿ ®@¿ ®F¿ ®j¿ ®£¿ ®©¿ ®Õ¿ ©¿ ©¿ ©(¿ ©,¿ ©-¿ ©9¿ ©Ä¿ ©œ¿ ©”¿ ©‘¿ ©‡¿ ©˘¿ ™2¿ ™N¿ ™è¿ ™ê¿ ™∆¿ ´¿ ´¿ ´H¿ ´e¿ ´∞¿ ´ÿ¿ ¨¿ ¨¿ ¨Y¿ ¨o¿ ¨é¿ ¨Æ¿ ¨¡¿ ¨·¿ ≠¿ ≠¿ ≠G¿ ≠M¿ ≠N¿ ≠f¿ ≠ô¿ ≠È¿ Æ¿ Æ¿ Æ¿ Æ'¿ Æ\¿ Æ±¿ ÆŒ¿ Æ‘¿ Æ’¿ Ø¿ Ø@¿ ØA¿ Øf¿ Ø∏¿ Øπ¿ Ø—¿ ØÁ¿ ∞¿ ∞&¿ ∞U¿ ∞u¿ ∞à¿ ∞ë¿ ∞Ø¿ ∞µ¿ ∞∂¿ ∞”¿ ∞Û¿ ±(¿ ±C¿ ±e¿ ±é¿ ±‹¿ ±Ê¿ ≤¿ ≤2¿ ≤q¿ ≤Ñ¿ ≤¡¿ ≤Õ¿ ≤◊¿ ≤ı¿ ≥=¿ ≥G¿ ≥d¿ ≥°¿ ≥´¿ ≥«¿ ¥¿ ¥¿ ¥.¿ ¥T¿ ¥Ö¿ ¥è¿ ¥≠¿ ¥‹¿ ¥Ê¿ ¥ı¿ ¥˝¿ µ¿ µQ¿ µm¿ µè¿ µ∑¿ µÏ¿ µˆ¿ ∂¿ ∂B¿ ∂m¿ ∂Ä¿ ∂©¿ ∂µ¿ ∂ø¿ ∂›¿ ∑¿ ∑¿ ∑7¿ ∑`¿ ∑j¿ ∑Ü¿ ∑Æ¿ ∑∏¿ ∑⁄¿ ∏¿ ∏K¿ ∏U¿ ∏s¿ ∏∑¿ ∏¡¿ ∏–¿ ∏ÿ¿ ∏ﬁ¿ ∏ﬂ¿ π¿ π6¿ π_¿ π`¿ π¿ πü¿ πƒ¿ ∫&¿ ∫2¿ ∫S¿ ∫¿ ∫ã¿ ∫´¿ ∫–¿ ª¿ ª#¿ ªD¿ ªá¿ ªì¿ ªõ¿ ª°¿ ª¢¿ ªª¿ ª˘¿ º;¿ ºÖ¿ º–¿ Ω¿ ΩN¿ Ωm¿ Ωç¿ Ω∏¿ Ω˛¿ æR¿ æ^¿ æ≈¿ ø¿ ø¿ ø¿ ø?¿ øê¿ ø·¿ ¿5¿ ¿`¿ ¿¶¿ ¿˝¿ ¡	¿ ¡o¿ ¡Ø¿ ¡»¿ ¡–¿ ¬¿ ¬(¿ ¬Q¿ ¬z¿ ¬Ä¿ ¬Å¿ ¬∆¿ √
¿ √Q¿ √U¿ √V¿ √ì¿ √ª¿ √ø¿ √¿¿ √Ã¿ ƒ¿ ƒ(¿ ƒC¿ ƒç¿ ƒï¿ ƒõ¿ ƒ≥¿ ƒ¥¿ ƒÕ¿ ≈¿ ≈F¿ ≈}¿ ≈ø¿ ∆	¿ ∆I¿ ∆è¿ ∆»¿ «¿ «;¿ «{¿ «Õ¿ »¿ »ã¿ »Œ¿ …¿ …W¿ …r¿ …å¿ …´¿ …Â¿  %¿  E¿  û¿  ˝¿ À	¿ À?¿ Àb¿ ÀÇ¿ À€¿ Ã;¿ ÃG¿ ÃO¿ Ã§¿ Ãﬂ¿ Õ(¿ ÕS¿ ÕÄ¿ Õò¿ ÕΩ¿ Õ◊¿ ÕÁ¿ Œ¿ Œ¿ ŒB¿ ŒK¿ ŒX¿ Œl¿ Œr¿ Œs¿ ŒÜ¿ Œõ¿ Œ∞¿ Œ…¿ Œ‚¿ Œı¿ œ	¿ œ#¿ œ9¿ œ=¿ œ>¿ œJ¿ œw¿ œx¿ œÑ¿ œ‘¿ –¿ –K¿ –Ö¿ –π¿ –—¿ –Ì¿ —.¿ —b¿ —°¿ —¨¿ —µ¿ —»¿ —›¿ —Â¿ —Î¿ —˝¿ “¿ “¿ “¿ “R¿ “á¿ “«¿ “◊¿ “¸¿ ”3¿ ”9¿ ”j¿ ”n¿ ”p¿ ”q¿ ”Ã¿ ”·¿ ‘¿ ‘$¿ ‘E¿ ‘e¿ ‘Ç¿ ‘ù¿ ‘£¿ ‘§¿ ‘ƒ¿ ‘È¿ ’¿ ’:¿ ’R¿ ’h¿ ’i¿ ’u¿ ’∂¿ ’∑¿ ’√¿ ’Ú¿ ÷¿ ÷'¿ ÷G¿ ÷i¿ ÷ä¿ ÷¨¿ ÷Õ¿ ÷Ó¿ ◊¿ ◊1¿ ◊S¿ ◊v¿ ◊ò¿ ◊ø¿ ◊Â¿ ÿ¿ ÿ2¿ ÿZ¿ ÿÅ¿ ÿ•¿ ÿ»¿ ÿÓ¿ Ÿ¿ Ÿ¿ Ÿ¿ Ÿ¿ Ÿ*¿ Ÿi¿ Ÿá¿ Ÿ•¿ Ÿ…¿ ŸÎ¿ ⁄¿ ⁄3¿ ⁄K¿ ⁄|¿ ⁄É¿ ⁄á¿ ⁄à¿ ⁄î¿ ⁄Ê¿ ⁄˜¿ €¿ €/¿ €L¿ €y¿ €ú¿ €¬¿ €∆¿ €»¿ €…¿ €Ù¿ ‹	¿ ‹,¿ ‹;¿ ‹K¿ ‹[¿ ‹v¿ ‹ñ¿ ‹ú¿ ‹ù¿ ‹ª¿ ‹—¿ ‹Î¿ ›¿ ›.¿ ›Q¿ ›R¿ ›^¿ ›Ö¿ ›®¿ ›º¿ ›⁄¿ ﬁ¿ ﬁ$¿ ﬁR¿ ﬁl¿ ﬁë¿ ﬁπ¿ ﬂ¿ ﬂ¿ ﬂ¿ ﬂ!¿ ﬂ%¿ ﬂ'¿ ﬂ(¿ ﬂd¿ ﬂh¿ ﬂ¥¿ ‡¿ ‡M¿ ‡ô¿ ‡ù¿ ‡‰¿ ‡Ë¿ ·7¿ ·i¿ ·m¿ ·æ¿ ‚	¿ ‚%¿ ‚)¿ ‚7¿ ‚;¿ ‚É¿ ‚æ¿ „¿ „%¿ „S¿ „ï¿ „Æ¿ „¥¿ ‰¿ ‰¿ ‰-¿ ‰<¿ ‰Z¿ ‰n¿ ‰Ç¿ ‰û¿ ‰∫¿ ‰◊¿ ‰Ò¿ Â¿ Â¿ Â!¿ Â"¿ Â^¿ Âd¿ Â≥¿ ÂÁ¿ ÂÌ¿ Ê¿ Ê)¿ Ê*¿ Êv¿ Ê≤¿ Ê∏¿ Á ¿ Á2¿ Á8¿ ÁÉ¿ ÁØ¿ ÁÕ¿ ÁŒ¿ Ë¿ Ë1¿ Ë2¿ Ëv¿ Ëß¿ Ë≠¿ Ë˙¿ ÈK¿ Èô¿ ÈÍ¿ Í9¿ ÍÑ¿ Í“¿ ÍÒ¿ Î¿ Î4¿ Î5¿ Î^¿ Îd¿ Î¥¿ Î¬¿ Î»¿ Î·¿ ÎÁ¿ Î˜¿ Î˝¿ ÏI¿ Ïö¿ Ï™¿ Ï¬¿ Ï√¿ Ì¿ Ì¿ ÌP¿ Ìô¿ Ìœ¿ Ì’¿ ÌÓ¿ Ó¿ Ó¿ ÓS¿ ÓY¿ Ó®¿ Ó¯¿ Ô¿ Ô
¿ ÔV¿ Ô•¿ Ô‚¿ ÔË¿ ¿ ¿ ¿ @¿ F¿ ñ¿ ¢¿ ®¿ ¡¿ ◊¿ ÿ¿ Ò¿ Ò¿ ÒQ¿ Òh¿ Òi¿ Òµ¿ Ò’¿ Ò€¿ Ú¿ Úp¿ Úq¿ Ú}¿ Úæ¿ Úø¿ Û	¿ ÛW¿ Û£¿ ÛË¿ Ù¿ Ù¿ ÙP¿ Ùà¿ ÙÎ¿ ı	¿ ı¿ ı¿ ı¿ ı_¿ ıä¿ ıﬁ¿ ˆ>¿ ˆÖ¿ ˆ›¿ ˜ ¿ ˜$¿ ˜&¿ ˜'¿ ˜Ä¿ ˜ª¿ ˜Û¿ ¯-¿ ¯e¿ ¯≥¿ ˘ ¿ ˘N¿ ˘Æ¿ ˙¿ ˙¿ ˙¿ ˙0¿ ˙G¿ ˙H¿ ˙∫¿ ˚¿ ˚:¿ ˚;¿ ˚o¿ ˚ï¿ ˚®¿ ˚€¿ ˚‚¿ ¸¿ ¸J¿ ¸r¿ ¸í¿ ¸¡¿ ¸»¿ ¸…¿ ¸¸¿ ˝"¿ ˝5¿ ˝<¿ ˝@¿ ˝A¿ ˝M¿ ˝n¿ ˝ë¿ ˝≤¿ ˝∂¿ ˝∑¿ ˝√¿ ˝÷¿ ˝˛¿ ˛%¿ ˛:¿ ˛>¿ ˛?¿ ˛X¿ ˛j¿ ˛•¿ ˛≠¿ ˛±¿ ˛≤¿ ˛€¿ ˇa¿ ˇb¿ ˇí¿ ˇº¿ ˇ˛¿ $¿ G¿ ì¿ ó¿ ò¿ §¿ —¿ Ò¿ ¿C¿I¿J¿¡¿¬¿¿=¿∂¿‚¿Ò¿¿%¿+¿,¿`¿õ¿ú¿˛¿¿2¿G¿M¿Q¿R¿ä¿∑¿¿.¿S¿Y¿Å¿´¿±¿∆¿Ú¿¯¿¿8¿>¿ê¿¶¿!¿l¿r¿ã¿è¿ê¿‹¿+¿L¿R¿z¿Œ¿‘¿	$¿	(¿	)¿	W¿	∑¿	ÿ¿	ﬁ¿
E¿
I¿
J¿
ñ¿
Á¿I¿ó¿õ¿ú¿Ó¿D¿¨¿ ¿¿¿W¿≠¿¿i¿m¿n¿™¿Û¿D¿U¿r¿ö¿‡¿-¿1¿2¿r¿ª¿º¿¿C¿ö¿¿¿g¿À¿Ã¿¯¿¿2¿F¿b¿f¿g¿∞¿Ì¿C¿´¿¨¿¿q¿r¿û¿Ω¿ÿ¿Ì¿Ò¿Ú¿K¿∫¿
¿c¿i¿–¿—¿<¿®¿©¿’¿Ù¿¿.¿C¿G¿H¿ö¿Î¿A¿E¿F¿ó¿Á¿¿¿¿:¿V¿ç¿π¿Ê¿#¿*¿.¿/¿0¿Ü¿Ë¿¿¿S¿h¿n¿o¿ü¿¥¿∫¿ª¿›¿˝¿¿É¿é¿ù¿Ω¿¿&¿.¿4¿>¿\¿|¿≤¿ ¿ .¿ S¿ ^¿ g¿ m¿ q¿ r¿ ~¿ •¿ ÿ¿!¿!s¿!t¿!¿¿" ¿"¿"K¿"}¿"¡¿"˚¿#!¿#A¿#T¿#f¿#Ä¿#µ¿#Ù¿$¿$=¿$F¿$M¿$N¿$Ö¿$û¿$Ω¿%
¿%&¿%y¿%Ü¿%“¿%ÿ¿&¿&¿&?¿&U¿&l¿&ô¿&Œ¿&˚¿'¿' ¿'!¿'Ü¿'µ¿'”¿'˚¿(¿(L¿(u¿(û¿(¬¿(Ô¿))¿)C¿)n¿)ë¿)æ¿)‡¿)Ì¿)¯¿*¿*¿*	¿*`¿*∑¿*∏¿*⁄¿+'¿+5¿+ƒ¿+≈¿+Í¿+˛¿,6¿,]¿,√¿-¿-J¿-n¿-x¿-Ü¿-á¿-¨¿-¿¿-¯¿.¿.Ö¿.ﬁ¿/¿/0¿/:¿/H¿/I¿/}¿/ñ¿/¬¿/ÿ¿/·¿/Á¿/Ë¿0(¿0e¿0f¿0†¿0≥¿0›¿0ı¿15¿1W¿1x¿1±¿1œ¿1ﬁ¿2¿2¿2¿2$¿2%¿2k¿2y¿2ì¿2Æ¿2 ¿2ˆ¿3¿3T¿3ê¿3∂¿3Ï¿4#¿46¿4G¿4k¿4é¿4œ¿4Ô¿5 ¿5&¿5Q¿5~¿5À¿5Ò¿6¿6¿6;¿6k¿6~¿6è¿6û¿6´¿6∂¿6ø¿6¿¿7¿7¿7.¿7I¿7e¿7ë¿7≤¿7Ô¿8+¿8Q¿8á¿8æ¿8—¿8‚¿9¿9-¿9p¿9í¿9•¿9Õ¿9˙¿:)¿:x¿:†¿:∑¿:Ã¿:¿;"¿;7¿;J¿;[¿;j¿;w¿;Ç¿;É¿;∞¿;Ã¿;ı¿<.¿<_¿<~¿<•¿<‹¿=¿=¿=¿=(¿=N¿=r¿=√¿=ﬁ¿=˜¿>¿>+¿>N¿>‘¿>ˇ¿?9¿?D¿?M¿?S¿?T¿?£¿?À¿@¿@s¿@t¿@ô¿@ø¿@·¿A¿AF¿Aj¿AΩ¿B&¿BN¿Bñ¿B“¿C¿C!¿Co¿Cº¿Cˇ¿DG¿DÅ¿Dø¿D«¿D‘¿Dı¿E;¿Ew¿Eµ¿Eª¿Eº¿EÈ¿F¿F0¿F]¿Fè¿F”¿G¿G)¿GH¿Gå¿G±¿G·¿Gı¿H¿H!¿H5¿HM¿He¿HÖ¿H•¿H«¿H·¿H˛¿I¿I+¿IM¿IÄ¿Iú¿Iª¿I¬¿I√¿J1¿JP¿Jm¿Jè¿J©¿J≤¿J∏¿JŒ¿J“¿J‘¿J’¿K¿K2¿K6¿KÖ¿K ¿L¿L¿L/¿L¿LÀ¿M¿Mi¿MØ¿M≥¿N¿N¿Nk¿N{¿N¿Nì¿NŸ¿O%¿Oi¿Om¿O”¿O◊¿P/¿P?¿PC¿PW¿P¶¿P¿Q7¿Q;¿Qù¿Q°¿Q˘¿R	¿R¿R!¿Rj¿Rª¿RÚ¿Rˆ¿S`¿Sd¿Sº¿SÃ¿S–¿S‰¿T:¿Té¿T∞¿T¥¿U¿U+¿U/¿UC¿Uô¿UÌ¿V.¿V2¿Vô¿V©¿V≠¿Vª¿Vø¿V˝¿W¿Wb¿Wá¿W”¿WÒ¿W¸¿X¿X\¿Xâ¿Xè¿X‹¿Y+¿Yz¿Yô¿Yü¿YŒ¿Y‘¿Z¿Z¿Za¿Z{¿Zä¿Zû¿ZÆ¿Z¬¿Z◊¿ZÙ¿[	¿[¿[8¿[K¿[_¿[{¿[í¿[¢¿[∂¿[À¿[„¿\¿\$¿\B¿\T¿\m¿\Ç¿\¢¿\≥¿\»¿\ﬁ¿\¯¿]¿]¿]3¿]I¿]c¿]É¿]ï¿]´¿]¬¿]”¿]Á¿]¸¿^¿^'¿^?¿^\¿^u¿^ç¿^û¿^∑¿^’¿^Ú¿_¿_v¿_Ë¿`Z¿`»¿`…¿a¿a¿ae¿ak¿aö¿aæ¿a⁄¿a˙¿b¿b/¿bK¿bd¿bx¿bç¿b¢¿b∆¿bﬂ¿bÛ¿c¿c!¿c:¿cT¿cv¿cê¿c´¿c…¿cÂ¿c˙¿d¿d-¿dJ¿db¿dã¿d¶¿d¿¿d÷¿d¿e¿e*¿eO¿ee¿e¿eô¿e¥¿e”¿e¯¿f¿f*¿fF¿fa¿f~¿f†¿fæ¿f€¿f˛¿g!¿g<¿g=¿gä¿gõ¿g°¿gÎ¿h7¿hJ¿hP¿hà¿hé¿h⁄¿i¿i\¿iÇ¿ià¿iß¿iΩ¿iæ¿i›¿i„¿j&¿jh¿jî¿jÆ¿jØ¿jÂ¿jÎ¿k$¿kq¿kæ¿l¿l^¿lÆ¿l≈¿l⁄¿l‡¿m9¿mã¿më¿mß¿m¯¿nH¿nN¿nÆ¿n¿¿n∆¿o¿o¿o¿oN¿oT¿oä¿oê¿o›¿p¿p4¿p5¿ps¿p√¿p›¿p„¿q+¿qr¿qû¿q§¿q˜¿r>¿rD¿rë¿rº¿r¬¿s¿sG¿sà¿sé¿s§¿sÒ¿t¿t¿tq¿tΩ¿t–¿t÷¿uB¿uT¿ui¿uà¿uâ¿uœ¿v¿vT¿vZ¿vß¿v—¿v◊¿w'¿wn¿wö¿w†¿w…¿wœ¿x¿xT¿xï¿xõ¿x±¿x˛¿y%¿y+¿yn¿yø¿yÂ¿yÎ¿z`¿zr¿zá¿zÆ¿zØ¿zˇ¿{$¿{*¿{x¿{√¿{ˆ¿|¿|¿|@¿|F¿|è¿|÷¿}¿}"¿}#¿}b¿}h¿}≤¿}Á¿}Ì¿~/¿~f¿~l¿~|¿~Ç¿~ƒ¿~·¿~‚¿!¿'¿x¿≈¿Ä¿Ä-¿ÄG¿ÄH¿Äs¿Äy¿Ä¿¿Å¿Å3¿Å9¿ÅÇ¿Åœ¿Ç	¿Ç¿Ç\¿Çá¿Ç•¿Ç¶¿Ç’¿Ç€¿É$¿ÉO¿Éy¿Éz¿É∑¿ÉΩ¿É¸¿Ñ¿ÑD¿Ñô¿Ñﬁ¿Ñ˘¿Ñ˙¿ÖN¿ÖT¿Ö≠¿Ö≥¿ÖÔ¿Ü¿Ü¿ÜP¿ÜV¿Ü§¿Üµ¿Üª¿á¿á;¿áA¿áé¿áî¿á–¿áÎ¿áÏ¿à*¿àf¿àl¿àπ¿à‰¿àÍ¿â+¿âs¿â¬¿ä¿ä¿ä.¿äM¿äN¿äO¿äç¿äì¿ä‹¿ã¿ã¿ãY¿ãè¿ãï¿ã•¿ã´¿ãÔ¿å¿å¿åU¿åç¿åì¿åÂ¿ç3¿ç_¿çe¿ç∂¿ç‹¿ç‚¿é4¿éY¿én¿ét¿éæ¿éƒ¿é‘¿é⁄¿è'¿èE¿è{¿è|¿è∆¿ê¿ê¿ê[¿ê•¿êÛ¿ë¿ë
¿ë[¿ës¿ëà¿ëé¿ëŸ¿ëﬂ¿ëÔ¿ëı¿íF¿íW¿íè¿íê¿íÎ¿í˘¿íˇ¿ì¿ì/¿ì0¿ìh¿ìn¿ì¥¿ì∫¿î¿î¿î¿îh¿în¿îæ¿ï¿ï\¿ï≠¿ï˚¿ñG¿ñM¿ñò¿ñ€¿ó$¿óP¿óQ¿óì¿óô¿óÁ¿óÌ¿ò<¿òV¿òW¿ò°¿òÔ¿òı¿ôF¿ôí¿ô•¿ô´¿ô˘¿öC¿öí¿ö‚¿õ-¿õ@¿õF¿õT¿õo¿õØ¿õÈ¿õÒ¿õ˚¿ú¿úG¿úM¿ú©¿úø¿ú≈¿ú€¿ù4¿ùd¿ùj¿ù–¿ù‚¿ùË¿ù¯¿ù˛¿ûG¿ûê¿û≈¿ü¿üU¿üÜ¿ü¢¿ü£¿üŒ¿ü‘¿†$¿†*¿†y¿†≈¿°¿°¿°%¿°;¿°â¿°ÿ¿°ﬁ¿¢¿¢J¿¢P¿¢õ¿¢ß¿¢≠¿£¿£1¿£`¿£a¿£û¿£§¿£¿§>¿§â¿§ô¿§ü¿§›¿§„¿•-¿•3¿•C¿•I¿•Ö¿•ù¿•û¿•‡¿•Ê¿¶7¿¶z¿¶Ä¿¶œ¿ß¿ß¿ßa¿ßg¿ßw¿ß}¿ßΩ¿ßŸ¿ß⁄¿®¿®¿®V¿®ù¿®…¿®œ¿®˚¿©¿©¿©¿©X¿©x¿©y¿©†¿©¶¿©ƒ¿© ¿™¿™U¿™Å¿™°¿™¢¿™Î¿´8¿´>¿´è¿´€¿´Ó¿´Ù¿¨B¿¨å¿¨€¿≠&¿≠u¿≠å¿≠í¿≠†¿≠ª¿≠˘¿Æ2¿Æ:¿ÆD¿ÆJ¿Æñ¿Æ⁄¿Ø¿Ø>¿ØD¿Ø†¿Ø∂¿Øº¿Ø“¿∞+¿∞[¿∞a¿∞«¿∞Ÿ¿∞ﬂ¿∞Ô¿∞ı¿±>¿±á¿±º¿±˛¿≤K¿≤|¿≤ò¿≤ô¿≤’¿≤€¿≥+¿≥|¿≥»¿≥Œ¿¥¿¥¿¥]¿¥c¿¥s¿¥y¿¥¥¿¥Ã¿¥Õ¿µ¿µ¿µe¿µ®¿µÆ¿µ˝¿∂;¿∂A¿∂ê¿∂ñ¿∂¶¿∂¨¿∂Î¿∑¿∑¿∑5¿∑;¿∑â¿∑“¿∑˜¿∑˝¿∏)¿∏/¿∏?¿∏E¿∏Ö¿∏•¿∏¶¿∏–¿∏÷¿∏Ù¿∏˙¿πC¿πÖ¿π±¿π—¿π“¿π˝¿∫¿∫S¿∫Y¿∫®¿∫Ù¿ªB¿ªN¿ªT¿ª°¿ª≠¿ª≥¿ª…¿º¿ºf¿ºl¿º´¿ºÿ¿ºﬁ¿Ω)¿Ω5¿Ω;¿Ω≠¿Ωø¿ΩÓ¿ΩÔ¿æ1¿æ7¿æÑ¿æê¿æñ¿æÂ¿æÎ¿ø8¿øe¿øÇ¿øÉ¿ø—¿¿¿¿)¿¿B¿¿C¿¿q¿¿w¿¿¡¿¡¿¡4¿¡:¿¡h¿¡â¿¡ä¿¡œ¿¡’¿¬&¿¬G¿¬M¿¬û¿¬§¿¬Ì¿√>¿√é¿√€¿√¿√ˆ¿ƒ¿ƒ5¿ƒ6¿ƒu¿ƒ{¿ƒÃ¿ƒÌ¿ƒÛ¿≈,¿≈T¿≈Z¿≈†¿≈∫¿≈ª¿∆¿∆¿∆K¿∆t¿∆z¿∆»¿«¿«T¿«é¿«î¿«⁄¿«ı¿«ˆ¿»A¿»i¿»o¿»ª¿»„¿»È¿…8¿…k¿…q¿…¥¿…∫¿  ¿ ¿ ¿ n¿ â¿ è¿ ü¿ •¿ ¯¿À¿Àl¿Àø¿Ã¿ÃT¿Ãú¿Ãﬂ¿Õ¿Õe¿Õó¿ÕË¿Œ¿Œk¿Œù¿ŒË¿œ¿œ<¿œ=¿œå¿œ§¿œ™¿œ∫¿œ¿¿–¿–+¿–á¿–⁄¿—/¿—o¿—∑¿—˙¿“4¿“¿“µ¿”¿”<¿”â¿”ª¿‘¿‘8¿‘\¿‘]¿‘®¿‘¿¿‘∆¿‘÷¿‘‹¿’/¿’G¿’£¿’ˆ¿÷K¿÷ã¿÷”¿◊¿◊P¿◊õ¿◊—¿ÿ¿ÿO¿ÿú¿ÿŒ¿Ÿ¿ŸK¿Ÿt¿Ÿu¿Ÿ¬¿Ÿ⁄¿Ÿ‡¿Ÿ¿Ÿˆ¿⁄N¿⁄™¿⁄˝¿€R¿€í¿€⁄¿‹¿‹W¿‹¢¿‹ÿ¿›$¿›V¿›ß¿››¿ﬁ(¿ﬁZ¿ﬁ¿ﬁÄ¿ﬁÃ¿ﬁ‰¿ﬁÍ¿ﬁ˙¿ﬂ ¿ﬂX¿ﬂ¥¿‡¿‡\¿‡ú¿‡‰¿·'¿·a¿·¨¿·‚¿‚.¿‚`¿‚±¿‚Á¿„4¿„f¿„ä¿„ã¿„‘¿„⁄¿‰¿‰i¿‰Ω¿‰√¿Â¿Âh¿Â∫¿Ê¿ÊP¿ÊV¿Ê¢¿ÊÊ¿Á&¿Ák¿Áê¿Áñ¿Á„¿Ë ¿Ë¿ËR¿Ë§¿ËÔ¿È2¿Èp¿È™¿È∞¿È˜¿ÍB¿ÍH¿ÍX¿Í^¿Íò¿Íﬁ¿Î¿ÎZ¿Îù¿Î∫¿Îª¿Ï	¿ÏL¿ÏR¿Ïz¿Ïê¿Ïë¿Ïø¿Ï≈¿Ï›¿Ï„¿Ì-¿ÌR¿ÌS¿Ìû¿ÌÓ¿Ó7¿Ó=¿ÓV¿Óx¿Óy¿Óª¿Ó¡¿Ô¿Ô[¿Ô¢¿ÔÌ¿Ô˙¿ ¿C¿Ç¿∆¿Ò¿Ò¿Ò¿Òd¿Ò}¿Òö¿Ò¨¿Ò¬¿Ò’¿ÒÏ¿Ú¿Ú*¿ÚB¿Ú^¿Úw¿Úç¿Úß¿ÚÕ¿Ú‰¿Ú˜¿Û¿Û)¿ÛA¿Ûs¿Ûß¿Ûæ¿Û—¿Û˘¿Ù¿Ù%¿Ù=¿Ùh¿ÙÑ¿Ù†¿Ù∏¿ÙÃ¿Ù‰¿ı ¿ı¿ıG¿ı\¿ıu¿ıí¿ı§¿ı∫¿ı—¿ıË¿ˆ¿ˆ&¿ˆK¿ˆl¿ˆå¿ˆ•¿ˆ∏¿ˆŸ¿ˆ˜¿˜¿˜¿˜;¿˜Z¿˜à¿˜™¿˜ÿ¿¯	¿¯R¿¯É¿¯∑¿¯ı¿˘ ¿˘N¿˘î¿˘À¿˘Ì¿˙¿˙L¿˙Ü¿˙ÿ¿˚-¿˚a¿˚â¿˚∆¿˚˜¿¸¿¸M¿¸Å¿¸¡¿˝¿˝D¿˝i¿˝ö¿˝Œ¿˛¿˛`¿˛à¿˛º¿˛Û¿ˇ¿ˇF¿ˇw¿ˇ®¿ˇ‹¿ ¿ _¿ ú¿ ÷¿ ˚¿#¿o¿∏¿Ï¿Û¿˜¿¯¿D¿à¿é¿Ÿ¿	¿G¿\¿é¿ÿ¿¿L¿{¿≠¿Ë¿;¿ë¿∫¿¯¿¿G¿|¿Ω¿Ú¿3¿k¿ë¿¿¿Ú¿$¿Y¿î¿ﬁ¿	¿	W¿	}¿	«¿	¸¿
¿
¿
¿
¿
7¿
Y¿
l¿
r¿
û¿
≤¿
∏¿
‹¿
˙¿"¿B¿j¿î¿Œ¿¯¿$¿V¿|¿§¿‹¿
¿*¿R¿|¿¨¿Ï¿.¿R¿Ñ¿∞¿⁄¿¿0¿Z¿Ü¿∆¿¿$¿F¿p¿ú¿‹¿ ¿,¿Z¿|¿§¿Œ¿¯¿$¿T¿é¿¿¿¿¿6¿r¿¨¿Ÿ¿›¿ﬁ¿Í¿ˇ¿+¿7¿H¿U¿f¿Ä¿í¿§¿∑¿Õ¿›¿Ó¿¿¿(¿9¿K¿`¿}¿õ¿™¿¿¿”¿·¿Ú¿¿¿(¿?¿M¿_¿r¿è¿°¿∏¿∆¿ÿ¿Î¿¿¿*¿>¿Q¿f¿Ä¿ñ¿´¿π¿»¿„¿˝¿¿¿:¿>¿?¿K¿a¿ê¿∑¿Ì¿¿O¿¢¿›¿$¿Y¿ö¿∆¿˛¿9¿}¿◊¿4¿e¿™¿ﬁ¿¿_¿å¿≈¿¿[¿î¿‹¿	¿B¿~¿ÿ¿ ¿ D¿ É¿ Æ¿ ‰¿!¿!V¿!í¿!‘¿"%¿"j¿"¨¿"Ÿ¿"ˇ¿#S¿#§¿#‡¿#Á¿$ ¿$$¿$&¿$'¿$`¿$d¿$¥¿$˚¿%G¿%W¿%[¿%•¿%‹¿%Á¿&¿&X¿&ã¿&ë¿&„¿'¿''¿'<¿'Y¿'o¿'à¿'ú¿'±¿'…¿(¿(F¿(`¿(y¿(ó¿(´¿(¡¿(€¿(Ò¿)¿)"¿);¿)O¿)o¿)á¿)ú¿)±¿)«¿)ﬂ¿)¸¿*¿*-¿*>¿*c¿*y¿*¿*Ä¿*ª¿*⁄¿*€¿+¿+E¿+F¿+¿+Ö¿+Œ¿,¿,A¿,a¿,b¿,±¿,∑¿-¿-F¿-L¿-é¿-≈¿-À¿-€¿-·¿.3¿.P¿.Q¿.å¿.í¿.Ÿ¿/ ¿/L¿/R¿/è¿/ﬂ¿0/¿0=¿0C¿0ê¿0ª¿0Ÿ¿0⁄¿1¿14¿15¿1É¿1â¿1⁄¿2¿2¿2_¿2ï¿2õ¿2´¿2±¿3¿3!¿3"¿3h¿3n¿3û¿3”¿3‘¿4¿4!¿4S¿4ä¿4ã¿4Ÿ¿4ı¿4˚¿5¿5*¿5+¿5c¿5i¿5©¿5Ô¿64¿6t¿6π¿6ﬁ¿6‰¿71¿7s¿7å¿7∏¿7π¿7˚¿8¿8G¿8à¿8¢¿8£¿8⁄¿8‡¿9#¿9e¿9ë¿9ó¿9Õ¿9Á¿9Ë¿:%¿:+¿:t¿:ª¿:Á¿:Ì¿;¿;9¿;:¿;w¿;}¿;∆¿<¿<4¿<:¿<p¿<ê¿<ë¿<Œ¿<‘¿=¿=_¿=ã¿=ë¿=Ω¿=›¿=ﬁ¿>¿>!¿>j¿>¨¿>ÿ¿>ﬁ¿?¿?4¿?5¿?s¿?y¿?√¿@
¿@6¿@<¿@j¿@ã¿@å¿@—¿@◊¿A¿A.¿A4¿Az¿Aª¿AÂ¿AÎ¿B¿B)¿B*¿Bx¿B~¿Bæ¿Bƒ¿C
¿CK¿Cu¿Cè¿Cê¿C⁄¿C˝¿C˛¿DJ¿Du¿Dv¿D∆¿D¯¿D˛¿EA¿EG¿Eç¿EŒ¿E¯¿F¿F¿F\¿Fó¿Fù¿F‡¿FÊ¿G,¿Gm¿Gó¿Gù¿GÌ¿H¿H	¿H[¿Hv¿H|¿Hå¿Hí¿HÂ¿H˝¿IY¿I¨¿J¿JA¿Jâ¿JÃ¿K¿KR¿KÑ¿K’¿L¿LX¿Lä¿L’¿M¿M)¿M*¿My¿Më¿Mó¿Mß¿M≠¿N ¿N¿Nt¿N«¿O¿O\¿O§¿OÁ¿P!¿Pl¿P¢¿PÛ¿Q)¿Qv¿Q®¿QÛ¿R%¿RI¿RJ¿Rï¿R≠¿R≥¿R√¿R…¿S¿S4¿Sê¿S„¿T8¿Tx¿T¿¿U¿U=¿Uà¿Uæ¿V
¿V<¿Vâ¿Vª¿W¿W8¿Wa¿Wb¿WØ¿W«¿WÕ¿W›¿W„¿X;¿Xó¿XÍ¿Y?¿Y¿Y«¿Z
¿ZD¿Zè¿Z≈¿[¿[C¿[î¿[ ¿\¿\G¿\l¿\m¿\π¿\—¿\◊¿\Á¿\Ì¿]E¿]°¿]Ù¿^I¿^â¿^—¿_¿_N¿_ô¿_œ¿`¿`M¿`û¿`‘¿a!¿aS¿aw¿ax¿a¡¿a«¿b¿bV¿b™¿b∞¿b¸¿c@¿cÄ¿c≈¿cÍ¿c¿d=¿dZ¿d`¿d¨¿d˛¿eI¿eå¿e ¿f¿f
¿fQ¿fú¿f¢¿f≤¿f∏¿fÚ¿g8¿gl¿g¥¿g˜¿h¿h¿h`¿h∞¿h˘¿i¿i¿i]¿ic¿i±¿i˝¿jD¿jè¿jú¿j¢¿jÁ¿k¿k¿k(¿k.¿k|¿kñ¿kª¿kº¿l¿l¿l@¿l[¿l~¿lö¿l≥¿lÕ¿lË¿m ¿m2¿mf¿my¿m°¿m∏¿mŒ¿mÍ¿n¿n"¿n>¿n[¿nm¿nÉ¿n™¿n…¿n‡¿n˜¿o¿o5¿oZ¿o{¿oõ¿o¥¿o“¿oÛ¿o˙¿p¿pL¿pï¿p…¿q¿q4¿qe¿qü¿qÒ¿rF¿rn¿r´¿r«¿r˚¿s/¿so¿s£¿s„¿t¿t?¿tm¿tø¿t˘¿u*¿u[¿uè¿u…¿v¿vO¿vâ¿vÆ¿v˜¿w+¿w2¿w6¿w7¿wÜ¿w÷¿w˙¿x ¿xX¿x±¿x∑¿y¿y[¿y¶¿yŒ¿y·¿yÁ¿y¸¿z=¿zñ¿z⁄¿{'¿{e¿{¶¿{¿|=¿|{¿|ø¿}¿}S¿}£¿}Í¿~(¿~ä¿~‘¿¿V¿ö¿‰¿Ä=¿Ää¿Ä‘¿Å	¿ÅM¿ÅT¿ÅX¿ÅY¿Åe¿Åà¿Åò¿Å∞¿Å¡¿Å’¿Å‰¿ÅÙ¿Ç¿Ç"¿Ç>¿ÇK¿Ç_¿Çp¿Ç¿Çê¿Ç•¿Ç∂¿ÇÀ¿Ç›¿ÇÈ¿Ç˙¿É¿É(¿É=¿ÉO¿Éa¿Ét¿Éâ¿É£¿Éπ¿ÉŒ¿É‹¿Éˆ¿Ñ	¿Ñ¿Ñ¿Ñ¿Ñ"¿ÑE¿Ñg¿Ñz¿ÑÄ¿Ñ¨¿Ñ¿¿Ñ∆¿ÑÔ¿Ö¿ÖS¿Ö¿Ö±¿ÖŸ¿Ü¿Ü3¿ÜW¿Üâ¿Üµ¿Ü›¿á	¿á=¿ái¿áù¿áÀ¿à¿àM¿ào¿àó¿à◊¿â¿â1¿â[¿âá¿â∑¿âÒ¿ä#¿äS¿äu¿äØ¿ä€¿ã¿ã¿ã¿ã¿ãd¿ãè¿ã’¿åJ¿å◊¿çO¿çΩ¿é/¿é§¿è¿è±¿êW¿êæ¿ëH¿ëª¿í)¿í©¿ì!¿ì°¿î¿îî¿î¯¿ïY¿ï¿ño¿ñ”¿ó7¿ó±¿ò6¿ò≈¿ôH¿ô»¿ö3¿öª¿õ8¿õ<¿õ>¿õ?¿õ~¿õÆ¿õø¿õ¿¿õﬁ¿õﬂ¿õÎ¿úJ¿ú}¿úΩ¿ú√¿ú˝¿ù¿ù¿ù¿ùp¿ù£¿ù„¿ùÈ¿û#¿û)¿û*¿û6¿ûû¿û—¿ü¿ü¿üG¿üã¿üë¿ü√¿†	¿†¿†I¿†O¿†P¿†\¿†Ω¿†Ô¿°"¿°s¿°y¿°z¿° ¿°–¿°—¿°›¿¢=¿¢o¿¢¢¿¢Û¿¢˘¿£Q¿£W¿£X¿£d¿£ª¿£Ó¿§¿§+¿§Y¿§w¿§°¿§¿¿§Î¿§Û¿§˘¿•¿•3¿•_¿•õ¿•ÿ¿•ﬁ¿•‰¿•Â¿•Ò¿¶H¿¶¶¿¶‘¿¶⁄¿ß¿ß@¿ßF¿ßr¿ßé¿ß≠¿ß ¿ßÈ¿ßÔ¿ßı¿ßˆ¿®¿®_¿®Ω¿®Î¿®Ò¿©#¿©W¿©]¿©â¿©•¿©ƒ¿©·¿™ ¿™¿™¿™¿™¿™v¿™‘¿´¿´¿´:¿´n¿´t¿´†¿´º¿´€¿´¯¿¨¿¨¿¨#¿¨%¿¨&¿¨[¿¨\¿¨ü¿¨„¿≠¿≠>¿≠?¿≠~¿≠©¿≠∏¿≠π¿≠◊¿≠ÿ¿Æ¿Æ[¿Æ\¿Æh¿Æ«¿Æ˙¿Ø:¿Ø@¿Øz¿ØÄ¿ØÅ¿Øç¿Ø‰¿∞¿∞I¿∞O¿∞r¿∞x¿∞y¿∞Ö¿∞Ú¿±%¿±j¿±p¿±†¿±‘¿≤¿≤¿≤L¿≤â¿≤ë¿≤¿¿≤∆¿≤¯¿≥+¿≥1¿≥c¿≥†¿≥¶¿≥ﬁ¿≥Ê¿≥Á¿≥Û¿¥X¿¥ã¿¥–¿¥÷¿µ¿µ:¿µv¿µ~¿µ≤¿µÔ¿µ˜¿∂&¿∂,¿∂^¿∂ë¿∂ó¿∂…¿∑¿∑¿∑;¿∑A¿∑B¿∑N¿∑Ç¿∑É¿∑è¿∑Ï¿∏¿∏¿∏¿∏$¿∏Å¿∏¥¿∏Ê¿∏Ï¿π¿π8¿π>¿πc¿πi¿πj¿πv¿π÷¿∫!¿∫T¿∫°¿∫ß¿∫◊¿ª¿ªO¿ªW¿ªã¿ªƒ¿ªÃ¿º¿º	¿º;¿º}¿ºÉ¿ºµ¿ºÓ¿ºÙ¿Ω4¿Ω:¿Ω;¿ΩG¿ΩØ¿Ω˙¿æ-¿æz¿æÄ¿æ∞¿æ‰¿ø(¿ø0¿ød¿øù¿ø•¿ø‹¿ø‚¿¿¿¿V¿¿\¿¿é¿¿«¿¿Õ¿¡¿¡¿¡¿¡ ¿¡Å¿¡Ã¿¡ˇ¿¬L¿¬R¿¬í¿¬ò¿¬ô¿¬•¿√¿√P¿√Ö¿√ã¿√ç¿√é¿√¡    Ä•Äº Ä¡ Ä“Ä·Ä‰  Å  Å7  Å_  Å{  Åë  Å™  Å≈  ÅÊ  Ç  Ç  Ç8  ÇR  Çg    ÑsÉ◊Ñy   Ñ§Ñ¨  ÖGÖN ÖXÑ∂Ñ¬    Ñ’nÑŸ  ÑﬂÑË   Ö_Öj    ÖpÖÉ  ÖäÖí   ápÄúáÂ   ápáqÖÛÅyÜn  ÜqÜy  ÖÛÖÙà8à#   àà à}Ä√àÉ  à¥, à¥à≈ à«àŒ  à‘	à€     à‰Zà¸  ââ	  à‰àÂ âìáFâô  â«ÅM â«â⁄ 	â·âˆ  ää  ä%ä4  ä?äN  ä_än  äväÖ  äóä¶  ä¥ä√  ä÷äÂ  ä¸ããã	ããã'ã0  ãCã[  ãe$ã}  ãçã£  ã™!ãæ  ãœã€  ãË ã˘  å&å$  å7aåA    åúÇñå≠  å≥åª  å¬	å»  åúåùè6ÅeèG  èUèj  è6è7êü8ê≤   êüê† ë€Å˘ë·  íÄ» íí# í*í9  íDíS  í[íj  í{íä  íòíß  í∂í≈   íŸíÎ  íıì  ì$ì*  ì:ìF  ìSì_  ìmìx   ìáKì©   ìáìà ì÷âˆì‹   î4BîJ î\îdîuîqîeîsî{$îî  î£.îº  î’'îÏ  ï ï  ï"&ï9  ïL ï\   ïqÇÙïÇ   ïqïròiuòz   òiòjò‚ÇóòÛ  ôô  ò‚ò„õ}ÇMõê  õñõ§  õ}õ~ û;ÇºûA  ûdn ûjûq ûx$ûî  û¢
û®  ûµû∫û–û≈ûªû«û÷û‰  ûÓCü    ü5Åü@    †NÄß†a  †g†u  †N†O °¨Ç°≤  °⁄Ä√ °‡°Ï °Û°˘  ¢¢  ¢¢"  ¢2¢8  ¢K
¢Q  ¢[¢a  ¢o¢u  ¢Ñ¢ä   ¢°¢≤  ¢ø¢Õ  ¢€¢Ï  ¢˚£  ££&  £/£=  £J£[  £i£t   £ÜC£§   £Ü£á £Õêπ£”   §™-§æ §∆§Œ§œ§’§÷§‹$§ı  ••  ••  •*G•3    •uÅp•Ü   •u•v¶ÈP¶˙   ¶È¶Íß=bßB    ß£É˛ß¥  ßƒß“  ß£ß§´•Å«´¨    ≠pÇï≠w    ∞	Ñ{∞  ∞"∞0  ∞	∞
 ∂ƒÜZ∏5Å_/// Defines **where** the floating label should be displayed within an
/// [InputDecorator].
///
/// See also:
///
///  * [InputDecoration.floatingLabelAlignment] which defines the alignment for
///    [InputDecoration.label] or [InputDecoration.labelText].
///  * [FloatingLabelBehavior] which defines **how** the floating label should
///    behave. ∏PJ∏l∏m∏n ∏o∏u  ∏z∏Ä∏ò∏å∏Ñ∏Å∏á∏à∏í∏è∏ï∏⁄∏Á  ∏ÓÅ9∫Ä‰/// Align the floating label on the leading edge of the [InputDecorator].
///
/// For left-to-right text ([TextDirection.ltr]), this is the left edge.
///
/// For right-to-left text ([TextDirection.rtl]), this is the right edge.∫	∫∫ ∫!∫&∫"∫#∫+Äê∫ïC/// Aligns the floating label to the center of an [InputDecorator].∫û∫¥∫µ∫∂∫∫∫∑∫¿,∫‘   ∫¿∫¡∫Ä˚ª
  ªª  ∫∫ÒªÔÄ˘ª˝  ºº   ºÏ0ºˇ   ºÏºÌ∏$∏%æ(äùæ9  æIÇ3 æOæZ æaæp  æÉæí  æ¢!æ±  æ…#æÿ  æÚ$ø  øø+  ø6øE  øS øb  øyøà  øîø£  øµ	øª  øƒ
ø   ø‘
ø⁄  ø‰	øÍ  øÛø˘  ¿ @¿ @
  ¿ @¿ @  ¿ @*¿ @0  ¿ @?¿ @E  ¿ @U¿ @[  ¿ @g¿ @m   ¿ @Ä'¿ @ô  ¿ @´¿ @∂  ¿ @≈ ¿ @“  ¿ @È"¿ @ˆ  ¿ A3¿ A,  ¿ AF¿ AX  ¿ Ab¿ Ax  ¿ AÖ¿ Aê  ¿ A¶¿ A≤  ¿ AΩ!¿ A—  ¿ A‚¿ A  ¿ A¯¿ B  ¿ B¿ B  ¿ B&¿ B4  ¿ B<¿ BJ  ¿ BT¿ Bb  ¿ Bl¿ Bz  ¿ Bà¿ Bñ  ¿ B§¿ B≤  ¿ B¡¿ Bœ  ¿ B⁄¿ BË  ¿ GLÅw¿ G`   ¿ GL¿ GM¿ BˆÑR¿ C  ¿ C¿ C  ¿ Bˆ¿ B˜æ(æ)¿ IìÇ9¿ Iô  ¿ IµÅ1 ¿ Iª¿ I“ ¿ IŸ¿ IË  ¿ I˙¿ J	  ¿ J<¿ JK  ¿ J~¿ Jç  ¿ J°¿ J∞  ¿ Jƒ¿ J”   ¿ JÍ+¿ K  ¿ K¿ K&  ¿ K7¿ KD  ¿ KW¿ Kd  ¿ Kè¿ Kú  ¿ KØ¿ Kº     ¿ L¿ á[¿ L  ¿ LÖÅ˛ ¿ LÖ¿ Lñ ¿ Lù¿ L≥  ¿ L¬$¿ L⁄  ¿ LÏ"¿ M  ¿ M¿ M#  ¿ M1¿ M@  ¿ ML¿ M[  ¿ Mi$¿ M}  ¿ M¢¿ Mñ¿ M§¿ M∆¿ M∑¿ M»¿ MÏ¿ Mﬁ¿ MÓ¿ N¿ N¿ N¿ N=¿ N2¿ N?¿ NZ¿ NQ¿ N\¿ Nw¿ Nl¿ Ny	¿ Ná$¿ Nõ ¿ N®¿ T6¿ TB  ¿ U¿ U#  ¿ V¿ V  ¿ Wö%¿ W≠  ¿ YY¿ Y^  ¿ Z¿ Z ¿ Z*¿ Z÷¿ Z€ ¿ ZË¿ £Ï¿ £ı  ¿ N∞:¿ Nø    ¿ NÌ<¿ N¸    ¿ O,<¿ O;    ¿ Ok:¿ Oz    ¿ O®>¿ O∑    ¿ OÈ>¿ O¯    ¿ P*F¿ P9    ¿ PsF¿ PÇ    ¿ PºH¿ PÀ    ¿ Q@¿ Q    ¿ QJD¿ QY    ¿ Q≈Ç@¿ QÈ   ¿ Q≈¿ Q∆¿ T	*¿ T    ¿ TQÄã¿ TU  ¿ T`¿ Tm   ¿ T‡2¿ TÚ    ¿ U5Äñ¿ U9  ¿ UG¿ UV   ¿ Uœ/¿ U‡    ¿ VÄí¿ V#  ¿ V0¿ V>   ¿ VµÄÑ¿ VÀ    ¿ W<[¿ WR    ¿ W√Ån¿ W«  ¿ WŸ¿ WÌ   ¿ Y5!¿ Y>    ¿ YlÄä¿ Yp  ¿ Yz
¿ YÄ   ¿ Y˙¿ Z    ¿ Z3{¿ Z7  ¿ Z?
¿ ZE   ¿ Z≤!¿ Zª    ¿ ZÒÄÅ¿ Zı  ¿ Zˇ
¿ [   ¿ [“c¿ [€    ¿ _e,¿ _z   ¿ _e¿ _f¿ a¬I¿ a—    ¿ \9É(¿ \J  ¿ \d¿ \y  ¿ \9¿ \:¿ _ï}¿ _£  ¿ _≠¿ _π  ¿ _Ω¿ _≈   ¿ `}¿ `$  ¿ `.¿ `:  ¿ `>¿ `F   ¿ `ó}¿ `•  ¿ `∞¿ `º  ¿ `¿¿ `»   ¿ aK¿ a$  ¿ a-¿ a9   ¿ agW¿ a|  ¿ aã¿ añ   ¿ bNÑH¿ bU  ¿ bd¿ bp  ¿ bt¿ bÑ   ¿ gy®ˆ¿ gë  ¿ gô ¿ g©   ¿ íZÉ¿ ía  ¿ ís¿ í{  ¿ íÅ¿ íâ  ¿ íê
¿ íò  ¿ íú#¿ íØ   ¿ ïfÅq¿ ïy  ¿ ïí¿ ïö  ¿ ïf¿ ïg¿ ñ€Åq¿ ñÓ  ¿ ó¿ ó  ¿ ñ€¿ ñ‹¿ òPÅø¿ òW  ¿ òc¿ òk  ¿ òq¿ òÉ   ¿ öà~¿ ö&  ¿ ö@¿ öH  ¿ ö¿ ö¿ ¢ïm¿ ¢®  ¿ ¢¬¿ ¢   ¿ ¢ï¿ ¢ñ¿ £Ä∏¿ £  ¿ £9¿ £G  ¿ £¿ £¿ §	ÄÍ¿ §  ¿ §+¿ §;  ¿ §	¿ §
¿ §˜Ñ4¿ •  ¿ •?)¿ •]   ¿ ©/Ä£¿ ©@  ¿ ©_¿ ©w  ¿ ©/¿ ©0¿ ©÷ô~¿ ©Á   ¿ ©÷¿ ©◊¿ √Xf¿ √]  ¿ √i¿ √z  ¿ √Ç¿ √ä   ¿ √¬ãz¿ √”  ¿ √Ÿ¿ √Í  ¿ √Ú¿ √˙  ¿ √¬¿ √√¿ œ@6¿ œQ  ¿ œ]¿ œe  ¿ œ@¿ œA¿ œzÇÜ¿ œã  ¿ œõ¿ œ≠  ¿ œ∂¿ œ«  ¿ œz¿ œ{¿ “Åi¿ “  ¿ “)¿ “7  ¿ “=¿ “F  ¿ “¿ “ ¿ ”qàV¿ ”w  ¿ ”ŒÄ‘ ¿ ”‘¿ ”ﬁ ¿ ”Â¿ ”Ù  ¿ ‘
¿ ‘  ¿ ‘(¿ ‘7  ¿ ‘I¿ ‘X  ¿ ‘i¿ ‘x  ¿ ‘Ü¿ ‘ï   ¿ ‘¶¿ ‘∏  ¿ ‘∆!¿ ‘⁄  ¿ ‘Î¿ ‘˛  ¿ ’*¿ ’'  ¿ ’<¿ ’G  ¿ ’T¿ ’_  ¿ ’kJ¿ ’ï   ¿ ’k¿ ’l¿ ’πÉc¿ ’Õ  ¿ ’⁄¿ ’Î  ¿ ’π¿ ’∫¿ Ÿ Åf¿ Ÿ>  ¿ ŸQ¿ Ÿ_  ¿ Ÿ ¿ Ÿ!¿ ⁄äÅ;¿ ⁄õ  ¿ ⁄Æ¿ ⁄º  ¿ ⁄ƒ¿ ⁄◊  ¿ ⁄ä¿ ⁄ã ¿ €…É]¿ €œ  ¿ €ˆÄ• ¿ €¸¿ ‹ ¿ ‹¿ ‹  ¿ ‹0	¿ ‹6  ¿ ‹?
¿ ‹E  ¿ ‹O
¿ ‹U  ¿ ‹_¿ ‹e  ¿ ‹z¿ ‹â   ¿ ‹ü¿ ‹™  ¿ ‹Ω¿ ‹À  ¿ ‹”¿ ‹‰  ¿ ‹Ì¿ ‹˚  ¿ ›(¿ ›  ¿ ›0¿ ›C   ¿ ›TÅ–¿ ›g  ¿ ›m¿ ›{  ¿ ›T¿ ›U ¿ ﬂ(ó˝¿ „+É¸/// Defines the appearance of a Material Design text field.
///
/// [InputDecorator] displays the visual elements of a Material Design text
/// field around its input [child]. The visual elements themselves are defined
/// by an [InputDecoration] object and their layout and appearance depend
/// on the `baseStyle`, `textAlign`, `isFocused`, and `isEmpty` parameters.
///
/// [TextField] uses this widget to decorate its [EditableText] child.
///
/// [InputDecorator] can be used to create widgets that look and behave like a
/// [TextField] but support other kinds of input.
///
/// Requires one of its ancestors to be a [Material] widget. The [child] widget,
/// as well as the decorative widgets specified in [decoration], must have
/// non-negative baselines.
///
/// See also:
///
///  * [TextField], which uses an [InputDecorator] to display a border,
///    labels, and icons, around its [EditableText] child.
///  * [Decoration] and [DecoratedBox], for drawing arbitrary decorations
///    around other widgets. ¿ „UÅÀ ¿ ‰¿ ‰*Ä∂/// Creates a widget that displays a border, labels, and icons,
/// for a [TextField].
///
/// The [isFocused], [isHovering], [expands], and [isEmpty] arguments must not
/// be null.
¿ ‰1	¿ ‰8  ¿ ‰@¿ ‰O  ¿ ‰^¿ ‰d  ¿ ‰r¿ ‰x  ¿ ‰Ü¿ ‰å  ¿ ‰¢¿ ‰®  ¿ ‰æ¿ ‰ƒ  ¿ ‰€¿ ‰·  ¿ ‰ı¿ ‰˚  ¿ Â
¿ Â  ¿ ‰≥¿ ‰–¿ ‰Í¿ Â	¿ Â$Å¿ ÊÄ÷/// The text and styles to use when decorating the child.
///
/// Null [InputDecoration] properties are initialized with the corresponding
/// values from [ThemeData.inputDecorationTheme].
///
/// Must not be null. ¿ Ê,Åü¿ Á¬Åt/// The style on which to base the label, hint, counter, and error styles
/// if the [decoration] does not provide explicit styles.
///
/// If null, [baseStyle] defaults to the `titleMedium` style from the
/// current [Theme], see [ThemeData.textTheme].
///
/// The [TextStyle.textBaseline] of the [baseStyle] is used to determine
/// the baseline used for text alignment. ¿ Á–_¿ Ë&B/// How the text in the decoration should be aligned horizontally. ¿ Ë4Ç˛¿ Î!Çª/// {@template flutter.material.InputDecorator.textAlignVertical}
/// How the text should be aligned vertically.
///
/// Determines the alignment of the baseline within the available space of
/// the input (typically a TextField). For example, TextAlignVertical.top will
/// place the baseline such that the text, and any attached decoration like
/// prefix and suffix, is as close to the top of the input as possible without
/// overflowing. The heights of the prefix and suffix are similarly included
/// for other alignment values. If the height is greater than the height
/// available, then the prefix and suffix will be allowed to overflow first
/// before the text scrolls.
/// {@endtemplate} ¿ Î7Åâ¿ Ï∑Å\/// Whether the input field has focus.
///
/// Determines the position of the label text and the color and weight of the
/// border.
///
/// Defaults to false.
///
/// See also:
///
///  * [InputDecoration.hoverColor], which is also blended into the focus
///    color and fill color when the [isHovering] is true to produce the final
///    color. ¿ Ï≈Å@¿ Ì˚Å/// Whether the input field is being hovered over by a mouse pointer.
///
/// Determines the container fill color, which is a blend of
/// [InputDecoration.hoverColor] with [InputDecoration.fillColor] when
/// true, and [InputDecoration.fillColor] when not.
///
/// Defaults to false. ¿ Ó
Ç¿ Å‚/// If true, the height of the input field will be as large as possible.
///
/// If wrapped in a widget that constrains its child's height, like Expanded
/// or SizedBox, the input field will only be affected if [expands] is set to
/// true.
///
/// See [TextField.minLines] and [TextField.maxLines] for related ways to
/// affect the height of an input. When [expands] is true, both must be null
/// in order to avoid ambiguity in determining the height.
///
/// Defaults to false. ¿ Äª¿ ŒÄú/// Whether the input field is empty.
///
/// Determines the position of the label text and whether to display the hint
/// text.
///
/// Defaults to false. ¿ ⁄Äå¿ Òar/// The widget below this widget in the tree.
///
/// Typically an [EditableText], [DropdownButton], or [InkWell]. ¿ ÒkÅ¿ Ú)Ä¨/// Whether the label needs to get out of the way of the input, either by
/// floating or disappearing.
///
/// Will withdraw when not empty, or when focused while enabled.   ¿ ÚsJ¿ Úï   ¿ Ús¿ Út¿ Ú¡ÇK¿ ÙdÅÇ/// The RenderBox that defines this decorator's "container". That's the
/// area which is filled if [InputDecoration.filled] is true. It's the area
/// adjacent to [InputDecoration.icon] and above the widgets that contain
/// [InputDecoration.helperText], [InputDecoration.errorText], and
/// [InputDecoration.counterText].
///
/// [TextField] renders ink splashes within the container. ¿ Ùp¿ Ù~   ¿ ıÇ¿ ı!  ¿ ı5&¿ ıR  ¿ ı¿ ı ¿ ˜'¿ S¨¿ ˜-   
¿ ˜Ç7¿ ˜°  ¿ ˜Ω4¿ ˜⁄  ¿ ˜ı6¿ ¯  ¿ ¯/4¿ ¯E ¿ ¯R¿ ¯a¿ ¯b¿ ¯gJ¿ ¯É ¿ ¯†¿ ¯Æ¿ ¯∞¿ ¯Ø¿ ¯µI¿ ¯— ¿ ¯Ì¿ ¯˚¿ ¯˝¿ ¯¸¿ ˘J¿ ˘ ¿ ˘;¿ ˘I¿ ˘K¿ ˘J¿ ˘P\¿ ˘j ¿ ˘Å¿ ˘ç¿ ˘´¿ ˘é¿ ˘∞\¿ ˘  ¿ ˘·¿ ˘Ì¿ ˙¿ ˘Ó¿ ˛¥%¿ ˛≈  	¿ ˛›ÄÉ¿ ˛Ò    ¿ ˇd-¿ ˇs    ¿ ˇî'¿ ˇù    ¿ ˇæ?¿ ˇ«    ¿  #¿ 	    ¿ &p¿ /    ¿WÄŸ¿`    ¿tF¿}    ¿Å¿*    ¿ ˙É.¿ ˙"   ¿ ˙¿ ˙¿ ˝Cr¿ ˝T   ¿ ˝C¿ ˝D¿ ˝πÄÑ¿ ˝    ¿ ˝π¿ ˝∫¿ ˛Ao¿ ˛F    ¿ öÉ∂¿ ´  ¿ ª¿ À  ¿ ö¿ õ¿TÉ:¿Z  ¿s¿~   ¿íÅï¿ò  ¿¶¿±  ¿ª¿—   ¿	+Å¿	1  ¿	@¿	K   ¿
LÅN¿
R  ¿
`¿
k  ¿
u¿
ã   ¿ûÅe¿§  ¿∏¿√  ¿Õ¿„   ¿Åe¿  ¿!¿,  ¿6¿L   ¿EÇ ¿O  ¿d¿o  ¿y¿è   ¿ÔÇ¿˘  ¿¿  ¿"¿8   ¿ÙÉR¿˛  ¿¿   ¿*¿@   ¿JÄ˙¿T  ¿d¿o  ¿y¿è   ¿HÄ«¿R  ¿a¿l  ¿v¿å   ¿2Ñ>¿>  ¿P¿[  ¿e¿{   ¿ t™]¿ á  ¿ ç¿ õ  ¿ t¿ u ¿J’¿ ŸP¿Xç/// The border, labels, icons, and styles used to decorate a Material
/// Design text field.
///
/// The [TextField] and [InputDecorator] classes use [InputDecoration] objects
/// to describe their decoration. (In fact, this class is merely the
/// configuration of an [InputDecorator], which does all the heavy lifting.)
///
/// {@tool dartpad}
/// This sample shows how to style a `TextField` using an `InputDecorator`. The
/// TextField displays a "send message" icon to the left of the input area,
/// which is surrounded by a border an all sides. It displays the `hintText`
/// inside the input area to help the user understand what input is required. It
/// displays the `helperText` and `counterText` below the input area.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/material/input_decoration.png)
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.0.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This sample shows how to style a "collapsed" `TextField` using an
/// `InputDecorator`. The collapsed `TextField` surrounds the hint text and
/// input area with a border, but does not add padding around them.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/material/input_decoration_collapsed.png)
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.1.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This sample shows how to create a `TextField` with hint text, a red border
/// on all sides, and an error message. To display a red border and error
/// message, provide `errorText` to the [InputDecoration] constructor.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/material/input_decoration_error.png)
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.2.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This sample shows how to style a `TextField` with a round border and
/// additional text before and after the input area. It displays "Prefix" before
/// the input area, and "Suffix" after the input area.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/material/input_decoration_prefix_suffix.png)
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.3.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This sample shows how to style a `TextField` with a prefixIcon that changes color
/// based on the `MaterialState`. The color defaults to gray, be blue while focused
/// and red if in an error state.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.material_state.0.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This sample shows how to style a `TextField` with a prefixIcon that changes color
/// based on the `MaterialState` through the use of `ThemeData`. The color defaults
/// to gray, be blue while focused and red if in an error state.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.material_state.1.dart **
/// {@end-tool}
///
/// See also:
///
///  * [TextField], which is a text input widget that uses an
///    [InputDecoration].
///  * [InputDecorator], which is a widget that draws an [InputDecoration]
///    around an input child widget.
///  * [Decoration] and [DecoratedBox], for drawing borders and backgrounds
///    around a child widget. ¿Xà± ¿Zi¿ZxÇ2/// Creates a bundle of the border, labels, icons, and styles used to
/// decorate a Material Design text field.
///
/// Unless specified by [ThemeData.inputDecorationTheme], [InputDecorator]
/// defaults [isDense] to false and [filled] to false. The default border is
/// an instance of [UnderlineInputBorder]. If [border] is [InputBorder.none]
/// then no border is drawn.
///
/// The [enabled] argument must not be null.
///
/// Only one of [prefix] and [prefixText] can be specified.
///
/// Similarly, only one of [suffix] and [suffixText] can be specified.3¿Z	¿ZÖ  ¿Zé¿Zî  ¿Z¢
¿Z®  ¿Z≤¿Z∏  ¿Z∆¿ZÃ  ¿Z€¿Z·  ¿Z¯¿Z˛  ¿[¿[  ¿[#¿[)  ¿[<¿[B  ¿[O¿[U  ¿[c¿[i  ¿[¿[Ö  ¿[ñ
¿[ú  ¿[¶¿[¨  ¿[∫¿[¿  ¿[œ¿[’  ¿[Á¿[Ì  ¿\¿\  ¿\(¿\.  ¿\F¿\L  ¿\X¿\^  ¿\q¿\w  ¿\Ü¿\å  ¿\¶¿\¨  ¿\∑¿\Ω  ¿\Ã¿\“  ¿\‚¿\Ë  ¿\¸¿]  ¿]¿]  ¿]"¿](  ¿]7¿]=  ¿]M¿]S  ¿]g¿]m  ¿]á¿]ç  ¿]ô¿]ü  ¿]Ø¿]µ  ¿]∆¿]Ã  ¿]◊¿]›  ¿]Î¿]Ò  ¿^ ¿^  ¿^¿^  ¿^+¿^1  ¿^C¿^I  ¿^`¿^f  ¿^y¿^  ¿^ë¿^ó  ¿^¢¿^®  ¿^ª¿^¡  ¿^Ÿ¿^ﬂ  ¿^ˆ¿^¸  >¿\;¿^±¿_¿_¿_;¿_s¿_¿_¿_:¿_&¿_¿_¿_!¿_3¿_)¿_6¿_=¿_}¿_É¿_´¿_Â¿_Ñ¿_Ö¿_™¿_ï¿_ç¿_Ü¿_ê¿_£¿_ò¿_¶¿_≠¿_Ô¿_ı¿`¿`W¿_ˆ¿_˜¿`¿`¿_ˇ¿_¯¿`¿`¿`
¿`¿`¿`a¿`g¿`ç¿`≈¿`h¿`i¿`å¿`x¿`p¿`j¿`s¿`Ö¿`{¿`à¿`è¿`ÀÜp¿a±¿a≤¿aªÄ∆/// Defines an [InputDecorator] that is the same size as the input field.
///
/// This type of input decoration does not include a border by default.
///
/// Sets the [isCollapsed] property to true.¿a¬¿a—  ¿aﬁ¿a‰  ¿a˛¿b  ¿b¿b%  ¿b3¿b9  ¿bO¿bU  ¿bh¿bn  ¿b|¿bÇ  ¿bë¿bó  ¿b¶¿b¨  ¿b ¿b–  ¿b]¿b¥¿bø¿b¿¿bŸ¿bÎ¿bÊ¿bÌ¿c¿b˙¿c¿c¿c¿c¿c2¿c(¿c4¿cL¿cA¿cN¿cn¿c[¿cp¿cà¿c}¿cä¿c£¿có¿c•¿c¡¿c≤¿c√¿c›¿c–¿cﬂ¿cÚ¿cÏ¿cÙ¿d¿d¿d¿d%¿d¿d'¿dB¿d4¿dD¿dY¿dQ¿d[¿dx¿di¿dz¿dÑ¿dÖ¿dû¿dí¿d†¿d∏¿d≠¿d∫¿dŒ¿d«¿d–¿dË¿d›¿dÍ¿e¿d˜¿e¿e"¿e¿e$¿eG¿e1¿eI¿e]¿eV¿e_¿ew¿el¿ey¿eë¿eÜ¿eì¿e¨¿e†¿eÆ¿eÀ¿eª¿eÕ¿e¿e⁄¿eÚ¿f¿eˇ¿f	¿f"¿f¿f$¿f>¿f1¿f@¿fY¿fM¿f[¿fv¿fh¿fx¿fò¿fÖ¿fö¿f∂¿fß¿f∏¿f”¿f≈¿f’¿fˆ¿f‚¿f¯¿g¿g¿g¿g4¿g(¿g63¿g?Ç|¿i∑ÇK/// An icon to show before the input field and outside of the decoration's
/// container.
///
/// The size and color of the icon is configured automatically using an
/// [IconTheme] and therefore does not need to be explicitly given in the
/// icon widget.
///
/// The trailing edge of the icon is padded by 16dps.
///
/// The decoration's container is the area which is filled if [filled] is
/// true and bordered per the [border]. It's the area adjacent to
/// [icon] and above the widgets that contain [helperText],
/// [errorText], and [counterText].
///
/// See [Icon], [ImageIcon]. ¿i¿ÄÏ¿j£ÄÀ/// The color of the [icon].
///
/// If [iconColor] is a [MaterialStateColor], then the effective
/// color can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not. ¿j±Ñf¿oÑ&/// Optional widget that describes the input field.
///
/// {@template flutter.material.inputDecoration.label}
/// When the input field is empty and unfocused, the label is displayed on
/// top of the input field (i.e., at the same location on the screen where
/// text may be entered in the input field). When the input field receives
/// focus (or if the field is non-empty), depending on [floatingLabelAlignment],
/// the label moves above, either vertically adjacent to, or to the center of
/// the input field.
/// {@endtemplate}
///
/// This can be used, for example, to add multiple [TextStyle]'s to a label that would
/// otherwise be specified using [labelText], which only takes one [TextStyle].
///
/// {@tool dartpad}
/// This example shows a `TextField` with a [Text.rich] widget as the [label].
/// The widget contains multiple [Text] widgets with different [TextStyle]'s.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.label.0.dart **
/// {@end-tool}
///
/// Only one of [label] and [labelText] can be specified. ¿oÅ¿p)ÄÚ/// Optional text that describes the input field.
///
/// {@macro flutter.material.inputDecoration.label}
///
/// If a more elaborate label is required, consider using [label] instead.
/// Only one of [label] and [labelText] can be specified. ¿p7ÖO¿u|Ñ˘/// {@template flutter.material.inputDecoration.labelStyle}
/// The style to use for [InputDecoration.labelText] when the label is on top
/// of the input field.
///
/// If [labelStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// When the [InputDecoration.labelText] is above (i.e., vertically adjacent to)
/// the input field, the text uses the [floatingLabelStyle] instead.
///
/// If null, defaults to a value derived from the base [TextStyle] for the
/// input field and the current [Theme].
///
/// Specifying this style will override the default behavior
/// of [InputDecoration] that changes the color of the label to the
/// [InputDecoration.errorStyle] color or [ColorScheme.error].
///
/// {@tool dartpad}
/// It's possible to override the label style for just the error state, or
/// just the default state, or both.
///
/// In this example the [labelStyle] is specified with a [MaterialStateProperty]
/// which resolves to a text style whose color depends on the decorator's
/// error state.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.label_style_error.0.dart **
/// {@end-tool}
/// {@endtemplate} ¿uãÖ!¿zöÑ≈/// {@template flutter.material.inputDecoration.floatingLabelStyle}
/// The style to use for [InputDecoration.labelText] when the label is
/// above (i.e., vertically adjacent to) the input field.
///
/// When the [InputDecoration.labelText] is on top of the input field, the
/// text uses the [labelStyle] instead.
///
/// If [floatingLabelStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to [labelStyle].
///
/// Specifying this style will override the default behavior
/// of [InputDecoration] that changes the color of the label to the
/// [InputDecoration.errorStyle] color or [ColorScheme.error].
///
/// {@tool dartpad}
/// It's possible to override the label style for just the error state, or
/// just the default state, or both.
///
/// In this example the [floatingLabelStyle] is specified with a
/// [MaterialStateProperty] which resolves to a text style whose color depends
/// on the decorator's error state.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.floating_label_style_error.0.dart **
/// {@end-tool}
/// {@endtemplate} ¿z±Å_¿|Å:/// Text that provides context about the [InputDecorator.child]'s value, such
/// as how the value will be used.
///
/// If non-null, the text is displayed below the [InputDecorator.child], in
/// the same location as [errorText]. If a non-null [errorText] value is
/// specified then the helper text is not shown. ¿|Å¿}Ä‰/// The style to use for the [helperText].
///
/// If [helperStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not. ¿}%Å∫¿~—Åä/// The maximum number of lines the [helperText] can occupy.
///
/// Defaults to null, which means that the [helperText] will be limited
/// to a single line with [TextOverflow.ellipsis].
///
/// This value is passed along to the [Text.maxLines] attribute
/// of the [Text] widget used to display the helper.
///
/// See also:
///
///  * [errorMaxLines], the equivalent but for the [errorText]. ¿~‰Åa¿Ä=Å>/// Text that suggests what sort of input the field accepts.
///
/// Displayed on top of the [InputDecorator.child] (i.e., at the same location
/// on the screen where text may be entered in the [InputDecorator.child])
/// when the input [isEmpty] and either (a) [labelText] is null or (b) the
/// input has the focus. ¿ÄJÇY¿ÇöÇ&/// The style to use for the [hintText].
///
/// If [hintStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// Also used for the [labelText] when the [labelText] is displayed on
/// top of the input field (i.e., at the same location on the screen where
/// text may be entered in the [InputDecorator.child]).
///
/// If null, defaults to a value derived from the base [TextStyle] for the
/// input field and the current [Theme]. ¿Ç®Äœ¿ÉfÄ†/// The direction to use for the [hintText].
///
/// If null, defaults to a value derived from [Directionality] for the
/// input field and the current context. ¿É|Å{¿ÑÎÅU/// The maximum number of lines the [hintText] can occupy.
///
/// Defaults to the value of [TextField.maxLines] attribute.
///
/// This value is passed along to the [Text.maxLines] attribute
/// of the [Text] widget used to display the hint text. [TextOverflow.ellipsis] is
/// used to handle the overflow when it is limited to single line. ¿Ñ¸Å¿ÖˇÄÍ/// Optional widget that appears below the [InputDecorator.child] and the border.
///
/// If non-null, the border's color animates to red and the [helperText] is not shown.
///
/// Only one of [error] and [errorText] can be specified. ¿Ü	Å‡¿á‡Å≤/// Text that appears below the [InputDecorator.child] and the border.
///
/// If non-null, the border's color animates to red and the [helperText] is
/// not shown.
///
/// In a [TextFormField], this is overridden by the value returned from
/// [TextFormField.validator], if that is not null.
///
/// If a more elaborate error is required, consider using [error] instead.
///
/// Only one of [error] and [errorText] can be specified. ¿áÓÇ]¿äAÇ)/// {@template flutter.material.inputDecoration.errorStyle}
/// The style to use for the [InputDecoration.errorText].
///
/// If null, defaults of a value derived from the base [TextStyle] for the
/// input field and the current [Theme].
///
/// By default the color of style will be used by the label of
/// [InputDecoration] if [InputDecoration.errorText] is not null. See
/// [InputDecoration.labelStyle] or [InputDecoration.floatingLabelStyle] for
/// an example of how to replicate this behavior when specifying those
/// styles.
/// {@endtemplate} ¿äQÅ∏¿ã¸Åâ/// The maximum number of lines the [errorText] can occupy.
///
/// Defaults to null, which means that the [errorText] will be limited
/// to a single line with [TextOverflow.ellipsis].
///
/// This value is passed along to the [Text.maxLines] attribute
/// of the [Text] widget used to display the error.
///
/// See also:
///
///  * [helperMaxLines], the equivalent but for the [helperText]. ¿åÉk¿èdÉ/// {@template flutter.material.inputDecoration.floatingLabelBehavior}
/// Defines **how** the floating label should behave.
///
/// When [FloatingLabelBehavior.auto] the label will float to the top only when
/// the field is focused or has some text content, otherwise it will appear
/// in the field in place of the content.
///
/// When [FloatingLabelBehavior.always] the label will always float at the top
/// of the field above the content.
///
/// When [FloatingLabelBehavior.never] the label will always appear in an empty
/// field in place of the content.
/// {@endtemplate}
///
/// If null, [InputDecorationTheme.floatingLabelBehavior] will be used.
///
/// See also:
///
///  * [floatingLabelAlignment] which defines **where** the floating label
///    should be displayed. ¿è~É¿íwÇ∂/// {@template flutter.material.inputDecoration.floatingLabelAlignment}
/// Defines **where** the floating label should be displayed.
///
/// [FloatingLabelAlignment.start] aligns the floating label to the leftmost
/// (when [TextDirection.ltr]) or rightmost (when [TextDirection.rtl]),
/// possible position, which is vertically adjacent to the label, on top of
/// the field.
///
/// [FloatingLabelAlignment.center] aligns the floating label to the center on
/// top of the field.
/// {@endtemplate}
///
/// If null, [InputDecorationTheme.floatingLabelAlignment] will be used.
///
/// See also:
///
///  * [floatingLabelBehavior] which defines **how** the floating label should
///    behave. ¿ííÄõ¿ì&/// Whether the [InputDecorator.child] is part of a dense form (i.e., uses less vertical
/// space).
///
/// Defaults to false. ¿ì2Ñ¿ó@ÉÕ/// The padding for the input decoration's container.
///
/// {@macro flutter.material.input_decorator.container_description}
///
/// By default the [contentPadding] reflects [isDense] and the type of the
/// [border].
///
/// If [isCollapsed] is true then [contentPadding] is [EdgeInsets.zero].
///
/// If `isOutline` property of [border] is false and if [filled] is true then
/// [contentPadding] is `EdgeInsets.fromLTRB(12, 8, 12, 8)` when [isDense]
/// is true and `EdgeInsets.fromLTRB(12, 12, 12, 12)` when [isDense] is false.
/// If `isOutline` property of [border] is false and if [filled] is false then
/// [contentPadding] is `EdgeInsets.fromLTRB(0, 8, 0, 8)` when [isDense] is
/// true and `EdgeInsets.fromLTRB(0, 12, 0, 12)` when [isDense] is false.
///
/// If `isOutline` property of [border] is true then [contentPadding] is
/// `EdgeInsets.fromLTRB(12, 20, 12, 12)` when [isDense] is true
/// and `EdgeInsets.fromLTRB(12, 24, 12, 16)` when [isDense] is false. ¿óSÅ¿òIÄ‡/// Whether the decoration is the same size as the input field.
///
/// A collapsed decoration cannot have [labelText], [errorText], an [icon].
///
/// To create a collapsed input decoration, use [InputDecoration.collapsed]. ¿òYáG¿üñÜ‹/// An icon that appears before the [prefix] or [prefixText] and before
/// the editable part of the text field, within the decoration's container.
///
/// The size and color of the prefix icon is configured automatically using an
/// [IconTheme] and therefore does not need to be explicitly given in the
/// icon widget.
///
/// The prefix icon is constrained with a minimum size of 48px by 48px, but
/// can be expanded beyond that. Anything larger than 24px will require
/// additional padding to ensure it matches the Material Design spec of 12px
/// padding between the left edge of the input and leading edge of the prefix
/// icon. The following snippet shows how to pad the leading edge of the
/// prefix icon:
///
/// ```dart
/// prefixIcon: Padding(
///   padding: const EdgeInsetsDirectional.only(start: 12.0),
///   child: _myIcon, // _myIcon is a 48px-wide widget.
/// )
/// ```
///
/// {@macro flutter.material.input_decorator.container_description}
///
/// The prefix icon alignment can be changed using [Align] with a fixed `widthFactor` and
/// `heightFactor`.
///
/// {@tool dartpad}
/// This example shows how the prefix icon alignment can be changed using [Align] with
/// a fixed `widthFactor` and `heightFactor`.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.prefix_icon.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * [Icon] and [ImageIcon], which are typically used to show icons.
///  * [prefix] and [prefixText], which are other ways to show content
///    before the text field (but after the icon).
///  * [suffixIcon], which is the same but on the trailing edge.
///  * [Align] A widget that aligns its child within itself and optionally
///    sizes itself based on the child's size. ¿ü•Éπ¿£IÉc/// The constraints for the prefix icon.
///
/// This can be used to modify the [BoxConstraints] surrounding [prefixIcon].
///
/// This property is particularly useful for getting the decoration's height
/// less than 48px. This can be achieved by setting [isDense] to true and
/// setting the constraints' minimum height and width to a value lower than
/// 48px.
///
/// {@tool dartpad}
/// This example shows the differences between two `TextField` widgets when
/// [prefixIconConstraints] is set to the default value and when one is not.
///
/// The [isDense] property must be set to true to be able to
/// set the constraints smaller than 48px.
///
/// If null, [BoxConstraints] with a minimum width and height of 48px is
/// used.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.prefix_icon_constraints.0.dart **
/// {@end-tool} ¿£cÇ8¿•ïÇ/// Optional widget to place on the line before the input.
///
/// This can be used, for example, to add some padding to text that would
/// otherwise be specified using [prefixText], or to add a custom widget in
/// front of the input. The widget's baseline is lined up with the input
/// baseline.
///
/// Only one of [prefix] and [prefixText] can be specified.
///
/// The [prefix] appears after the [prefixIcon], if both are specified.
///
/// See also:
///
///  * [suffix], the equivalent but on the trailing edge. ¿•†Ç7¿ßÕÇ/// Optional text prefix to place on the line before the input.
///
/// Uses the [prefixStyle]. Uses [hintStyle] if [prefixStyle] isn't specified.
/// The prefix text is not returned as part of the user's input.
///
/// If a more elaborate prefix is required, consider using [prefix] instead.
/// Only one of [prefix] and [prefixText] can be specified.
///
/// The [prefixText] appears after the [prefixIcon], if both are specified.
///
/// See also:
///
///  * [suffixText], the equivalent but on the trailing edge. ¿ß‹Åö¿©kÅg/// The style to use for the [prefixText].
///
/// If [prefixStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [hintStyle].
///
/// See also:
///
///  * [suffixStyle], the equivalent but on the trailing edge. ¿©{Å$¿™êÄ˘/// Optional color of the prefixIcon
///
/// Defaults to [iconColor]
///
/// If [prefixIconColor] is a [MaterialStateColor], then the effective
/// color can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not. ¿™§áÚ¿≤åáÅ/// An icon that appears after the editable part of the text field and
/// after the [suffix] or [suffixText], within the decoration's container.
///
/// The size and color of the suffix icon is configured automatically using an
/// [IconTheme] and therefore does not need to be explicitly given in the
/// icon widget.
///
/// The suffix icon is constrained with a minimum size of 48px by 48px, but
/// can be expanded beyond that. Anything larger than 24px will require
/// additional padding to ensure it matches the Material Design spec of 12px
/// padding between the right edge of the input and trailing edge of the
/// prefix icon. The following snippet shows how to pad the trailing edge of
/// the suffix icon:
///
/// ```dart
/// suffixIcon: Padding(
///   padding: const EdgeInsetsDirectional.only(end: 12.0),
///   child: _myIcon, // myIcon is a 48px-wide widget.
/// )
/// ```
///
/// The decoration's container is the area which is filled if [filled] is
/// true and bordered per the [border]. It's the area adjacent to
/// [icon] and above the widgets that contain [helperText],
/// [errorText], and [counterText].
///
/// The suffix icon alignment can be changed using [Align] with a fixed `widthFactor` and
/// `heightFactor`.
///
/// {@tool dartpad}
/// This example shows how the suffix icon alignment can be changed using [Align] with
/// a fixed `widthFactor` and `heightFactor`.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.suffix_icon.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * [Icon] and [ImageIcon], which are typically used to show icons.
///  * [suffix] and [suffixText], which are other ways to show content
///    after the text field (but before the icon).
///  * [prefixIcon], which is the same but on the leading edge.
///  * [Align] A widget that aligns its child within itself and optionally
///    sizes itself based on the child's size. ¿≤õÇ/¿¥ƒÇ /// Optional widget to place on the line after the input.
///
/// This can be used, for example, to add some padding to the text that would
/// otherwise be specified using [suffixText], or to add a custom widget after
/// the input. The widget's baseline is lined up with the input baseline.
///
/// Only one of [suffix] and [suffixText] can be specified.
///
/// The [suffix] appears before the [suffixIcon], if both are specified.
///
/// See also:
///
///  * [prefix], the equivalent but on the leading edge. ¿¥œÇ6¿∂˚Ç/// Optional text suffix to place on the line after the input.
///
/// Uses the [suffixStyle]. Uses [hintStyle] if [suffixStyle] isn't specified.
/// The suffix text is not returned as part of the user's input.
///
/// If a more elaborate suffix is required, consider using [suffix] instead.
/// Only one of [suffix] and [suffixText] can be specified.
///
/// The [suffixText] appears before the [suffixIcon], if both are specified.
///
/// See also:
///
///  * [prefixText], the equivalent but on the leading edge. ¿∑
Åô¿∏òÅf/// The style to use for the [suffixText].
///
/// If [suffixStyle] is a [MaterialStateTextStyle], then the effective text
/// style can depend on the [MaterialState.focused] state, i.e. if the
/// [TextField] is focused or not.
///
/// If null, defaults to the [hintStyle].
///
/// See also:
///
///  * [prefixStyle], the equivalent but on the leading edge. ¿∏®Å'¿π¿Ä¸/// Optional color of the [suffixIcon].
///
/// Defaults to [iconColor]
///
/// If [suffixIconColor] is a [MaterialStateColor], then the effective
/// color can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not. ¿π‘Ñ¿Ω◊Éº/// The constraints for the suffix icon.
///
/// This can be used to modify the [BoxConstraints] surrounding [suffixIcon].
///
/// This property is particularly useful for getting the decoration's height
/// less than 48px. This can be achieved by setting [isDense] to true and
/// setting the constraints' minimum height and width to a value lower than
/// 48px.
///
/// If null, a [BoxConstraints] with a minimum width and height of 48px is
/// used.
///
/// {@tool dartpad}
/// This example shows the differences between two `TextField` widgets when
/// [suffixIconConstraints] is set to the default value and when one is not.
///
/// The [isDense] property must be set to true to be able to
/// set the constraints smaller than 48px.
///
/// If null, [BoxConstraints] with a minimum width and height of 48px is
/// used.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.suffix_icon_constraints.0.dart **
/// {@end-tool} ¿ΩÒÅè¿øuÅc/// Optional text to place below the line as a character count.
///
/// Rendered using [counterStyle]. Uses [helperStyle] if [counterStyle] is
/// null.
///
/// The semantic label can be replaced by providing a [semanticCounterText].
///
/// If null or an empty string and [counter] isn't specified, then nothing
/// will appear in the counter's location. ¿øÖÄª¿¿9Äü/// Optional custom counter widget to go in the place otherwise occupied by
/// [counterText]. If this property is non null, then [counterText] is
/// ignored. ¿¿EÅB¿¡{Å/// The style to use for the [counterText].
///
/// If [counterStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [helperStyle]. ¿¡åÇß¿ƒ-Çx/// If true the decoration's container is filled with [fillColor].
///
/// When [InputDecorator.isHovering] is true, the [hoverColor] is also blended
/// into the final fill color.
///
/// Typically this field set to true if [border] is an [UnderlineInputBorder].
///
/// {@template flutter.material.input_decorator.container_description}
/// The decoration's container is the area which is filled if [filled] is true
/// and bordered per the [border]. It's the area adjacent to [icon] and above
/// the widgets that contain [helperText], [errorText], and [counterText].
/// {@endtemplate}
///
/// This property is false by default. ¿ƒ8ÅÄ¿≈ØÅW/// The base fill color of the decoration's container color.
///
/// When [InputDecorator.isHovering] is true, the [hoverColor] is also blended
/// into the final fill color.
///
/// By default the [fillColor] is based on the current
/// [InputDecorationTheme.fillColor].
///
/// {@macro flutter.material.input_decorator.container_description} ¿≈ΩÇ6¿«ÈÇ/// The fill color of the decoration's container when it has the input focus.
///
/// By default the [focusColor] is based on the current
/// [InputDecorationTheme.focusColor].
///
/// This [focusColor] is ignored by [TextField] and [TextFormField] because
/// they don't respond to focus changes by changing their decorator's
/// container color, they respond by changing their border to the
/// [focusedBorder], which you can change the color of.
///
/// {@macro flutter.material.input_decorator.container_description} ¿«¯Ç!¿ ÅÒ/// The color of the highlight for the decoration shown if the container
/// is being hovered over by a mouse.
///
/// If [filled] is true, the [hoverColor] is blended with [fillColor] and
/// fills the decoration's container.
///
/// If [filled] is false, and [InputDecorator.isFocused] is false, the color
/// is blended over the [enabledBorder]'s color.
///
/// By default the [hoverColor] is based on the current [Theme].
///
/// {@macro flutter.material.input_decorator.container_description} ¿ Ö¿œ/Ñ—/// The border to display when the [InputDecorator] does not have the focus and
/// is showing an error.
///
/// See also:
///
///  * [InputDecorator.isFocused], which is true if the [InputDecorator]'s child
///    has the focus.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿œ?Ö¿‘MÑŒ/// The border to display when the [InputDecorator] has the focus and is not
/// showing an error.
///
/// See also:
///
///  * [InputDecorator.isFocused], which is true if the [InputDecorator]'s child
///    has the focus.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿‘_Ö¿Ÿ`Ñ¡/// The border to display when the [InputDecorator] has the focus and is
/// showing an error.
///
/// See also:
///
///  * [InputDecorator.isFocused], which is true if the [InputDecorator]'s child
///    has the focus.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿ŸwÖ¿ﬁoÑ∫/// The border to display when the [InputDecorator] is disabled and is not
/// showing an error.
///
/// See also:
///
///  * [InputDecoration.enabled], which is false if the [InputDecorator] is disabled.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿ﬁÇÖ¿„{Ñª/// The border to display when the [InputDecorator] is enabled and is not
/// showing an error.
///
/// See also:
///
///  * [InputDecoration.enabled], which is false if the [InputDecorator] is disabled.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null. ¿„çà+¿Î≤á…/// The shape of the border to draw around the decoration's container.
///
/// If [border] is a [MaterialStateUnderlineInputBorder]
/// or [MaterialStateOutlineInputBorder], then the effective border can depend on
/// the [MaterialState.focused] state, i.e. if the [TextField] is focused or not.
///
/// If [border] derives from [InputBorder] the border's [InputBorder.borderSide],
/// i.e. the border's color and width, will be overridden to reflect the input
/// decorator's state. Only the border's shape is used. If custom  [BorderSide]
/// values are desired for a given state, all four borders ‚Äì [errorBorder],
/// [focusedBorder], [enabledBorder], [disabledBorder] ‚Äì must be set.
///
/// The decoration's container is the area which is filled if [filled] is
/// true and bordered per the [border]. It's the area adjacent to
/// [InputDecoration.icon] and above the widgets that contain
/// [InputDecoration.helperText], [InputDecoration.errorText], and
/// [InputDecoration.counterText].
///
/// The border's bounds, i.e. the value of `border.getOuterPath()`, define
/// the area to be filled.
///
/// This property is only used when the appropriate one of [errorBorder],
/// [focusedBorder], [focusedErrorBorder], [disabledBorder], or [enabledBorder]
/// is not specified. This border's [InputBorder.borderSide] property is
/// configured by the InputDecorator, depending on the values of
/// [InputDecoration.errorText], [InputDecoration.enabled],
/// [InputDecorator.isFocused] and the current [Theme].
///
/// Typically one of [UnderlineInputBorder] or [OutlineInputBorder].
/// If null, InputDecorator's default is `const UnderlineInputBorder()`.
///
/// See also:
///
///  * [InputBorder.none], which doesn't draw a border.
///  * [UnderlineInputBorder], which draws a horizontal line at the
///    bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container. ¿ÎΩÄ—¿ÏáÄ∂/// If false [helperText],[errorText], and [counterText] are not displayed,
/// and the opacity of the remaining visual elements is reduced.
///
/// This property is true by default. ¿ÏìÄΩ¿Ì=Äë/// A semantic label for the [counterText].
///
/// Defaults to null.
///
/// If provided, this replaces the semantic label of the [counterText]. ¿ÌUÅ!¿ÓdÄ¯/// Typically set to true when the [InputDecorator] contains a multiline
/// [TextField] ([TextField.maxLines] is null or > 1) to override the default
/// behavior of aligning the label with the center of the [TextField].
///
/// Defaults to false. ¿Ó{Çô¿Ò	Ç_/// Defines minimum and maximum sizes for the [InputDecorator].
///
/// Typically the decorator will fill the horizontal space it is given. For
/// larger screens, it may be useful to have the maximum width clamped to
/// a given value so it doesn't fill the whole screen. This property
/// allows you to control how big the decorator will be in its available
/// space.
///
/// If null, then the ambient [ThemeData.inputDecorationTheme]'s
/// [InputDecorationTheme.constraints] will be used. If that
/// is null then the decorator will fill the available width with
/// a default height based on text size. ¿‡Ñ]¿Ù   ¿‡¿·¿Òê›¿Òèa/// Creates a copy of this input decoration with the given fields replaced
/// by the new values. 3¿Òû¿Òß  ¿Ò∞¿Ò∏  ¿Ò∆¿Òœ  ¿ÒŸ¿Ò‚  ¿Ò¿Ò¸  ¿Ú¿Ú  ¿Ú.¿Ú7  ¿ÚF¿ÚR  ¿Úb¿Úh  ¿Ú{¿ÚÑ  ¿Úë¿Úù  ¿Ú´ ¿Úª  ¿Ú—¿Ú◊  ¿ÚË¿ÚÒ  ¿Ú˚¿Û  ¿Û¿Û  ¿Û-¿Û3  ¿ÛE,¿Û]  ¿Ûw.¿Ûê  ¿Û´¿Û≤  ¿Û¬¿Û…  ¿Û’"¿ÛÍ  ¿Û˝¿Ù  ¿Ù¿Ù  ¿Ù)¿Ù2  ¿ÙA%¿ÙR  ¿Ùl¿Ùx  ¿Ùà¿Ùê  ¿Ù§¿Ù≠  ¿Ùº¿Ù≈  ¿Ù–¿ÙŸ  ¿ÙË¿ÙÙ  ¿ı¿ı  ¿ı %¿ı1  ¿ıK¿ıT  ¿ı`¿ıi  ¿ıy¿ıÖ  ¿ıñ¿ıù  ¿ı®¿ı∞  ¿ıæ¿ı∆  ¿ı’¿ı›  ¿ıÏ¿ı˙  ¿ˆ
¿ˆ  ¿ˆ*¿ˆ8  ¿ˆO¿ˆ]  ¿ˆp¿ˆ~  ¿ˆê¿ˆû  ¿ˆ©¿ˆ∞  ¿ˆº¿ˆ≈  ¿ˆ›¿ˆ‰  ¿ˆ˚¿˜   ¿˙à¿Å/// Used by widgets like [TextField] and [InputDecorator] to create a new
/// [InputDecoration] with default values taken from the [theme].
///
/// Only null valued properties from this [InputDecoration] are replaced
/// by the corresponding values from [theme]. ¿)¿?   ¿

â“¿
$  ¿
'¿
/  ¿

¿
¿Aã‚¿T   ¿A¿B¿WÒ¿WÚ¿$'¿ w¿%ÌÅ¥/// Defines the default appearance of [InputDecorator]s.
///
/// This class is used to define the value of [ThemeData.inputDecorationTheme].
/// The [InputDecorator], [TextField], and [TextFormField] widgets use
/// the current input decoration theme to initialize null [InputDecoration]
/// properties.
///
/// The [InputDecoration.applyDefaults] method is used to combine a input
/// decoration theme with an [InputDecoration] object. ¿&Ñd ¿'¿'$ÄÂ/// Creates a value for [ThemeData.inputDecorationTheme] that
/// defines default values for [InputDecorator].
///
/// The values of [isDense], [isCollapsed], [filled], [floatingLabelAlignment],
/// and [border] must not be null. ¿'+¿'1  ¿'@¿'F  ¿']¿'c  ¿'s¿'y  ¿'å¿'í  ¿'†¿'¶  ¿'µ¿'ª  ¿'Õ7¿'”  ¿(
:¿(  ¿(J¿(P  ¿(d¿(j  ¿(}¿(É  ¿(õ¿(°  ¿(Ø¿(µ  ¿(≈¿(À  ¿(ﬂ¿(Â  ¿(ı¿(˚  ¿)¿)  ¿)&¿),  ¿)?¿)E  ¿)S¿)Y  ¿)s¿)y  ¿)ã¿)ë  ¿)†¿)¶  ¿)µ¿)ª  ¿)À¿)—  ¿)„¿)È  ¿* ¿*  ¿*¿*  ¿*1¿*7  ¿*B¿*H  ¿*g¿*m  
¿'Í¿'ˇ¿( ¿((¿(>¿(?¿(Y¿(ê¿)4¿*\ ¿*ÇV¿*Œ8/// {@macro flutter.material.inputDecoration.labelStyle} ¿*›f¿+1@/// {@macro flutter.material.inputDecoration.floatingLabelStyle} ¿+HÅ¿,TÄ/// The style to use for [InputDecoration.helperText].
///
/// If [helperStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not. ¿,dÅÍ¿.@Å∫/// The maximum number of lines the [InputDecoration.helperText] can occupy.
///
/// Defaults to null, which means that the [InputDecoration.helperText] will
/// be limited to a single line with [TextOverflow.ellipsis].
///
/// This value is passed along to the [Text.maxLines] attribute
/// of the [Text] widget used to display the helper.
///
/// See also:
///
///  * [errorMaxLines], the equivalent but for the [InputDecoration.errorText]. ¿.SÇÑ¿0ŒÇO/// The style to use for the [InputDecoration.hintText].
///
/// If [hintStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// Also used for the [InputDecoration.labelText] when the
/// [InputDecoration.labelText] is displayed on top of the input field (i.e.,
/// at the same location on the screen where text may be entered in the input
/// field).
///
/// If null, defaults to a value derived from the base [TextStyle] for the
/// input field and the current [Theme]. ¿0‹V¿1(8/// {@macro flutter.material.inputDecoration.errorStyle} ¿17ÅË¿3Åπ/// The maximum number of lines the [InputDecoration.errorText] can occupy.
///
/// Defaults to null, which means that the [InputDecoration.errorText] will be
/// limited to a single line with [TextOverflow.ellipsis].
///
/// This value is passed along to the [Text.maxLines] attribute
/// of the [Text] widget used to display the error.
///
/// See also:
///
///  * [helperMaxLines], the equivalent but for the [InputDecoration.helperText]. ¿3$Ä≠¿3ºu/// {@macro flutter.material.inputDecoration.floatingLabelBehavior}
///
/// Defaults to [FloatingLabelBehavior.auto]. ¿3÷Ä≤¿4rx/// {@macro flutter.material.inputDecoration.floatingLabelAlignment}
///
/// Defaults to [FloatingLabelAlignment.start]. ¿4çÄõ¿5!ÄÄ/// Whether the input decorator's child is part of a dense form (i.e., uses
/// less vertical space).
///
/// Defaults to false. ¿5-Çâ¿7®ÇH/// The padding for the input decoration's container.
///
/// The decoration's container is the area which is filled if
/// [InputDecoration.filled] is true and bordered per the [border].
/// It's the area adjacent to [InputDecoration.icon] and above the
/// [InputDecoration.icon] and above the widgets that contain
/// [InputDecoration.helperText], [InputDecoration.errorText], and
/// [InputDecoration.counterText].
///
/// By default the [contentPadding] reflects [isDense] and the type of the
/// [border]. If [isCollapsed] is true then [contentPadding] is
/// [EdgeInsets.zero]. ¿7ªÄÂ¿8ïÄ∆/// Whether the decoration is the same size as the input field.
///
/// A collapsed decoration cannot have [InputDecoration.labelText],
/// [InputDecoration.errorText], or an [InputDecoration.icon]. ¿8•Å@¿9‹Å/// The Color to use for the [InputDecoration.icon].
///
/// If [iconColor] is a [MaterialStateColor], then the effective
/// color can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [ColorScheme.primary]. ¿9ÍÅM¿;,Å"/// The style to use for the [InputDecoration.prefixText].
///
/// If [prefixStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [hintStyle]. ¿;<ÅR¿<Å'/// The Color to use for the [InputDecoration.prefixIcon].
///
/// If [prefixIconColor] is a [MaterialStateColor], then the effective
/// color can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [ColorScheme.primary]. ¿<ìÅH¿=–Å/// The style to use for the [InputDecoration.suffixText].
///
/// If [suffixStyle] is a [MaterialStateTextStyle], then the effective
/// color can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [hintStyle]. ¿=‡ÅR¿?#Å'/// The Color to use for the [InputDecoration.suffixIcon].
///
/// If [suffixIconColor] is a [MaterialStateColor], then the effective
/// color can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [ColorScheme.primary]. ¿?7ÅR¿@}Å&/// The style to use for the [InputDecoration.counterText].
///
/// If [counterStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [helperStyle]. ¿@éÅô¿B!Ås/// If true the decoration's container is filled with [fillColor].
///
/// Typically this field set to true if [border] is an
/// [UnderlineInputBorder].
///
/// The decoration's container is the area, defined by the border's
/// [InputBorder.getOuterPath], which is filled if [filled] is
/// true and bordered per the [border].
///
/// This property is false by default. ¿B,Åa¿CÑÅ</// The color to fill the decoration's container with, if [filled] is true.
///
/// By default the fillColor is based on the current [Theme].
///
/// The decoration's container is the area, defined by the border's
/// [InputBorder.getOuterPath], which is filled if [filled] is
/// true and bordered per the [border]. ¿Cíi¿CÓG/// The borderSide of the OutlineInputBorder with `color` and `weight`. ¿D s¿D^I/// The borderSide of the UnderlineInputBorder with `color` and `weight`. ¿DxÅô¿FÅq/// The color to blend with the decoration's [fillColor] with, if [filled] is
/// true and the container has the input focus.
///
/// By default the [focusColor] is based on the current [Theme].
///
/// The decoration's container is the area, defined by the border's
/// [InputBorder.getOuterPath], which is filled if [filled] is
/// true and bordered per the [border]. ¿FÅ¿G¸Åƒ/// The color to blend with the decoration's [fillColor] with, if the
/// decoration is being hovered over by a mouse pointer.
///
/// By default the [hoverColor] is based on the current [Theme].
///
/// The decoration's container is the area, defined by the border's
/// [InputBorder.getOuterPath], which is filled if [filled] is
/// true and bordered per the [border].
///
/// The container will be filled when hovered over even if [filled] is false. ¿HÖ¿MÑ—/// The border to display when the [InputDecorator] does not have the focus and
/// is showing an error.
///
/// See also:
///
///  * [InputDecorator.isFocused], which is true if the [InputDecorator]'s child
///    has the focus.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿M,Ö¿R:ÑŒ/// The border to display when the [InputDecorator] has the focus and is not
/// showing an error.
///
/// See also:
///
///  * [InputDecorator.isFocused], which is true if the [InputDecorator]'s child
///    has the focus.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿RLÖ¿WMÑ¡/// The border to display when the [InputDecorator] has the focus and is
/// showing an error.
///
/// See also:
///
///  * [InputDecorator.isFocused], which is true if the [InputDecorator]'s child
///    has the focus.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿WdÖ¿\\Ñ∫/// The border to display when the [InputDecorator] is disabled and is not
/// showing an error.
///
/// See also:
///
///  * [InputDecoration.enabled], which is false if the [InputDecorator] is disabled.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿\oÖ¿ahÑª/// The border to display when the [InputDecorator] is enabled and is not
/// showing an error.
///
/// See also:
///
///  * [InputDecoration.enabled], which is false if the [InputDecorator] is disabled.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null. ¿azÜò¿hÜ>/// The shape of the border to draw around the decoration's container.
///
/// If [border] is a [MaterialStateUnderlineInputBorder]
/// or [MaterialStateOutlineInputBorder], then the effective border can depend on
/// the [MaterialState.focused] state, i.e. if the [TextField] is focused or not.
///
/// The decoration's container is the area which is filled if [filled] is
/// true and bordered per the [border]. It's the area adjacent to
/// [InputDecoration.icon] and above the widgets that contain
/// [InputDecoration.helperText], [InputDecoration.errorText], and
/// [InputDecoration.counterText].
///
/// The border's bounds, i.e. the value of `border.getOuterPath()`, define
/// the area to be filled.
///
/// This property is only used when the appropriate one of [errorBorder],
/// [focusedBorder], [focusedErrorBorder], [disabledBorder], or [enabledBorder]
/// is not specified. This border's [InputBorder.borderSide] property is
/// configured by the InputDecorator, depending on the values of
/// [InputDecoration.errorText], [InputDecoration.enabled],
/// [InputDecorator.isFocused] and the current [Theme].
///
/// Typically one of [UnderlineInputBorder] or [OutlineInputBorder].
/// If null, InputDecorator's default is `const UnderlineInputBorder()`.
///
/// See also:
///
///  * [InputBorder.none], which doesn't draw a border.
///  * [UnderlineInputBorder], which draws a horizontal line at the
///    bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container. ¿hÅ¿iÄ›/// Typically set to true when the [InputDecorator] contains a multiline
/// [TextField] ([TextField.maxLines] is null or > 1) to override the default
/// behavior of aligning the label with the center of the [TextField]. ¿iÇú¿kÆÇ\/// Defines minimum and maximum sizes for the [InputDecorator].
///
/// Typically the decorator will fill the horizontal space it is given. For
/// larger screens, it may be useful to have the maximum width clamped to
/// a given value so it doesn't fill the whole screen. This property
/// allows you to control how big the decorator will be in its available
/// space.
///
/// If null, then the decorator will fill the available width with
/// a default height based on text size.
///
/// See also:
///
///  * [InputDecoration.constraints], which can override this setting for a
///    given decorator. ¿Å[Çπ¿Åo   ¿Å[¿Å\¿kæãw¿l5]/// Creates a copy of this object but with the given fields replaced with the
/// new values.  ¿lD¿lP  ¿l_¿lk  ¿lÇ¿lé  ¿lû¿l§  ¿l∑¿l√  ¿l—¿l›  ¿lÏ¿lÚ  ¿m,¿m  ¿m6.¿mO  ¿mj¿mq  ¿m}"¿mí  ¿m•¿m¨  ¿mº¿mƒ  ¿m“¿mﬁ  ¿mÓ¿mˆ  ¿n
¿n  ¿n&¿n.  ¿nB¿nN  ¿n_¿nf  ¿nq¿ny  ¿ná!¿nî  ¿nÆ¿nª  ¿nÕ¿n’  ¿n‰¿nÏ  ¿n˚¿o	  ¿o¿o'  ¿o9¿oG  ¿o^¿ol  ¿o¿oç  ¿oü¿o≠  ¿o∏¿oø  ¿o÷¿oÁ   ¿w9ä¿yrÇ/// Returns a copy of this InputDecorationTheme where the non-null fields in
/// the given InputDecorationTheme override the corresponding nullable fields
/// in this InputDecorationTheme.
///
/// The non-nullable fields of InputDecorationTheme, such as [floatingLabelBehavior],
/// [isDense], [isCollapsed], [filled], and [alignLabelWithHint] cannot be overridden.
///
/// In other words, the fields of the provided [InputDecorationTheme] are used to
/// fill in the unspecified and nullable fields of this InputDecorationTheme. ¿yx*¿yè   ¿ÑÜ˘¿Ñ2  ¿Ñ5¿Ñ=  ¿Ñ¿Ñ¿ãê&¿ã&  ¿ã:&¿ãW  ¿ã¿ã¿%‹¿%›¿õ?êÂ¿õE  ¿õÄ> ¿õÜ¿õü ¿õ†¿õ¶  ¿õ∂¿õª¿õº¿õ¬¿õ’  	¿õ·Å!¿õ¸   ¿õ·¿õ‚¿ùÅ"¿ù!   ¿ù¿ù¿û,Ç"¿ûG   ¿û,¿û-¿†RÅ}¿†m   ¿†R¿†S¿°”ÅÉ¿°Ó   ¿°”¿°‘¿£ZÇâ¿£q   ¿£Z¿£[¿•ÁÇ¿•˛   ¿•Á¿•Ë¿ß¯Ç¿®   ¿ß¯¿ß˘¿™Ç¿™&   ¿™¿™  ¿≠?ñM¿≠E  ¿≠Å6 ¿≠Å¿≠ö ¿≠õ¿≠°  ¿≠Ø¿≠¥¿≠µ¿≠ª¿≠Œ  ¿≠⁄>¿≠Ò ¿≠˚¿Æ ¿Æ¿Æ¿Æ¿Æ¿Æ¿Æ¿Æ=¿Æ1 ¿Æ>¿ÆC¿ÆD¿ÆF¿ÆN¿ÆG¿ÆO¿ÆP¿Æ^Å!¿Æy   ¿Æ^¿Æ_¿ØÉÄÙ¿Øö   ¿ØÉ¿ØÑ¿∞{Éj¿∞ó   ¿∞{¿∞|¿≥ÈÉW¿¥   ¿≥È¿≥Í¿∑D=¿∑[   ¿∑D¿∑E¿∑ÖÄë¿∑ú   ¿∑Ö¿∑Ü¿∏ÅN¿∏1   ¿∏¿∏¿πlÉÕ¿πá   ¿πl¿πm¿Ω=É’¿ΩX   ¿Ω=¿Ω>¿¡ÅÅ¿¡1   ¿¡¿¡¿¬õÄÔ¿¬∂   ¿¬õ¿¬ú   ¥àÇ:µ Å</// Defines **how** the floating label should behave.
///
/// See also:
///
///  * [InputDecoration.floatingLabelBehavior] which defines the behavior for
///    [InputDecoration.label] or [InputDecoration.labelText].
///  * [FloatingLabelAlignment] which defines **where** the floating label
///    should displayed.  µ‰N∂-F/// The label will always be positioned within the content, or hidden. ∂6J∂|C/// The label will float when the input is focused, or has content. ∂Ñ;∂π2/// The label will always float above the content.    ΩZÄëΩ_   ΩsΩs  Ω{Ω{  ΩÑΩÑ  ΩçΩç  ΩïΩï  ΩüΩü  Ω©
Ω©  Ω∑
Ω∑  Ω≈Ω≈  Ω‘Ω‘  Ωﬂ	Ωﬂ           ÉoAÉ~ ÉïÉùÉØÉ™ÉûÉ¨É≤4Éæ É“ÉÿÉŸÉË%Éı Ñ	  íö <ÄÜÄ§Ä•Ä¡Ä„Ä‰ÅÅ7Å^Å_Å{ÅëÅ™Å≈ÅÊÇÇÇ8ÇRÇgÇÅÇÇÇöÇ≤Ç≥ÇŸÉoÉ≤ÉËÑÑÑTÑsÑ¢Ñ¥Ñ”ÑÖÖ!Ö:Ö@ÖDÖEÖ]Ö}ÖöÖ∂ÖÕÖÊÖÏÖÖÒÖ˝Ü^ÜÅÜ£Ü∂ÜºÜËÜ¸áá&áFáiámánázá€ààààIàKàLà}à≤à·à‚àÓâ?âAâBâìâ≈â›â˛ä!ä;ä[äräìä∞ä“äıãããAãcããã®ãÕãÊå
å4å5åôåöå¶åœççEçvçúç≥çˇéé4é\éeékéléÉéëé£éæé€èè(è/è3è4è@èwè∞èÁêêAêbêòêúêùê©êÿê⁄ê€ë'ërëªë€íí&í@íWíwíîí≤í–í÷í◊íÛìì8ìQìkìÑìÖìëì”ì’ì÷î2îxîyî°î”î˛ï ïJïnïoï{ïêïßïÿï˘ñ%ñ8ñ?ñfñåñüñ¶ñŒñÈó	ó8ó?ó`ó|óñóùóƒóÈòòòbòfògòsòÜò°ò∆ò€òﬂò‡òÏô!ôGôtôóô∏ô‘ô›ôÔööö öUö≠ö≥öËõõ0õ?õhõpõvõzõ{õáõÆõ∆õÙú$ú@úVúwúÉúÆú«úÚùù>ùcùéù∑ù¿ù«ùÀùÕùŒûû;ûbûtûûûÆû”û‘ûÎûÏü2ü3üMüpüñü´ü…ü‰†	††A†G†K†L†X††ï†◊†Î†Ú†ˆ†¯†˘°;°z°¨°ÿ°Ô¢¢¢.¢G¢W¢k¢Ä¢ò¢û¢ü¢Ω¢Ÿ¢˘££-£H£g£É£Ñ£ê£ £Ã£Õ§'§o§®§Ÿ§⁄•••'•(•r•s••î•´•“•¯¶¶¶'¶E¶d¶ê¶∞¶∂¶‚¶Ê¶Á¶Ûßß!ß6ß:ß;ßTßfßîßúß†ß°ß≠ßÿß¯ß˘®$®W®å®¥®‰©©©d©Ω™1™2™Ç™∏™ÿ™˜´!´C´b´q´ê´ò´û´¢´£´Ω´‰´˙¨¨.¨y¨é¨¨¨—¨¯≠#≠N≠Y≠b≠i≠m≠n≠á≠≈≠€≠ÚÆÆ-ÆSÆyÆ¶ÆƒÆÏØØ2ØXØÅØÆØ⁄ØÁØÚØ˚∞∞∞∞∞:∞]∞r∞ô∞¬∞—∞È∞ˇ±±±±1±G±^±Ö±î±´±¡±…±œ±–±¯≤≤≤≤R≤o≤u≤v≤ã≤ü≤ª≤’≥$≥@≥M≥f≥q≥z≥Ä≥Å≥¶≥∫≥÷≥¥
¥,¥G¥T¥_¥h¥n¥o¥Å¥Ö¥á¥à¥æ¥¬¥–¥‘µ"µaµ¨µ≈µ‚∂+∂4∂z∂Ç∂∑∂¡∂√∂ƒ∑∑!∑%∑3∑7∑á∑∆∏∏$∏/∏N∏õ∏ú∏ÿ∏Î∏Ïπ8π>πâπèπ€∫)∫o∫Ω∫æ∫ ∫Ì∫Ó∫˙ªª?ªRªXªÑªòªûª…ªËªÏªÌºº)ºVº\ºpºûº§ºÂºÈºÍºˆΩΩΩ ΩZΩqΩyΩÇΩãΩìΩùΩßΩµΩ√Ω“Ω›ΩÍΩÏΩÌæ(æ3æGæ]ææûæ≈æÓøø2øOøuøêø±ø¿ø–ø‡øÔ¿ @ ¿ @¿ @&¿ @;¿ @Q¿ @c¿ @w¿ @}¿ @~¿ @©¿ @√¿ @Á¿ A¿ AD¿ A`¿ AÉ¿ A§¿ Aª¿ A‡¿ Aˆ¿ B¿ B$¿ B:¿ BR¿ Bj¿ BÜ¿ B¢¿ Bø¿ Bÿ¿ BÛ¿ BÙ¿ C ¿ C#¿ CE¿ CX¿ C^¿ Cä¿ Cû¿ C§¿ Cƒ¿ Cˆ¿ D"¿ D^¿ Dû¿ D‡¿ E¿ E*¿ Ed¿ Eà¿ E∏¿ E÷¿ Eˆ¿ F¿ F4¿ FV¿ Fx¿ F¢¿ FÃ¿ F¯¿ G¿ GE¿ GI¿ GJ¿ GV¿ Gy¿ Gç¿ G¶¿ G¡¿ G›¿ GÈ¿ G¯¿ H¿ H¿ H0¿ H:¿ HE¿ HP¿ HZ¿ Hf¿ Hr¿ HÇ¿ Hí¿ H£¿ H∞¿ Hø¿ Hƒ¿ H∆¿ H«¿ I¿ I[¿ Iì¿ I≥¿ I’¿ Iˆ¿ J8¿ Jz¿ Jù¿ J¿¿ J·¿ JÁ¿ JË¿ K¿ K5¿ KU¿ Kç¿ K≠¿ KÀ¿ KÕ¿ KŒ¿ L¿ LÉ¿ Lô¿ Læ¿ LË¿ M¿ M-¿ MH¿ Me¿ Mè¿ M∞¿ M◊¿ M¸¿ N+¿ NJ¿ Ne¿ NÑ¿ NÖ¿ N≠¿ NÆ¿ NÎ¿ O*¿ Oi¿ O¶¿ OÁ¿ P(¿ Pq¿ P∫¿ Q¿ QH¿ Qè¿ Qê¿ Q√¿ Qœ¿ QÙ¿ R¿ R$¿ R3¿ RL¿ R\¿ Rz¿ Rè¿ R≠¿ R¬¿ R‹¿ RÌ¿ S¿ S¿ S1¿ SA¿ SY¿ Sh¿ Sá¿ Sù¿ S∏¿ S ¿ SÁ¿ S˚¿ T¿ T¿ T¿ T4¿ TO¿ Tu¿ Tï¿ T£¿ T©¿ T¬¿ TŸ¿ T›¿ Tﬁ¿ U¿ U3¿ U^¿ UÅ¿ Uè¿ Uï¿ U±¿ U»¿ UÃ¿ UÕ¿ Uˇ¿ V¿ VF¿ Vh¿ Vv¿ V|¿ Vó¿ VÆ¿ V≤¿ V≥¿ V˙¿ W¿ W:¿ Wò¿ W¡¿ Wı¿ X¿ X*¿ X0¿ Xu¿ X¡¿ X„¿ XÒ¿ X˜¿ Y¿ Y.¿ Y2¿ Y3¿ YW¿ Yj¿ Yà¿ Yß¿ Yµ¿ Yª¿ Y”¿ YÛ¿ Y˜¿ Y¯¿ Z¿ Z1¿ ZM¿ Zj¿ Zx¿ Z~¿ Zî¿ Z´¿ ZØ¿ Z∞¿ Z‘¿ ZÔ¿ [¿ [,¿ [:¿ [@¿ [X¿ [o¿ [s¿ [t¿ [√¿ [–¿ [Ô¿ \2¿ \6¿ \7¿ \C¿ \É¿ \õ¿ \±¿ \∑¿ \—¿ \È¿ \Ô¿ ]¿ ])¿ ]/¿ ]0¿ ]I¿ ]`¿ ]f¿ ]~¿ ]ï¿ ]≠¿ ]œ¿ ]Á¿ ]Ô¿ ]ı¿ ]ˆ¿ ^¿ ^&¿ ^,¿ ^J¿ ^f¿ ^l¿ ^Ü¿ ^û¿ ^§¿ ^¡¿ ^‹¿ ^‚¿ _¿ _¿ _$¿ _?¿ _X¿ _^¿ _b¿ _c¿ _o¿ _í¿ _ì¿ _Œ¿ `¿ `¿ `¿ `O¿ `ê¿ `î¿ `ï¿ `–¿ a¿ a¿ a¿ ad¿ ae¿ aø¿ a¿¿ b¿ b¿ bL¿ bí¿ b©¿ bª¿ b¡¿ bÙ¿ cF¿ có¿ cÂ¿ d3¿ dÑ¿ dù¿ dÓ¿ dÔ¿ dˇ¿ e¿ e/¿ e7¿ em¿ eÃ¿ eÊ¿ f0¿ f_¿ fj¿ ft¿ f~¿ fì¿ fó¿ fò¿ fÂ¿ g3¿ gw¿ gΩ¿ g…¿ g˝¿ hK¿ hn¿ hª¿ i
¿ iX¿ i°¿ i∆¿ iÕ¿ iŒ¿ j¿ jX¿ jû¿ jü¿ j‘¿ k¿ k]¿ kù¿ k§¿ kˆ¿ lH¿ lï¿ l‡¿ lÁ¿ m/¿ mw¿ mx¿ m†¿ m´¿ m ¿ mÁ¿ n^¿ nÉ¿ n§¿ n≈¿ nÍ¿ oc¿ oj¿ o¥¿ p&¿ p_¿ pÜ¿ p„¿ pÈ¿ q¿ q¿ q;¿ qX¿ qv¿ qõ¿ qµ¿ q÷¿ q›¿ r¿ r¿ r_¿ rf¿ rê¿ rú¿ rÁ¿ rÓ¿ s8¿ s9¿ sÇ¿ s´¿ s‹¿ sÔ¿ t¿ tj¿ ts¿ tz¿ t{¿ tÀ¿ tˆ¿ u#¿ u-¿ uU¿ ué¿ u«¿ u‹¿ v¿ v¿ vE¿ vÇ¿ v´¿ v„¿ vÌ¿ w¿ wF¿ w[¿ wt¿ w{¿ w…¿ wÙ¿ x¿ x/¿ xs¿ x¿¿ x”¿ xÒ¿ y¿ y¿ y¿ y ¿ yb¿ yò¿ y÷¿ z¿ zQ¿ zn¿ zä¿ zë¿ zí¿ z‡¿ zÚ¿ {,¿ {f¿ {ç¿ {´¿ {…¿ {–¿ |!¿ |O¿ ||¿ |©¿ |∞¿ |¸¿ }"¿ }Y¿ }Ñ¿ }ç¿ }Õ¿ }‘¿ }’¿ ~¿ ~P¿ ~í¿ ~·¿ ¿ !¿ 1¿ L¿ b¿ v¿ å¿ ™¿ ƒ¿ À¿ Ä*¿ Ä6¿ ÄX¿ Äß¿ Ä“¿ ÄÌ¿ Å@¿ ÅA¿ Åç¿ Åª¿ Ç¿ Ç:¿ ÇG¿ ÇH¿ Çó¿ ÇË¿ É1¿ É~¿ ÉÃ¿ Ñ¿ ÑR¿ Ñ£¿ ÑÚ¿ Ö¿ Ö}¿ Ö~¿ ÖÃ¿ Ü¿ Ü¿ Ü3¿ ÜN¿ Ül¿ Üå¿ Ü˙¿ áJ¿ áì¿ áÎ¿ à8¿ à9¿ àä¿ àë¿ à ¿ â¿ âQ¿ âè¿ âñ¿ âﬂ¿ ä,¿ äk¿ ä™¿ äÀ¿ ã¿ ã:¿ ãâ¿ ãø¿ ãŸ¿ ãˆ¿ å¿ å,¿ å3¿ å4¿ åz¿ å°¿ å«¿ åÏ¿ ç¿ ç+¿ çJ¿ çä¿ ç ¿ ç–¿ çÌ¿ é¿ éO¿ é~¿ éÑ¿ é±¿ éœ¿ éÏ¿ éÛ¿ è¿ è:¿ èU¿ è\¿ è]¿ èÅ¿ è•¿ èÕ¿ èÒ¿ ê¿ êA¿ êe¿ êl¿ êp¿ êq¿ êø¿ ë¿ ë_¿ ë©¿ ë˘¿ íJ¿ íX¿ í√¿ íÁ¿ ì7¿ ì|¿ ìô¿ ì∞¿ ì∏¿ î	¿ î¿ îJ¿ îu¿ î{¿ î|¿ îï¿ î™¿ î∞¿ ï¿ ï¿ ï7¿ ï_¿ ïc¿ ïd¿ ïp¿ ï£¿ ï∆¿ ï‚¿ ñ¿ ñ*¿ ñn¿ ñê¿ ñ∂¿ ñ‘¿ ñÿ¿ ñŸ¿ ñÂ¿ ó¿ ó;¿ óW¿ ó}¿ óü¿ ó„¿ ò¿ ò+¿ òI¿ òM¿ òN¿ òã¿ ò§¿ òŒ¿ òÁ¿ ò˘¿ ô¿ ô:¿ ô@¿ ôS¿ ô†¿ ô—¿ ö¿ ö¿ ö¿ ö¿ öP¿ öá¿ ö¡¿ ö¬¿ ö¿ öÒ¿ õ4¿ õÄ¿ õÅ¿ õƒ¿ ú¿ ú¿ úO¿ úP¿ úç¿ ú–¿ ú—¿ ù#¿ ù|¿ ù√¿ ù‚¿ û¿ û¿ û¿ ûG¿ ûá¿ ûà¿ û√¿ ü¿ ü¿ üÅ¿ ü›¿ †C¿ †D¿ †í¿ †∆¿ °¿ °¿ °:¿ °T¿ °—¿ ¢¿ ¢"¿ ¢D¿ ¢é¿ ¢í¿ ¢ì¿ ¢ü¿ ¢“¿ ¢ˇ¿ £¿ £¿ £¿ £R¿ £ª¿ £ø¿ £¿¿ £Í¿ §¿ §¿ §¿ §I¿ §q¿ §“¿ §⁄¿ §¿ §Ù¿ §ı¿ •l¿ •◊¿ ¶¿ ¶?¿ ¶Ñ¿ ¶Ÿ¿ ß¿ ß=¿ ßô¿ ß“¿ ß˝¿ ®¿ ®8¿ ®@¿ ®F¿ ®j¿ ®£¿ ®©¿ ®Õ¿ ©¿ ©¿ ©(¿ ©,¿ ©-¿ ©9¿ ©Ä¿ ©œ¿ ©”¿ ©‘¿ ©‡¿ ©˘¿ ™2¿ ™N¿ ™è¿ ™ê¿ ™∆¿ ´¿ ´¿ ´H¿ ´e¿ ´∞¿ ´ÿ¿ ¨¿ ¨¿ ¨Y¿ ¨o¿ ¨é¿ ¨Æ¿ ¨¡¿ ¨·¿ ≠¿ ≠¿ ≠G¿ ≠M¿ ≠N¿ ≠f¿ ≠ô¿ ≠È¿ Æ¿ Æ¿ Æ¿ Æ'¿ Æ\¿ Æ±¿ ÆŒ¿ Æ‘¿ Æ’¿ Ø¿ Ø@¿ ØA¿ Øf¿ Ø∏¿ Øπ¿ Ø—¿ ØÁ¿ ∞¿ ∞&¿ ∞U¿ ∞u¿ ∞à¿ ∞ë¿ ∞Ø¿ ∞µ¿ ∞∂¿ ∞”¿ ∞Û¿ ±(¿ ±C¿ ±e¿ ±é¿ ±‹¿ ±Ê¿ ≤¿ ≤2¿ ≤q¿ ≤Ñ¿ ≤¡¿ ≤Õ¿ ≤◊¿ ≤ı¿ ≥=¿ ≥G¿ ≥d¿ ≥°¿ ≥´¿ ≥«¿ ¥¿ ¥¿ ¥.¿ ¥T¿ ¥Ö¿ ¥è¿ ¥≠¿ ¥‹¿ ¥Ê¿ ¥ı¿ ¥˝¿ µ¿ µQ¿ µm¿ µè¿ µ∑¿ µÏ¿ µˆ¿ ∂¿ ∂B¿ ∂m¿ ∂Ä¿ ∂©¿ ∂µ¿ ∂ø¿ ∂›¿ ∑¿ ∑¿ ∑7¿ ∑`¿ ∑j¿ ∑Ü¿ ∑Æ¿ ∑∏¿ ∑⁄¿ ∏¿ ∏K¿ ∏U¿ ∏s¿ ∏∑¿ ∏¡¿ ∏–¿ ∏ÿ¿ ∏ﬁ¿ ∏ﬂ¿ π¿ π6¿ π_¿ π`¿ π¿ πü¿ πƒ¿ ∫&¿ ∫2¿ ∫S¿ ∫¿ ∫ã¿ ∫´¿ ∫–¿ ª¿ ª#¿ ªD¿ ªá¿ ªì¿ ªõ¿ ª°¿ ª¢¿ ªª¿ ª˘¿ º;¿ ºÖ¿ º–¿ Ω¿ ΩN¿ Ωm¿ Ωç¿ Ω∏¿ Ω˛¿ æR¿ æ^¿ æ≈¿ ø¿ ø¿ ø¿ ø?¿ øê¿ ø·¿ ¿5¿ ¿`¿ ¿¶¿ ¿˝¿ ¡	¿ ¡o¿ ¡Ø¿ ¡»¿ ¡–¿ ¬¿ ¬(¿ ¬Q¿ ¬z¿ ¬Ä¿ ¬Å¿ ¬∆¿ √
¿ √Q¿ √U¿ √V¿ √ì¿ √ª¿ √ø¿ √¿¿ √Ã¿ ƒ¿ ƒ(¿ ƒC¿ ƒç¿ ƒï¿ ƒõ¿ ƒ≥¿ ƒ¥¿ ƒÕ¿ ≈¿ ≈F¿ ≈}¿ ≈ø¿ ∆	¿ ∆I¿ ∆è¿ ∆»¿ «¿ «;¿ «{¿ «Õ¿ »¿ »ã¿ »Œ¿ …¿ …W¿ …r¿ …å¿ …´¿ …Â¿  %¿  E¿  û¿  ˝¿ À	¿ À?¿ Àb¿ ÀÇ¿ À€¿ Ã;¿ ÃG¿ ÃO¿ Ã§¿ Ãﬂ¿ Õ(¿ ÕS¿ ÕÄ¿ Õò¿ ÕΩ¿ Õ◊¿ ÕÁ¿ Œ¿ Œ¿ ŒB¿ ŒK¿ ŒX¿ Œl¿ Œr¿ Œs¿ ŒÜ¿ Œõ¿ Œ∞¿ Œ…¿ Œ‚¿ Œı¿ œ	¿ œ#¿ œ9¿ œ=¿ œ>¿ œJ¿ œw¿ œx¿ œÑ¿ œ‘¿ –¿ –K¿ –Ö¿ –π¿ –—¿ –Ì¿ —.¿ —b¿ —°¿ —¨¿ —µ¿ —»¿ —›¿ —Â¿ —Î¿ —˝¿ “¿ “¿ “¿ “R¿ “á¿ “«¿ “◊¿ “¸¿ ”3¿ ”9¿ ”j¿ ”n¿ ”p¿ ”q¿ ”Ã¿ ”·¿ ‘¿ ‘$¿ ‘E¿ ‘e¿ ‘Ç¿ ‘ù¿ ‘£¿ ‘§¿ ‘ƒ¿ ‘È¿ ’¿ ’:¿ ’R¿ ’h¿ ’i¿ ’u¿ ’∂¿ ’∑¿ ’√¿ ’Ú¿ ÷¿ ÷'¿ ÷G¿ ÷i¿ ÷ä¿ ÷¨¿ ÷Õ¿ ÷Ó¿ ◊¿ ◊1¿ ◊S¿ ◊v¿ ◊ò¿ ◊ø¿ ◊Â¿ ÿ¿ ÿ2¿ ÿZ¿ ÿÅ¿ ÿ•¿ ÿ»¿ ÿÓ¿ Ÿ¿ Ÿ¿ Ÿ¿ Ÿ¿ Ÿ*¿ Ÿi¿ Ÿá¿ Ÿ•¿ Ÿ…¿ ŸÎ¿ ⁄¿ ⁄3¿ ⁄K¿ ⁄|¿ ⁄É¿ ⁄á¿ ⁄à¿ ⁄î¿ ⁄Ê¿ ⁄˜¿ €¿ €/¿ €L¿ €y¿ €ú¿ €¬¿ €∆¿ €»¿ €…¿ €Ù¿ ‹	¿ ‹,¿ ‹;¿ ‹K¿ ‹[¿ ‹v¿ ‹ñ¿ ‹ú¿ ‹ù¿ ‹ª¿ ‹—¿ ‹Î¿ ›¿ ›.¿ ›Q¿ ›R¿ ›^¿ ›Ö¿ ›®¿ ›º¿ ›⁄¿ ﬁ¿ ﬁ$¿ ﬁR¿ ﬁl¿ ﬁë¿ ﬁπ¿ ﬂ¿ ﬂ¿ ﬂ¿ ﬂ!¿ ﬂ%¿ ﬂ'¿ ﬂ(¿ ﬂd¿ ﬂh¿ ﬂ¥¿ ‡¿ ‡M¿ ‡ô¿ ‡ù¿ ‡‰¿ ‡Ë¿ ·7¿ ·i¿ ·m¿ ·æ¿ ‚	¿ ‚%¿ ‚)¿ ‚7¿ ‚;¿ ‚É¿ ‚æ¿ „¿ „%¿ „S¿ „ï¿ „Æ¿ „¥¿ ‰¿ ‰¿ ‰-¿ ‰<¿ ‰Z¿ ‰n¿ ‰Ç¿ ‰û¿ ‰∫¿ ‰◊¿ ‰Ò¿ Â¿ Â¿ Â!¿ Â"¿ Â^¿ Âd¿ Â≥¿ ÂÁ¿ ÂÌ¿ Ê¿ Ê)¿ Ê*¿ Êv¿ Ê≤¿ Ê∏¿ Á ¿ Á2¿ Á8¿ ÁÉ¿ ÁØ¿ ÁÕ¿ ÁŒ¿ Ë¿ Ë1¿ Ë2¿ Ëv¿ Ëß¿ Ë≠¿ Ë˙¿ ÈK¿ Èô¿ ÈÍ¿ Í9¿ ÍÑ¿ Í“¿ ÍÒ¿ Î¿ Î4¿ Î5¿ Î^¿ Îd¿ Î¥¿ Î¬¿ Î»¿ Î·¿ ÎÁ¿ Î˜¿ Î˝¿ ÏI¿ Ïö¿ Ï™¿ Ï¬¿ Ï√¿ Ì¿ Ì¿ ÌP¿ Ìô¿ Ìœ¿ Ì’¿ ÌÓ¿ Ó¿ Ó¿ ÓS¿ ÓY¿ Ó®¿ Ó¯¿ Ô¿ Ô
¿ ÔV¿ Ô•¿ Ô‚¿ ÔË¿ ¿ ¿ ¿ @¿ F¿ ñ¿ ¢¿ ®¿ ¡¿ ◊¿ ÿ¿ Ò¿ Ò¿ ÒQ¿ Òh¿ Òi¿ Òµ¿ Ò’¿ Ò€¿ Ú¿ Úp¿ Úq¿ Ú}¿ Úæ¿ Úø¿ Û	¿ ÛW¿ Û£¿ ÛË¿ Ù¿ Ù¿ ÙP¿ Ùà¿ ÙÎ¿ ı	¿ ı¿ ı¿ ı¿ ı_¿ ıä¿ ıﬁ¿ ˆ>¿ ˆÖ¿ ˆ›¿ ˜ ¿ ˜$¿ ˜&¿ ˜'¿ ˜Ä¿ ˜ª¿ ˜Û¿ ¯-¿ ¯e¿ ¯≥¿ ˘ ¿ ˘N¿ ˘Æ¿ ˙¿ ˙¿ ˙¿ ˙0¿ ˙G¿ ˙H¿ ˙∫¿ ˚¿ ˚:¿ ˚;¿ ˚o¿ ˚ï¿ ˚®¿ ˚€¿ ˚‚¿ ¸¿ ¸J¿ ¸r¿ ¸í¿ ¸¡¿ ¸»¿ ¸…¿ ¸¸¿ ˝"¿ ˝5¿ ˝<¿ ˝@¿ ˝A¿ ˝M¿ ˝n¿ ˝ë¿ ˝≤¿ ˝∂¿ ˝∑¿ ˝√¿ ˝÷¿ ˝˛¿ ˛%¿ ˛:¿ ˛>¿ ˛?¿ ˛X¿ ˛j¿ ˛•¿ ˛≠¿ ˛±¿ ˛≤¿ ˛€¿ ˇa¿ ˇb¿ ˇí¿ ˇº¿ ˇ˛¿ $¿ G¿ ì¿ ó¿ ò¿ §¿ —¿ Ò¿ ¿C¿I¿J¿¡¿¬¿¿=¿∂¿‚¿Ò¿¿%¿+¿,¿`¿õ¿ú¿˛¿¿2¿G¿M¿Q¿R¿ä¿∑¿¿.¿S¿Y¿Å¿´¿±¿∆¿Ú¿¯¿¿8¿>¿ê¿¶¿!¿l¿r¿ã¿è¿ê¿‹¿+¿L¿R¿z¿Œ¿‘¿	$¿	(¿	)¿	W¿	∑¿	ÿ¿	ﬁ¿
E¿
I¿
J¿
ñ¿
Á¿I¿ó¿õ¿ú¿Ó¿D¿¨¿ ¿¿¿W¿≠¿¿i¿m¿n¿™¿Û¿D¿U¿r¿ö¿‡¿-¿1¿2¿r¿ª¿º¿¿C¿ö¿¿¿g¿À¿Ã¿¯¿¿2¿F¿b¿f¿g¿∞¿Ì¿C¿´¿¨¿¿q¿r¿û¿Ω¿ÿ¿Ì¿Ò¿Ú¿K¿∫¿
¿c¿i¿–¿—¿<¿®¿©¿’¿Ù¿¿.¿C¿G¿H¿ö¿Î¿A¿E¿F¿ó¿Á¿¿¿¿:¿V¿ç¿π¿Ê¿#¿*¿.¿/¿0¿Ü¿Ë¿¿¿S¿h¿n¿o¿ü¿¥¿∫¿ª¿›¿˝¿¿É¿é¿ù¿Ω¿¿&¿.¿4¿>¿\¿|¿≤¿ ¿ .¿ S¿ ^¿ g¿ m¿ q¿ r¿ ~¿ •¿ ÿ¿!¿!s¿!t¿!¿¿" ¿"¿"K¿"}¿"¡¿"˚¿#!¿#A¿#T¿#f¿#Ä¿#µ¿#Ù¿$¿$=¿$F¿$M¿$N¿$Ö¿$û¿$Ω¿%
¿%&¿%y¿%Ü¿%“¿%ÿ¿&¿&¿&?¿&U¿&l¿&ô¿&Œ¿&˚¿'¿' ¿'!¿'Ü¿'µ¿'”¿'˚¿(¿(L¿(u¿(û¿(¬¿(Ô¿))¿)C¿)n¿)ë¿)æ¿)‡¿)Ì¿)¯¿*¿*¿*	¿*`¿*∑¿*∏¿*⁄¿+'¿+5¿+ƒ¿+≈¿+Í¿+˛¿,6¿,]¿,√¿-¿-J¿-n¿-x¿-Ü¿-á¿-¨¿-¿¿-¯¿.¿.Ö¿.ﬁ¿/¿/0¿/:¿/H¿/I¿/}¿/ñ¿/¬¿/ÿ¿/·¿/Á¿/Ë¿0(¿0e¿0f¿0†¿0≥¿0›¿0ı¿15¿1W¿1x¿1±¿1œ¿1ﬁ¿2¿2¿2¿2$¿2%¿2k¿2y¿2ì¿2Æ¿2 ¿2ˆ¿3¿3T¿3ê¿3∂¿3Ï¿4#¿46¿4G¿4k¿4é¿4œ¿4Ô¿5 ¿5&¿5Q¿5~¿5À¿5Ò¿6¿6¿6;¿6k¿6~¿6è¿6û¿6´¿6∂¿6ø¿6¿¿7¿7¿7.¿7I¿7e¿7ë¿7≤¿7Ô¿8+¿8Q¿8á¿8æ¿8—¿8‚¿9¿9-¿9p¿9í¿9•¿9Õ¿9˙¿:)¿:x¿:†¿:∑¿:Ã¿:¿;"¿;7¿;J¿;[¿;j¿;w¿;Ç¿;É¿;∞¿;Ã¿;ı¿<.¿<_¿<~¿<•¿<‹¿=¿=¿=¿=(¿=N¿=r¿=√¿=ﬁ¿=˜¿>¿>+¿>N¿>‘¿>ˇ¿?9¿?D¿?M¿?S¿?T¿?£¿?À¿@¿@s¿@t¿@ô¿@ø¿@·¿A¿AF¿Aj¿AΩ¿B&¿BN¿Bñ¿B“¿C¿C!¿Co¿Cº¿Cˇ¿DG¿DÅ¿Dø¿D«¿D‘¿Dı¿E;¿Ew¿Eµ¿Eª¿Eº¿EÈ¿F¿F0¿F]¿Fè¿F”¿G¿G)¿GH¿Gå¿G±¿G·¿Gı¿H¿H!¿H5¿HM¿He¿HÖ¿H•¿H«¿H·¿H˛¿I¿I+¿IM¿IÄ¿Iú¿Iª¿I¬¿I√¿J1¿JP¿Jm¿Jè¿J©¿J≤¿J∏¿JŒ¿J“¿J‘¿J’¿K¿K2¿K6¿KÖ¿K ¿L¿L¿L/¿L¿LÀ¿M¿Mi¿MØ¿M≥¿N¿N¿Nk¿N{¿N¿Nì¿NŸ¿O%¿Oi¿Om¿O”¿O◊¿P/¿P?¿PC¿PW¿P¶¿P¿Q7¿Q;¿Qù¿Q°¿Q˘¿R	¿R¿R!¿Rj¿Rª¿RÚ¿Rˆ¿S`¿Sd¿Sº¿SÃ¿S–¿S‰¿T:¿Té¿T∞¿T¥¿U¿U+¿U/¿UC¿Uô¿UÌ¿V.¿V2¿Vô¿V©¿V≠¿Vª¿Vø¿V˝¿W¿Wb¿Wá¿W”¿WÒ¿W¸¿X¿X\¿Xâ¿Xè¿X‹¿Y+¿Yz¿Yô¿Yü¿YŒ¿Y‘¿Z¿Z¿Za¿Z{¿Zä¿Zû¿ZÆ¿Z¬¿Z◊¿ZÙ¿[	¿[¿[8¿[K¿[_¿[{¿[í¿[¢¿[∂¿[À¿[„¿\¿\$¿\B¿\T¿\m¿\Ç¿\¢¿\≥¿\»¿\ﬁ¿\¯¿]¿]¿]3¿]I¿]c¿]É¿]ï¿]´¿]¬¿]”¿]Á¿]¸¿^¿^'¿^?¿^\¿^u¿^ç¿^û¿^∑¿^’¿^Ú¿_¿_v¿_Ë¿`Z¿`»¿`…¿a¿a¿ae¿ak¿aö¿aæ¿a⁄¿a˙¿b¿b/¿bK¿bd¿bx¿bç¿b¢¿b∆¿bﬂ¿bÛ¿c¿c!¿c:¿cT¿cv¿cê¿c´¿c…¿cÂ¿c˙¿d¿d-¿dJ¿db¿dã¿d¶¿d¿¿d÷¿d¿e¿e*¿eO¿ee¿e¿eô¿e¥¿e”¿e¯¿f¿f*¿fF¿fa¿f~¿f†¿fæ¿f€¿f˛¿g!¿g<¿g=¿gä¿gõ¿g°¿gÎ¿h7¿hJ¿hP¿hà¿hé¿h⁄¿i¿i\¿iÇ¿ià¿iß¿iΩ¿iæ¿i›¿i„¿j&¿jh¿jî¿jÆ¿jØ¿jÂ¿jÎ¿k$¿kq¿kæ¿l¿l^¿lÆ¿l≈¿l⁄¿l‡¿m9¿mã¿më¿mß¿m¯¿nH¿nN¿nÆ¿n¿¿n∆¿o¿o¿o¿oN¿oT¿oä¿oê¿o›¿p¿p4¿p5¿ps¿p√¿p›¿p„¿q+¿qr¿qû¿q§¿q˜¿r>¿rD¿rë¿rº¿r¬¿s¿sG¿sà¿sé¿s§¿sÒ¿t¿t¿tq¿tΩ¿t–¿t÷¿uB¿uT¿ui¿uà¿uâ¿uœ¿v¿vT¿vZ¿vß¿v—¿v◊¿w'¿wn¿wö¿w†¿w…¿wœ¿x¿xT¿xï¿xõ¿x±¿x˛¿y%¿y+¿yn¿yø¿yÂ¿yÎ¿z`¿zr¿zá¿zÆ¿zØ¿zˇ¿{$¿{*¿{x¿{√¿{ˆ¿|¿|¿|@¿|F¿|è¿|÷¿}¿}"¿}#¿}b¿}h¿}≤¿}Á¿}Ì¿~/¿~f¿~l¿~|¿~Ç¿~ƒ¿~·¿~‚¿!¿'¿x¿≈¿Ä¿Ä-¿ÄG¿ÄH¿Äs¿Äy¿Ä¿¿Å¿Å3¿Å9¿ÅÇ¿Åœ¿Ç	¿Ç¿Ç\¿Çá¿Ç•¿Ç¶¿Ç’¿Ç€¿É$¿ÉO¿Éy¿Éz¿É∑¿ÉΩ¿É¸¿Ñ¿ÑD¿Ñô¿Ñﬁ¿Ñ˘¿Ñ˙¿ÖN¿ÖT¿Ö≠¿Ö≥¿ÖÔ¿Ü¿Ü¿ÜP¿ÜV¿Ü§¿Üµ¿Üª¿á¿á;¿áA¿áé¿áî¿á–¿áÎ¿áÏ¿à*¿àf¿àl¿àπ¿à‰¿àÍ¿â+¿âs¿â¬¿ä¿ä¿ä.¿äM¿äN¿äO¿äç¿äì¿ä‹¿ã¿ã¿ãY¿ãè¿ãï¿ã•¿ã´¿ãÔ¿å¿å¿åU¿åç¿åì¿åÂ¿ç3¿ç_¿çe¿ç∂¿ç‹¿ç‚¿é4¿éY¿én¿ét¿éæ¿éƒ¿é‘¿é⁄¿è'¿èE¿è{¿è|¿è∆¿ê¿ê¿ê[¿ê•¿êÛ¿ë¿ë
¿ë[¿ës¿ëà¿ëé¿ëŸ¿ëﬂ¿ëÔ¿ëı¿íF¿íW¿íè¿íê¿íÎ¿í˘¿íˇ¿ì¿ì/¿ì0¿ìh¿ìn¿ì¥¿ì∫¿î¿î¿î¿îh¿în¿îæ¿ï¿ï\¿ï≠¿ï˚¿ñG¿ñM¿ñò¿ñ€¿ó$¿óP¿óQ¿óì¿óô¿óÁ¿óÌ¿ò<¿òV¿òW¿ò°¿òÔ¿òı¿ôF¿ôí¿ô•¿ô´¿ô˘¿öC¿öí¿ö‚¿õ-¿õ@¿õF¿õT¿õo¿õØ¿õÈ¿õÒ¿õ˚¿ú¿úG¿úM¿ú©¿úø¿ú≈¿ú€¿ù4¿ùd¿ùj¿ù–¿ù‚¿ùË¿ù¯¿ù˛¿ûG¿ûê¿û≈¿ü¿üU¿üÜ¿ü¢¿ü£¿üŒ¿ü‘¿†$¿†*¿†y¿†≈¿°¿°¿°%¿°;¿°â¿°ÿ¿°ﬁ¿¢¿¢J¿¢P¿¢õ¿¢ß¿¢≠¿£¿£1¿£`¿£a¿£û¿£§¿£¿§>¿§â¿§ô¿§ü¿§›¿§„¿•-¿•3¿•C¿•I¿•Ö¿•ù¿•û¿•‡¿•Ê¿¶7¿¶z¿¶Ä¿¶œ¿ß¿ß¿ßa¿ßg¿ßw¿ß}¿ßΩ¿ßŸ¿ß⁄¿®¿®¿®V¿®ù¿®…¿®œ¿®˚¿©¿©¿©¿©X¿©x¿©y¿©†¿©¶¿©ƒ¿© ¿™¿™U¿™Å¿™°¿™¢¿™Î¿´8¿´>¿´è¿´€¿´Ó¿´Ù¿¨B¿¨å¿¨€¿≠&¿≠u¿≠å¿≠í¿≠†¿≠ª¿≠˘¿Æ2¿Æ:¿ÆD¿ÆJ¿Æñ¿Æ⁄¿Ø¿Ø>¿ØD¿Ø†¿Ø∂¿Øº¿Ø“¿∞+¿∞[¿∞a¿∞«¿∞Ÿ¿∞ﬂ¿∞Ô¿∞ı¿±>¿±á¿±º¿±˛¿≤K¿≤|¿≤ò¿≤ô¿≤’¿≤€¿≥+¿≥|¿≥»¿≥Œ¿¥¿¥¿¥]¿¥c¿¥s¿¥y¿¥¥¿¥Ã¿¥Õ¿µ¿µ¿µe¿µ®¿µÆ¿µ˝¿∂;¿∂A¿∂ê¿∂ñ¿∂¶¿∂¨¿∂Î¿∑¿∑¿∑5¿∑;¿∑â¿∑“¿∑˜¿∑˝¿∏)¿∏/¿∏?¿∏E¿∏Ö¿∏•¿∏¶¿∏–¿∏÷¿∏Ù¿∏˙¿πC¿πÖ¿π±¿π—¿π“¿π˝¿∫¿∫S¿∫Y¿∫®¿∫Ù¿ªB¿ªN¿ªT¿ª°¿ª≠¿ª≥¿ª…¿º¿ºf¿ºl¿º´¿ºÿ¿ºﬁ¿Ω)¿Ω5¿Ω;¿Ω≠¿Ωø¿ΩÓ¿ΩÔ¿æ1¿æ7¿æÑ¿æê¿æñ¿æÂ¿æÎ¿ø8¿øe¿øÇ¿øÉ¿ø—¿¿¿¿)¿¿B¿¿C¿¿q¿¿w¿¿¡¿¡¿¡4¿¡:¿¡h¿¡â¿¡ä¿¡œ¿¡’¿¬&¿¬G¿¬M¿¬û¿¬§¿¬Ì¿√>¿√é¿√€¿√¿√ˆ¿ƒ¿ƒ5¿ƒ6¿ƒu¿ƒ{¿ƒÃ¿ƒÌ¿ƒÛ¿≈,¿≈T¿≈Z¿≈†¿≈∫¿≈ª¿∆¿∆¿∆K¿∆t¿∆z¿∆»¿«¿«T¿«é¿«î¿«⁄¿«ı¿«ˆ¿»A¿»i¿»o¿»ª¿»„¿»È¿…8¿…k¿…q¿…¥¿…∫¿  ¿ ¿ ¿ n¿ â¿ è¿ ü¿ •¿ ¯¿À¿Àl¿Àø¿Ã¿ÃT¿Ãú¿Ãﬂ¿Õ¿Õe¿Õó¿ÕË¿Œ¿Œk¿Œù¿ŒË¿œ¿œ<¿œ=¿œå¿œ§¿œ™¿œ∫¿œ¿¿–¿–+¿–á¿–⁄¿—/¿—o¿—∑¿—˙¿“4¿“¿“µ¿”¿”<¿”â¿”ª¿‘¿‘8¿‘\¿‘]¿‘®¿‘¿¿‘∆¿‘÷¿‘‹¿’/¿’G¿’£¿’ˆ¿÷K¿÷ã¿÷”¿◊¿◊P¿◊õ¿◊—¿ÿ¿ÿO¿ÿú¿ÿŒ¿Ÿ¿ŸK¿Ÿt¿Ÿu¿Ÿ¬¿Ÿ⁄¿Ÿ‡¿Ÿ¿Ÿˆ¿⁄N¿⁄™¿⁄˝¿€R¿€í¿€⁄¿‹¿‹W¿‹¢¿‹ÿ¿›$¿›V¿›ß¿››¿ﬁ(¿ﬁZ¿ﬁ¿ﬁÄ¿ﬁÃ¿ﬁ‰¿ﬁÍ¿ﬁ˙¿ﬂ ¿ﬂX¿ﬂ¥¿‡¿‡\¿‡ú¿‡‰¿·'¿·a¿·¨¿·‚¿‚.¿‚`¿‚±¿‚Á¿„4¿„f¿„ä¿„ã¿„‘¿„⁄¿‰¿‰i¿‰Ω¿‰√¿Â¿Âh¿Â∫¿Ê¿ÊP¿ÊV¿Ê¢¿ÊÊ¿Á&¿Ák¿Áê¿Áñ¿Á„¿Ë ¿Ë¿ËR¿Ë§¿ËÔ¿È2¿Èp¿È™¿È∞¿È˜¿ÍB¿ÍH¿ÍX¿Í^¿Íò¿Íﬁ¿Î¿ÎZ¿Îù¿Î∫¿Îª¿Ï	¿ÏL¿ÏR¿Ïz¿Ïê¿Ïë¿Ïø¿Ï≈¿Ï›¿Ï„¿Ì-¿ÌR¿ÌS¿Ìû¿ÌÓ¿Ó7¿Ó=¿ÓV¿Óx¿Óy¿Óª¿Ó¡¿Ô¿Ô[¿Ô¢¿ÔÌ¿Ô˙¿ ¿C¿Ç¿∆¿Ò¿Ò¿Ò¿Òd¿Ò}¿Òö¿Ò¨¿Ò¬¿Ò’¿ÒÏ¿Ú¿Ú*¿ÚB¿Ú^¿Úw¿Úç¿Úß¿ÚÕ¿Ú‰¿Ú˜¿Û¿Û)¿ÛA¿Ûs¿Ûß¿Ûæ¿Û—¿Û˘¿Ù¿Ù%¿Ù=¿Ùh¿ÙÑ¿Ù†¿Ù∏¿ÙÃ¿Ù‰¿ı ¿ı¿ıG¿ı\¿ıu¿ıí¿ı§¿ı∫¿ı—¿ıË¿ˆ¿ˆ&¿ˆK¿ˆl¿ˆå¿ˆ•¿ˆ∏¿ˆŸ¿ˆ˜¿˜¿˜¿˜;¿˜Z¿˜à¿˜™¿˜ÿ¿¯	¿¯R¿¯É¿¯∑¿¯ı¿˘ ¿˘N¿˘î¿˘À¿˘Ì¿˙¿˙L¿˙Ü¿˙ÿ¿˚-¿˚a¿˚â¿˚∆¿˚˜¿¸¿¸M¿¸Å¿¸¡¿˝¿˝D¿˝i¿˝ö¿˝Œ¿˛¿˛`¿˛à¿˛º¿˛Û¿ˇ¿ˇF¿ˇw¿ˇ®¿ˇ‹¿ ¿ _¿ ú¿ ÷¿ ˚¿#¿o¿∏¿Ï¿Û¿˜¿¯¿D¿à¿é¿Ÿ¿	¿G¿\¿é¿ÿ¿¿L¿{¿≠¿Ë¿;¿ë¿∫¿¯¿¿G¿|¿Ω¿Ú¿3¿k¿ë¿¿¿Ú¿$¿Y¿î¿ﬁ¿	¿	W¿	}¿	«¿	¸¿
¿
¿
¿
¿
7¿
Y¿
l¿
r¿
û¿
≤¿
∏¿
‹¿
˙¿"¿B¿j¿î¿Œ¿¯¿$¿V¿|¿§¿‹¿
¿*¿R¿|¿¨¿Ï¿.¿R¿Ñ¿∞¿⁄¿¿0¿Z¿Ü¿∆¿¿$¿F¿p¿ú¿‹¿ ¿,¿Z¿|¿§¿Œ¿¯¿$¿T¿é¿¿¿¿¿6¿r¿¨¿Ÿ¿›¿ﬁ¿Í¿ˇ¿+¿7¿H¿U¿f¿Ä¿í¿§¿∑¿Õ¿›¿Ó¿¿¿(¿9¿K¿`¿}¿õ¿™¿¿¿”¿·¿Ú¿¿¿(¿?¿M¿_¿r¿è¿°¿∏¿∆¿ÿ¿Î¿¿¿*¿>¿Q¿f¿Ä¿ñ¿´¿π¿»¿„¿˝¿¿¿:¿>¿?¿K¿a¿ê¿∑¿Ì¿¿O¿¢¿›¿$¿Y¿ö¿∆¿˛¿9¿}¿◊¿4¿e¿™¿ﬁ¿¿_¿å¿≈¿¿[¿î¿‹¿	¿B¿~¿ÿ¿ ¿ D¿ É¿ Æ¿ ‰¿!¿!V¿!í¿!‘¿"%¿"j¿"¨¿"Ÿ¿"ˇ¿#S¿#§¿#‡¿#Á¿$ ¿$$¿$&¿$'¿$`¿$d¿$¥¿$˚¿%G¿%W¿%[¿%•¿%‹¿%Á¿&¿&X¿&ã¿&ë¿&„¿'¿''¿'<¿'Y¿'o¿'à¿'ú¿'±¿'…¿(¿(F¿(`¿(y¿(ó¿(´¿(¡¿(€¿(Ò¿)¿)"¿);¿)O¿)o¿)á¿)ú¿)±¿)«¿)ﬂ¿)¸¿*¿*-¿*>¿*c¿*y¿*¿*Ä¿*ª¿*⁄¿*€¿+¿+E¿+F¿+¿+Ö¿+Œ¿,¿,A¿,a¿,b¿,±¿,∑¿-¿-F¿-L¿-é¿-≈¿-À¿-€¿-·¿.3¿.P¿.Q¿.å¿.í¿.Ÿ¿/ ¿/L¿/R¿/è¿/ﬂ¿0/¿0=¿0C¿0ê¿0ª¿0Ÿ¿0⁄¿1¿14¿15¿1É¿1â¿1⁄¿2¿2¿2_¿2ï¿2õ¿2´¿2±¿3¿3!¿3"¿3h¿3n¿3û¿3”¿3‘¿4¿4!¿4S¿4ä¿4ã¿4Ÿ¿4ı¿4˚¿5¿5*¿5+¿5c¿5i¿5©¿5Ô¿64¿6t¿6π¿6ﬁ¿6‰¿71¿7s¿7å¿7∏¿7π¿7˚¿8¿8G¿8à¿8¢¿8£¿8⁄¿8‡¿9#¿9e¿9ë¿9ó¿9Õ¿9Á¿9Ë¿:%¿:+¿:t¿:ª¿:Á¿:Ì¿;¿;9¿;:¿;w¿;}¿;∆¿<¿<4¿<:¿<p¿<ê¿<ë¿<Œ¿<‘¿=¿=_¿=ã¿=ë¿=Ω¿=›¿=ﬁ¿>¿>!¿>j¿>¨¿>ÿ¿>ﬁ¿?¿?4¿?5¿?s¿?y¿?√¿@
¿@6¿@<¿@j¿@ã¿@å¿@—¿@◊¿A¿A.¿A4¿Az¿Aª¿AÂ¿AÎ¿B¿B)¿B*¿Bx¿B~¿Bæ¿Bƒ¿C
¿CK¿Cu¿Cè¿Cê¿C⁄¿C˝¿C˛¿DJ¿Du¿Dv¿D∆¿D¯¿D˛¿EA¿EG¿Eç¿EŒ¿E¯¿F¿F¿F\¿Fó¿Fù¿F‡¿FÊ¿G,¿Gm¿Gó¿Gù¿GÌ¿H¿H	¿H[¿Hv¿H|¿Hå¿Hí¿HÂ¿H˝¿IY¿I¨¿J¿JA¿Jâ¿JÃ¿K¿KR¿KÑ¿K’¿L¿LX¿Lä¿L’¿M¿M)¿M*¿My¿Më¿Mó¿Mß¿M≠¿N ¿N¿Nt¿N«¿O¿O\¿O§¿OÁ¿P!¿Pl¿P¢¿PÛ¿Q)¿Qv¿Q®¿QÛ¿R%¿RI¿RJ¿Rï¿R≠¿R≥¿R√¿R…¿S¿S4¿Sê¿S„¿T8¿Tx¿T¿¿U¿U=¿Uà¿Uæ¿V
¿V<¿Vâ¿Vª¿W¿W8¿Wa¿Wb¿WØ¿W«¿WÕ¿W›¿W„¿X;¿Xó¿XÍ¿Y?¿Y¿Y«¿Z
¿ZD¿Zè¿Z≈¿[¿[C¿[î¿[ ¿\¿\G¿\l¿\m¿\π¿\—¿\◊¿\Á¿\Ì¿]E¿]°¿]Ù¿^I¿^â¿^—¿_¿_N¿_ô¿_œ¿`¿`M¿`û¿`‘¿a!¿aS¿aw¿ax¿a¡¿a«¿b¿bV¿b™¿b∞¿b¸¿c@¿cÄ¿c≈¿cÍ¿c¿d=¿dZ¿d`¿d¨¿d˛¿eI¿eå¿e ¿f¿f
¿fQ¿fú¿f¢¿f≤¿f∏¿fÚ¿g8¿gl¿g¥¿g˜¿h¿h¿h`¿h∞¿h˘¿i¿i¿i]¿ic¿i±¿i˝¿jD¿jè¿jú¿j¢¿jÁ¿k¿k¿k(¿k.¿k|¿kñ¿kª¿kº¿l¿l¿l@¿l[¿l~¿lö¿l≥¿lÕ¿lË¿m ¿m2¿mf¿my¿m°¿m∏¿mŒ¿mÍ¿n¿n"¿n>¿n[¿nm¿nÉ¿n™¿n…¿n‡¿n˜¿o¿o5¿oZ¿o{¿oõ¿o¥¿o“¿oÛ¿o˙¿p¿pL¿pï¿p…¿q¿q4¿qe¿qü¿qÒ¿rF¿rn¿r´¿r«¿r˚¿s/¿so¿s£¿s„¿t¿t?¿tm¿tø¿t˘¿u*¿u[¿uè¿u…¿v¿vO¿vâ¿vÆ¿v˜¿w+¿w2¿w6¿w7¿wÜ¿w÷¿w˙¿x ¿xX¿x±¿x∑¿y¿y[¿y¶¿yŒ¿y·¿yÁ¿y¸¿z=¿zñ¿z⁄¿{'¿{e¿{¶¿{¿|=¿|{¿|ø¿}¿}S¿}£¿}Í¿~(¿~ä¿~‘¿¿V¿ö¿‰¿Ä=¿Ää¿Ä‘¿Å	¿ÅM¿ÅT¿ÅX¿ÅY¿Åe¿Åà¿Åò¿Å∞¿Å¡¿Å’¿Å‰¿ÅÙ¿Ç¿Ç"¿Ç>¿ÇK¿Ç_¿Çp¿Ç¿Çê¿Ç•¿Ç∂¿ÇÀ¿Ç›¿ÇÈ¿Ç˙¿É¿É(¿É=¿ÉO¿Éa¿Ét¿Éâ¿É£¿Éπ¿ÉŒ¿É‹¿Éˆ¿Ñ	¿Ñ¿Ñ¿Ñ¿Ñ"¿ÑE¿Ñg¿Ñz¿ÑÄ¿Ñ¨¿Ñ¿¿Ñ∆¿ÑÔ¿Ö¿ÖS¿Ö¿Ö±¿ÖŸ¿Ü¿Ü3¿ÜW¿Üâ¿Üµ¿Ü›¿á	¿á=¿ái¿áù¿áÀ¿à¿àM¿ào¿àó¿à◊¿â¿â1¿â[¿âá¿â∑¿âÒ¿ä#¿äS¿äu¿äØ¿ä€¿ã¿ã¿ã¿ã¿ãd¿ãè¿ã’¿åJ¿å◊¿çO¿çΩ¿é/¿é§¿è¿è±¿êW¿êæ¿ëH¿ëª¿í)¿í©¿ì!¿ì°¿î¿îî¿î¯¿ïY¿ï¿ño¿ñ”¿ó7¿ó±¿ò6¿ò≈¿ôH¿ô»¿ö3¿öª¿õ8¿õ<¿õ>¿õ?¿õ~¿õÆ¿õø¿õ¿¿õﬁ¿õﬂ¿õÎ¿úJ¿ú}¿úΩ¿ú√¿ú˝¿ù¿ù¿ù¿ùp¿ù£¿ù„¿ùÈ¿û#¿û)¿û*¿û6¿ûû¿û—¿ü¿ü¿üG¿üã¿üë¿ü√¿†	¿†¿†I¿†O¿†P¿†\¿†Ω¿†Ô¿°"¿°s¿°y¿°z¿° ¿°–¿°—¿°›¿¢=¿¢o¿¢¢¿¢Û¿¢˘¿£Q¿£W¿£X¿£d¿£ª¿£Ó¿§¿§+¿§Y¿§w¿§°¿§¿¿§Î¿§Û¿§˘¿•¿•3¿•_¿•õ¿•ÿ¿•ﬁ¿•‰¿•Â¿•Ò¿¶H¿¶¶¿¶‘¿¶⁄¿ß¿ß@¿ßF¿ßr¿ßé¿ß≠¿ß ¿ßÈ¿ßÔ¿ßı¿ßˆ¿®¿®_¿®Ω¿®Î¿®Ò¿©#¿©W¿©]¿©â¿©•¿©ƒ¿©·¿™ ¿™¿™¿™¿™¿™v¿™‘¿´¿´¿´:¿´n¿´t¿´†¿´º¿´€¿´¯¿¨¿¨¿¨#¿¨%¿¨&¿¨[¿¨\¿¨ü¿¨„¿≠¿≠>¿≠?¿≠~¿≠©¿≠∏¿≠π¿≠◊¿≠ÿ¿Æ¿Æ[¿Æ\¿Æh¿Æ«¿Æ˙¿Ø:¿Ø@¿Øz¿ØÄ¿ØÅ¿Øç¿Ø‰¿∞¿∞I¿∞O¿∞r¿∞x¿∞y¿∞Ö¿∞Ú¿±%¿±j¿±p¿±†¿±‘¿≤¿≤¿≤L¿≤â¿≤ë¿≤¿¿≤∆¿≤¯¿≥+¿≥1¿≥c¿≥†¿≥¶¿≥ﬁ¿≥Ê¿≥Á¿≥Û¿¥X¿¥ã¿¥–¿¥÷¿µ¿µ:¿µv¿µ~¿µ≤¿µÔ¿µ˜¿∂&¿∂,¿∂^¿∂ë¿∂ó¿∂…¿∑¿∑¿∑;¿∑A¿∑B¿∑N¿∑Ç¿∑É¿∑è¿∑Ï¿∏¿∏¿∏¿∏$¿∏Å¿∏¥¿∏Ê¿∏Ï¿π¿π8¿π>¿πc¿πi¿πj¿πv¿π÷¿∫!¿∫T¿∫°¿∫ß¿∫◊¿ª¿ªO¿ªW¿ªã¿ªƒ¿ªÃ¿º¿º	¿º;¿º}¿ºÉ¿ºµ¿ºÓ¿ºÙ¿Ω4¿Ω:¿Ω;¿ΩG¿ΩØ¿Ω˙¿æ-¿æz¿æÄ¿æ∞¿æ‰¿ø(¿ø0¿ød¿øù¿ø•¿ø‹¿ø‚¿¿¿¿V¿¿\¿¿é¿¿«¿¿Õ¿¡¿¡¿¡¿¡ ¿¡Å¿¡Ã¿¡ˇ¿¬L¿¬R¿¬í¿¬ò¿¬ô¿¬•¿√¿√P¿√Ö¿√ã¿√ç¿√é¿√¡    _kTransitionDuration_kTransitionCurve_kFinalLabelScale_InputBorderGap_InputBorderTween_InputBorderPainter_BorderContainer_BorderContainerState_Shaker_HelperError_HelperErrorStateFloatingLabelBehaviorFloatingLabelAlignment_DecorationSlot_Decoration_RenderDecorationLayout_RenderDecoration
_Decorator
_AffixTextInputDecorator_InputDecoratorStateInputDecorationInputDecorationTheme_InputDecoratorDefaultsM2_InputDecoratorDefaultsM3 ‘